/*! @license DOMPurify 3.2.6 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.6/LICENSE */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).DOMPurify=t()}(this,(function(){"use strict";const{entries:e,setPrototypeOf:t,isFrozen:n,getPrototypeOf:o,getOwnPropertyDescriptor:r}=Object;let{freeze:i,seal:a,create:l}=Object,{apply:c,construct:s}="undefined"!=typeof Reflect&&Reflect;i||(i=function(e){return e}),a||(a=function(e){return e}),c||(c=function(e,t,n){return e.apply(t,n)}),s||(s=function(e,t){return new e(...t)});const u=R(Array.prototype.forEach),m=R(Array.prototype.lastIndexOf),p=R(Array.prototype.pop),f=R(Array.prototype.push),d=R(Array.prototype.splice),h=R(String.prototype.toLowerCase),g=R(String.prototype.toString),T=R(String.prototype.match),y=R(String.prototype.replace),E=R(String.prototype.indexOf),A=R(String.prototype.trim),_=R(Object.prototype.hasOwnProperty),S=R(RegExp.prototype.test),b=(N=TypeError,function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return s(N,t)});var N;function R(e){return function(t){t instanceof RegExp&&(t.lastIndex=0);for(var n=arguments.length,o=new Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];return c(e,t,o)}}function w(e,o){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:h;t&&t(e,null);let i=o.length;for(;i--;){let t=o[i];if("string"==typeof t){const e=r(t);e!==t&&(n(o)||(o[i]=e),t=e)}e[t]=!0}return e}function O(e){for(let t=0;t<e.length;t++){_(e,t)||(e[t]=null)}return e}function D(t){const n=l(null);for(const[o,r]of e(t)){_(t,o)&&(Array.isArray(r)?n[o]=O(r):r&&"object"==typeof r&&r.constructor===Object?n[o]=D(r):n[o]=r)}return n}function v(e,t){for(;null!==e;){const n=r(e,t);if(n){if(n.get)return R(n.get);if("function"==typeof n.value)return R(n.value)}e=o(e)}return function(){return null}}const L=i(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dialog","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),C=i(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","view","vkern"]),x=i(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),I=i(["animate","color-profile","cursor","discard","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignobject","hatch","hatchpath","mesh","meshgradient","meshpatch","meshrow","missing-glyph","script","set","solidcolor","unknown","use"]),M=i(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover","mprescripts"]),k=i(["maction","maligngroup","malignmark","mlongdiv","mscarries","mscarry","msgroup","mstack","msline","msrow","semantics","annotation","annotation-xml","mprescripts","none"]),U=i(["#text"]),z=i(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","nonce","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","popover","popovertarget","popovertargetaction","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","wrap","xmlns","slot"]),P=i(["accent-height","accumulate","additive","alignment-baseline","amplitude","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","exponent","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","intercept","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","slope","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","tablevalues","targetx","targety","transform","transform-origin","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),H=i(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),F=i(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),B=a(/\{\{[\w\W]*|[\w\W]*\}\}/gm),W=a(/<%[\w\W]*|[\w\W]*%>/gm),G=a(/\$\{[\w\W]*/gm),Y=a(/^data-[\-\w.\u00B7-\uFFFF]+$/),j=a(/^aria-[\-\w]+$/),X=a(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp|matrix):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),q=a(/^(?:\w+script|data):/i),$=a(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),K=a(/^html$/i),V=a(/^[a-z][.\w]*(-[.\w]+)+$/i);var Z=Object.freeze({__proto__:null,ARIA_ATTR:j,ATTR_WHITESPACE:$,CUSTOM_ELEMENT:V,DATA_ATTR:Y,DOCTYPE_NAME:K,ERB_EXPR:W,IS_ALLOWED_URI:X,IS_SCRIPT_OR_DATA:q,MUSTACHE_EXPR:B,TMPLIT_EXPR:G});const J=1,Q=3,ee=7,te=8,ne=9,oe=function(){return"undefined"==typeof window?null:window};var re=function t(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:oe();const o=e=>t(e);if(o.version="3.2.6",o.removed=[],!n||!n.document||n.document.nodeType!==ne||!n.Element)return o.isSupported=!1,o;let{document:r}=n;const a=r,c=a.currentScript,{DocumentFragment:s,HTMLTemplateElement:N,Node:R,Element:O,NodeFilter:B,NamedNodeMap:W=n.NamedNodeMap||n.MozNamedAttrMap,HTMLFormElement:G,DOMParser:Y,trustedTypes:j}=n,q=O.prototype,$=v(q,"cloneNode"),V=v(q,"remove"),re=v(q,"nextSibling"),ie=v(q,"childNodes"),ae=v(q,"parentNode");if("function"==typeof N){const e=r.createElement("template");e.content&&e.content.ownerDocument&&(r=e.content.ownerDocument)}let le,ce="";const{implementation:se,createNodeIterator:ue,createDocumentFragment:me,getElementsByTagName:pe}=r,{importNode:fe}=a;let de={afterSanitizeAttributes:[],afterSanitizeElements:[],afterSanitizeShadowDOM:[],beforeSanitizeAttributes:[],beforeSanitizeElements:[],beforeSanitizeShadowDOM:[],uponSanitizeAttribute:[],uponSanitizeElement:[],uponSanitizeShadowNode:[]};o.isSupported="function"==typeof e&&"function"==typeof ae&&se&&void 0!==se.createHTMLDocument;const{MUSTACHE_EXPR:he,ERB_EXPR:ge,TMPLIT_EXPR:Te,DATA_ATTR:ye,ARIA_ATTR:Ee,IS_SCRIPT_OR_DATA:Ae,ATTR_WHITESPACE:_e,CUSTOM_ELEMENT:Se}=Z;let{IS_ALLOWED_URI:be}=Z,Ne=null;const Re=w({},[...L,...C,...x,...M,...U]);let we=null;const Oe=w({},[...z,...P,...H,...F]);let De=Object.seal(l(null,{tagNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},attributeNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},allowCustomizedBuiltInElements:{writable:!0,configurable:!1,enumerable:!0,value:!1}})),ve=null,Le=null,Ce=!0,xe=!0,Ie=!1,Me=!0,ke=!1,Ue=!0,ze=!1,Pe=!1,He=!1,Fe=!1,Be=!1,We=!1,Ge=!0,Ye=!1,je=!0,Xe=!1,qe={},$e=null;const Ke=w({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","noscript","plaintext","script","style","svg","template","thead","title","video","xmp"]);let Ve=null;const Ze=w({},["audio","video","img","source","image","track"]);let Je=null;const Qe=w({},["alt","class","for","id","label","name","pattern","placeholder","role","summary","title","value","style","xmlns"]),et="http://www.w3.org/1998/Math/MathML",tt="http://www.w3.org/2000/svg",nt="http://www.w3.org/1999/xhtml";let ot=nt,rt=!1,it=null;const at=w({},[et,tt,nt],g);let lt=w({},["mi","mo","mn","ms","mtext"]),ct=w({},["annotation-xml"]);const st=w({},["title","style","font","a","script"]);let ut=null;const mt=["application/xhtml+xml","text/html"];let pt=null,ft=null;const dt=r.createElement("form"),ht=function(e){return e instanceof RegExp||e instanceof Function},gt=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!ft||ft!==e){if(e&&"object"==typeof e||(e={}),e=D(e),ut=-1===mt.indexOf(e.PARSER_MEDIA_TYPE)?"text/html":e.PARSER_MEDIA_TYPE,pt="application/xhtml+xml"===ut?g:h,Ne=_(e,"ALLOWED_TAGS")?w({},e.ALLOWED_TAGS,pt):Re,we=_(e,"ALLOWED_ATTR")?w({},e.ALLOWED_ATTR,pt):Oe,it=_(e,"ALLOWED_NAMESPACES")?w({},e.ALLOWED_NAMESPACES,g):at,Je=_(e,"ADD_URI_SAFE_ATTR")?w(D(Qe),e.ADD_URI_SAFE_ATTR,pt):Qe,Ve=_(e,"ADD_DATA_URI_TAGS")?w(D(Ze),e.ADD_DATA_URI_TAGS,pt):Ze,$e=_(e,"FORBID_CONTENTS")?w({},e.FORBID_CONTENTS,pt):Ke,ve=_(e,"FORBID_TAGS")?w({},e.FORBID_TAGS,pt):D({}),Le=_(e,"FORBID_ATTR")?w({},e.FORBID_ATTR,pt):D({}),qe=!!_(e,"USE_PROFILES")&&e.USE_PROFILES,Ce=!1!==e.ALLOW_ARIA_ATTR,xe=!1!==e.ALLOW_DATA_ATTR,Ie=e.ALLOW_UNKNOWN_PROTOCOLS||!1,Me=!1!==e.ALLOW_SELF_CLOSE_IN_ATTR,ke=e.SAFE_FOR_TEMPLATES||!1,Ue=!1!==e.SAFE_FOR_XML,ze=e.WHOLE_DOCUMENT||!1,Fe=e.RETURN_DOM||!1,Be=e.RETURN_DOM_FRAGMENT||!1,We=e.RETURN_TRUSTED_TYPE||!1,He=e.FORCE_BODY||!1,Ge=!1!==e.SANITIZE_DOM,Ye=e.SANITIZE_NAMED_PROPS||!1,je=!1!==e.KEEP_CONTENT,Xe=e.IN_PLACE||!1,be=e.ALLOWED_URI_REGEXP||X,ot=e.NAMESPACE||nt,lt=e.MATHML_TEXT_INTEGRATION_POINTS||lt,ct=e.HTML_INTEGRATION_POINTS||ct,De=e.CUSTOM_ELEMENT_HANDLING||{},e.CUSTOM_ELEMENT_HANDLING&&ht(e.CUSTOM_ELEMENT_HANDLING.tagNameCheck)&&(De.tagNameCheck=e.CUSTOM_ELEMENT_HANDLING.tagNameCheck),e.CUSTOM_ELEMENT_HANDLING&&ht(e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)&&(De.attributeNameCheck=e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck),e.CUSTOM_ELEMENT_HANDLING&&"boolean"==typeof e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements&&(De.allowCustomizedBuiltInElements=e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements),ke&&(xe=!1),Be&&(Fe=!0),qe&&(Ne=w({},U),we=[],!0===qe.html&&(w(Ne,L),w(we,z)),!0===qe.svg&&(w(Ne,C),w(we,P),w(we,F)),!0===qe.svgFilters&&(w(Ne,x),w(we,P),w(we,F)),!0===qe.mathMl&&(w(Ne,M),w(we,H),w(we,F))),e.ADD_TAGS&&(Ne===Re&&(Ne=D(Ne)),w(Ne,e.ADD_TAGS,pt)),e.ADD_ATTR&&(we===Oe&&(we=D(we)),w(we,e.ADD_ATTR,pt)),e.ADD_URI_SAFE_ATTR&&w(Je,e.ADD_URI_SAFE_ATTR,pt),e.FORBID_CONTENTS&&($e===Ke&&($e=D($e)),w($e,e.FORBID_CONTENTS,pt)),je&&(Ne["#text"]=!0),ze&&w(Ne,["html","head","body"]),Ne.table&&(w(Ne,["tbody"]),delete ve.tbody),e.TRUSTED_TYPES_POLICY){if("function"!=typeof e.TRUSTED_TYPES_POLICY.createHTML)throw b('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');if("function"!=typeof e.TRUSTED_TYPES_POLICY.createScriptURL)throw b('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');le=e.TRUSTED_TYPES_POLICY,ce=le.createHTML("")}else void 0===le&&(le=function(e,t){if("object"!=typeof e||"function"!=typeof e.createPolicy)return null;let n=null;const o="data-tt-policy-suffix";t&&t.hasAttribute(o)&&(n=t.getAttribute(o));const r="dompurify"+(n?"#"+n:"");try{return e.createPolicy(r,{createHTML:e=>e,createScriptURL:e=>e})}catch(e){return console.warn("TrustedTypes policy "+r+" could not be created."),null}}(j,c)),null!==le&&"string"==typeof ce&&(ce=le.createHTML(""));i&&i(e),ft=e}},Tt=w({},[...C,...x,...I]),yt=w({},[...M,...k]),Et=function(e){f(o.removed,{element:e});try{ae(e).removeChild(e)}catch(t){V(e)}},At=function(e,t){try{f(o.removed,{attribute:t.getAttributeNode(e),from:t})}catch(e){f(o.removed,{attribute:null,from:t})}if(t.removeAttribute(e),"is"===e)if(Fe||Be)try{Et(t)}catch(e){}else try{t.setAttribute(e,"")}catch(e){}},_t=function(e){let t=null,n=null;if(He)e="<remove></remove>"+e;else{const t=T(e,/^[\r\n\t ]+/);n=t&&t[0]}"application/xhtml+xml"===ut&&ot===nt&&(e='<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>'+e+"</body></html>");const o=le?le.createHTML(e):e;if(ot===nt)try{t=(new Y).parseFromString(o,ut)}catch(e){}if(!t||!t.documentElement){t=se.createDocument(ot,"template",null);try{t.documentElement.innerHTML=rt?ce:o}catch(e){}}const i=t.body||t.documentElement;return e&&n&&i.insertBefore(r.createTextNode(n),i.childNodes[0]||null),ot===nt?pe.call(t,ze?"html":"body")[0]:ze?t.documentElement:i},St=function(e){return ue.call(e.ownerDocument||e,e,B.SHOW_ELEMENT|B.SHOW_COMMENT|B.SHOW_TEXT|B.SHOW_PROCESSING_INSTRUCTION|B.SHOW_CDATA_SECTION,null)},bt=function(e){return e instanceof G&&("string"!=typeof e.nodeName||"string"!=typeof e.textContent||"function"!=typeof e.removeChild||!(e.attributes instanceof W)||"function"!=typeof e.removeAttribute||"function"!=typeof e.setAttribute||"string"!=typeof e.namespaceURI||"function"!=typeof e.insertBefore||"function"!=typeof e.hasChildNodes)},Nt=function(e){return"function"==typeof R&&e instanceof R};function Rt(e,t,n){u(e,(e=>{e.call(o,t,n,ft)}))}const wt=function(e){let t=null;if(Rt(de.beforeSanitizeElements,e,null),bt(e))return Et(e),!0;const n=pt(e.nodeName);if(Rt(de.uponSanitizeElement,e,{tagName:n,allowedTags:Ne}),Ue&&e.hasChildNodes()&&!Nt(e.firstElementChild)&&S(/<[/\w!]/g,e.innerHTML)&&S(/<[/\w!]/g,e.textContent))return Et(e),!0;if(e.nodeType===ee)return Et(e),!0;if(Ue&&e.nodeType===te&&S(/<[/\w]/g,e.data))return Et(e),!0;if(!Ne[n]||ve[n]){if(!ve[n]&&Dt(n)){if(De.tagNameCheck instanceof RegExp&&S(De.tagNameCheck,n))return!1;if(De.tagNameCheck instanceof Function&&De.tagNameCheck(n))return!1}if(je&&!$e[n]){const t=ae(e)||e.parentNode,n=ie(e)||e.childNodes;if(n&&t){for(let o=n.length-1;o>=0;--o){const r=$(n[o],!0);r.__removalCount=(e.__removalCount||0)+1,t.insertBefore(r,re(e))}}}return Et(e),!0}return e instanceof O&&!function(e){let t=ae(e);t&&t.tagName||(t={namespaceURI:ot,tagName:"template"});const n=h(e.tagName),o=h(t.tagName);return!!it[e.namespaceURI]&&(e.namespaceURI===tt?t.namespaceURI===nt?"svg"===n:t.namespaceURI===et?"svg"===n&&("annotation-xml"===o||lt[o]):Boolean(Tt[n]):e.namespaceURI===et?t.namespaceURI===nt?"math"===n:t.namespaceURI===tt?"math"===n&&ct[o]:Boolean(yt[n]):e.namespaceURI===nt?!(t.namespaceURI===tt&&!ct[o])&&!(t.namespaceURI===et&&!lt[o])&&!yt[n]&&(st[n]||!Tt[n]):!("application/xhtml+xml"!==ut||!it[e.namespaceURI]))}(e)?(Et(e),!0):"noscript"!==n&&"noembed"!==n&&"noframes"!==n||!S(/<\/no(script|embed|frames)/i,e.innerHTML)?(ke&&e.nodeType===Q&&(t=e.textContent,u([he,ge,Te],(e=>{t=y(t,e," ")})),e.textContent!==t&&(f(o.removed,{element:e.cloneNode()}),e.textContent=t)),Rt(de.afterSanitizeElements,e,null),!1):(Et(e),!0)},Ot=function(e,t,n){if(Ge&&("id"===t||"name"===t)&&(n in r||n in dt))return!1;if(xe&&!Le[t]&&S(ye,t));else if(Ce&&S(Ee,t));else if(!we[t]||Le[t]){if(!(Dt(e)&&(De.tagNameCheck instanceof RegExp&&S(De.tagNameCheck,e)||De.tagNameCheck instanceof Function&&De.tagNameCheck(e))&&(De.attributeNameCheck instanceof RegExp&&S(De.attributeNameCheck,t)||De.attributeNameCheck instanceof Function&&De.attributeNameCheck(t))||"is"===t&&De.allowCustomizedBuiltInElements&&(De.tagNameCheck instanceof RegExp&&S(De.tagNameCheck,n)||De.tagNameCheck instanceof Function&&De.tagNameCheck(n))))return!1}else if(Je[t]);else if(S(be,y(n,_e,"")));else if("src"!==t&&"xlink:href"!==t&&"href"!==t||"script"===e||0!==E(n,"data:")||!Ve[e]){if(Ie&&!S(Ae,y(n,_e,"")));else if(n)return!1}else;return!0},Dt=function(e){return"annotation-xml"!==e&&T(e,Se)},vt=function(e){Rt(de.beforeSanitizeAttributes,e,null);const{attributes:t}=e;if(!t||bt(e))return;const n={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:we,forceKeepAttr:void 0};let r=t.length;for(;r--;){const i=t[r],{name:a,namespaceURI:l,value:c}=i,s=pt(a),m=c;let f="value"===a?m:A(m);if(n.attrName=s,n.attrValue=f,n.keepAttr=!0,n.forceKeepAttr=void 0,Rt(de.uponSanitizeAttribute,e,n),f=n.attrValue,!Ye||"id"!==s&&"name"!==s||(At(a,e),f="user-content-"+f),Ue&&S(/((--!?|])>)|<\/(style|title)/i,f)){At(a,e);continue}if(n.forceKeepAttr)continue;if(!n.keepAttr){At(a,e);continue}if(!Me&&S(/\/>/i,f)){At(a,e);continue}ke&&u([he,ge,Te],(e=>{f=y(f,e," ")}));const d=pt(e.nodeName);if(Ot(d,s,f)){if(le&&"object"==typeof j&&"function"==typeof j.getAttributeType)if(l);else switch(j.getAttributeType(d,s)){case"TrustedHTML":f=le.createHTML(f);break;case"TrustedScriptURL":f=le.createScriptURL(f)}if(f!==m)try{l?e.setAttributeNS(l,a,f):e.setAttribute(a,f),bt(e)?Et(e):p(o.removed)}catch(t){At(a,e)}}else At(a,e)}Rt(de.afterSanitizeAttributes,e,null)},Lt=function e(t){let n=null;const o=St(t);for(Rt(de.beforeSanitizeShadowDOM,t,null);n=o.nextNode();)Rt(de.uponSanitizeShadowNode,n,null),wt(n),vt(n),n.content instanceof s&&e(n.content);Rt(de.afterSanitizeShadowDOM,t,null)};return o.sanitize=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=null,r=null,i=null,l=null;if(rt=!e,rt&&(e="\x3c!--\x3e"),"string"!=typeof e&&!Nt(e)){if("function"!=typeof e.toString)throw b("toString is not a function");if("string"!=typeof(e=e.toString()))throw b("dirty is not a string, aborting")}if(!o.isSupported)return e;if(Pe||gt(t),o.removed=[],"string"==typeof e&&(Xe=!1),Xe){if(e.nodeName){const t=pt(e.nodeName);if(!Ne[t]||ve[t])throw b("root node is forbidden and cannot be sanitized in-place")}}else if(e instanceof R)n=_t("\x3c!----\x3e"),r=n.ownerDocument.importNode(e,!0),r.nodeType===J&&"BODY"===r.nodeName||"HTML"===r.nodeName?n=r:n.appendChild(r);else{if(!Fe&&!ke&&!ze&&-1===e.indexOf("<"))return le&&We?le.createHTML(e):e;if(n=_t(e),!n)return Fe?null:We?ce:""}n&&He&&Et(n.firstChild);const c=St(Xe?e:n);for(;i=c.nextNode();)wt(i),vt(i),i.content instanceof s&&Lt(i.content);if(Xe)return e;if(Fe){if(Be)for(l=me.call(n.ownerDocument);n.firstChild;)l.appendChild(n.firstChild);else l=n;return(we.shadowroot||we.shadowrootmode)&&(l=fe.call(a,l,!0)),l}let m=ze?n.outerHTML:n.innerHTML;return ze&&Ne["!doctype"]&&n.ownerDocument&&n.ownerDocument.doctype&&n.ownerDocument.doctype.name&&S(K,n.ownerDocument.doctype.name)&&(m="<!DOCTYPE "+n.ownerDocument.doctype.name+">\n"+m),ke&&u([he,ge,Te],(e=>{m=y(m,e," ")})),le&&We?le.createHTML(m):m},o.setConfig=function(){gt(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}),Pe=!0},o.clearConfig=function(){ft=null,Pe=!1},o.isValidAttribute=function(e,t,n){ft||gt({});const o=pt(e),r=pt(t);return Ot(o,r,n)},o.addHook=function(e,t){"function"==typeof t&&f(de[e],t)},o.removeHook=function(e,t){if(void 0!==t){const n=m(de[e],t);return-1===n?void 0:d(de[e],n,1)[0]}return p(de[e])},o.removeHooks=function(e){de[e]=[]},o.removeAllHooks=function(){de={afterSanitizeAttributes:[],afterSanitizeElements:[],afterSanitizeShadowDOM:[],beforeSanitizeAttributes:[],beforeSanitizeElements:[],beforeSanitizeShadowDOM:[],uponSanitizeAttribute:[],uponSanitizeElement:[],uponSanitizeShadowNode:[]}},o}();return re}));
//# sourceMappingURL=purify.min.js.map

;
/*
 *  jQuery screen skeleton - scheletrone - v1.0.6
 *  A jQuery plugin to make a skeleton loading of your html elements.
 *
 *  GitHub: https://github.com/enbifa/jquery.skeleton.loader
 *  Copyright (c) 2017 - Vincenzo Bifano
 */


;(function ( $, window, document ) {
'use strict';

    var debugLog = false;
    var IdElement = "";
    var Name = 'scheletrone';
    var ReplaceText;
    var Words = [
        "lorem", "ipsum", "dolor", "sit", "amet,", "consectetur", "adipiscing", "elit", "ut", "aliquam,", "purus", "sit", "amet", "luctus", "venenatis,", "lectus", "magna", "fringilla", "urna,", "porttitor", "rhoncus", "dolor", "purus", "non", "enim", "praesent", "elementum", "facilisis", "leo,", "vel", "fringilla", "est", "ullamcorper", "eget", "nulla", "facilisi", "etiam", "dignissim", "diam", "quis", "enim", "lobortis", "scelerisque", "fermentum", "dui", "faucibus", "in", "ornare", "quam", "viverra", "orci", "sagittis", "eu", "volutpat", "odio", "facilisis", "mauris", "sit", "amet", "massa", "vitae", "tortor", "condimentum", "lacinia", "quis", "vel", "eros", "donec", "ac", "odio", "tempor", "orci", "dapibus", "ultrices", "in", "iaculis", "nunc", "sed", "augue", "lacus,", "viverra", "vitae", "congue", "eu,", "consequat", "ac", "felis", "donec", "et", "odio", "pellentesque", "diam", "volutpat", "commodo", "sed", "egestas", "egestas", "fringilla", "phasellus", "faucibus", "scelerisque", "eleifend", "donec", "pretium", "vulputate", "sapien", "nec", "sagittis", "aliquam", "malesuada", "bibendum", "arcu", "vitae", "elementum",
        "curabitur", "vitae", "nunc", "sed", "velit", "dignissim", "sodales", "ut", "eu", "sem", "integer", "vitae", "justo", "eget", "magna", "fermentum", "iaculis", "eu", "non", "diam", "phasellus", "vestibulum", "lorem", "sed", "risus", "ultricies", "tristique", "nulla", "aliquet", "enim", "tortor,", "at", "auctor", "urna", "nunc", "id", "cursus", "metus", "aliquam", "eleifend", "mi", "in", "nulla", "posuere", "sollicitudin", "aliquam", "ultrices", "sagittis", "orci,", "a", "scelerisque", "purus", "semper", "eget", "duis", "at", "tellus", "at", "urna", "condimentum", "mattis", "pellentesque", "id", "nibh", "tortor,", "id", "aliquet", "lectus", "proin", "nibh", "nisl,", "condimentum", "id", "venenatis", "a,", "condimentum", "vitae", "sapien", "pellentesque", "habitant", "morbi", "tristique", "senectus", "et", "netus", "et", "malesuada", "fames", "ac", "turpis", "egestas", "sed", "tempus,", "urna", "et", "pharetra", "pharetra,", "massa", "massa", "ultricies", "mi,", "quis", "hendrerit", "dolor", "magna", "eget", "est", "lorem", "ipsum", "dolor", "sit", "amet,", "consectetur", "adipiscing", "elit", "pellentesque", "habitant", "morbi", "tristique", "senectus", "et", "netus", "et", "malesuada", "fames", "ac", "turpis", "egestas", "integer", "eget", "aliquet", "nibh", "praesent", "tristique", "magna", "sit", "amet", "purus", "gravida", "quis", "blandit", "turpis", "cursus", "in", "hac", "habitasse", "platea", "dictumst", "quisque", "sagittis,", "purus", "sit", "amet", "volutpat", "consequat,", "mauris", "nunc", "congue", "nisi,", "vitae", "suscipit", "tellus", "mauris", "a", "diam",
        "maecenas", "sed", "enim", "ut", "sem", "viverra", "aliquet", "eget", "sit", "amet", "tellus", "cras", "adipiscing", "enim", "eu", "turpis", "egestas", "pretium", "aenean", "pharetra,", "magna", "ac", "placerat", "vestibulum,", "lectus", "mauris", "ultrices", "eros,", "in", "cursus", "turpis", "massa", "tincidunt", "dui", "ut", "ornare", "lectus", "sit", "amet", "est", "placerat", "in", "egestas", "erat", "imperdiet", "sed", "euismod", "nisi", "porta", "lorem", "mollis", "aliquam", "ut", "porttitor", "leo", "a", "diam", "sollicitudin", "tempor", "id", "eu", "nisl", "nunc", "mi", "ipsum,", "faucibus", "vitae", "aliquet", "nec,", "ullamcorper", "sit", "amet", "risus", "nullam", "eget", "felis", "eget", "nunc", "lobortis", "mattis", "aliquam", "faucibus", "purus", "in", "massa", "tempor", "nec", "feugiat", "nisl", "pretium", "fusce", "id", "velit", "ut", "tortor", "pretium", "viverra", "suspendisse", "potenti", "nullam", "ac", "tortor", "vitae", "purus", "faucibus", "ornare", "suspendisse", "sed", "nisi", "lacus,", "sed", "viverra", "tellus", "in", "hac", "habitasse", "platea", "dictumst", "vestibulum", "rhoncus", "est", "pellentesque", "elit", "ullamcorper", "dignissim", "cras", "tincidunt", "lobortis", "feugiat", "vivamus", "at", "augue", "eget", "arcu", "dictum", "varius", "duis", "at", "consectetur", "lorem",
        "donec", "massa", "sapien,", "faucibus", "et", "molestie", "ac,", "feugiat", "sed", "lectus", "vestibulum", "mattis", "ullamcorper", "velit", "sed", "ullamcorper", "morbi", "tincidunt", "ornare", "massa,", "eget", "egestas", "purus", "viverra", "accumsan", "in", "nisl", "nisi,", "scelerisque", "eu", "ultrices", "vitae,", "auctor", "eu", "augue", "ut", "lectus", "arcu,", "bibendum", "at", "varius", "vel,", "pharetra", "vel", "turpis", "nunc", "eget", "lorem", "dolor,", "sed", "viverra", "ipsum", "nunc", "aliquet", "bibendum", "enim,", "facilisis", "gravida", "neque", "convallis", "a", "cras", "semper", "auctor", "neque,", "vitae", "tempus", "quam", "pellentesque", "nec", "nam", "aliquam", "sem", "et", "tortor", "consequat", "id", "porta", "nibh", "venenatis", "cras", "sed", "felis", "eget", "velit", "aliquet", "sagittis", "id", "consectetur", "purus", "ut", "faucibus", "pulvinar", "elementum", "integer", "enim", "neque,", "volutpat", "ac", "tincidunt", "vitae,", "semper", "quis", "lectus", "nulla", "at", "volutpat", "diam", "ut", "venenatis", "tellus", "in", "metus", "vulputate", "eu", "scelerisque", "felis", "imperdiet", "proin", "fermentum", "leo", "vel", "orci", "porta", "non", "pulvinar", "neque", "laoreet", "suspendisse", "interdum", "consectetur", "libero,", "id", "faucibus", "nisl", "tincidunt", "eget", "nullam", "non", "nisi", "est,", "sit", "amet", "facilisis", "magna",
        "etiam", "tempor,", "orci", "eu", "lobortis", "elementum,", "nibh", "tellus", "molestie", "nunc,", "non", "blandit", "massa", "enim", "nec", "dui", "nunc", "mattis", "enim", "ut", "tellus", "elementum", "sagittis", "vitae", "et", "leo", "duis", "ut", "diam", "quam", "nulla", "porttitor", "massa", "id", "neque", "aliquam", "vestibulum", "morbi", "blandit", "cursus", "risus,", "at", "ultrices", "mi", "tempus", "imperdiet", "nulla", "malesuada", "pellentesque", "elit", "eget", "gravida", "cum", "sociis", "natoque", "penatibus", "et", "magnis", "dis", "parturient", "montes,", "nascetur", "ridiculus", "mus", "mauris", "vitae", "ultricies", "leo", "integer", "malesuada", "nunc", "vel", "risus", "commodo", "viverra", "maecenas", "accumsan,", "lacus", "vel", "facilisis", "volutpat,", "est", "velit", "egestas", "dui,", "id", "ornare", "arcu", "odio", "ut", "sem", "nulla", "pharetra", "diam", "sit", "amet", "nisl", "suscipit", "adipiscing", "bibendum", "est", "ultricies", "integer", "quis", "auctor", "elit",
        "sed", "vulputate", "mi", "sit", "amet", "mauris", "commodo", "quis", "imperdiet", "massa", "tincidunt", "nunc", "pulvinar", "sapien", "et", "ligula", "ullamcorper", "malesuada", "proin", "libero", "nunc,", "consequat", "interdum", "varius", "sit", "amet,", "mattis", "vulputate", "enim", "nulla", "aliquet", "porttitor", "lacus,", "luctus", "accumsan", "tortor", "posuere", "ac", "ut", "consequat", "semper", "viverra", "nam", "libero", "justo,", "laoreet", "sit", "amet", "cursus", "sit", "amet,", "dictum", "sit", "amet", "justo", "donec", "enim", "diam,", "vulputate", "ut", "pharetra", "sit", "amet,", "aliquam", "id", "diam", "maecenas", "ultricies", "mi", "eget", "mauris", "pharetra", "et", "ultrices", "neque", "ornare", "aenean", "euismod", "elementum", "nisi,", "quis", "eleifend", "quam", "adipiscing", "vitae", "proin", "sagittis,", "nisl", "rhoncus", "mattis", "rhoncus,", "urna", "neque", "viverra", "justo,", "nec", "ultrices", "dui", "sapien", "eget", "mi", "proin", "sed", "libero", "enim,", "sed", "faucibus", "turpis", "in", "eu", "mi", "bibendum", "neque", "egestas", "congue", "quisque", "egestas", "diam", "in", "arcu", "cursus", "euismod", "quis", "viverra", "nibh", "cras", "pulvinar", "mattis", "nunc,", "sed", "blandit", "libero", "volutpat", "sed", "cras", "ornare", "arcu", "dui", "vivamus", "arcu", "felis,", "bibendum", "ut", "tristique", "et,", "egestas", "quis", "ipsum", "suspendisse", "ultrices", "gravida", "dictum",
        "fusce", "ut", "placerat", "orci", "nulla", "pellentesque", "dignissim", "enim,", "sit", "amet", "venenatis", "urna", "cursus", "eget", "nunc", "scelerisque", "viverra", "mauris,", "in", "aliquam", "sem", "fringilla", "ut", "morbi", "tincidunt", "augue", "interdum", "velit", "euismod", "in", "pellentesque", "massa", "placerat", "duis", "ultricies", "lacus", "sed", "turpis", "tincidunt", "id", "aliquet", "risus", "feugiat", "in", "ante", "metus,", "dictum", "at", "tempor", "commodo,", "ullamcorper", "a", "lacus", "vestibulum", "sed", "arcu", "non", "odio", "euismod", "lacinia", "at", "quis", "risus", "sed", "vulputate", "odio", "ut", "enim", "blandit", "volutpat", "maecenas", "volutpat", "blandit", "aliquam", "etiam", "erat", "velit,", "scelerisque", "in", "dictum", "non,", "consectetur", "a", "erat", "nam", "at", "lectus", "urna", "duis", "convallis", "convallis", "tellus,", "id", "interdum", "velit", "laoreet", "id", "donec", "ultrices", "tincidunt", "arcu,", "non", "sodales", "neque", "sodales", "ut", "etiam", "sit", "amet", "nisl", "purus,", "in", "mollis", "nunc",
        "sed", "id", "semper", "risus", "in", "hendrerit", "gravida", "rutrum", "quisque", "non", "tellus", "orci,", "ac", "auctor", "augue", "mauris", "augue", "neque,", "gravida", "in", "fermentum", "et,", "sollicitudin", "ac", "orci", "phasellus", "egestas", "tellus", "rutrum", "tellus", "pellentesque", "eu", "tincidunt", "tortor", "aliquam", "nulla", "facilisi", "cras", "fermentum,", "odio", "eu", "feugiat", "pretium,", "nibh", "ipsum", "consequat", "nisl,", "vel", "pretium", "lectus", "quam", "id", "leo", "in", "vitae", "turpis", "massa", "sed", "elementum", "tempus", "egestas", "sed", "sed", "risus", "pretium", "quam", "vulputate", "dignissim", "suspendisse", "in", "est", "ante", "in", "nibh", "mauris,", "cursus", "mattis", "molestie", "a,", "iaculis", "at", "erat",
        "pellentesque", "adipiscing", "commodo", "elit,", "at", "imperdiet", "dui", "accumsan", "sit", "amet", "nulla", "facilisi", "morbi", "tempus", "iaculis", "urna,", "id", "volutpat", "lacus", "laoreet", "non", "curabitur", "gravida", "arcu", "ac", "tortor", "dignissim", "convallis", "aenean", "et", "tortor", "at", "risus", "viverra", "adipiscing", "at", "in", "tellus", "integer", "feugiat", "scelerisque", "varius", "morbi", "enim", "nunc,", "faucibus", "a", "pellentesque", "sit", "amet,", "porttitor", "eget", "dolor", "morbi", "non", "arcu", "risus,", "quis", "varius", "quam", "quisque", "id", "diam", "vel", "quam", "elementum", "pulvinar", "etiam", "non", "quam", "lacus", "suspendisse", "faucibus", "interdum", "posuere", "lorem", "ipsum", "dolor", "sit", "amet,", "consectetur", "adipiscing", "elit", "duis", "tristique", "sollicitudin", "nibh", "sit", "amet", "commodo", "nulla", "facilisi",
        "nullam", "vehicula", "ipsum", "a", "arcu", "cursus", "vitae", "congue", "mauris", "rhoncus", "aenean", "vel", "elit", "scelerisque", "mauris", "pellentesque", "pulvinar", "pellentesque", "habitant", "morbi", "tristique", "senectus", "et", "netus", "et", "malesuada", "fames", "ac", "turpis", "egestas", "maecenas", "pharetra", "convallis", "posuere", "morbi", "leo", "urna,", "molestie", "at", "elementum", "eu,", "facilisis", "sed", "odio", "morbi", "quis", "commodo", "odio", "aenean", "sed", "adipiscing", "diam", "donec", "adipiscing", "tristique", "risus", "nec", "feugiat", "in", "fermentum", "posuere", "urna", "nec", "tincidunt", "praesent", "semper", "feugiat", "nibh", "sed", "pulvinar", "proin", "gravida", "hendrerit", "lectus", "a", "molestie"
    ];
        
    var  dataPlugin = 'plugin_' + Name,

            // default options, used for instantion, if not explicitly set
            defaults = {
			url         : '',
            ajaxData    : {},
            debug        : {
                log: false,
                latency: 0
            },
            maskText: false,
            skelParentText: false,
            removeIframe: false,
            backgroundImage: true,
            replaceImageWith: '',
            incache : false,
            onComplete     : function() {
                _logger('default onComplete() event');
            }
		};


    /**
     *  jQuery screen skeleton - scheletrone
     *
     *  @alias scheletrone
     *  @constructor
     *
     *  @author   Vincenzo Bifano
     *
     *  @requires jquery.js
     *
     *  @param   {Object}        [options]                 - a set of options, to override the defaults
     *  @param   {Function}      [options.onComplete]      - the event is triggered after plugin is complete
     *
     *  @example 
     // minimal setup
        var instance = $('#element').square();

     // customized setup
        var instance = $('#skeleton').skeleton({
                url   : "index2.html",
                debug		: {
                    latency: 3000
                },
                incache: false,
                onComplete	: function() { _logger('plugin complete!'); }
           });

     */

    var Scheletrone  = function(element, options) {
        
        IdElement = $(element).attr('id');

        // This is the plugin's constructor
        // It is instantiated for each matched DOM element
        // The huge comment block above is JSDoc syntax, for generated documentation
        // The name of the constructor is used ONLY internally
        // As a general best-practise, constructors should be Capitalized

        // store the element element
        this.element = $(element);

        // override default options
        // create a new object, with all default settings, overridden only by the init options
        this.options = $.extend( {}, defaults, options );
        debugLog = this.options.debug.log;

        //element to skeletrize
        this.element    = element;
	    this.$container = $( element );


        //this.init();
        this.init();



    };
    /////////////////////////////////////
    //         Private methods         //
    /////////////////////////////////////
    /**
     *  Make the skeleton of a passed element 
     *
     *  @param   {Object}  objToSkeletrize  the element
     */
    var _makeitSkeleton = function (objToSkeletrize) {

                objToSkeletrize.addClass("pending_el ");

    }
    /**
     *  Make a text log 
     *
     *  @param   {string}  message text to log
     */
    var _logger = function (message) {
             
             if (debugLog)
             {
               console.log(message);
             }
    }

    var _replaceBackgroundImage = function (replaceImageWith,element)
    {
        
        var bgimage_url = $( element ).css('background-image');
        
        // ^ Either "none" or url("...urlhere..")
        bgimage_url = /^url\((['"]?)(.*)\1\)$/.exec(bgimage_url);
        bgimage_url = bgimage_url ? bgimage_url[2] : ""; // If matched, retrieve url, otherwise ""
        
        var bg_url = $( element ).css('background');
      
        // ^ Either "none" or url("...urlhere..")
        bg_url = /^url\((['"]?)(.*)\1\)$/.exec(bg_url);
        bg_url = bg_url ? bg_url[2] : ""; // If matched, retrieve url, otherwise ""
            

        console.log(this);
        if ((bgimage_url != '') || (bg_url != '') ) {
          
            $( element ).replaceWith("<div class='pending_el "+replaceImageWith+"' style='width:"+$( element ).width()+"px;height:"+$( element ).height()+"px;'></div>")
        
        }
    }

    var _getAllStyles = function (elem) {
        if (!elem) return []; // Element does not exist, empty list.
        var win = document.defaultView || window, style, styleNode = [];
        if (win.getComputedStyle) { /* Modern browsers */
            
            style = win.getComputedStyle(elem, '');
            for (var i=0; i<style.length; i++) {
                styleNode.push( style[i] + ':' + style.getPropertyValue(style[i]) );
                //               ^name ^           ^ value ^
            }
        } else if (elem.currentStyle) { /* IE */
            style = elem.currentStyle;
            for (var name in style) {
                styleNode.push( name + ':' + style[name] );
            }
        } else { /* Ancient browser..*/
            style = elem.style;
            for (var i=0; i<style.length; i++) {
                styleNode.push( style[i] + ':' + style[style[i]] );
            }
        }
        return styleNode;
    }



    /**
     *  Delete node without data attribute
     *
     *  @param   {Object}  objToSkeletrize  the element
     *  @return  {Object}
     */

    var _retrieveOnlyToCache = function(data)
    {
        _logger("_retrieveOnlyToCache");
        _logger(data);
        var div = document.createElement('div');
        div.innerHTML = data;
        $( div ).children().each(function( index ) {
             _logger('a');
             _logger($(this).data("scheletrone") );
            if ( $(this).data("scheletrone") ) 
            {

            }
            else
            {
                 $( this ).remove();
            }
         });
        
         console.log(div.innerHTML);
         return div.innerHTML;
    }

    /**
     *  For an integer randomly
     *
     *  @param   {integer}  min  minimum
     *  @param   {integer}  max  maximum
     *  @return  {integer}
     */
    var _randomInt = function (min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    /**
     *  Count number of words in a text
     *
     *  @param   {string}  s  Text
     *  @return  {integer}
     */

    var _countWords =  function(s){
        s = s.replace(/(^\s*)|(\s*$)/gi,"");//exclude  start and end white-space
        s = s.replace(/[ ]{2,}/gi," ");//2 or more space to 1
        s = s.replace(/\n /,"\n"); // exclude newline with a start spacing
        return s.split(' ').length; 
    }


    /**
     *  Create text with Lore Ipsum words
     *
     *  @param   {integer}  count  number of words
     *  @param   {integer}  lenght  maximum lenght of the sentence
     *  @return  {string}
     */
    //text creator method with parameters: how many, what
    var _createText = function(count, length) {
        
          var wordIndex = _randomInt(0, Words.length - count - 1);
          var newWord = Words.slice(wordIndex, wordIndex + count).join(' ').replace(/[\.\,]/g,'');

         while (length - newWord.length > 0){
            newWord = _addWord(newWord  );
        }
        return newWord;
    
          
        
    }

    var _addWord = function(string) {
          
          var wordIndex = _randomInt(0, Words.length - 1);
          return string + " " +  Words[wordIndex];
    }



    ////////////////////////////////////
    //         Public methods         //
    ////////////////////////////////////
    Scheletrone.prototype = {

        /**
         *  Initializes the scheletrone.
         *  This is automatically called when the plugin is called.
         *
         *  @private
         */
        init: function () {
            var _this  = this.element;
            var __this = this;


            _logger(this);
            // iterate all children in element to make a skeleton
            
            if(this.options.removeIframe)
                jQuery('html').find('iframe').remove();


            if (this.options.incache)
            {
                _logger(this.getCache());
                 
                    this.element.innerHTML = this.getCache();
                   
            }

            

            $( _this ).find('*').each(function( index ) {
              
               

                $( this )
                .contents()
                    .filter(function() {
                        
                        return this.nodeType === 3;
                    })
                    .each(function(  ) {
                        
                        if(this.nodeValue.trim() != '')
                        {
                            _logger(this,"-- " + this.nodeValue.trim() + '--');

                            if (__this.options.maskText)
                            {
                                var numberOfWords = _countWords(this.nodeValue.trim());
                                var newText = _createText(numberOfWords,this.nodeValue.trim().length);
                                
                                this.nodeValue = newText;
                            }
                            if (__this.options.skelParentText)
                            {
                               var color = $( this ).parent().css( {"background-color" : "#ccc"} );
                             _logger(this,color);
                            }
                            return this
                        }
                        else
                        {
                            this.remove();
                        }
                            
                    })
                    .wrap( "<div class='nodeType3' ></div>" )
                    .end()
                   
            });

             $( _this ).find('*').each(function( index ) {
                    var skeletizza = true;
                    //search for children
 
                    if (!__this.options.backgroundImage)
                         _replaceBackgroundImage(__this.options.replaceImageWith,this);

                    $( this ).css('color', '#ccc');

                    
                    
                    if($( this ).children().length == 0)
                    {
                                
                                if($( this ).is("BR"))
                                {
                                    skeletizza = false;
                                }

                                if($( this ).is("IMG"))
                                {
                                   
                                    var width = this.width;
                                    var height = this.height;
                                    var tempThis = this;
                                    var replaced = "<div class='pending_el " + __this.options.replaceImageWith + " ' style='width:"+width+"px;height:"+height+"px;)'></div>"
                                    $( this ).replaceWith(replaced);
                          
                                   
                                 
                                    skeletizza = false;
                                }

                                if (skeletizza)
                                {
                                    
                                    _makeitSkeleton($( this ));
                                
                                }
                    }
             });

            
            
     



            if (this.options.url != '')
            {
                _logger('prova');
                this.retrieveData();
            }
            // trigger onComplete callback
            if (this.options.onComplete && typeof(this.options.onComplete) == "function")
                this.options.onComplete();
        },
        retrieveData: function () {
        var obj = this;
        
       
            if (this.options.debug.latency > 0)
            {
              
                setTimeout(function(){
                 
                            $.ajax({
                                url: obj.options.url,
                                dataType: "html",
                                data: obj.options.ajaxData,
                                success: function(data) {
                                    
                                    _logger(obj.options.debug.log,"obj.element " + obj.element);
                                        $( obj.element ).html('').append((data));
                                        if (obj.options.incache)
                                        {
                                            _logger(obj.options.debug.log,'setcache');
                                            var cacheData = _retrieveOnlyToCache(data);
                                            obj.setCache(cacheData);
                                        }
                                }
                            });
                    }, obj.options.debug.latency);
                }
                else{
                    $.ajax({
                                url: obj.options.url,
                                dataType: "html",
                                data: obj.options.ajaxData,
                                success: function(data) {
                                  
                                    _logger(obj.options.debug.log,obj);
                                        obj.element.html('').append((data));
                                }
                            });
                }

        },
        /**
         *  Stop loading on div - pass it on construction
         *
         * @example this.stopLoader();
         */
        stopLoader: function () {
            var obj = this;
            $(obj.element).html('');
            
        },
        /**
         *  Store the asynchronus data in localstorage
         *
         *  @example this.setCache(data);
         */
        setCache : function ( result_data ) {
            // Cache data
           
            if ( window.localStorage ) {
                var url = window.location.pathname;
                var filename = url.substring(url.lastIndexOf('/')+1);


                window.localStorage.setItem( filename + "-" + "div-"+IdElement+"-skeleton:" ,  result_data  );
            }
        },
        /**
         *  Retrieve stored scheletrone in localstorage
         *
         *  @example this.getCache();
         */
        getCache : function() {

            if ( window.localStorage ) {
                var url = window.location.pathname;
                var filename = url.substring(url.lastIndexOf('/')+1);
                return window.localStorage.getItem( filename + "-" + "div-"+IdElement+"-skeleton:" );
            }
            else {
                return false;
            }
        },
        
    };



  
    







   //////////////////////////////////////////////////
    //         Plugin wrapper                       //
    //////////////////////////////////////////////////


    // A plugin wrapper around the constructor, preventing against multiple instantiations
    $.fn[Name] = function ( options ) {
        var instance;

        // If the first parameter is an object (options), or was omitted,
        // call Plugin.init()
        if ( typeof options === 'undefined' || typeof options === 'object' ) {
            return this.each(function () {
                // prevent multiple instantiations
                if ( !$.data(this, dataPlugin )) {
                    $.data(
                        this, 
                        dataPlugin, 
                        new Scheletrone( this, options )
                    );
                }

                instance = $(this).data( dataPlugin );

                if ( typeof instance['init'] === 'function' ) {
                    instance.init();
                }
            });

        // checks that the requested public method exists
        } else if ( typeof options === 'string' ) {
            var methodName = arguments[0],
                args = Array.prototype.slice.call(arguments, 1),
                returnVal;

            this.each(function() {
                var instance = $(this).data( dataPlugin );

                // Check that the element has a plugin instance, and that
                // the requested public method exists.
                if ( $.data(this, dataPlugin) && typeof $.data(this, dataPlugin)[methodName] === 'function' ) {
                    // Call the method of the Plugin instance, and Pass it
                    // the supplied arguments.
                    returnVal = $.data(this, dataPlugin)[methodName].apply(instance, args);
                } else {
                    console.info('Method ' + options + ' does not exist on jQuery.' + Name);
                }
            });

            if ( typeof returnVal !== 'undefined' ){
                // If the method returned a value, return the value
                return returnVal;
            } else {
                // Otherwise, returning 'this' preserves chainability
                return this;
            }
        } else {
            console.info('Method ' + options + ' does not exist on jQuery.' + Name);
        }
    };
})( jQuery, window, document );
;
var formatval = 4;
if (typeof (Dformatval) != "undefined" && Dformatval != null) {
    if (Dformatval > -1)
        formatval = Dformatval;
}
var startdate = "";
var enddate = "";
var _allselected = false;
var searchtext = "";
var xobnidata = null;
var isFolderChanged = false;
var isSendFileOnMail = false;
var isFiltersAndEnabled = isFiltersAndEnabled;

function xobni(_settings) {
    var that = this;
    that.refreshIndex = 0;
    that.viewindex = -1;
    that.folderindex = -1;
    that.folder = {};
    that.page = 0;
    that.loading = false;
    that.apidata = {};
    that.filterdata = {};
    that.dom = {};
    that.data = [];
    that.settings = $.extend({
        id: null,
        guid: uniqueNumber(),
        pagesize: 15,
        headericon: "",
        header: "",
        name: "",
        gridtype: "",
        fields: [],
        extraexportfields: [],
        removeExportFields: [],
        headerTarget: null,
        searchTarget: null,
        hidetitle: false,
        singleselect: false,
        hidenav: false,
        hidepagination: false,
        fixedheight: 'auto',
        griddata: null,
        options: [],
        forcefooter: false,
        defaultsearch: "",
        defaultfilter: "",
        hidedefaultfilter: false,
        settingfilter:false,
        exporttype: null,//to specify the type of export
        //template: "xobni_template",
        //templatefilters: "xobni_filters",
        emptymessage: "",
        searchfilter:"",
        actions: [],
        categorizeFilters: false,
        allhandlers: {
            "folder": function (data) { that.loadFolder(data); },
            "sort": function (data) { that.sort(data); },
            "reload": function (data) {
                var index = that.folderindex;
                //that.folderindex = -1;//this value should not be reset on folder refresh
                that.refreshRecords();
            },
            "page-left": function () { that.page--; that.refreshRecords(); },
            "page-right": function () { that.page++; that.refreshRecords(); },
            "toggle-view": function (data) { if (that.toggleView(data)) that.refreshRecords(); },
            "option": function (data) { if (that.optionClick(data)) that.refresh(); },
            "optionitem": function (optionItemIndex, action, element) { const actionIndex = $(element.currentTarget).parents(".option-item-menu").data("action-item"); that.optionItemClick(actionIndex, optionItemIndex); that.refresh(); },
            "checkall": function () { that.checkToggleAll(); },
            "checkdisabledall": function () { that.checkToggleDisableAll(); },
            "null": function () { },
            "daterange": function (data) { that.daterange(data); },
            "sortactivity": function (data) { that.sortactivity(data); },
            "exportactivity": function (data) {
                var exportData = {}; exportData.data = data; exportData.currentobj = that;
                $("#sendfileovermail").prop("checked", false);
                if (that.settings.gridtype == 'Report' && that.settings.exporttype != "Organization" && that.settings.exporttype != "Deals" && that.settings.exporttype != "WorkFlowUser"
                    && that.settings.exporttype != LinkTypeEnums.Account && that.settings.exporttype != "Database")
                    setExportTitle(that.exportactivity, exportData);
                else
                    that.exportactivity(data);
            },
        },
        beforeLoad: null,
        afterLoad: null,
        create: null,
        extrabutton: null,
        extrabutton2: null,
        search: { text: "search", disabled: false },
        daterange: { text: "Time Filter", disabled: true },
        sortactivity: { text: "sort activity Filter", disabled: true },
        exportactivity: { text: "Export", disabled: true },
        enableexport: true,
        enableexportexcel: false,
        savebutton: true,
        showpophover: false,
        isselectall: false,
        isusergrid: false,
        enabletipbody: false,
        enabletipauto:false,
        sort: {},
        folders: [],
        folderchanged: null,
        beforefolderchange: null,
        viewchanged: null,
        api: null,
        apifilter: null,
        showcheckboxicon: true,
        hidefiltericon:false,
        hideonlyfiltericon:false,
        changeiconclass:false,
        folderlength: 6,
        hidefooter: false,
        shownote:false,
        sortchanged: null,
        defaultfolderindex: 0,
        folderlengthnochange: false,
        beforerefresh: null,
        viewName: "",
        shownodataimage: true,
        hideplaybookloader: false,
        playbookloader: "",
        exportdefaultfields: true,// This will hold the default fields that needs to be exported, if we are not customizing grid.
        additionalsearchcolumns: [],
        fieldData: { "fieldsArray": [], isloaded: false }, // This object holds fields that will be shown in customized grid.
        iscustomizable: false,
        desclink: "",
        moduleid: 0,
    }, _settings);
    that.dom.container = $("#" + _settings.id);
    if (that.settings.fixedheight === "auto") {
        if (that.dom.container.parent().attr('id') === "content")
            that.settings.fixedheight = 'true';
        else
            that.settings.fixedheight = 'false';
    }

    for (var i = 0; i < that.settings.folders.length; i++) {
        that.settings.folders[i] = $.extend({ sort: [], viewindex: -1 }, that.settings.folders[i]);
    }

    for (var prop in that.settings.handlers)
        that.settings.allhandlers[prop] = that.settings.handlers[prop];
    if (that.settings.header.length > 30 && !that.settings.folderlengthnochange)
        that.settings.folderlength = 2;
    if (that.dom.container.parents(".modal-body").length > 0 && that.settings.folderlength > 3)
        that.settings.folderlength = that.settings.folderlength - 1;

    if (that.settings.actions.length > 0 && that.settings.actions[0].length == 0)
        that.settings.actions = [];
    
    that.settings["hidefolders"] = that.settings.views[0].hidefolders;

    tmpl.parse(that.dom.container, "xobni_template_V5", that.settings, function () { that.init(); });
}

xobni.prototype.init = function () {
    var that = this;

    that.dom.navbar = that.dom.container.find(".inbox-nav-bar");
    that.dom.folders = that.dom.container.find(".inbox-folder-list");
    that.dom.folderGroup = that.dom.container.find(".header-folder");
    that.dom.tablewrap = that.dom.container.find(".table-wrap");
    that.dom.actions = that.dom.container.find(".inbox-activity");
    that.dom.options = that.dom.container.find(".inbox-options");
    that.dom.views = that.dom.container.find(".inbox-views");
    that.dom.sideBar = that.dom.container.find(".inbox-side-bar");
    that.dom.refresh = that.dom.container.find(".inbox-side-bar h6 a[data-action='reload']");
    that.dom.quickaccess = that.dom.container.find(".quickaccess");
    that.dom.columnaccess = that.dom.container.find(".dg-dropdown-holder");
    that.dom.filterholder = that.dom.container.find(".selected-filters ul");
    //that.dom.toggleCondition = that.dom.container.find("#togglecondition"); //this doesn't exist during init
    that.dom.searchcontainer = that.dom.container.find(".inbox-search");
    //that.dom.search = that.dom.container.find(".header-search input");
    that.dom.searchbtn = that.dom.container.find(".btn-search");
    //that.dom.closebtn = that.dom.container.find(".btn-close");
    that.dom.datesearchbtn = that.dom.container.find(".btn-datesearch");
    that.dom.daterange = that.dom.container.find(".inbox-daterange");
    that.dom.daterangebtn = that.dom.daterange.find("button");
    that.dom.daterangelist = that.dom.daterange.find("ul");
    that.dom.daterangepicker = that.dom.container.find(".daterangepicker");
    that.dom.daterange1 = that.dom.container.find("#daterange1");
    that.dom.daterange2 = that.dom.container.find("#daterange2");
    that.dom.sort = that.dom.container.find(".inbox-sort");
    that.dom.sortbtn = that.dom.sort.find("button");
    that.dom.sortlist = that.dom.sort.find("ul");
    that.dom.footer = that.dom.container.find(".inbox-footer");
    that.dom.uidatepickerdiv = that.dom.container.find('#ui-datepicker-div');
    that.dom.paging = that.dom.footer.find(".inbox-paging");
    that.dom.pageleft = that.dom.container.find("a[data-action='page-left']");
    that.dom.pageright = that.dom.container.find("a[data-action='page-right']");
    that.dom.paging2 = that.dom.footer.find(".pagination.inbox-pagination-actionbar");
    that.dom.pageshow = that.dom.paging2.find("a[data-action='page-show']");
    that.dom.actionbtns = that.dom.container.find(".inbox-action-btns2");
    that.dom.search = that.dom.actionbtns.find(".header-search input");
    that.dom.inboxactions = that.dom.container.find(".inbox-action-btns");
    that.dom.inboxbody = that.dom.container.find(".inbox-body");
    that.dom.gotopage = that.dom.footer.find(".goto");
    that.dom.pagingtext = that.dom.footer.find(".records-info");
    that.dom.info = that.dom.container.find(".inbox-info");
    that.dom.searchinfotips = that.dom.container.find(".inbox-search-info-tips");
    that.dom.desclink = that.dom.container.find(".desclink");

    if (that.settings.customfilter?.length)
        that.dom.quickaccess = $("#"+ that.settings.customfilter);

    if (typeof (that.settings.views[0].hidefolders) != "undefined" && !that.settings.views[0].hidefolders) {
        var navbarWidth = that.dom.navbar.width();
        var navbarHeaderWidth = that.dom.navbar.find(".page-title").width();
        if (navbarHeaderWidth != 0 && navbarWidth != 0) {
            var headerWidthPercent = Math.ceil((navbarHeaderWidth / navbarWidth) * 100);
            that.dom.navbar.find(".header-folder").css("max-width", 100 - headerWidthPercent + "%");
        }
        else {
            that.dom.navbar.find(".header-folder").css("max-width", "80%");
        }
    }
    //else {
    //    that.dom.navbar.find(".page-title").css("width", "100%");
    //}

    $(that.dom.searchbtn).attr("type", "button");
    searchtext = "";
    if (typeof (Dformatval) != "undefined" && Dformatval != null) {
        if (Dformatval > -1)
            formatval = Dformatval;
    }
    else
        formatval = 4;

    if (that.dom.inboxbody.find(".btn-effect1").length > 0) {
        that.dom.inboxbody.find(".btn-effect1").empty();
        var btnArray = that.dom.inboxbody.find(".btn-effect1").attr("data-text").split("");
        $.each(btnArray, function () { that.dom.inboxbody.find(".btn-effect1").append("<span>" + this + "</span>") });
    }
    if (!that.settings.forcefooter) //if (that.settings.hidepagination) the default is to hide, hidepagination is now redundent
        that.dom.footer.hide();
    that.dom.search.on("keypress", function (e) {
        var evt = (e.charCode) ? e.charCode : ((e.which) ? e.which : e.keyCode);
        if (evt == 13) {
            //var $isSafari = !!navigator.userAgent.match(/Version\/[\d\.]+.*Safari/);
            //if ($isSafari == false) {
                that.page = 0;
                if (that.dom.container.find(".header-search input:visible").val() == "" || that.dom.container.find(".header-search input:visible").val() == undefined)
                    searchtext = that.dom.searchcontainer.find(".header-search input:visible").val();
                else
                    searchtext = that.dom.container.find(".header-search input:visible").val();

                if ((searchtext === undefined || searchtext == "") && that.dom.searchbtn.find("i:visible").hasClass("fa-times")) {
                    that.dom.searchbtn.find("i:visible").removeClass("fa-times").addClass("fa-search");
                }
                else if (searchtext === undefined || searchtext == "") return;
                else {
                    that.dom.searchbtn.find("i:visible").removeClass("fa-search").addClass("fa-times");
                }
                that.refreshRecords();
            //}
            //else {
            //    return false;
            //}
        }
    });
    that.dom.searchbtn.on("click", function (e) {
        if (!that.dom.container.find(".header-search-wrapper .header-search").hasClass("active")) {
            that.dom.container.find(".header-search-wrapper .header-search").addClass("active");
            that.dom.container.find(".header-search-wrapper .header-search input").focus();
        }
        that.page = 0;
        if (that.dom.searchbtn.find("i:visible").hasClass("fa-search")) {
            if (that.dom.container.find(".header-search input:visible").val() == "" || that.dom.container.find(".header-search input:visible").val() == undefined)
                searchtext = that.dom.searchcontainer.find(".header-search input:visible").val();
            else
                searchtext = that.dom.container.find(".header-search input:visible").val();

            if (searchtext === undefined || searchtext == "") return;
            that.dom.searchbtn.find("i:visible").removeClass("fa-search").addClass("fa-times");
        }
        else {
            searchtext = "";
            that.dom.search.val("");
            that.dom.searchbtn.find("i:visible").removeClass("fa-times").addClass("fa-search");
        }
        that.refreshRecords();
    });
    that.dom.daterange1.on("click", function () {
        $('#ui-datepicker-div').css("z-index", "1050");
        $("td[data-handler='selectDay']").on("click", function () {
            var selectedDT = $(this);
            var date = $(selectedDT).find('a').text();
            var month = (parseInt)(($(selectedDT).attr("data-month").toString())) + 1;
            var year = $(selectedDT).attr("data-year");
            var date = month + "/" + date + "/" + year;
            that.dom.daterange1.val(date);
        });
    });
    that.dom.daterange2.on("click", function () {
        $('#ui-datepicker-div').css("z-index", "1050");
        $("td[data-handler='selectDay']").on("click", function () {
            var selectedDT = $(this);
            var date = $(selectedDT).find('a').text();
            var month = (parseInt)(($(selectedDT).attr("data-month").toString())) + 1;
            var year = $(selectedDT).attr("data-year");
            var date = month + "/" + date + "/" + year;
            that.dom.daterange2.val(date);
        });
    });
    that.dom.datesearchbtn.on("click", function () {
        startdate = that.dom.daterangepicker.find("#daterange1").val();
        enddate = that.dom.daterangepicker.find("#daterange2").val();
        if (startdate == "" || startdate == null) { alert("please select start date"); return; };
        if (enddate == "" || enddate == null) { alert("please select end date"); return; };
        if (new Date(startdate) > new Date(enddate)) { alert("start date should be lass than end date"); return; }
        that.refreshRecords();
    });
    that.dom.tablewrap.toggleClass("hide-title", that.settings.hidetitle);
    that.dom.container.toggleClass("hide-title", that.settings.hidetitle);
    //that.dom.container.toggleClass("inbox-fixed-height", that.settings.fixedheight === "true");
    that.dom.container.toggleClass("inbox-attach-page", that.settings.fixedheight !== "true");
   
    
    if (that.settings.searchTarget || that.settings.headerTarget) {
        //if (that.settings.searchTarget === null) that.settings.searchTarget = that.settings.headerTarget.parent();
        var $parent = that.settings.searchTarget == null ? that.settings.headerTarget.parent() : that.settings.searchTarget;
        /*
        
        var type = "div";
        if ($parent.is("ul")) type = "ul";

        var $searchbar = $("<" + type + " />");
        $searchbar.addClass("pull-right");
        $searchbar.addClass("xobni-tab-search");
        $searchbar.attr("data-guid", that.settings.guid);
        $searchbar.append(that.dom.searchcontainer);
        if (that.settings.searchTarget != null) {
            that.settings.searchTarget.empty();
        }
        $searchbar.appendTo($parent);
        */
        //$searchbar.find(".btn").addClass("btn-xs");
        //$parent.closest(".widget-toolbar").hide();
        if (that.settings.folders.length == 0)
            that.dom.navbar.hide();
        //that.trackClick($searchbar);
        //console.debug(that.settings.id + that.settings.guid);
    }

    if (that.settings.headerTarget) {
        var ht = that.settings.headerTarget;
        var $parent = that.settings.searchTarget == null ? that.settings.headerTarget.parent() : that.settings.searchTarget;
        //console.debug($parent);

        if (!ht.data("setup")) {
            ht.find("a[href]").on("click", function () {
                $parent.find("[data-guid]").hide();
                $parent.find("[data-guid=" + that.settings.guid + "]").show();
            });
            ht.data("setup", true);
        }

        if (that.settings.headerTarget.parent().find("li.active").length == 0) {
            $parent.find("[data-guid=" + that.settings.guid + "]").show();
        }
        else if (ht.hasClass("active")) {
            $parent.find("[data-guid]").hide();
            $parent.find("[data-guid=" + that.settings.guid + "]").show();
        }
        else if (!ht.hasClass("active")) {
            $parent.find("[data-guid=" + that.settings.guid + "]").hide();
        }
        if (that.settings.searchTarget != null && that.settings.search.disabled != true)
            that.settings.searchTarget.find(".header-search").css("display", "block");
    }
    
    if (that.settings.viewName != null && that.settings.viewName != "") {
        var gridIndex = that.settings.views.findIndex(function (item, i) { return item.key == that.settings.viewName });
        that.toggleView(gridIndex);
    }
    else
        that.toggleView(0);
    that.trackClick(that.dom.container);
    that.loadFolder(that.settings.defaultfolderindex);

    //that.tableHeightSize();
};

xobni.prototype.clearSearch = function (reload) {
    var that = this;
    if (reload === undefined) reload = true;
    searchtext = "";
    if (that.settings.defaultsearch !== undefined && that.settings.defaultsearch !== "") {
        searchtext = that.settings.defaultsearch;
        that.dom.search.val(searchtext);
        that.dom.searchbtn.find("i:visible").removeClass("fa-search").addClass("fa-times");
    }
    else {
        that.dom.search.val("");
        that.dom.searchbtn.find("i:visible").removeClass("fa-times").addClass("fa-search");
    }

    if (reload) {
        that.page = 0;
        that.refreshRecords();
    }
}

xobni.prototype.trackClick = function (dom) {
    var that = this;
    dom.find("[data-action]").on("click", function (e) {
        var $this = $(this);
        var action = $this.data('action');
        var data = $this.data('action-item');

        //added for small screen dropdown acions
        if ($(this).hasClass("disabled")) {
            return false;
        }

        var preventDefault = true;
        var callback = that.settings.allhandlers[action];
        if (callback !== undefined) {
            var result = callback(data, action, e);
            if (result !== undefined && result === true)
                preventDefault = false;
        }
        else
            console.debug("Missing action: " + action);

        if (preventDefault)
            e.preventDefault();
    });

    dom.find("[data-dblclick]").on("dblclick", function (e) {
        var $this = $(this);
        var action = $this.data('dblclick');
        var data = $this.data('action-item');

        var preventDefault = true;
        var callback = that.settings.allhandlers[action];
        if (callback !== undefined) {
            var result = callback(data);
            if (result !== undefined && result === true)
                preventDefault = false;
        }
        else
            console.debug("Missing action: " + action);

        if (preventDefault)
            e.preventDefault();
    });


}
xobni.prototype.sortactivity = function (val) {
    var that = this;
    ////////----------Start -- This is to do the sort activity for slected contacts----------////////
    var format = $(".inbox-daterange").find("button").eq(0).find(">span").text();
    var formatindex = $(".inbox-daterange").find("ul").find("li a:contains('" + format + "')").attr('data-action-item');

    var linkids = null;
    var uniqueids = null;
    var isSmartlist = null;
    var isContactcompany = null;
    var listname = null;
    var ispartner = null;
    var listId = null;
    var isPartnerContact = false;
    var fileName = "";

    var isassetList = false;
    var isuser = that.settings.isusergrid;
    var isAccountStaticList = false;
    isAccountStaticList = that.settings.isAccountStaticList;
    if (isuser)
        ispartner = true;
    linkids = that.dom.tablewrap.find("input[type='checkbox']:checked:not('.all')").map(function () {
        return parseInt($(this).parents("tr").data("recordid"));
    }).get();

    uniqueids = that.dom.tablewrap.find("input[type='checkbox']:checked:not('.all')").map(function () {
        return parseInt($(this).parents("tr").data("uid"));
    }).get();

    if (typeof (that.filterdata) != "undefined") {
        if (typeof (that.filterdata.smartlists) != "undefined")
            isSmartlist = that.filterdata.smartlists;
    }

    if (typeof (that.filterdata) != "undefined") {
        if (typeof (that.filterdata.contactcompany) != "undefined")
            isContactcompany = that.filterdata.contactcompany;
    }
    var _api = that.settings.api.toLowerCase();
    var apidata = null;
    if (typeof (JSON.stringify(that.apidata)) != "undefined")
        apidata = JSON.stringify(that.apidata).replace(/\:/g, '\=').replace("{", "").replace("}", "").replace(/\"/g, '\ ').replace(/\s/g, "");
    if (typeof (formatindex) != "undefined") {
        if (apidata != "")
            apidata = apidata + ",format=" + formatindex;
        else
            apidata = "format=" + formatindex;
    }
    if (_api != "getcontactsforcurrentuser" && isContactcompany == null)
        listname = $("#myModalLabel").find("span:first").text().substring(0, 50);
    if (_api == "getcontactlistsforcurrentuser") {
        that.dom.tablewrap.find("input[type='checkbox']:checked:not('.all')").each(function () {
            var $tr = $(this).parents("tr");
            if ($tr.data("selected") && $tr.data("selected")!="") {
                that.apidata.isSharedList = $tr.data("selected");
                return;
            }
        });        
    }
    if (apidata == "") apidata = null;
    if (apidata != null) {
        var api_data = apidata.split(",");
        for (var i = 0; i < api_data.length; i++) {
            var api_parameter = api_data[i];
            if (api_parameter.indexOf("cstatus") >= 0) {
                var status = api_parameter.split("=")[1];
                if (status == 3)
                    ispartner = true;
            }
            if (api_parameter.indexOf("isassetlist") >= 0) {
                var isassetlist = api_parameter.split("=")[1];
                if (isassetlist == "true") {
                    isassetList = true;
                    that.apidata.listid = linkids[0];
                    that.apidata.assettype = 0;
                    that.apidata.linktype = 0;
                }
            }
            if (api_parameter.indexOf("isuserlist") >= 0) {
                var isuserlist = api_parameter.split("=")[1];
                if (isuserlist == "true") {
                    isSmartlist = true;
                    isuser = true;
                    that.settings.gridtype = "User";
                    that.apidata.listid = linkids[0];
                    that.settings.fields = ["email", "company", "leadshared", "opportunitycreated", "lastlogindate", "partnerscore"];
                }
            }
            if (api_parameter.indexOf("iscompanylist") >= 0) {
                var isCompanyList = api_parameter.split("=")[1];
                if (isCompanyList == "true") {
                    isSmartlist = true;
                    isuser = false;
                    that.settings.gridtype = "";
                    that.apidata.listid = linkids[0];
                    that.settings.fields = [];
                }
            }
            if (api_parameter.indexOf("listid") >= 0) {
                listId = api_parameter.split("=")[1];
            }
            if (api_parameter.indexOf("ispartnercontact") >= 0) {
                isPartnerContact = api_parameter.split("=")[1];
            }
            if (api_parameter.indexOf("name") >= 0) {
                fileName = api_parameter.split("=")[1];
            }
        }
    }
    if (ispartner)
        isuser = true;
    var filters = [];
    that.dom.quickaccess.find("li.active").find("input[data-filter]").each(function () {
        filters.push($(this).data("filter").toString());
    });

    if (linkids.length <= 0 && val != "export" && val != "addtoplaybook" && val != "Pushtocrm" && that.settings.isselectall && that.apidata.atdata != "routed" && val != "unsubscribeemail") {
        var apiData = that.apidata.atdata;
        var apiName = "CreateSmartListForSendAssets";
        if (that.settings.isusergrid) {
            apiName = "CreateListToSendAssets";
            ispartner = true;
        }
        api.call(apiName, { "apiname": _api, "apidata": apiData, "filters": filters, "search": searchtext }, function (r) {
            linkids = r.result;
            isSmartlist = true;
            selectAction();

        });
    }
    else
        selectAction();

    function selectAction() {
        if (linkids.length <= 0 && (val != "export" && val != "exportExcel")) {
            var content = 'Please select atleast one contact/list.';
            if (ispartner) {
                content = 'Please select atleast one user/list.'
            }
            $.OpenSmartMessageBox2({ title: "", content: content, buttons: '[Ok]' },
                function (result) {
                    if (result === 'Ok') {
                        $.CloseSmartMessageBox2();
                    }
                }
            );
        }
        else {
            if (val == "export" || val == "exportExcel") {
                if (linkids.length > 1 && isSmartlist != null) {
                    $.OpenSmartMessageBox2({ title: "Alert", content: 'You can export only one list at a time.', buttons: '[Ok]' },
                        function (result) {
                            if (result === 'Ok') {
                                $.CloseSmartMessageBox2();
                            }
                        }
                    );
                }
                else if (linkids.length > 1 && isContactcompany != null) {
                    $.OpenSmartMessageBox2({ title: "", content: 'You can export only one account at a time', buttons: '[Ok]' },
                        function (result) {
                            if (result === 'Ok') {
                                $.CloseSmartMessageBox2();
                            }
                        }
                    );
                }
                else {
                    if (apidata != null && (apidata.indexOf("smart=true") > -1 || apidata.indexOf("smart=false") > -1) && linkids.length <= 0 && that.folder.name.toString() != "Contacts") {
                        $.OpenSmartMessageBox2({ title: "Alert", content: 'You have to select at least one list to export', buttons: '[Ok]' },
                            function (result) {
                                if (result === 'Ok') {
                                    $.CloseSmartMessageBox2();
                                }
                            }
                        );
                    }
                    else if (linkids.length <= 0 && isContactcompany) {
                        $.OpenSmartMessageBox2({ title: "", content: 'You have to select at least one account to export', buttons: '[Ok]' },
                            function (result) {
                                if (result === 'Ok') {
                                    $.CloseSmartMessageBox2();
                                }
                            }
                        );
                    }
                    else {
                        var name = that.settings.name;
                        var exportDetails = {};
                        exportDetails.api = _api;
                        exportDetails.apidata = that.apidata;
                        if (val == "exportExcel") {
                            exportDetails.exportfiletype = 9216;
                        } else {
                            exportDetails.exportfiletype = 8320;
                        }
                        exportDetails.linkids = linkids;
                        exportDetails.filters = filters;
                        if (that.settings.exporttype != null && that.settings.exporttype != undefined && that.settings.exporttype != LinkTypeEnums.Account && that.settings.exporttype != "List" && that.settings.exporttype != "SmartList" && that.settings.exporttype != "Email" && that.settings.exporttype != "WorkFlowUser")
                            that.settings.gridtype = "";
                        exportDetails.gridtype = that.settings.gridtype;
                        var sortColumn = that.dom.sort.data("sort-column");
                        var ascending = that.dom.sort.data("sort-asc");

                        sortColumn = sortColumn != null ? sortColumn : "ID";
                        ascending = ascending != null ? ascending : true;
                        exportDetails.sortcolumn = sortColumn;
                        exportDetails.ascending = ascending;
                        exportDetails.searchtext = searchtext;
                        exportDetails.name = name;
                        
                        if (that.settings.gridtype != "") {

                            var defaultfields = [];
                            var dbFields = [];
                            dbFields.push(...that.settings.fields);                          

                            var apidata1 = '{"page":0,"pageSize":24,"sort":"' + sortColumn + '","ascending":' + ascending + ',"search":"","filters":[],"condition":false,"format":4,"startdate":"","enddate":"","folder":{}';
                            var theads = that.dom.tablewrap.find("#inbox-table th:not('.inbox-table-icon,.not-to-export')").filter(":visible").filter(function () {
                                if ($(this).text().trim() != "") return this; //check the trimmed TD content - will make it ignore all white space
                            });
                            theads.each(function () {
                                var fieldName = $(this).text();
                                if (that.settings.gridtype != 'User') {
                                    fieldName = fieldName.toLowerCase() == "company" ? 'ContactCompany' : fieldName;
                                }
                                else {
                                    fieldName = fieldName == 'User' ? 'User Name' : fieldName;
                                }
                                if (defaultfields.indexOf(fieldName) == -1)
                                    defaultfields.push(fieldName);
                                if (fieldName == 'User Name') {
                                    if (defaultfields.indexOf(fieldName) != -1) {
                                        dbFields[defaultfields.indexOf(fieldName)] = "name";
                                    }
                                }
                            });

                            if (that.settings.removeExportFields !== undefined) {
                                $.each(that.settings.removeExportFields, function (i, item) {
                                    item = htmlDecode(item);
                                    if (defaultfields.indexOf(item) != -1)
                                        defaultfields.splice(defaultfields.indexOf(item), 1);
                                });
                            }                            

                            if (isuserlist == "true") {
                                defaultfields = ['User Name', 'Company', 'Shared Leads', 'Opportunities', 'Last Login', 'Score'];
                            }

                            exportDetails.dbfields = dbFields;
                            exportDetails.defaultfields = defaultfields;
                            if (isSmartlist != null)
                                exportDetails.issmartlist = isSmartlist;
                            exportDetails.uniqueids = uniqueids;

                            if (that.settings.gridtype == "Contact") {

                                if (_api.toLowerCase() == "getexternalsiteinterest") {
                                    defaultfields.splice(1, 0, 'Email');
                                    defaultfields.splice(3, 0, 'City');
                                    defaultfields.splice(4, 0, 'State');
                                }

                                exportDetails.strapiData = apidata;
                                exportDetails.listname = fixedEncodeURIComponent(listname);
                                exportDetails.linktype = LinkTypeEnums.Contact;
                                exportDetails.callback = exportcontact;
                                exportDetails.contactexport = false;
                            }
                            else if (that.settings.gridtype == "User") {
                                exportDetails.linktype = LinkTypeEnums.User;

                                if (that.settings.griddata != undefined && that.settings.griddata.exportcustomfields != undefined)
                                    exportDetails.exportcustomfields = that.settings.griddata.exportcustomfields;
                            }
                            else if (that.settings.gridtype == "Report") {
                                if (isassetList == false) {
                                    if (isAccountStaticList)
                                        defaultfields = ['Company/Account Name', 'City, State, Country', 'Contact Last Activity', 'Created On'];
                                    else
                                        defaultfields = ['User Name', 'First Name', 'Last Name', 'User Name', 'Company', 'Shared Leads', 'Opportunities', 'Last Login', 'Score'];
                                }
                                apiData1 = { sort: sortColumn, ascending: ascending, search: searchtext, filters: filters, condition: false, folder: {}, format: 4 };
                                if (defaultfields.indexOf('User Name') != -1) {
                                    dbFields[defaultfields.indexOf('User Name')] = "name";
                                }
                                exportreport(apiData1, name, defaultfields, dbFields, that.apidata, _api, linkids, uniqueids, "", 0, "", false, null, true, null, exportDetails.exportfiletype);
                            }
                            else if (that.settings.gridtype == "Account") {
                                exportDetails.linktype = LinkTypeEnums.Account;

                                if (that.settings.griddata != undefined && that.settings.griddata.exportcustomfields != undefined)
                                    exportDetails.exportcustomfields = that.settings.griddata.exportcustomfields;
                            }

                            if (that.settings.extraexportfields !== undefined) {
                                $.each(that.settings.extraexportfields, function (n, i) {
                                    $.each(this, function (key, value) {
                                        key = htmlDecode(key);
                                        if (defaultfields.indexOf(key) == -1)
                                            defaultfields.splice(value, 0, key);
                                        else {
                                            if (defaultfields.indexOf(key) != value) {
                                                defaultfields.splice(defaultfields.indexOf(key), 1);
                                                defaultfields.splice(value, 0, key);
                                            }
                                        }
                                    });
                                });
                            }
                        }
                        else {
                            if (!ispartner) {
                                var headerName = "";
                                var exportFileName = "";
                                headerName = $(".modal-title").find("b").text().toString();
                                if (headerName != "" && headerName != undefined && headerName != null)
                                    exportFileName = getExportFileName(headerName);
                                exportDetails.name = exportFileName
                                if (isSmartlist != null)
                                    exportDetails.issmartlist = isSmartlist;
                                exportDetails.uniqueids = uniqueids;
                                exportDetails.ispartner = ispartner;
                                exportDetails.strapiData = apidata;
                                if (isContactcompany != null)
                                    exportDetails.iscontactcompany = isContactcompany;
                                exportDetails.linktype = LinkTypeEnums.Contact;
                                exportDetails.exporttype = that.settings.exporttype;
                            }
                            else {                                
                                exportDetails.uniqueids = uniqueids;
                                exportDetails.ispartner = ispartner;
                                exportDetails.listid = listId;
                                exportDetails.ispartnercontact = isPartnerContact;
                                exportDetails.linktype = LinkTypeEnums.User;
                            }
                        }
                        modal.showExportWizard(exportDetails);
                    }
                }
            }
            else if (val.substring(0, 9) == "sendasset") {
                if (!isSmartlist) {
                    if (apidata.indexOf("smart") > -1 && listId == null)
                        isSmartlist = true;
                    else
                        isSmartlist = null;
                }
                modal.sendAssets(val, linkids, isSmartlist, isContactcompany, ispartner, isuser);
            }
            else if (val == "addtodrip") {
                if (linkids.length > 1 && isContactcompany == true) {
                    $.OpenSmartMessageBox2({ title: "", content: 'You can not select more than one account to add in drip.', buttons: '[Ok]' },
                        function (result) {
                            if (result === 'Ok') {
                                $.CloseSmartMessageBox2();
                            }
                        }
                    );
                }else
                    modal.addToDrip(linkids, isSmartlist, isContactcompany, isuser);
            }
            else if (val == "sendemail") {
                if (ispartner)
                    modal.showPartnerEmail(linkids, isSmartlist, isContactcompany, ispartner, isuser);
                else
                    modal.sendEmail(linkids, isSmartlist, isContactcompany);
            }
            else if (val == "addtoplaybook") {
                modal.addToPlaybook(linkids, isContactcompany);
            }
            else if (val == "CustomReport") {
                var linkType = LinkTypeEnums.Opportunity;
                if (that.folder.atdata == 'smartlist')
                    linkType = LinkTypeEnums.Contact;
                else if (that.folder.atdata == 'usersmartlist')
                    linkType = LinkTypeEnums.User;
                else if (that.folder.atdata == 'organizationlist')
                    linkType = LinkTypeEnums.Organization;
                else if (that.folder.atdata == 'companyuserlist')
                    linkType = 5;
                if (linkids.length > 5) {
                    $.OpenSmartMessageBox2({ title: "", content: 'You can select only five lists at a time.', buttons: '[Ok]' },
                        function (result) {
                            if (result === 'Ok') {
                                $.CloseSmartMessageBox2();
                            }
                        }
                    );
                }
                else
                    modal.showListCustomCharts(linkids, linkType);
            }
            else if (val == "unsubscribeemail") {
                $.OpenSmartMessageBox2({
                    title: 'Confirm Unsubscribe', content: 'Are you sure you want to unsubscribe {0} contact(s)?'.replace("{0}", linkids.length), buttons: '[No][Yes]'
                },
                    function (result) {
                        if (result == 'Yes') {
                            api.call("BulkUnsubscribeEmail", { ids: linkids }, function (r, ctx) {
                                if (r.result == true) {
                                    events.savedContact();
                                    $.smallBox({
                                        title: 'Contacts Unsubscribed',
                                        content: 'The selected contacts were unsubscribed from Emails',
                                        color: "#659265",
                                        timeout: 5000
                                    });
                                }
                                else {
                                    $.smallBox({
                                        title: 'There was an error while unsubscribing the contacts from Emails',
                                        content: 'There was an error while unsubscribing the contacts from Emails',
                                        color: "#b94a48",
                                        timeout: 5000
                                    });
                                }
                                $.CloseSmartMessageBox2();
                            });
                        }
                        else {
                            $.CloseSmartMessageBox2();
                        }
                    })
            }
        }
    }

    function getExportFileName(headerName) {
        var exportType = that.settings.exporttype;
        if (exportType != null) {
            var filename = "";
            if (exportType == "SmartList")
                filename = 'SmartList-' + headerName;
            if (exportType == "List")
                filename = 'Recipient List-' + headerName;
            if (exportType == "CompanyList")
                filename = 'CompanyList-' + headerName;
            else if (exportType == "Email")
                filename = fileName + "-" + that.settings.header;

            return fixedEncodeURIComponent(filename);
        }
    }
    ////////----------End -- This is to do the sort activity for slected contacts----------////////
}

xobni.prototype.exportactivity = function (val) {
    var that = this;
    if (typeof (val) == 'object') {
        if (val.currentobj != undefined)
            that = val.currentobj;
        if (val.data != undefined)
            val = val.data;
    }
    //While exporting account, we should have a gridtype report, because 
    //We are chaning this gridtype to blank in sortactivity while exporting contacts from accounts page itself
    if (that.settings.exporttype != null && that.settings.exporttype != undefined && that.settings.exporttype != LinkTypeEnums.Account && that.settings.exporttype != LinkTypeEnums.Opportunity && that.settings.exporttype != LinkTypeEnums.Database && that.settings.exporttype != "WorkFlowUser")
        that.settings.gridtype = "Report";
    ////////----------Start -- This is to do the sort activity for slected contacts----------////////
    var format = $(".inbox-daterange").find("button").find(">span").text();
    var formatindex = $(".inbox-daterange").find("ul").find("li a:contains('" + format + "')").attr('data-action-item');

    var linkids = null;
    var uniqueids = null;
    linkids = that.dom.tablewrap.find("input[type='checkbox']:checked:not('.all')").map(function () {
        return ($(this).parents("tr").data("recordid"));
    }).get();

    uniqueids = that.dom.tablewrap.find("input[type='checkbox']:checked:not('.all')").map(function () {
        return ($(this).parents("tr").data("uid"));
    }).get();

    var api = that.settings.api;
    var apidata = null;
    if (typeof (JSON.stringify(that.apidata)) != "undefined")
        apidata = that.apidata;
    if (typeof (formatindex) != "undefined") {
        if (!apidata.hasOwnProperty("format") || apidata["format"] != formatindex)
            apidata["format"] = parseInt(formatindex);
    }

    if (apidata == "") apidata = null;

    if (that.settings.gridtype != "" || (that.settings.gridtype == "" && that.settings.exporttype== LinkTypeEnums.Opportunity)) {
        var name = that.settings.name;
        var tabs = [];
        var defaultfields = [];
        var dbfields = [];
        dbfields.push(...that.settings.fields);
        var selectedfolder = that.folder.atdata;
        var sortcolumn = that.dom.sort.data("sort-column");
        var ascending = that.dom.sort.data("sort-asc");
        var emailExportType = "";

        sortcolumn = sortcolumn != null ? sortcolumn : "ID";
        ascending = ascending != null ? ascending : true;
        if (typeof (api) == "function") {
            if (name == assetReportSummary)
                api = "GetTemplateUsageSummary";
        }
        api = api.toLowerCase();
        var filters = [];
        that.dom.quickaccess.find("li.active").find("input[data-filter]").each(function () {
            filters.push($(this).data("filter").toString());
        });
        var apidata1 = { page: 0, pageSize: 24, sort: sortcolumn, ascending: ascending, search: searchtext, filters: filters, condition: false, format: 4, startdate: "", enddate: "", folder: selectedfolder };
        var theads = that.dom.tablewrap.find("#inbox-table th:not('.inbox-table-icon')").filter(":visible").filter(function () {
            if ($(this)[0].colSpan <= 1) {
                if ($(this).text().trim() != "") return this; //check the trimmed TD content - will make it ignore all white space
            }
            else {
                if ($(this).text().trim() != "")
                    tabs.push({ name: $(this).text().trim(), colspan: $(this)[0].colSpan });
            }
        });
        if (api.toLowerCase() == "gettrackingsitepagesvisitedactivity") {
            defaultfields.push("Name");
        }
        if (api.toLowerCase() == "getemailsummaryrep") {
            defaultfields.push("Email Sender");
            exportTitle = name;
        }
        if (api.toLowerCase() == "getleaderboardresultsforcurrentuser") {
            defaultfields.push("User Name");
            exportTitle = name;
        }
        if (api.toLowerCase() == "getemailcontactopensactivity" || api.toLowerCase() == "getsignedupdata") {
            defaultfields.push("Name");
            defaultfields.push("Email");
            defaultfields.push("Contactcompany");
        }
        if (api.toLowerCase() == "gettop5organizations" || api.toLowerCase() == "gettop5users") {
            defaultfields.push("Name");
            defaultfields.push("Score");
            defaultfields.push("Created On");
            exportTitle = name;
        }
        if (api.toLowerCase() != "getnewdashboardfeed") {
            theads.each(function () {
                var fieldname = $(this).text();
                fieldname = fieldname.toLowerCase() == "company" ? 'Company Name' : fieldname;
                fieldname = fieldname.toLowerCase() == "user" ? 'User Name' : fieldname;
                if (defaultfields.indexOf(fieldname) == -1 && fieldname != "Breakdown")
                    defaultfields.push(fieldname);
                if (fieldname == 'User Name') {
                    if (defaultfields.indexOf(fieldname) != -1) {
                        if (dbfields[defaultfields.indexOf(fieldname)] != "username")
                            dbfields[defaultfields.indexOf(fieldname)] = "name";
                    }
                }

                if (api.toLowerCase() == "getcertificationtemplatesummary" && that.apidata.viewoption != 1) {
                    if (fieldname == 'Total Time' && $.inArray('totalmediaused', dbfields) == -1) {
                        dbfields.splice(6, 0, "totalmediaused");
                    }
                    if (fieldname == 'Last Attempt Time' && $.inArray('_total_count_', dbfields) == -1) {
                        dbfields.splice(7, 0, '_total_count_');
                    }
                }
            });
        }
        else {
            defaultfields = ['First Name', 'Last Name', 'Email', 'Mobile', 'Work Number', 'Company', 'Activity', "Time", 'Score'];
        }
        if (api.toLowerCase() == "getloggedinusers") {
            defaultfields[3] = 'Video Views';
        }
        if (api.toLowerCase() == "getemailsummary") {
            defaultfields.splice(3, 0, 'First Name');
            defaultfields.splice(4, 0, 'Last Name');
            defaultfields.splice(5, 0, 'Email');
            defaultfields.splice(6, 0, 'On Behalf');
            defaultfields.splice(10, 0, 'Open Rate');
            defaultfields.splice(11, 0, 'Total Opened');
            defaultfields.splice(13, 0, 'Click Rate');
            defaultfields.splice(15, 0, 'Unique Click Through');
            defaultfields.splice(16, 0, 'Click Through Rate');
            defaultfields.splice(20, 0, 'Unsubscribed Rate');
            defaultfields.splice(21, 0, 'Sent To');
        }
        if (api.toLowerCase() == "getmdfprojectlist" || api.toLowerCase() =="getmdfclaimlist") {
            defaultfields[defaultfields.indexOf("Created By")] = "Firstname";
            defaultfields.splice(4, 0, "Lastname");
            defaultfields.splice(6, 0, "Currency");
            exportTitle = name;
        } 
        if (api.toLowerCase() == "getorganizations") {
            if (defaultfields.indexOf("Partner Type/Visibility") >= 0)
                defaultfields[defaultfields.indexOf("Partner Type/Visibility")] = "Partner Type";
            if (!that.settings.fieldData.iscustom)
                defaultfields.splice(6, 0, "Visibility");
        }
        if (api.toLowerCase() == "getusersengagementreport") {
            defaultfields.splice(1, 0, 'First Name');
            defaultfields.splice(2, 0, 'Last Name');
            defaultfields.splice(17, 0, '{$ajax_engagement_report.uuid}');
            defaultfields.splice(18, 0, '{$ajax_engagement_report.publicid}');
        }
        if (api.toLowerCase() == "getlandingpagesummary" || api.toLowerCase() == "getwebsummary" || api.toLowerCase() == "getwebbannersummary") {
            defaultfields.splice(2, 0, 'First Name');
            defaultfields.splice(3, 0, 'Last Name');
            defaultfields.splice(4, 0, 'Email');
        }
        if (api.toLowerCase() == "getassetreportsummary") {
            defaultfields.push("Asset Type");
            defaultfields.push("Created By");
        }
        if (api.toLowerCase() == "getassetreportssummary") {
            exportTitle = name;
        }
        if (api.toLowerCase() == "getusercontactdata") {
            defaultfields.splice(1, 0, 'First Name');
            defaultfields.splice(2, 0, 'Last Name');
            defaultfields.splice(3, 0, 'User Name');
        }
        if (api.toLowerCase() == "getrequestformdflist") {
            totalFieldsInGrid = defaultfields.length; // remove attachment column, email campaign column from export as its not needed.
            defaultfields.splice(6, 4)
        }
        if (api.toLowerCase() == "getallfundrequestsforadmin") {
            if (that.folder.atdata == "partial") {
                if ($.inArray('amountreimbursed', dbfields) == -1)
                    dbfields.splice(6, 0, "amountreimbursed");
            }
            else {
                var itemtoRemove = "amountreimbursed";
                if ($.inArray(itemtoRemove, dbfields) != -1) {
                    dbfields.splice($.inArray(itemtoRemove, dbfields), 1);
                }
            }
        }
        if (api.toLowerCase() == "getorganizationwisefundreport") {
            var stateIndex = dbfields.indexOf("state"); //remove state and country columns from db fields as we are showing them in address2 column
            if (stateIndex > -1) {  
                dbfields.splice(stateIndex, 1);   
            }

            var countryIndex = dbfields.indexOf("country");
            if (countryIndex > -1) {
                dbfields.splice(countryIndex, 1); 
            }
        }
        if (that.view.name != "List" && (api.toLowerCase() == "gettemplatesforcurrentuser" || api.toLowerCase() == "getusertemplates")) {
            defaultfields.push("Name");
            defaultfields.push("Created On");
            defaultfields.push("Updated On");
        }
        if (that.view.name != "List" && (api.toLowerCase() == "getimagesforcurrentuser" || api.toLowerCase() == "getvideosforloggedinuser" || api.toLowerCase() == "getdocumentsforcurrentuser")) {
            defaultfields.push("Name");
            defaultfields.push("Created On");
            defaultfields.push("Updated On");
        }
        if (that.settings.removeExportFields !== undefined) {
            $.each(that.settings.removeExportFields, function (i, item) {
                if (defaultfields.indexOf(item) != -1)
                    defaultfields.splice(defaultfields.indexOf(item), 1);
            });
        }
        if (that.settings.extraexportfields !== undefined) {
            $.each(that.settings.extraexportfields, function (n, i) {
                $.each(this, function (key, value) {
                    if (defaultfields.indexOf(key) == -1)
                        defaultfields.splice(value, 0, key);
                    else {
                        if (defaultfields.indexOf(key) != value) {
                            defaultfields.splice(defaultfields.indexOf(key), 1);
                            defaultfields.splice(value, 0, key);
                        }
                    }
                });
            });
        }
        if (api.toLowerCase() == "getemailsforcurrentusersa") {
            emailExportType = name;
        }
        if (api.toLowerCase() == "gettemplatesforcurrentuser" || api.toLowerCase() == "getusertemplates" || api.toLowerCase() == "getimagesforcurrentuser" || api.toLowerCase() == "getvideosforloggedinuser" || api.toLowerCase() == "getdocumentsforcurrentuser") {
            apidata.filetype = 8320;
            apidata.file = 4097;
            if (api.toLowerCase() == "getvideosforloggedinuser")
                apidata.file = 16385;
            else if (api.toLowerCase() == "getdocumentsforcurrentuser")
                apidata.file = 8193;
            else if (api.toLowerCase() == "getimagesforcurrentuser")
                apidata.file = 4097;
            apidata.allowSA = $(".btn-group a[href='#showall'][data-action='option'] i").hasClass("fa-unlock");
            if (api.toLowerCase() == "gettemplatesforcurrentuser" || api.toLowerCase() == "getusertemplates") {
                api = "gettempaltewithsharedata"
            }
            else
                api = "getfileswithsharedata";
        }
        if (api.toLowerCase() == "getassetsforreport") {
            api = "GetAssetReportSummary";
        }
        var exportDetails = {};
        exportDetails.name = name;
        exportDetails.dbfields = dbfields;
        exportDetails.sortcolumn = sortcolumn;
        exportDetails.defaultfields = defaultfields;
        exportDetails.ascending = ascending;
        exportDetails.filters = filters;
        exportDetails.searchtext = searchtext;
        exportDetails.api = api;
        exportDetails.apidata = apidata;
        exportDetails.linkids = linkids;
        exportDetails.uniqueids = uniqueids;
        exportDetails.gridtype = that.settings.gridtype;
        if (val == "exportExcel") {
            exportDetails.exportfiletype = 9216;
        } else {
            exportDetails.exportfiletype = 8320;
        }
        exportDetails.exportdefaultfields = that.settings.exportdefaultfields;
        if (that.settings.gridtype == 'User') {            
            exportDetails.linktype = LinkTypeEnums.User;
            if (that.settings.griddata != undefined && that.settings.griddata.exportcustomfields != undefined)
                exportDetails.exportcustomfields = that.settings.griddata.exportcustomfields;
            modal.showExportWizard(exportDetails);
        }
        else if (that.settings.gridtype == "Contact") {
            exportDetails.strapiData = apidata;
            exportDetails.linktype = LinkTypeEnums.Contact;
            exportDetails.callback = exportcontact;
            exportDetails.contactexport = false;
            modal.showExportWizard(exportDetails);
        }
        else if (that.settings.gridtype == 'Cases' && this.apidata.isradexport == true) {
            exportTitle = name;
            exportreport(apidata1, exportTitle, defaultfields, dbfields, apidata, api, linkids, uniqueids, "Case", 0, "", false, null, isSendFileOnMail, emailExportType, exportDetails.exportfiletype);
        }
        else if (that.settings.gridtype == 'Cases') {
            exportDetails.casetypeid = apidata.casetypeid;
            exportDetails.linktype = LinkTypeEnums.Case;
            modal.showExportWizard(exportDetails);
        }
        else if (that.settings.gridtype == 'Database') {
            var selectedAssetTypeIndex = that.dom.container.find(".inbox-side-bar .inbox-folder-scrool ul li.active").data('folder');
            var assetType = that.settings.folders[selectedAssetTypeIndex].apidata.assettypeid !== undefined ? that.settings.folders[selectedAssetTypeIndex].apidata.assettypeid : that.settings.folders[selectedAssetTypeIndex].apidata.assettypeid;
            exportDetails.assettype = assetType;
            exportDetails.linktype = LinkTypeEnums.Database;
            modal.showExportWizard(exportDetails);
        }
        else if (that.settings.exporttype == LinkTypeEnums.Opportunity) {
            var selectedProjectTypeIndex = that.dom.container.find(".inbox-side-bar .inbox-folder-scrool ul li.active").data('folder');
            var projectType = that.settings.folders[selectedProjectTypeIndex].apidata.projecttypeid !== undefined ? that.settings.folders[selectedProjectTypeIndex].apidata.projecttypeid : that.settings.folders[selectedProjectTypeIndex].apidata.projecttyeid;
            exportDetails.projecttype = projectType;
            exportDetails.linktype = LinkTypeEnums.Opportunity;
            modal.showExportWizard(exportDetails);
        }
        else {
            if (apidata.ismdfsmartlist == true) {
                exportDetails.name = exportTitle;
                modal.showMdfExportFields(exportDetails);
            }
            else if (apidata != null && apidata.isrmaexport) {
                exportTitle = apidata.name;
                exportDetails.name = exportTitle;
                exportreport(apidata1, exportTitle, defaultfields, dbfields, apidata, api, linkids, uniqueids, "Case", 0, "", false, null, isSendFileOnMail, emailExportType, exportDetails.exportfiletype);
            }
            else {
                if (that.settings.exporttype == "Organization") {
                    if (apidata != null && apidata.smart && linkids.length <= 0) {
                        $.OpenSmartMessageBox2({ title: "Alert !", content: 'You have to select at least one list to export', buttons: '[Ok]' },
                            function (result) {
                                if (result === 'Ok') {
                                    $.CloseSmartMessageBox2();
                                }
                            }
                        );
                    }
                    else if (apidata != null && apidata.smart && linkids.length > 1) {
                        $.OpenSmartMessageBox2({ title: "Alert !", content: 'You have to select at least one list to export', buttons: '[Ok]' },
                            function (result) {
                                if (result === 'Ok') {
                                    $.CloseSmartMessageBox2();
                                }
                            }
                        );
                    }
                    else {
                        exportDetails.linktype = LinkTypeEnums.Organization;
                        modal.showExportWizard(exportDetails);
                    }
                }
                else if (that.settings.exporttype == "Deals")
                {
                    exportDetails.linktype = LinkTypeEnums.Deals;
                    exportDetails.selectedfolder = selectedfolder;
                    exportDetails.callback = exportcontact;
                    if (selectedfolder == "opportunities")
                        ExportOpportunities(that, exportDetails.apidata.opportunitytype, that.folder.api, that.folder.apidata);
                    else {
                        exportDetails.contactexport = false;
                        modal.showExportWizard(exportDetails);
                    }
                }
                else if (that.settings.exporttype == LinkTypeEnums.Account) {
                    exportDetails.linktype = LinkTypeEnums.Account;
                    modal.showExportWizard(exportDetails);
                }
                else
                    exportreport(apidata1, exportTitle, defaultfields, dbfields, apidata, api, linkids, uniqueids, "", 0, "", false, null, isSendFileOnMail, emailExportType, exportDetails.exportfiletype);
            }
        }
    }
}

xobni.prototype.daterange = function (val) {
    var that = this;
    var selectedtext = that.dom.daterangelist.find("li a[data-action-item='" + val + "']").text();
    that.dom.daterangebtn.find(">span").text(selectedtext);
    formatval = val;
    Dformatval = val;

    if (val == -1) {
        that.dom.daterangepicker.show();
        that.dom.daterange1.datepicker();
        that.dom.daterange2.datepicker();
    }
    else {
        this.dom.daterangepicker.hide();
        that.refreshRecords();
    }
}

xobni.prototype.refreshEvent = function (event) {
    var that = this;
    event(that.dom.container, function () {
        that.refresh();
    });
}

xobni.prototype.sort = function (data) {
    var that = this;
    var sortcolumn = that.dom.sort.data("sort-column");
    var sortasc = that.dom.sort.data("sort-asc");
    var sortDisplay = that.dom.sort.data("sort-name");
    var sort = that.folder.sortsettings === undefined ? that.settings.sort[data] : that.folder.sortsettings[data];

    if (sort === undefined)
        return;

    if (sortcolumn !== sort.column) {
        sortasc = sort.asc;
        sortDisplay = sort.name;
    } else {
        sortasc = !sortasc;
        sortDisplay = sort.name;
    }
    that.dom.sortlist.find("li").removeClass("active");
    that.dom.sortlist.find("li").find("a[data-action-item="+data+"]").parent().addClass("active");
    that.dom.sort.data("sort-column", sort.column);
    that.dom.sort.data("sort-asc", sortasc);
    that.dom.sort.data("sort-name", sortDisplay);
    that.dom.sort.data("sort-reverse", sort.reverse != undefined ? sort.reverse : false);
    that.dom.sortbtn.find(">span").text(sort.name + " ");
    that.dom.sort.removeClass("open");
    if (that.folder.sort.length > 1)
        that.dom.sortbtn.find("i").toggleClass("fa-caret-up", sortasc).toggleClass("fa-caret-down", !sortasc);
    if (sort.reverse != undefined && sort.reverse) 
        that.dom.sortbtn.attr('data-original-title', 'Sort records, currently \'{0}\' {1} '.replace("{0}", sortDisplay).replace("{1}", !sortasc ? 'ascending' : 'descending'));    
    else 
        that.dom.sortbtn.attr('data-original-title', 'Sort records, currently \'{0}\' {1} '.replace("{0}", sortDisplay).replace("{1}", sortasc ? 'ascending' : 'descending'));
    
    if (that.settings.sortchanged !== null)
        that.settings.sortchanged(that,data);
    that.refreshRecords();
}

xobni.prototype.setView = function (index) {
    var that = this;

    if (that.viewindex === index)
        return false;

    that.viewindex = index;
    that.view = that.settings.views[index];
    that.settings["hidefolders"] = that.view.hidefolders;
    if (that.view.name.toLowerCase() != 'List'.toLowerCase())
        that.dom.tablewrap.addClass("thumbnail-view");
    else 
        that.dom.tablewrap.removeClass("thumbnail-view");

    if (that.view.showbuttons !== undefined || that.view.showbuttons === false) {
        that.dom.actions.css('display', 'none');
    }
    else {
        if (that.settings.actions.length > 0 || $.isEmptyObject(that.settings.sortactivity))
            that.dom.actions.css('display', 'inline-block');
        else 
            that.dom.actions.css('display', 'none');
    }

    that.dom.views.find("a").removeClass("active");
    that.dom.views.find("a[data-action-item='" + index + "']").addClass("active");
    that.dom.views.find("a[data-action-item='" + index + "']").attr('data-placement','top');
    that.dom.folderGroup.toggleClass("hide-folders", that.view.hidefolders);

    return true;
}

xobni.prototype.toggleView = function (index) {
    var that = this;

    var result = that.setView(index);

    if (result == true && that.settings.viewchanged !== null)
        that.settings.viewchanged(that.viewindex);

    return result;
}

xobni.prototype.optionClick = function (index) {
    var that = this;    
    if (typeof (index) != "object") {
        var data = that.settings.options[index];
        if (data.type === "toggle") {
            if (data.state === undefined || data.state === "off")
                data.state = "on";
            else
                data.state = "off";

            var selected = data.state === "on";
            var option = that.dom.options.find("[data-action-item='" + index + "']");
            var i = option.find("i");

            //option.toggleClass("active", selected);
            i.toggleClass("fa-" + data.off.icon, !selected).toggleClass("fa-" + data.on.icon, selected);
        }
    }
    else {
        var applyall = that.settings.options[0].applyall;
        if (applyall != undefined && applyall == true) {
            $(that.settings.folders).each(function () {
                if (that.apidata.istemplateapprovalpage)
                    this.apidata.state = index.typevalue;
                else
                    this.apidata.extendedParam = index.data.value;
            });
        }
        else {
            if (that.apidata.istemplateapprovalpage)
                that.apidata.state = index.typevalue;
            else
                that.apidata.extendedParam = index.data.value;
        }
        $(".btn-group.inbox-options ul li").removeClass("active");
        $(".btn-group.inbox-options ul").find("li[value=" + index.data.value + "]").addClass("active");
    }

    return true;
}

xobni.prototype.optionItemClick = function (actionItemIndex, optionItemIndex) {
    var that = this;

    var selectedOptionItem = that.settings.options[actionItemIndex].values[optionItemIndex];
    var optionButton = that.dom.options.find(".btn-default .selected-value").eq(actionItemIndex);

    optionButton.html(selectedOptionItem.data.text);
    optionButton.attr("data-original-title", selectedOptionItem.data.text);

    that.dom.options.find(".dropdown-menu").eq(actionItemIndex).find("li").removeClass("active");

    var optionItem = that.dom.options.find(".dropdown-menu").eq(actionItemIndex).find("li[data-action-item=" + actionItemIndex + "]");
    optionItem.addClass("active");

    var applyall = that.settings.options[actionItemIndex].applyall;
    if (applyall != undefined && applyall == true) {
        $(that.settings.folders).each(function () {
            this.apidata = $.extend(this.apidata, selectedOptionItem.apidata);
        });
    }
    else {
        this.apidata = $.extend(this.apidata, selectedOptionItem.apidata);
    }
}

xobni.prototype.loadFolder = function (index) {
    var that = this;

    if (that.loading)
        return;

    if (that.folderindex === index)
        return;

    that.clearSearch(false);
    isFolderChanged = true;
    that.folderindex = index;
    that.loading = true;
    that.folder = that.settings.folders[index];
    that.page = 0;

    that.dom.sortlist.empty();
    that.dom.footer.hide();
    if (that.settings.beforefolderchange !== null)
        that.settings.beforefolderchange(that);

    var defsort = null;
    var sortcolumn = null;
    var sortasc = null;
    var sortsettings = null;
    var sortDisplay = null;
    if (that.folder.sortsettings !== undefined)
        sortsettings = that.folder.sortsettings;
    else
        sortsettings = that.settings.sort;
    
    if (that.folder.fields !== undefined)
        that.settings.fields = that.folder.fields;

    if (that.folder.sort.length > 0)
        defsort = sortsettings[that.folder.sort[0]];

    if (that.settings.hideplaybookloader && that.settings.playbookloader != "") { 
        that.dom.folderGroup.find(".folder-name").removeAttr('data-original-title');
        that.dom.folders.find(".folder-dropdown .dropdown-toggle").attr("data-original-title", "Accounts");
    }

    if (that.folder.sort.length < 2) {
        if (defsort != null || defsort != undefined) {
            sortcolumn = defsort.column;
            sortasc = defsort.asc;
            sortDisplay = defsort.name;
        }
        that.dom.sort.hide();
    } else {
        sortcolumn = defsort.column;
        sortasc = defsort.asc;
        sortDisplay = defsort.name;
        that.dom.sortbtn.find(">span").text(defsort.name + " ");
        if (that.folder.sort.length > 1)
            that.dom.sortbtn.find(">i").toggleClass('fa-caret-down', !defsort.asc).toggleClass('fa-caret-up', defsort.asc);
        if (that.settings.hideplaybookloader && that.settings.playbookloader != "") 
            that.dom.sortbtn.find(">i").toggleClass('fa-caret-down', !defsort.asc).toggleClass('fa-caret-up', defsort.asc).removeClass('fas').addClass('fal');
        that.dom.sort.show();
        for (var i = 0; i < that.folder.sort.length; i++) {
            var sort = sortsettings[that.folder.sort[i]];            
            var $li = $("<li>");
            if (sort.column == sortcolumn)
                $li.addClass("active");
            var $a = $("<a>");
            $a.attr({ "href": "#", "data-action": "sort", "data-action-item": that.folder.sort[i] });
            $a.text(sort.name);
            $li.append($a);
            that.dom.sortlist.append($li);
        }
        that.dom.sortbtn.attr('data-original-title', 'Sort records, currently \'{0}\' {1} '.replace("{0}", sortDisplay).replace("{1}", sortasc ? 'ascending' : 'descending'));
        that.trackClick(that.dom.sort);
    }

    that.dom.folders.find('li:not(.folder-dropdown)').each(function () {
        var attr = $(this).attr('type');
        if (typeof attr == typeof undefined)
            $(this).attr('type', $(this).text().trim());
    });//add type attributes to li elements

    that.dom.folders.find("li.active").removeClass("active");
    that.dom.folders.find("li[data-folder='" + index + "']").addClass("active");

    that.dom.sort.data("sort-column", sortcolumn);
    that.dom.sort.data("sort-asc", sortasc);
    that.dom.sort.data("sort-name", sortDisplay);
    if (defsort != null && defsort != undefined)
        that.dom.sort.data("sort-reverse", defsort.reverse);

    that.apidata = that.folder.apidata;
    that.filterdata = that.folder.filterdata;

    if (that.folder.viewindex != -1)
        that.setView(that.folder.viewindex);

    //that.refresh();
    that.dom.filterholder.empty();
    that.refresh(); // calling regresh of grid after remove the filters which is selected in previous folder
    if (that.settings.folderchanged !== null)
        that.settings.folderchanged(that.folder);
};

xobni.prototype.onFailedLoadFolder = function (refreshIndex, data) {
    //TODO show failed api call
    var that = this;
    if (that.settings.beforeLoad) {
        that.settings.beforeLoad(data, that);
    }
    that.dom.navbar.hide();
    that.dom.footer.hide();
    that.dom.actionbtns.hide();
    var failedMsg = "";
    var Errordata = {}
    Errordata["requestid"] = this.settings.id;
    Errordata["status"] = data.status;
    Errordata["message"] = data.result.message;
    failedMsg = ShowErrorMessageByStatus(Errordata);

    that.dom.tablewrap.html(failedMsg);
    //If any action needs to be performed even if there is any exception eg. showing/hiding some elements.	

    that.dom.folders.find("li.active a strong:not(.folderspinner)").remove();
    that.dom.folders.find("li.active a strong.folderspinner").hide();
    
    //that.dom.folders.find("li.active a").append("<strong>&nbsp; (" + total + ") </strong>");
    that.dom.folders.find("li.active a").append("<strong> 0</strong>");
    if (that.settings.afterLoad) {
        that.settings.afterLoad(data, that);
    }
};

xobni.prototype.onLoadFolder = function (refreshIndex, data) {
    var that = this;
    if (that.refreshIndex != refreshIndex)
        return;

    var target = that.settings.searchTarget ? that.settings.searchTarget : that.dom.container;
    that.dom.gotopage.find("a").addClass("disabled");
    
    if (that.settings.forcefooter==false)
      that.dom.footer.show();
    if (data.item.length <= 0) {
        target.find(".inbox-export").hide();
        that.dom.actions.addClass("hidden");
    }
    else {
        target.find(".inbox-export").show();
        that.dom.actions.removeClass("hidden");
        that.dom.inboxactions.removeClass("hidden");
        that.dom.actionbtns.removeClass("hidden");
        if (data.item.length >0) {
            var tr = that.dom.container.find("tbody tr");
            // Iterate through all rows to handle the first and last two rows.
            for (i = 0; i < tr.length; i++) {
                var td = $(tr[i]).find("td .dropdown-div");
                if (td != undefined) {
                    if (i === 0) {                       
                        td.removeClass("dropup");     // Remove dropup class from the first row
                    } else if (i >= tr.length - 2) {                       
                        td.addClass("dropup");          // Add dropup class for the last two rows
                    }
                }
            }
        }
    }
    if (that.settings.showcheckboxicon && that.settings.headericon != "") {
        that.dom.tablewrap.find("tbody input[type = 'checkbox']").each(function () {
            var $this = $(this);
            $this.closest("td").append('<div class="profile-img"> <span class=""><i class="' + that.settings.headericontype +' fa-' + that.settings.headericon + '"></i></span> </div>');
        })
    }

    if (that.settings.hidefiltericon) {
        that.dom.actionbtns.hide();
        that.dom.inboxactions.hide();
    }
    if (that.settings.hideonlyfiltericon) {
        that.dom.quickaccess.hide();
        that.dom.sortbtn.find("i").removeClass("fas").addClass("fal");
        that.dom.views.find(".fa-th-large, .fa-table").removeClass("fa").addClass("fal");
        that.dom.searchbtn.find(".fa-search").removeClass("fa").addClass("fal");
    }
    if (that.settings.header == "" && that.settings.headericon == "" && that.view.hidefolders) {
        that.dom.navbar.hide();
    }


    if (that.settings.isusergrid) {
        target.find(".inbox-activity [data-action-item=addtoplaybook]").hide();
        target.find(".inbox-activity [data-action-item=sendsms]").hide();
    }

    that.loading = false;
    that.dom.refresh.removeClass("fa-spin");
    that.dom.pageleft.removeClass("disabled");
    that.dom.pageright.removeClass("disabled");
    //that.tableHeightSize();

    if (that.settings.beforeLoad) {
        that.settings.beforeLoad(data, that);
    }
    if (that.settings.hideplaybookloader && that.settings.playbookloader != "") {
        that.dom.container.find("[rel=tooltip]").tooltip({ container: $("#" + that.settings.id) });
    }
    else {
        that.dom.tablewrap.find("[rel=tooltip]").tooltip({ container: 'body' });
    }
    
    //Added page info tips
    if (that.settings.desclink != undefined && that.settings.desclink != "") {
        that.dom.desclink.find("[rel=popover]").popover({
            trigger: "manual",
            container: '.desclink'
        });
        var popoverVisible = false;
        that.dom.desclink.find("[rel=popover]").off("click").on("click", function (e) {
            e.preventDefault(); 
            if (popoverVisible) {
                $(this).popover('hide');
            } else {
                $(this).popover('show');
            }
        });
        that.dom.desclink.find("[rel=popover]").on('shown.bs.popover', function () {
            popoverVisible = true;
            if (that.settings.moduleid > 0) {
                api.call("CreateTrackingInternalPageInfo", { moduleid: that.settings.moduleid }, function (res) {
                    if (res.result != true) {
                        $.smallBox({
                            title: 'Error',
                            content: '{$ajax_tracking_report.ErrorMsg}',
                            color: "#b94a48",
                            timeout: 3000
                        });
                    }
                });
            }
        });
        that.dom.desclink.find("[rel=popover]").on('hidden.bs.popover', function () {
            popoverVisible = false;
        });
    }

    // fixed for issues like these #40508 for all xobni pages
    $('[rel="tooltip"]').on('click', function () {
        const $this = $(this);

        if ($this.data('bs.tooltip')) {
            $this.tooltip('destroy');
        }
    });

    if (this.settings.id) {
        var $element = $("#" + this.settings.id).closest(".w-widget").find(".w-body,.widget-body");
        if ($element.length > 0 && $element.hasClass("w-body-bgcolor")) 
            $element.removeClass("w-body-bgcolor");
    }

    that.dom.tablewrap.find("input[type='checkbox']").on("change", function () {
        if (that.settings.singleselect) {
            $(this).parents('tbody').find('tr').toggleClass("highlight", false);
            var chk = $(this).prop("checked");
            $(this).parents('tbody').find('tr input').prop("checked", false);
            if (chk == true)
                $(this).prop("checked", true);
        }
        $(this).parents('tr').toggleClass("highlight", this.checked);
        if (_allselected) {
            $(this).parents().find('thead tr > th input').prop("checked", false);
            _allselected = false;
        }
        that.updateButtons();
    });

    that.enableButtons();
    that.updateButtons();
    that.dom.tablewrap.addClass("fadeInRight");
    //that.dom.tablewrap.find(".inbox-data-message").click(function () { getMail($(this)); });
    //that.dom.tablewrap.find(".inbox-data-from").click(function () { getMail($(this)); });
    var total = parseInt(that.dom.tablewrap.find("[data-record-count]").data("record-count"));
    that.dom.folders.find("li.active a strong:not(.folderspinner)").remove();
    that.dom.folders.find("li.active a strong.folderspinner").hide();
    //that.dom.folders.find("li.active a").append("<strong>&nbsp; (" + total + ") </strong>");
    that.dom.folders.find("li.active a").append("<strong>" + total + "</strong>");
    var page = that.page;
    var pagesize = that.settings.pagesize;
    var start = page * pagesize + 1;
    var end = start + pagesize - 1;
    if (total != 0) {
        var pages = Math.ceil(total / pagesize);
    }
    if (that.settings.forcefooter==false)
        that.dom.footer.show();
    if (end > total)
        end = total;
    if (data.item.length > 0) {
        if (total === 0 )
            that.dom.footer.find(".records-info").text("");
        else
            that.dom.footer.find(".records-info").text('Displaying {0} to {1} of {2} from {3} page(s)'.replace("{0}", start).replace("{1}", end).replace("{2}", total).replace("{3}", pages));
    }
    that.dom.paging2.show();
    if (that.settings.hidepagination) {//ability to hide pagination
        that.dom.paging2.hide();
        that.dom.gotopage.hide();
    }
    if (that.settings.hidefooter)
        that.dom.pagingtext.hide();

    if (that.settings.shownote)
        that.dom.info.show();

    //if (that.settings.showsearchtips)
    //    that.dom.searchinfotips.show();
    if (that.settings.search.disabled == false) {
        that.dom.searchinfotips.show();
        //search-info-tip-popover
        var $requestID = $("#" + that.settings.id);
        _info_tip_popover($requestID);
    }
    var $pagingNav = that.dom.paging2.find(".pagenumbers");
    $pagingNav.empty();
    //that.dom.pageshow.toggle(true).text(page + 1).attr("data-original-title", "Total of " + total + " record(s)");
    if (total != 0) {
        that.dom.pageshow.toggle(!that.dom.pageshow.hasClass("btn-xs")).text(page + 1).attr("data-original-title", 'Total of ' + total + ' record(s) in ' + pages + ' page(s)');
        var numericReg = /^\d*[0-9](|.\d*[0-9]|,\d*[0-9])?$/;
        if (pages > 1) {
            that.dom.footer.find(".inbox-pagination").removeClass("hidden");
            var currentPage = that.page;
            var minPage = pages <= 5 ? Math.min(1, currentPage + 1) : Math.max(1, currentPage + 1);
            var maxPage = Math.min(pages, currentPage + 5);

            if (minPage == pages) {
                maxPage = minPage;
                minPage = minPage - 5 > 0 ? minPage - 5 : 1;
            }

            minPage = maxPage - 4 > 0 ? maxPage - 4 : minPage;
            for (var i = minPage; i <= maxPage; i++) {
                var $li = $("<li>");
                var $a = $("<a>");
                $a.attr("data-page-number", i);
                $a.text(i);
                $li.append($a);
                if (currentPage + 1 == i)
                    $li.addClass("active");
                $pagingNav.append($li);
            }

            $pagingNav.find("a").each(function () {
                var $a = $(this);
                var index = $a.data('page-number');
                $a.on("click", function (e) {
                    that.page = index - 1;
                    $('.goto input').val("");
                    that.refreshRecords();
                });
            });

            that.dom.gotopage.find("a").off("click").on("click", function () {
                var inputVal = that.dom.gotopage.find('input').val();
                var pageNumber = parseInt(inputVal);
                if (!isNaN(pageNumber) && numericReg.test(inputVal) && inputVal % 1 === 0) {
                    if (pageNumber >= 1 && pageNumber <= pages) {
                        that.page = pageNumber - 1;
                        that.refreshRecords();
                        that.dom.gotopage.find('input').val("");
                    }
                }
            });

            that.dom.gotopage.on("keypress", function (e) {
                if (e.keyCode == 13) {
                    var inputVal = that.dom.gotopage.find('input').val();
                    var pageNumber = parseInt(inputVal);
                    if (!isNaN(pageNumber) && numericReg.test(inputVal) && inputVal % 1 === 0) {
                         total = parseInt(that.dom.tablewrap.find("[data-record-count]").data("record-count"));
                         page = Math.ceil(total / pagesize);
                        if (pageNumber >= 1 && pageNumber <= page) {
                            that.page = pageNumber - 1;
                            that.refreshRecords();
                            that.dom.gotopage.find('input').val("");
                        }
                    }
                }
            });

            that.dom.gotopage.find('input').keyup(function (e) {
                that.dom.gotopage.find('input').focus();
                that.dom.gotopage.find("a").removeClass("disabled");
                var inputVal = that.dom.gotopage.find('input').val();
                if (inputVal != "") {
                    var page = parseInt(inputVal);
                    if (!numericReg.test(inputVal) || inputVal % 1 != 0)
                        that.dom.footer.find("#errMsg").text('You have entered an invalid number. Please enter digits only.')
                    else {
                        if (!isNaN(page) && (page < 1 || page > pages))
                            that.dom.footer.find("#errMsg").text('Page does not exists.')
                        else 
                            that.dom.footer.find("#errMsg").text('');
                    }
                }
                else {
                    that.dom.footer.find("#errMsg").text('');
                }
            });

            that.dom.gotopage.find('input').on("keypress", function (e) {
                var evt = (e.charCode) ? e.charCode : ((e.which) ? e.which : e.keyCode);
                if (evt == 13) {
                    that.dom.gotopage.find("a").trigger("click");
                }
            });

            //To handle the last page empty issue after deleting all records(if pages > 2) - 89275
            if (currentPage == pages && data.item.length == 0) {
                var index = $pagingNav.find("a").last().data('page-number');
                that.page = index - 1;
                $('.goto input').val("");
                that.refreshRecords();
            }

        }
        else {

            //To handle the last page empty issue after deleting all records(if pages < 2) - 89275
            var currentPage = that.page;
            if (currentPage == pages && data.item.length == 0) {
                that.page = 0;//reset to first page
                $('.goto input').val("");
                that.refreshRecords();
            }

            that.dom.footer.find(".inbox-pagination").addClass("hidden");
        }
    }
    else {
        that.dom.pageshow.toggle(!that.dom.pageshow.hasClass("btn-xs")).text(page + 1).attr("data-original-title", 'Total of ' + total + ' record(s) in ');
        that.dom.pageshow.removeClass("dropdown-toggle");
        that.dom.pageshow.removeAttr("data-toggle");
        that.dom.footer.find(".inbox-pagination").addClass("hidden");
    }
    that.dom.pageleft.toggleClass("disabled", that.page == 0);
    that.dom.pageright.toggleClass("disabled", end == total);

    if (total === 0) {
        var $RequestID = $("#" + that.settings.id);
        $RequestID.closest(".w-widget").find(".w-body,.widget-body").addClass("w-body-bgcolor")
        var $div = $("<div>");
        $div.addClass("clearfix no-data-message");

        var $img = $("<img>");
        $img.attr("src", "https://partner-marketing.bitdefender.com/img/no-data-found.svg");

        if (that.settings.shownodataimage)
            $div.append($img);
        else
            that.dom.inboxbody.hide();
        var $innerDiv = $("<div>");
        var $br = $("<br/>");
        
        var $h3 = $("<h3>");
        $h3.text('No Data Found');
        $innerDiv.append($h3);
        if (that.settings.create != {} && that.settings.create != null) {
            if (that.settings.emptymessage != "") {
                $innerDiv.append(that.settings.emptymessage);
            }
            else {
                var $p = $("<p>");
                $span = $("<span>");
                $span.text('There is no data for you to see yet. ');
                $p.append($span);
                var $brTag = $("<br/>");
                $p.append($brTag);
                $p.append('If you want to create new data, just click ');
                $p.append($br);
                $a = $("<a>");
                $a.addClass("btn btn-primary type2 cursor-pointer");
                $a.attr("href", "javascript:void(0);");
                $a.css('text-decoration', 'none');
                $a.attr("data-action", "create");
                $a.text(that.settings.create.name);
                $p.append($a);
                $p.append(' button and go ahead.');
                $innerDiv.append($p);
            }
        }
        $div.append($innerDiv);
        that.dom.tablewrap.html($div);
        if (total === 0)
            that.dom.footer.find(".records-info").text("");

    }
    else if (!that.settings.shownodataimage)
        that.dom.inboxbody.show();
    that.trackClick(that.dom.tablewrap);
    for (var i = 0; i < data.item.length; i++)
        that.data.push(data.item[i]);

    if (that.settings.afterLoad) {
        that.settings.afterLoad(data, that);
    }

    /*ADDED by Abhishek*/
    /* To sync the height of the content with Mobile app */
    if ($.mobileApp && pymChild != null) { syncHeightForMobileApp(); }

    var tiptext = "";
    if (that.settings.enabletipbody) 
        tiptext = 'body';
    if (that.settings.enabletipauto) 
        tiptext = '#popover-auto';

    if (that.settings.showpophover) {
        $('[rel=popover-hover]').popover({
            trigger: 'hover',
            html: true,
            container: tiptext,
            placement: get_popover_placement,
            sanitizeFn: function (content) {
                return DOMPurify.sanitize(content)
            }
        });
    }
    if (that.settings.showpophover) {
        $('[rel=popover-focus]').popover({
            trigger: 'focus',
            html: true,
            container: tiptext,
            placement: get_popover_placement,
            sanitizeFn: function (content) {
                return DOMPurify.sanitize(content)
            }
        });
    }

    function get_popover_placement(pop, dom_el) {
        var width = window.innerWidth;
        var left_pos = $(dom_el).offset().left;

        if (width < 500) return 'bottom';
        if (width - left_pos > 650) return 'right';
        return 'left';
    }
    that.dom.tablewrap.find("thead th:not('.inbox-table-icon')").append("<i class='fa fa-lg'></i>");
    var sortDisplay = that.dom.sort.data("sort-name");
    var sortasc = that.dom.sort.data("sort-asc");
    var sortReverse = that.dom.sort.data("sort-reverse");
    if (that.folder.sort.length > 1) {
        that.dom.tablewrap.find("thead th").each(function () {
            if ($(this).text().trim() == sortDisplay) {
                if (sortReverse != undefined && sortReverse)
                    $(this).find("i").toggleClass("fa-caret-up", !sortasc).toggleClass("fa-caret-down", sortasc);
                else
                    $(this).find("i").toggleClass("fa-caret-up", sortasc).toggleClass("fa-caret-down", !sortasc);
            }
            else
                $(this).find("i").removeClass("fa-caret-up fa-caret-down");
        });
    }
    if (isMobile.any())  {
        var dropdownname = "<span class='text-trim'>"+this.folder.name +"</span>"+ "<i class='fa fa-angle-down'></i>";
        that.dom.container.find('.btn-group').find('.btn-default-cta').html(dropdownname);
    }
    //To sort the fields while customizing grid and to determine its order
    that.dom.columnaccess.find(".filter-labels").sortable({ items: 'div.fl', handle: "div.fl-icons", containment:".filter-labels" });

    that.dom.columnaccess.find(".filtermenu-lg").off("click").on("click", function (e) { e.stopImmediatePropagation(); });

    // This function will put up all fields which are selected by user in block, so user can see them all together
    that.dom.columnaccess.find(".filter-body").find("[data-filter]").off("click").on("click", function (e) {
        var selectedValArray = $.grep(fieldsArray, function (item, i) { return $(e.currentTarget).attr("data-filter") == item.name });
        if (selectedValArray.length > 0) {
            selectedValArray[0].show = $(e.currentTarget).is(":checked");
            if ($(e.currentTarget).is(":checked")) {
                var $iconDiv = $("<div>");
                $iconDiv.addClass("fl");
                $iconDiv.attr("filter", $(e.currentTarget).attr("data-filter"));
                var $iEllipses = $('<div class="fl-icons cursor-pointer"><i class="far fa-ellipsis-v"></i><i class="far fa-ellipsis-v"></i></div>');
                var $ispan = $("<span>");
                $ispan.text($(e.currentTarget).attr("data-value"));
                $iconDiv.append($iEllipses);
                $iconDiv.append($ispan);

                that.dom.columnaccess.find(".filter-labels").append($iconDiv);
            }
            else {
                var removedElem = that.dom.columnaccess.find(".filter-labels").find("div[filter=" + $(e.currentTarget).attr("data-filter") + "]");
                removedElem.remove();
            }
        }
        that.dom.columnaccess.find(".filter-labels").sortable({ items: 'div.fl', handle: "div.fl-icons" });
    });
    // search fields
    that.dom.columnaccess.find('.dropdown-menu .btn-search').on('click', function (e) {
        e.stopImmediatePropagation();
        var $e = $(e.currentTarget);
        var filterText = that.dom.columnaccess.find('.dropdown-menu .header-search input').val();
        if (filterText != "") {
            $(that.dom.columnaccess.find(".filter-body").find("li")).each(function (e, element) {
                $(element).show();
                var dataVal = $(element).find("input").attr("data-value").toLowerCase();
                if (!dataVal.includes(filterText.toLowerCase(), 0))
                    $(element).hide();
            });
            if (!$(that.dom.columnaccess).find(".filter-body").find("li").is(':visible')) {
                $(that.dom.columnaccess.find(".nodata")).removeClass("hidden");
            }
            else {
                $(that.dom.columnaccess.find(".nodata")).addClass("hidden");
            }
        }
        else {
            $(that.dom.columnaccess.find(".filter-body").find("li")).css("display", "block");
            $(that.dom.columnaccess.find(".nodata")).addClass("hidden");
        }
    });
    // search fields on enter
    that.dom.columnaccess.find('.dropdown-menu .header-search input').on("keypress", function (e) {
        e.stopImmediatePropagation();
        var evt = (e.charCode) ? e.charCode : ((e.which) ? e.which : e.keyCode);
        if (evt == 13) {
            that.dom.columnaccess.find('.dropdown-menu .btn-search').trigger("click");
        }
    });
    // Save Grid fields setting
    that.dom.columnaccess.find(".btn-primary").off("click").on("click", function () {
        var shownCols = $.grep(fieldsArray, function (item, i) {
            return item.show == false;
        });
        if (shownCols.length == fieldsArray.length) {
            api.call("RemoveGridSettings", { guid: that.settings.fieldData.guid }, function (r) {
                that.settings.fieldData.iscustom = false;
                that.dom.columnaccess.removeClass("open");
                that.settings.views[that.viewindex].template = that.settings.views[that.viewindex].defaulttemplate;
                that.refreshRecords();
            });
        }
        else {
            var $flElements = that.dom.columnaccess.find(".filter-labels .fl");
            var showColLength = 0;
            $($flElements).each(function (fi, item) {
                var selectedElem = $.grep(fieldsArray, function (fitem, fi) {
                    return fitem.name == $(item).attr("filter");
                });
                if (selectedElem.length > 0)
                    selectedElem[0]["columnnumber"] = fi + 1;
                showColLength = fi + 1;
            });
            $(fieldsArray).each(function (k, kitem) {
                if (!kitem.show)
                    kitem["columnnumber"] = showColLength++;
            })
            fieldsArray.sort(function (a, b) {
                var x = a["columnnumber"];
                var y = b["columnnumber"];
                return  ((x < y) ? -1 : ((x > y) ? 1 : 0));
            });
            api.call("SaveGridSettings", { guid: that.settings.fieldData.guid, fieldjson: fieldsArray }, function (r) {
                if (r.result) {
                    that.settings.fieldData.isloaded = false;
                    that.settings.fieldData.iscustom = true;
                    that.settings.views[that.viewindex].template = that.settings.views[that.viewindex].customtemplate;
                    that.dom.columnaccess.removeClass("open");
                    that.refreshRecords();
                }
            });
        }
    });
    //Close action
    that.dom.columnaccess.find('.filter-close .fa-times').off("click").on("click", function (e) {
        that.dom.columnaccess.removeClass("open");
    });
}

xobni.prototype.refresh = function () {
    var that = this;
    if (searchtext == undefined) {
        searchtext = that.dom.search.val();     // issue 4130, to update value of searchtext as per current page.
    }
    that.refreshFilters();
    //that.refreshRecords(); //commented out by Abhishek as this was causing many grids to refresh twice, this function is called in the below function
    that.daterange(formatval);
};

xobni.prototype.updateButtons = function () {
    var that = this;

    var selected = that.dom.tablewrap.find("input[type=checkbox]:checked").length;
    that.dom.container.find("[data-select='1']").toggleClass("disabled", selected != 1);
    that.dom.container.find("[data-select='*']").toggleClass("disabled", selected == 0);
    that.dom.container.find("[data-select='0']").toggleClass("disabled", 1 == 0);
    that.dom.container.find("[data-select='none']").toggleClass("disabled", selected >= 1);
    that.dom.container.find("[data-select='#']").toggleClass("disabled", (selected == 1 || selected == 0));

    that.dom.container.find("[data-select='1']").closest("li").toggleClass("disabled", selected != 1);
    that.dom.container.find("[data-select='*']").closest("li").toggleClass("disabled", selected == 0);
    that.dom.container.find("[data-select='0']").closest("li").toggleClass("disabled", 1 == 0);
    that.dom.container.find("[data-select='none']").closest("li").toggleClass("disabled", selected >= 1);
    that.dom.container.find("[data-select='#']").closest("li").toggleClass("disabled", (selected == 1 || selected == 0));
    var reorderBtn = $(".inbox-action-btns").find(".disabledReorderBtn");  //#89162 Re-order button gets disable
    if (reorderBtn)
        reorderBtn.removeClass("disabled").parent().removeClass("disabled");
}

xobni.prototype.disableButtons = function () {
    var that = this;
    that.dom.sideBar.find("a").prop("disabled", true);
    that.dom.sideBar.find("button").prop("disabled", true);
}

xobni.prototype.enableButtons = function () {
    var that = this;

    that.dom.sideBar.find("a").prop("disabled", false);
    that.dom.sideBar.find("button").prop("disabled", false);
}

xobni.prototype.refreshRecords = function () {
    var that = this;
    var refreshIndex = isFolderChanged ? ++that.refreshIndex : that.refreshIndex;
    isFolderChanged = false;
    that.dom.folders.find("li a > strong:not(.folderspinner)").remove();
    that.dom.folders.find("li a strong.folderspinner").show();
    if (that.dom.tablewrap.length > 0)
        var isFirstload = that.dom.tablewrap.html().trim() == 'LOADING...';
    else
        var isFirstload = false;
    //TODO: determine which loader to use row vs grid
    var rowLoader = "";
    if (that.settings.hideplaybookloader && that.settings.playbookloader != "") {
        rowLoader = that.settings.playbookloader;
        that.dom.container.closest(".active-panel").find(".main-panel").hide();
        that.dom.container.closest(".active-panel").find(".main-container-skeleton").show();
    }
    else
        rowLoader = '<h1 class="loading-section"><i class="fa fa-spinner fa-spin loader-size-md"></i></h1>';
    that.dom.tablewrap.removeClass("fadeInRight").html(rowLoader);
    that.dom.refresh.addClass("fa-spin");
    that.dom.footer.hide();
    that.updateButtons();
    that.disableButtons();
    if (that.settings.changeiconclass) {
        that.dom.sortbtn.find("i").removeClass("fas").addClass("fal");
        that.dom.searchbtn.find(".fa-search").removeClass("fa").addClass("fal");
        that.dom.quickaccess.find(".fa-filter").removeClass("fa").addClass("fal");
        that.dom.views.find(".fa-th-large, .fa-table").removeClass("fa").addClass("fal");
    }
    //searchtext = that.dom.search.val();
    var chkdata = that.dom.quickaccess.find(".togglecondition").is(":checked");
    $(".inbox-footer #errMsg").text('');

    var filters = [];
    that.dom.filterholder.find("li").each(function () {
        $this = $(this);
        filters.push($this.data("filter").toString());
    });
    if (that.settings.settingfilter)
        filters.push(...that.settings.defaultfilter); 
    $('.goto input').val("");
    var page = that.page;
    var searchContainerText = that.dom.searchcontainer.find(".header-search input:visible").val();
    if ((that.dom.container.find(".header-search input:visible").val() == "" || that.dom.container.find(".header-search input:visible").val() == undefined) && searchContainerText != undefined)
        searchtext = that.dom.searchcontainer.find(".header-search input:visible").val();

    else {
        if (searchtext != undefined)
            searchtext = that.dom.container.find(".header-search input:visible").val();
    }

    //It is to resolve common issue coming when there is searchcontainer defined, 
    if (searchtext === undefined) {
        if (that.dom.searchcontainer.find(".header-search input[visible=true]").val() != "" || that.dom.searchcontainer.find(".header-search input[visible=true]").val() != undefined) {
            if (searchtext != undefined)
                searchtext = that.dom.searchcontainer.find(".header-search input[visible=true]").val();
        }
        else
            searchtext = "";
    }
    if (that.settings.searchTarget != null && that.settings.searchTarget != '' && that.settings.searchTarget.val() != '')
            searchtext = that.settings.searchTarget.val();

    if (that.settings.defaultsearch != undefined && that.settings.defaultsearch != '' && that.settings.defaultsearch != "")
        searchtext = that.settings.defaultsearch;

    var data = $.extend({
        page: page,
        pageSize: that.settings.pagesize,
        sort: that.dom.sort.data("sort-column"),
        ascending: that.dom.sort.data("sort-asc"),
        search: searchtext,
        filters: filters,
        condition: chkdata,
        format: formatval,
        startdate: startdate,
        enddate: enddate,
        folder: that.folder,
        additionalsearchcolumns: that.settings.additionalsearchcolumns
    }, that.apidata);

    data.search = searchtext;
    for (var i = 0; i < that.settings.options.length; i++) {
        if (that.settings.options[i].type == "toggle") {
            if (that.settings.options[i].state === "on")
                data = $.extend(data, that.settings.options[i].on.data);
            else
                data = $.extend(data, that.settings.options[i].off.data);
        }
    }
    that.dom.pageleft.addClass("disabled");
    that.dom.pageright.addClass("disabled");
    that.data = [];
    if (typeof (that.dom.tablewrap.scheletrone) != "undefined")
        that.dom.tablewrap.scheletrone('stopLoader');
    if (that.settings.beforerefresh !== null)
        that.settings.beforerefresh(that);
    // If grid is marked as customizable, then we will check if any fields are selected for display
    if (that.settings.iscustomizable) {
        var shownFields = $.grep(fieldsArray, function (item, i) { return item.show == true }) //Determine which fields are marked for display
        // Proceed if fields to be shown are more than 0 and grid is not loaded yet.
        if (that.settings.fieldData.iscustom && (shownFields.length > 0 && !that.settings.fieldData.isloaded)) {
            that.settings.fieldData.isloaded = true;
            var fieldData = that.settings.fieldData
            var fieldArray = fieldData.fieldsArray;
            var hasCheckbox = fieldData.hascheckbox;

            // Take the HTML of the dynamic template
            var scriptElement = document.querySelector('#' + that.view.dynamictemplate);
            var scriptContent = scriptElement != null ? scriptElement.textContent : "";
            var parser = new DOMParser();
            var $dom = parser.parseFromString(scriptContent, 'text/html'); // Parse the html 
            var $tbody = $dom.getElementsByTagName("tbody")[0]; // take out the tbody from the html
            var isLoopUpdated = true;
            var nodes = document.getElementById("common_template").childNodes; 

            // Create the html from the newly added columns
            var $tbody = $dom.getElementsByTagName("tbody")[0];
            // Added looping for the elements to load
            $tbody.prepend("{{~it.item :value:index}}");
            var fields = ["name"];
            // create a html node and append in the tbody of xobni template
            $(fieldArray).each(function (j, item) {
                if (item.show) {
                    // determine whether header tag is present or not else add it.
                    var theadsLen = $dom.getElementsByTagName("th").length;
                    // determine the column number if specified to place it
                    item.columnnumber = item.columnnumber != undefined ? item.columnnumber + (theadsLen - 1) : item.columnnumber;
                    var $exisingThead = item.columnnumber != undefined ? $dom.querySelector('thead th:nth-child(' + item.columnnumber + ')') : $dom.querySelector('thead tr').lastElementChild;
                    $exisingThead = $exisingThead != null ? $exisingThead : $dom.querySelector('thead tr').lastElementChild;

                    /* Create Header Element - Start */
                    var $th = document.createElement("th");
                    $th.innerText = item.displayname;
                    if (item.headerclass != undefined)
                        $th.classList.add(...item.headerclass);
                    else if (item.regexformat == "number" || item.regexformat == "currency")
                        $th.classList.add("text-right");
                    var $thead = $dom.getElementsByTagName("thead")[0];
                    var $trHead = $thead.getElementsByTagName("tr")[0];
                    $trHead.insertBefore($th, $exisingThead);
                    /* Create Header Element - End */

                    /* Create TD element */
                    var $td = document.createElement("td");
                    if (item.tdclass != undefined) // add class to td if any
                        $td.classList.add(...item.tdclass);
                    else { // default classes 
                        $td.classList.add("inbox-data-date");
                        if (item.regexformat == "number" || item.regexformat == "currency")
                            $td.classList.add("text-right");
                    }
                    // city-state block
                    if (item.citystateblock) { 
                        $td.append(nodes[3].cloneNode(true));
                    }
                    else {
                        var $div = document.createElement("div");
                        // If database field is specified for the column 
                        if (item.dbfield != undefined) {
                            var $span = document.createElement("span");
                            $div.setAttribute("rel", "popover-hover");
                            $div.setAttribute("data-html", "true");
                            $div.setAttribute("data-placement", "left");

                            var val = "value." + item.dbfield;
                            // If field is calculated one where we need to provide hyperlink
                            if (item.iscalculatedCol) {
                                var $a = document.createElement("a");
                                $a.classList.add("primaryfontcolor", "cursor-pointer");
                                var $br = document.createElement("br");
                                if (item.extrafield != undefined) {
                                    if (item.iscurrency) { // if field is currency format it.
                                        var currencyField = "{{!formatMoney(value['" + item.extrafield + "'].toFixed())}} " + userCurrency;
                                        $a.append("{{!" + val + "}}");
                                        $a.append(document.createElement("br"));
                                        $a.append(currencyField);
                                    }
                                    else {
                                        $a.append("{{!" + val + "}}");
                                        $a.append($br);
                                        $a.append("{{!value['" + item.extrafield + "']}}");
                                    }
                                }
                                else if (item.name == "score") { // Added this specific for score as score values are shown in both Positive & negative, This will be useful in User, Org, Contacts grid.

                                    var $scoreSpan = document.createElement("span");
                                    $scoreSpan.classList.add("txt-color-green");
                                    $scoreSpan.append("+{{!" + val + "}}");

                                    var $redSpan = document.createElement("span");
                                    $redSpan.classList.add("txt-color-red");
                                    $redSpan.append("-{{!" + val + "}}");

                                    $span.append("{{?" + val + "> 0}}");
                                    $span.append($scoreSpan);
                                    $span.append("{{??}}");
                                    $span.append("{{?" + val + "< 0 }}");
                                    $span.append($redSpan);
                                    $span.append("{{??}}");
                                    $span.append("0");
                                    $span.append("{{?}}");
                                    $span.append("{{?}}");
                                }
                                else
                                    $a.innerText = "{{!" + val + "}}";
                                // Add the action if any specified.
                                if (item["data-action"] != undefined) {
                                    $a.setAttribute("data-action", item["data-action"]);
                                    if (item["data-action-item"] == "index" || item["data-action-item"] == undefined)
                                        $a.setAttribute('data-action-item', '{{=' + item["data-action-item"] + '}}');
                                    else
                                        $a.setAttribute('data-action-item', '{{!' + item["data-action-item"] + '}}');
                                }
                                if (item.name != "score") {
                                    $span.append("{{?" + val + "}}")
                                    $span.append($a);
                                    $span.append("{{??}}");
                                    if (item.iscurrency) {
                                        var currencyField = "{{!formatMoney(value['" + item.extrafield + "'].toFixed())}} " + userCurrency;
                                        $span.append("{{!" + val + "}}");
                                        $span.append(document.createElement("br"));
                                        $span.append(currencyField);
                                    }
                                    else
                                        $span.append("{{!" + val + "}}");
                                    $span.append("{{?}}");
                                }
                                if (item.tooltiptext != undefined)
                                    $div.setAttribute("data-content", item.tooltiptext + " {{!" + val + "}}");
                                else {
                                    if (item.extrafield != undefined) {
                                        if (item.iscurrency) {
                                            var $aTooltip = document.createElement("span");
                                            var currencyField = "{{!formatMoney(value['" + item.extrafield + "'].toFixed())}} " + userCurrency;
                                            $aTooltip.append("{{!" + val + "}}");
                                            $aTooltip.append($br);
                                            $aTooltip.append(currencyField);
                                            $div.setAttribute("data-content", $aTooltip.innerHTML);
                                        }
                                    }
                                    else
                                        $div.setAttribute("data-content", "{{!" + val + "}}");
                                }
                            }
                            else if (item.isboolvalue) { // If field is boolean one and have to display Yes/No
                                $span.append("{{?" + val + "}}");
                                $span.append('Yes');
                                $span.append("{{??}}");
                                $span.append('No {{?}}');
                            }
                            else if (item.valuefunction != undefined) { // If we have to display value on grid based on certain function.
                                $span.append("{{!" + item.valuefunction + "(" + val + ")}}");
                                $div.setAttribute("data-content", "{{!" + item.valuefunction + "(" + val + ")}}");
                            }
                            else {
                                // format date if format is datetime.
                                if (item.regexformat == "datetime" && !item.iscustom) {
                                    $div.setAttribute("data-content", item.displayname + " {{!longDateFromUTC(" + val + ")}}");
                                    $span.innerText = "{{! shortDateFromUTC(" + val + ")}}";
                                }
                                else {
                                    // If we are showing two field values in single column. like TotalOpp.(Opp. Amount)
                                    if (item.extrafield != undefined) {
                                        if (item.iscurrency) {
                                            var currencyField = "{{!formatMoney(value['" + item.extrafield + "'].toFixed())}}" + userCurrency;
                                            $span.innerText = "{{!" + val + "}}</br>" + currencyField;
                                        }
                                        else {
                                            $span.innerText = "{{!" + val + "}}</br>{{!value['" + item.extrafield + "']}}";
                                        }
                                    }
                                    else if (item.regexformat == "htmltextarea")
                                        $span.innerText = "{{?" + val + "}}{{=" + val + "}}{{??}}{{?}}";
                                    else {
                                        $span.innerText = "{{!" + val + "}}";
                                        if (item.tooltiptext != undefined && !item.iscustom)
                                            $div.setAttribute("data-content", item.tooltiptext + " {{!" + val + "}}");
                                        else
                                            $div.setAttribute("data-content", "{{!" + val + "}}");
                                    }
                                }
                                if (item["data-action"] != undefined) {
                                    $td.setAttribute("data-action", item["data-action"]);
                                    if (item["data-action-item"] != "index")
                                        $td.setAttribute('data-action-item', '{{!' + item["data-action-item"] + '}}');
                                    else
                                        $td.setAttribute('data-action-item', '{{=' + item["data-action-item"] + '}}');
                                }
                            }
                            $div.append($span);
                        }
                        else { // if database field is not provided and we have to get the value from afterload
                            var $span = document.createElement("span");
                            $span.setAttribute("rel", "popover-hover");
                            $span.setAttribute("data-html", "true");
                            $span.setAttribute("data-placement", "left");

                            if (item.id != undefined) {
                                $span.setAttribute("id", fieldData.id + item.id + "{{!value.id}}");
                            }

                            if (item.iscalculatedCol) {
                                if (item["data-action"] != undefined) {
                                    $span.setAttribute("data-action", item["data-action"]);
                                    if (item["data-action-item"] == "index" || item["data-action-item"] == undefined)
                                        $span.setAttribute('data-action-item', '{{=' + item["data-action-item"] + '}}');
                                    else
                                        $span.setAttribute('data-action-item', '{{!' + item["data-action-item"] + '}}');
                                }
                            }
                            $div.append($span);
                        }
                        if (item.divclass != undefined) {
                            $div.classList.add(...item.divclass);
                        }
                        if (item.regexformat == "text" || item.regexformat == "textarea" || item.regexformat == "htmltextarea")
                            $div.classList.add("multiline-trim");
                        $td.append($div);
                    }
                    if (!isLoopUpdated) {
                        isLoopUpdated = true;
                        var $tr = document.createElement("tr");
                        $tr.append($td);
                        $tbody.append("{{~it.item :value:index}}");
                        $tbody.append($tr);
                    }
                    else {
                        var $existingtr = item.columnnumber != undefined ? $dom.querySelector('tbody tr td:nth-child(' + item.columnnumber + ')') : $dom.querySelector('tbody tr').lastElementChild;
                        $existingtr = $existingtr != null ? $existingtr : $dom.querySelector('tbody tr').lastElementChild;
                        var $trBody = $tbody.getElementsByTagName("tr")[0];
                        $trBody.insertBefore($td, $existingtr);
                    }
                    if (item.dbfield != "city") {
                        if (item.dbfield != undefined)
                            fields.push(item.dbfield);
                        else
                            fields.push(item.name);
                    }
                }
                if ((fieldArray.length - 1) == j)
                    $dom.getElementsByTagName("tbody")[0].append("{{~}}");
            });
            var $xdiv = document.createElement("div");

            $xdiv.append($dom.documentElement.getElementsByTagName("table")[0]);

            $("#" + that.view.template).empty();
            var replacementMap = { '&amp;': '&', '&gt;': '>', '&lt;': '<' };
            var charactersToReplace = new RegExp(Object.keys(replacementMap).join('|'), 'g');
            var scriptHTML = $xdiv.innerHTML.replace(charactersToReplace, function (match) {
                return replacementMap[match];
            });
            document.getElementById(that.view.template).text = scriptHTML;
            that.settings.fields = fields;
        }
        else if (!that.settings.fieldData.iscustom) {
            if (that.settings.griddata.defaultexportfields != undefined)
                that.settings.fields = that.settings.griddata.defaultexportfields;
        }
    }
    tmpl.load(
        that.folder.api !== undefined ? that.folder.api : that.settings.api,
        data,
        that.folder.template !== undefined ? that.folder.template : that.view.template,
        that.dom.tablewrap,
        function (_data) { that.onLoadFolder(refreshIndex, _data); },
        function (_data) { that.onFailedLoadFolder(refreshIndex, _data); },
        that
    );
};

xobni.prototype.refreshFilters = function () {
    var that = this;

    if (that.settings.apifilter === undefined || that.settings.apifilter === null)
        return;

    var chkdata = that.dom.quickaccess.find(".togglecondition").is(":checked");

    var data = $.extend({
        condition: chkdata,
    }, that.filterdata);

    for (var i = 0; i < that.settings.options.length; i++) {
        if (that.settings.options[i].type == "toggle") {
            if (that.settings.options[i].state === "on")
                data = $.extend(data, that.settings.options[i].on.data);
            else
                data = $.extend(data, that.settings.options[i].off.data);
        }
    }
    that.data = [];
    if (that.settings.searchfilter != "")
        data = $.extend({searchfilter: that.settings.searchfilter},data);
    tmpl.load(
        that.settings.apifilter,
        data,
        that.settings.categorizeFilters ? "xobni_categorizefilters_V5" : "xobni_filters_V5",
        that.dom.quickaccess,
        function (_data) { that.onloadFilters(_data); },
        function () { that.onloadFiltersFailed(); },
        that
    );
};
var lastFilterTag = "";
xobni.prototype.onloadFilters = function (data) {
    var that = this;
    var isFilterDeleted = false;
    data.data.condition = isFiltersAndEnabled;
    that.dom.quickaccess.show();

    if (that.settings.customfilter?.length > 0  && data.length == 0)
        that.dom.quickaccess.hide();
    if (that.settings.categorizeFilters == false) {
    if (that.settings.changeiconclass)
        that.dom.quickaccess.find(".fa-filter").removeClass("fa").addClass("fal");
    var alphabets = getCharArray();
    that.dom.quickaccess.find(".togglecondition").eq(1).prop("checked", data.data.condition);
    for (var i = 0; i < alphabets.length; i++) {
        var $a = $("<a>");
        that.dom.quickaccess.find(".filter-tags").append($a.text(alphabets[i]).attr("value", alphabets[i]).addClass("cursor-pointer"));
    }
    that.dom.quickaccess.find(".filter-tags").on("click", function (e) {
        e.stopPropagation();
    });
    that.dom.quickaccess.find(".filter-tags a").on("click", function (e) {
        e.stopPropagation();
        $that = $(this);
        if ($that.parent().find(".active.bold").length > 0) {
            if (lastFilterTag != $that.text())
                that.dom.quickaccess.find(".filter-body").find("li div.disabled-tag").toggleClass("disabled-tag");
            that.dom.quickaccess.find(".filter-tags").find("a[value!='" + $that.text() + "']").removeClass("active bold");
        }
        $that.toggleClass("active bold");
        that.showTaggedFilters($that.text());
        lastFilterTag = $that.text();
    });

    that.dom.quickaccess.find(".filter-body .filter-toggle").off("click").on("click", function (e) {
        e.stopImmediatePropagation();
    });

    that.dom.quickaccess.find(".togglecondition").off("click").on("click", function (e) {
        e.stopImmediatePropagation();
        if (that.dom.quickaccess.find("li.active").length > 0)
            that.refreshRecords();
    });
    that.dom.quickaccess.find(".filter-body").find("[data-filter]").off("click").on("click", function (e) {
        that.page = 0;
        e.preventDefault();
        isFilterDeleted = true;
        var $this = $(this);
        if ($this.closest(".dropdown-large").hasClass("open")) {
            $this.closest("li").toggleClass("active");
            if ($this.closest("li").hasClass("active"))
                that.addRemoveSelectedFilters($this, true);
            else
                that.addRemoveSelectedFilters($this, false);
        }
        else {
            that.addRemoveSelectedFilters($this, false);
            $this.closest("li").removeClass("active")
        }
        that.refreshRecords();
        isFilterDeleted = false;
    });
    that.dom.filterholder.find("[data-filter]").off("click").on("click", function (e) {
        var $this = $(this);
        if (isFilterDeleted == false) {
            that.dom.filterholder.find("li[data-filter= " + $this.data('filter') + "]").remove();
            that.refreshRecords();
        }
    });

    that.dom.quickaccess.find(".filter-body").on("click", function (e) { e.stopImmediatePropagation();});

    that.dom.quickaccess.find(".clear-btn").on("click", function (e) {
        e.preventDefault();
        if (that.dom.quickaccess.find(".filter-body").find("li.active").length > 0) {
            that.dom.quickaccess.find(".filter-body").find("li.active").removeClass("active");
            that.dom.quickaccess.find(".filter-tags a").removeClass("active bold");
            that.dom.quickaccess.find(".filter-body ul li div.disabled-tag").removeClass("disabled-tag");
            that.dom.filterholder.empty();
            that.refreshRecords();
        }
        else if (that.dom.quickaccess.find(".filter-tags a.active").length > 0) {
            that.dom.quickaccess.find(".filter-tags a").removeClass("active bold");
            that.dom.quickaccess.find(".filter-body ul li div.disabled-tag").removeClass("disabled-tag");
            that.dom.filterholder.empty();
        }
        that.dom.quickaccess.find(".filter-search input").val("");
        that.dom.quickaccess.find('.dropdown-menu .btn-search').trigger("click");
    });
    that.dom.quickaccess.find('.filter-close .fa-times').off("click").on("click", function (e) {
        that.dom.quickaccess.removeClass("open");
    });

    that.dom.quickaccess.find('.dropdown-menu .btn-search').on('click', function (e) {
        e.stopImmediatePropagation();
        var filterText = that.dom.actionbtns.find('.dropdown-menu .header-search input').val();
        if (filterText != "") {
            that.settings.searchfilter = filterText;
            $(that.dom.quickaccess.find(".filter-body").find("li")).each(function (e, element) {
                $(element).show();
                var dataVal = $(element).find("input").attr("data-value");
                if (!dataVal.toLowerCase().includes(filterText.toLowerCase(), 0))
                    $(element).hide();
            });
            if (!$(that.dom.quickaccess).find(".filter-body").find("li").is(':visible')) {
                $(that.dom.quickaccess.find(".nodata")).removeClass("hidden");
                $(that.dom.quickaccess.find(".filter-toggle")).addClass("hidden");
            }
            else {
                $(that.dom.quickaccess.find(".nodata")).addClass("hidden");
                $(that.dom.quickaccess.find(".filter-toggle")).removeClass("hidden");
            }
        }
        else {
            $(that.dom.quickaccess.find(".filter-body").find("li")).css("display", "block");
            $(that.dom.quickaccess.find(".nodata")).addClass("hidden");
            $(that.dom.quickaccess.find(".filter-toggle")).removeClass("hidden");
        }
    });
    that.dom.quickaccess.find('.dropdown-menu .header-search input').on('click', function (e) {
        e.stopImmediatePropagation();
    });

    that.dom.quickaccess.find('.dropdown-menu .header-search input').on("keypress", function (e) {
        e.stopImmediatePropagation();
        var evt = (e.charCode) ? e.charCode : ((e.which) ? e.which : e.keyCode);
        if (evt == 13) {
            that.dom.actionbtns.find('.dropdown-menu .btn-search').trigger("click");
        }
    });

    that.dom.quickaccess.find('header').on("click", function (e) {
        e.stopPropagation();
    });

    that.dom.filterholder.find("li").each(function () {
        $this = $(this);
        var dataFilter = $(this).closest("li").attr("data-filter");
        that.dom.quickaccess.find("input[data-filter = " + dataFilter + "]").closest("li").addClass("active")
    });
    if (that.settings.hidedefaultfilter) {
        that.dom.quickaccess.find(".filtermenu-lg [data-value='" + that.settings.defaultfilter + "']").closest('li').addClass("hide");
    }
    if (that.settings.settingfilter) {
        $.each(that.settings.defaultfilter, function (index, filterValue) {
            that.dom.quickaccess.find(".filtermenu-lg [data-filter='" + filterValue + "']").closest('li').addClass("active disabled-me");
        });
    }
}
    else
{
    // on click of filter icon check if filter holder presents filter or not
    // remove the filters which are clicked but not present in filter holder
    that.dom.filterholder.find("li").each(function () {
        var $this = $(this);
        var filtertype = $this.attr('data-filtertype');
        if (filtertype != undefined) {
            var $checkbox = that.dom.quickaccess.find(".filter-body").find("input[data-filter= " + $this.attr('data-filter') + "][filtertype= '" + $this.attr('data-filtertype') + "']");
            $checkbox.closest("li").addClass("active");
            $checkbox.prop('checked', true);
        }
        else {
            var $checkbox = that.dom.quickaccess.find(".filter-body").find("input[data-filter= " + $this.attr('data-filter') + "]");
            $checkbox.closest("li").addClass("active");
            $checkbox.prop('checked', true);
        }
    });
    var alphabets = getCharArray();
    for (var i = 0; i < alphabets.length; i++) {
        var $a = $("<a>");
        that.dom.quickaccess.find(".filter-tags").append($a.text(alphabets[i]).attr("value", alphabets[i]).addClass("cursor-pointer"));
    }
    that.dom.quickaccess.find(".filter-tags").on("click", function (e) {
        e.stopPropagation();
    });
    that.dom.quickaccess.find(".filter-tags a").on("click", function (e) {
        e.stopPropagation();
        $that = $(this);
        if ($that.parent().find(".active.bold").length > 0) {
            if (lastFilterTag != $that.text())
                that.dom.quickaccess.find(".filter-body").find("li div.disabled-tag").toggleClass("disabled-tag");
            that.dom.quickaccess.find(".filter-tags").find("a[value!='" + $that.text() + "']").removeClass("active bold");
        }
        $that.toggleClass("active bold");
        that.showTaggedFiltersForCategorizedFilters($that.text());
        lastFilterTag = $that.text();
    });
    that.dom.quickaccess.find('.dropdown-menu .header-search input').on('click', function (e) {
        e.stopImmediatePropagation();
    });
    that.dom.quickaccess.find('.dropdown-menu .header-search input').on('input', function (e) {
        e.stopImmediatePropagation();
        if ($(this).val() == "") {
            $(that.dom.quickaccess.find(".filter-body").find("li")).css("display", "block");
            $(that.dom.quickaccess).find(".filter-body").find(".filter-title").css("display", "block");
            $(that.dom.quickaccess.find(".nodata")).addClass("hidden");
            $(that.dom.quickaccess.find("#tags-holderv5u")).removeClass("hidden");
            $(that.dom.quickaccess.find(".clear-btn")).removeClass("hidden");
        }
    });
    that.dom.quickaccess.find('.dropdown-menu .header-search input').on("keypress", function (e) {
        e.stopImmediatePropagation();
        var evt = (e.charCode) ? e.charCode : ((e.which) ? e.which : e.keyCode);
        if (evt == 13) {
            that.dom.quickaccess.find('.dropdown-menu .btn-search').trigger("click");
        }
    });
    that.dom.quickaccess.find('.dropdown-menu .btn-search').on('click', function (e) {
        e.stopImmediatePropagation();
        var filterText = that.dom.quickaccess.find('.dropdown-menu .header-search input').val();
        if (filterText != "") {
            that.settings.searchfilter = filterText;
            $(that.dom.quickaccess.find(".filter-body").find("li")).each(function (e, element) {
                $(element).show();
                var dataVal = $(element).find("input").attr("data-name");
                if (!dataVal.toLowerCase().includes(filterText.toLowerCase(), 0))
                    $(element).hide();
            });
            $(that.dom.quickaccess.find(".filter-body").find(".filter-title")).each(function () {
                if ($(this).find('li').filter(function () {
                    return $(this).css('display') != 'none';
                }).length == 0) {
                    $(this).hide();
                } else {
                    $(this).show();
                }
            });

            if ($(that.dom.quickaccess).find(".filter-body").find("li").filter(function () {
                return $(this).css('display') != 'none';
            }).length == 0) {
                $(that.dom.quickaccess.find(".nodata")).removeClass("hidden");
                $(that.dom.quickaccess.find("#tags-holderv5u")).addClass("hidden");
                $(that.dom.quickaccess.find(".clear-btn")).addClass("hidden");
            }
            else {
                $(that.dom.quickaccess.find(".nodata")).addClass("hidden");
                $(that.dom.quickaccess.find("#tags-holderv5u")).removeClass("hidden");
                $(that.dom.quickaccess.find(".clear-btn")).removeClass("hidden");
            }
        }
        else {
            $(that.dom.quickaccess.find(".filter-body").find("li")).css("display", "block");
            $(that.dom.quickaccess).find(".filter-body").find(".filter-title").css("display", "block");
            $(that.dom.quickaccess.find(".nodata")).addClass("hidden");
            $(that.dom.quickaccess.find("#tags-holderv5u")).removeClass("hidden");
            $(that.dom.quickaccess.find(".clear-btn")).removeClass("hidden");
        }
    });
    that.dom.quickaccess.on("click", function (event) {
        if (that.settings.customfilter?.length)
            that.dom.filterholder = that.dom.container.find(".selected-filters ul");
        if (!$(that.dom.quickaccess).find(".nodata").hasClass("hidden"))
            that.dom.quickaccess.find(".filter-tag-clear-btn").trigger('click');
        checkUncheckFilters(that.dom.quickaccess, that.dom.filterholder);
    });

    that.dom.quickaccess.find(".togglecondition").eq(1).prop("checked", data.data.condition);
    that.dom.quickaccess.find(".filter-body").on("click", function (event) {
        event.stopPropagation();
    });
    that.dom.quickaccess.find(".filter-close").on("click", function (e) {
        //UncheckFilters(that.dom.quickaccess, that.dom.filterholder);
        that.dom.quickaccess.removeClass("open");
    });

    //clear all selected filters and refresh the grid.
    that.dom.quickaccess.find(".clear-btn").on("click", function (e) {
        e.stopImmediatePropagation();
        that.dom.quickaccess.find(".filtermenu-lg .applyCategorizeFilters").attr("disabled", "disabled");
        that.dom.quickaccess.find(".clear-btn").addClass("hide");
        //get all checked filter check boxes
        that.dom.quickaccess.find(".filter-body").find("input[data-filter]:checkbox:checked").each(function () {
            var $this = $(this);
            $this.closest("li").removeClass("active"); // remove active class of li which contains checked filter checkbox
            $this.prop('checked', false);
        });
        that.dom.quickaccess.find(".filter-tag-clear-btn").trigger("click");
        //refresh grid only when the any filter is applied
        if (that.dom.filterholder.find('li').length > 0) {
            that.dom.filterholder.html('');  // remove all filter which are selected 
            that.refreshRecords();
        }

    });
    that.dom.quickaccess.find(".filter-tag-clear-btn").on("click", function (e) {
        e.stopImmediatePropagation();
        if (that.dom.quickaccess.find(".filter-tags a.active").length > 0) {
            that.dom.quickaccess.find(".filter-tags a").removeClass("active bold");
            that.dom.quickaccess.find(".filter-body ul li div.disabled-tag").removeClass("disabled-tag");
        }
        that.dom.quickaccess.find(".filter-search input").val("");
        that.dom.quickaccess.find('.dropdown-menu .btn-search').trigger("click");
    });
    //belwo click event to handle the add active class on li which filter is select or de-select
    that.dom.quickaccess.find(".filter-body").find("input[data-filter]").off("click").on("click", function (e) {
        var $this = $(this);
        if ($this.closest("li").hasClass("active"))
            $this.closest("li").removeClass("active");
        else
            $this.closest("li").addClass("active");

        hideShowFilterWindowButtons(that.dom.quickaccess, that.dom.filterholder);
    });

    // below click event is for applay filter button
    that.dom.quickaccess.find(".filtermenu-lg .applyCategorizeFilters").off("click").on("click", function (e) {
        that.dom.filterholder.html(''); // remove all filter which are selected 
        that.dom.quickaccess.find(".filter-body").find("input[data-filter]:checkbox:checked").each(function () {
            var $this = $(this);
            if ($this.closest("li").hasClass("active")) {
                if (that.dom.filterholder.find("li[data-filter=" + $this.data("filter") + "]").length <= 0)
                    that.addRemoveSelectedFilters($this, true, $this.attr("filtertype"));
                else
                    that.dom.filterholder.find("li[data-filter=" + $this.data("filter") + "]").removeAttr("data-filtertype");
            }
            else
                that.addRemoveSelectedFilters($this, false, $this.attr("filtertype"));

        });
        //remove button click event to remove selected filter
        that.dom.filterholder.find("[data-filter] .fa-times-circle").off("click").on("click", function (e) {
            var $this = $(this).closest("li");
            that.dom.filterholder.find("li[data-filter= " + $this.attr('data-filter') + "]").remove();
            that.dom.quickaccess.find("input[data-filter = " + $this.attr('data-filter') + "]:checkbox:checked").closest("li").removeClass('active');
            that.dom.quickaccess.find("input[data-filter = " + $this.attr('data-filter') + "]:checkbox:checked").prop('checked', false);
            that.dom.quickaccess.find(".filtermenu-lg .applyCategorizeFilters").attr("disabled", "disabled");
            that.dom.quickaccess.find(".filter-tag-clear-btn").trigger("click");
            that.refreshRecords();

        });
        that.page = 0; // reset page to 0
        that.refreshRecords();
        that.dom.quickaccess.removeClass("open");
    });

}
}

xobni.prototype.addRemoveSelectedFilters = function ($this, isAdd, filtertype) {
    var that = this;
    if (isAdd) {
        var $li = $("<li>");
        $li.attr("data-filter", $this.data("filter"));
        $li.attr("data-filter", $this.data("filter"));
        if (filtertype != undefined)
            $li.attr("data-filtertype", filtertype);
        $a = $("<a>");
        $i = $("<i>");
        $i.addClass("fa fa-times-circle");
        $a.append($this.next().text());
        $a.append("&nbsp;")
        $a.append($i);
        $li.append($a);
        that.dom.filterholder.append($li);

        $i.on("click", function (e) {
            var dataFilter = $(this).closest("li").attr("data-filter");
            that.dom.quickaccess.find("input[data-filter = " + dataFilter + "]").trigger("click");
        });
    }
    else {
        that.dom.filterholder.find("li[data-filter= " + $this.data('filter') + "]").remove();
    }
}

xobni.prototype.onloadFiltersFailed = function (refreshIndex, data) {
    var that = this;
    if (that.refreshIndex != refreshIndex)
        return;

    that.dom.quickaccess.hide();
}

xobni.prototype.checkToggleAll = function () {

    var that = this;

    if (that.dom.tablewrap.find("thead tr > th input").is(":checked")) {
        that.uncheckAll();
        _allselected = false;
    }
    else {
        that.checkAll();
        _allselected = true;
    }

    that.updateButtons();

}

xobni.prototype.checkToggleDisableAll = function () {
    var that = this;
    if (that.dom.tablewrap.find("thead tr > th input").is(":checked")) {
        that.uncheckAll();
        _allselected = false;
    }
    else {
        if (that.dom.tablewrap.find("tbody tr > td input").is(":disabled")) {
            that.dom.tablewrap.find("thead tr > th input").prop("checked", true);
            that.dom.tablewrap.find("tbody tr > td input:not(:checked)").prop("checked", true);
            that.dom.tablewrap.find("tbody tr").addClass("highlight");
            that.dom.tablewrap.find("tbody tr > td input:disabled").prop("checked", false);
            that.dom.tablewrap.find("tbody tr").removeClass("highlight");
        }
        else {
            that.dom.tablewrap.find("thead tr > th input").prop("checked", true);
            that.dom.tablewrap.find("tbody tr > td input:not(:checked)").prop("checked", true);
            that.dom.tablewrap.find("tbody tr").addClass("highlight");
        }
        _allselected = true;
    }

    that.updateButtons();
}

xobni.prototype.checkAll = function () {
    var that = this;

    that.dom.tablewrap.find("thead tr > th input").prop("checked", true);
    that.dom.tablewrap.find("tbody tr > td input:not(:checked)").prop("checked", true);
    that.dom.tablewrap.find("tbody tr").addClass("highlight");
}

xobni.prototype.uncheckAll = function () {
    var that = this;

    that.dom.tablewrap.find("thead tr > th input").prop("checked", false);
    that.dom.tablewrap.find("tbody tr > td input:checked").prop("checked", false);
    that.dom.tablewrap.find("tbody tr").removeClass("highlight");
}

xobni.prototype.confirm = function (args) {
    var that = this;

    $.OpenSmartMessageBox2({ title: args.title, content: args.content, buttons: '[No][Yes]' },
        function (result) {
            if (result === 'Yes') {
                $(".MessageBoxButtonSection button").addClass("disabled");
                $(".MessageBoxButtonSection button:last").html('<i class="fa fa-spinner fa-lg fa-spin"></i>');

                //if (_xobni.view.name === "List") { //fancy slide out
                //    _xobni.dom.tablewrap.find("input[type='checkbox']:checked").each(function () {
                //        $(this).parents("tr").rowslide();
                //    });
                //}

                api.call(args.api, args.apidata, function (r) {
                    args.success = $.extend({
                        title: "Success",
                        content: null,
                        color: "#659265",
                        iconSmall: "fa fa-check fa-2x fadeInRight animated",
                        timeout: 4000
                    }, args.success);

                    if (args.content !== null) {
                        $.smallBox({
                            title: args.success.title,
                            content: args.success.content,
                            color: args.success.color,
                            iconSmall: args.success.iconSmall,
                            timeout: args.success.timeout
                        });
                    }
                    $.CloseSmartMessageBox2();
                    //if (_xobni.view.name !== "List")
                    that.refresh();
                    if (args.success.func != undefined)
                        args.success.func(r);
                }, function (r) {
                    //TODO failed api call
                });

            }
            else {
                if (that.data.length > 0) {
                    that.refresh();
                }
                $.CloseSmartMessageBox2();
            }
        }
    );
}

xobni.prototype.showTaggedFilters = function (args) {
    var that = this;
    that.dom.quickaccess.find(".filter-body").find("input:not([data-value^='" + args.toLowerCase() + "']):not('.togglecondition')").parent().toggleClass("disabled-tag");
   // that.dom.quickaccess.find(".filter-tags").find("a:not([value^='" + args + "'])").toggleClass("disabled-tag");
}

xobni.prototype.showTaggedFiltersForCategorizedFilters = function (args) {
    var that = this;
    that.dom.quickaccess.find(".filter-body").find("input:not('.togglecondition')").filter(function () {
            var dataName = $(this).attr('data-name') || "";
            return !dataName.toLowerCase().startsWith(args.toLowerCase());
        }).parent(":not(.header-search)").toggleClass("disabled-tag");
}
//xobni.prototype.tableHeightSize = function () {
//    //// Uncommented code, as we need height for table-wrap div specially in modal 
//    //var that = this;
//    //if ($.mobileApp == false) {
//    //    if (that.settings.fixedheight === 'true') {
//    //        var tableHeight = $(window).height() - (212 - 49);
//    //        if (that.dom.tablewrap.hasClass("hide-title"))
//    //            tableHeight += 60;

//    //        if (tableHeight < 320) {
//    //            that.dom.tablewrap.css('height', (320 + 49) + 'px');
//    //        } else {
//    //            that.dom.tablewrap.css('height', tableHeight + 'px');
//    //        }

//    //        that.dom.container.find('.inbox-filters').css('height', (tableHeight - (300 + 40)) + 'px');
//    //    };
//    //}
//}
xobni.prototype.deselectAll = function () {
    var that = this;
    that.dom.tablewrap.find("input[type='checkbox']:checked").prop("checked", false);//uncheck row, so it won't populate data
    that.dom.tablewrap.find("tr").removeClass("highlight"); //removes highlight class from all rows
    that.updateButtons();
}
$(window).on("resize", function () {
    //$(".inbox-fixed-height div.table-wrap").each(function () {
    //    var $this = $(this);
    //    var tableHeight = $(window).height() - (212 - 49);

    //    if ($this.hasClass("hide-title"))
    //        tableHeight += 60;       

    //    if (tableHeight < 320) {
    //        $this.css('height', (320 + 49) + 'px');
    //    } else {
    //        $this.css('height', tableHeight + 'px');
    //    }

    //    $this.parent().find(".inbox-filters").css('height', (tableHeight - 300) + 'px');
    //});
})

//Start - Mouse over content
function getHoverTitle(data) {
    if (data.profileoptimized != "null")
        return "<img src=" + data.profileoptimized + " style='width:100px;max-height:100px;'/>";
    else
        return "<i class='fa fa-fl fa-user txt-color-orange' style='font-size:70px;'></i>";
}

function getContactInterest(intereststatus) {
    return (intereststatus != null && intereststatus != "") ? intereststatus.replace(' ', '').toLowerCase() : "";
}

function GetInterestColor(interesttype) {
    var str = "";
    switch (interesttype.toLowerCase()) {
        case "active":
            str = "#C05C1A";
            break;
        case "notsure":
            str = "#C0C1C5";
            break;
        case "other":
            str = "#CCC691";
            break;
        case "hot":
            str = "#E50909";
            break;
        case "closed":
            str = "#100F0F";
            break;
        case "high":
            str = "#32B12C";
            break;
        case "medium":
            str = "#4DB9FD";
            break;
        case "low":
            str = "#DBCA00";
            break;
        case "notinterested":
            str = "#100F0F";
            break;
    }
    return str;
}

function getVideoThumbnail($element, url, selectedObject, isSalesPlaybook) {
    if (url.indexOf('youtube.com') > -1) {
        var uri = getVideoURL(url);
        if (uri.length > 0)
            thumb = uri[0] + '//i2.ytimg.com/vi/' + uri[1] + '/hqdefault.jpg';
         $element.attr('src', thumb);
    }
    else if (url.indexOf('vidyard.com') > -1) {
        var uri = getVideoURL(url);
        if (uri.length > 0)
            thumb = uri[0] + "//play.vidyard.com/" + uri[1] + ".jpg";
        $element.attr('src', thumb);
    }
    else if (url.indexOf('wistia.com') > -1) {
        var thumb = url + ".jpg";
        $element.attr('src', thumb);
    }
    else if (url.indexOf('wistia.net') > -1 && isSalesPlaybook == 1) {
        $.ajax({
            url: '//fast.wistia.net/oembed?url=' + url + "?embedType=async&videoWidth=640",
            dataType: 'json',
            async: false,
            success: function (data) {
                var thumb = data.thumbnail_url != undefined ? data.thumbnail_url : "//partner-marketing.bitdefender.com/v4u/img/video.jpg";
                return $element.attr('src', thumb);
            },
            error: function () {
                var thumb = "https://partner-marketing.bitdefender.com/v4u/img/video.jpg";
                $element.attr('src', thumb);
            }
        });
    }
    else if (url.indexOf('wistia.net') > -1) {
        $.ajax({
            url: '//fast.wistia.net/oembed?url=' + url + "?embedType=async&videoWidth=640",
            dataType: 'jsonp',
            success: function (data) {
                var thumb = data.thumbnail_url != undefined ? data.thumbnail_url : "//partner-marketing.bitdefender.com/v4u/img/video.jpg";
                $element.attr('src', thumb);
            },
            error: function () {
                var thumb = "https://partner-marketing.bitdefender.com/v4u/img/video.jpg";
                $element.attr('src', thumb);
            }
        });
    }
    else if (url.indexOf('videos.amp.vg') > -1) {
        var thumb = url.replace('.flv', '.png');
        $element.attr('src', thumb);
    }
    else if (url.indexOf('vimeo.com') > -1) {
        id = url.split('/')[4];

        $.ajax({
            url: 'https://vimeo.com/api/oembed.json?url=' + url,
            dataType: 'jsonp',
            success: function (data) {
                var thumb = data.thumbnail_url != undefined ? data.thumbnail_url : "//partner-marketing.bitdefender.com/v4u/img/video.jpg";
                $element.attr('src', thumb);
                var $selectedObject = selectedObject;       //for web & web banner template,for vimeo video ,set properties of snapshoturl
                if (selectedObject != null) {
                    editor.setcustomproperty($selectedObject, "snapshoturl", thumb);
                    $selectedObject.find("#objectCustomProperties").attr("snapshoturl", thumb);
                }
            },
            error: function () {
                var thumb = "https://partner-marketing.bitdefender.com/v4u/img/video.jpg";
                $element.attr('src', thumb);
            }
        });
    }
    else {
        var thumb = "https://partner-marketing.bitdefender.com/v4u/img/video.jpg";
        $element.attr('src', thumb);
    }
}

function getVideoURL(url) {
    var uriArr = [];
    uri = $('<a>').prop('href', url);

    protocol = $(uri).prop('protocol');
    if (protocol != null && protocol != undefined && protocol != '')
        uriArr.push(protocol);

    id = url.split('/')[4];

    if (id == null || id == undefined || id == '') { //some of the vidyard videos are having id at 3 index
        id = url.split('/')[3];
        if (id !== undefined)
            id = id.split('?')[0];
    }

    if (id != null && id != undefined && id != '') {
        if (id.indexOf('?') > -1)
            id = id.slice(0 , id.length-1)
        uriArr.push(id);
    }

    return uriArr;
}

function isSelected(id) {
    for (var i = 0; i < listIds.length; i++) {
        if (listIds[i] == id)
            return "highlight";
    }
    return "";
}
function isSelectedCheck(id, obj) {
    for (var i = 0; i < listIds.length; i++) {
        if (listIds[i] == id)
            return "checked=checked";
    }
    return "";
}

function getHoverContent(data) {
    var fstname = data.firstname == null ? "" : data.firstname.replace(/("|'|-|,)/g, "");
    var lstname = data.lastname == null ? "" : data.lastname.replace(/("|'|-|,)/g, "");
    var city = data.city == null ? "" : data.city.replace(/("|'|-|,)/g, "");
    var state = data.state == null ? "" : data.state.replace(/("|'|-|,)/g, "");
    var country = data.country == null ? "" : data.country.replace(/("|'|-|,)/g, "");
    var mobile = data.mobilenumber == null ? "" : data.mobilenumber.replace(/("|'|,)/g, "");
    var work = data.worknumber == null ? "" : data.worknumber.replace(/("|'|,)/g, "");
    var comments = data.comments == null ? "" : data.comments.replace(/("|'|,)/g, "");
    var email = data.email == null ? "" : data.email;
    var unsubscribed = data.unsubscribe_email == null ? "" : data.unsubscribe_email ? 'Yes' : 'No';
    var contactcompany = data.contactcompany == null ? "" : data.contactcompany.replace(/("|'|-|,)/g, "");
    var name = fstname != "" ? (lstname != "" ? lstname + ", " + fstname : fstname) : (lstname != "" ? lstname : 'No Name');
    //setting location value
    var comma = "";
    if (city != "" && city != " " && state != "" && state != " ")
        comma = ", ";
    var location = city + comma + state + " " + country;

    //settings for displaying profile image
    if (data.profileimage != null || data.profileoptimized != "null") {
        if (data.profileimage != null) {
            var thumb = data.profileimage.thumbnail400;
        }
        else {
            var thumb = data.profileoptimized;
        }

        if (thumb) {
            var img = "<div class='popover-thumbnail cust-img-box'><img src='" + thumb + "' style='max-height:100%;' /></div>";
        }
        else {
            var thumb = "fas fa-fw fa-user-alt";
            var img = "<div class='popover-thumbnail cust-img-box' style='background: #ddd;padding: 10px;' ><i class='" + thumb + "' style='font-size: 70px;'></i></div>";
        }
    }
    else {
        var thumb = "fas fa-fw fa-user-alt";
        var img = "<div class='popover-thumbnail cust-img-box' style='background: #ddd;padding: 10px;' ><i class='" + thumb + "' style='font-size: 70px;'></i></div>";
    }

    var $strong = $('<strong>');
    $strong.append(img);
    //setting phone value
    comma = "";
    if (mobile != "" && work != "")
        comma = ", ";
    var phone = mobile + comma + work;

    //setting comments value 
    if (comments == undefined || comments == null)
        comments = "";
    if (comments.length > 150)
        comments = comments.substring(0, 150) + '...';
    var createdbyname = data.createdbyname
    if (data.createdbycompanyname != "" && data.createdbycompanyname != undefined)
        createdbyname = createdbyname + "</br><i>@" + data.createdbycompanyname + "</i>";

    var ownerbyname = data.ownerbyname
    if (data.ownerbycompanyname != "" && data.createdbycompanyname != undefined)
        ownerbyname = ownerbyname + "</br><i>@" + data.ownerbycompanyname + "</i>";

    var label = ['Name', 'Location', 'Email', 'Phone', 'Company', 'Comment', 'Creator', 'Owner', 'Interest', 'Created On', 'Updated On', 'Unsubscribed'];//label array
    var value = [name, location, email, phone, contactcompany, comments, createdbyname, ownerbyname, data.intereststatus, longDateFromUTC(data.createdon), longDateFromUTC(data.updatedon), unsubscribed];//value array

    for (var i = 0; i < label.length; i++) {
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
            var $div = $('<div>').addClass('font-xs').css({ "max-width": "100%", "word-wrap": "break-word" }).text(value[i]);
            $strong.append($span);
            $strong.append($div);
        }
    }

    return $strong.html().replace(/"/g, '\'');
}
function getAccountsHoverContent(data) {
    var name = data.name == null ? "" : data.name.replace(/("|'|-|,)/g, "");
    var city = data.city == null ? "" : data.city.replace(/("|'|-|,)/g, "");
    var state = data.state == null ? "" : data.state.replace(/("|'|-|,)/g, "");
    var country = data.country == null ? "" : data.country.replace(/("|'|-|,)/g, "");
    var origin = data.origin == null ? "" : data.origin.replace(/("|'|-|,)/g, "");
    //setting location value
    var comma = "";
    if (city != "" && city != " " && state != "" && state != " ")
        comma = ", ";
    var location = city + comma + state + " " + country;

    var createdbyname = data.createdbyname
    if (data.createdbycompanyname != "" && data.createdbycompanyname != undefined)
        createdbyname = createdbyname + "</br><i>@" + data.createdbycompanyname + "</i>";

    if (origin == null || origin == undefined || origin == "")
        origin = 'Not Known';

    var label = ['Name', 'Location', 'Creator', 'Created On', 'Updated On', 'Origin' ];//label array
    var value = [name, location, createdbyname, longDateFromUTC(data.createdon), longDateFromUTC(data.updatedon), origin];//value array

    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
            var $div = $('<div>').addClass('font-xs').css({ "max-width": "100%", "word-wrap": "break-word" }).text(value[i]);
            $strong.append($span);
            $strong.append($div);
        }
    }

    return $strong.html().replace(/"/g, '\'');
}
function totalPlaybookCountHover(val) {
    var sales = val.totalplaybooksales == null ? "" : val.totalplaybooksales;
    var marketing = val.totalplaybookmarketing == null ? "" : val.totalplaybookmarketing;
    var onboarding = val.totalplaybookonboarding == null ? "" : val.totalplaybookonboarding;
    var label = ['Sales', 'Marketing', 'Onboarding'];
    var value = [sales, marketing, onboarding];
    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
            var $div = $('<div>').addClass('font-xs').css({ "max-width": "100%", "word-wrap": "break-word" }).text(value[i]);
            $strong.append($span);
            $strong.append($div);
        }
    }
    return $strong.html().replace(/"/g, '\'');
}
function getHoverTitlev5(data) {

    var fullname = data.fullname == null ? "" : data.fullname.split(" ");
    var fstname = fullname[0] == undefined ? "" : fullname[0];
    var lstname = fullname[1] == undefined ? "" : fullname[1];
    var name = fstname + " " + lstname;
    var usericontext = "";



    if (data.profileoptimized != "null") { var $userimg = $("<img>").attr('src', data.profileoptimized); }
    else { if (name == " ") { usericontext = "NN"; } else { usericontext = fstname.trim().charAt(0) + lstname.trim().charAt(0); } }

    var email = data.email == null ? "" : data.email;
    var $userDiv = $("<div>").addClass('user-icon');
    var $usericon = $("<b>").text(usericontext);
    var $rightDiv = $("<div>").addClass('right-side');
    var $userName = $("<h3>").text(name);
    var $userEmail = $("<p>").text(email);
    var $content = $("<div>");

    $content.append($userDiv);
    $userDiv.append($userimg);
    $userDiv.append($usericon);
    $content.append($rightDiv);
    $rightDiv.append($userName);
    $rightDiv.append($userEmail);

    return $content[0].innerHTML;
}

function getUserHoverTitlev5(data){
    var usericontext = "";
    var username = data.username == null ? "" : data.username.split(" ");
    var fstname = username[0] == undefined ? "" : username[0];
    var lstname = username[1] == undefined ? "" : username[1];
    var name = fstname + " " + lstname;
    if (data.profileoptimized != "null") { var $userimg = $("<img>").attr('src', data.profileoptimized); }
    else { if (name == " ") { usericontext = "NN"; } else { usericontext = fstname.trim().charAt(0) + lstname.trim().charAt(0) } }

    var email = data.email == null ? "" : data.email;
    var $userDiv = $("<div>").addClass('user-icon');
    var $usericon = $("<b>").text(usericontext);
    var $rightDiv = $("<div>").addClass('right-side');
    var $userName = $("<h3>").text(name);
    var $userEmail = $("<p>").text(email);
    var $content = $("<div>");

    $content.append($userDiv);
    $userDiv.append($userimg);
    $userDiv.append($usericon);
    $content.append($rightDiv);
    $rightDiv.append($userName);
    $rightDiv.append($userEmail);

    return $content[0].innerHTML;
}

function getHoverContentv5(data) {

    var email = data.email == null ? "" : data.email;
    var $div = $("<div>");

    /* Set Creator Details */
    var $divCreator = $('<div>').addClass('popover-content-box');
    var $creator = $("<h6>").text('Creator');
    var createdbyname = data.createdbyname.split(" ");
    var createdbyLastName = createdbyname[0] == undefined ? "" : createdbyname[0].replace(/,/g, '');
    var createdbyFirstName = createdbyname[1] == undefined ? "" : createdbyname[1];
    var createdbyEmail = createdbyname[2] == undefined ? "" : createdbyname[2].replace(/[()]/g, '');
    var $creatorName = $("<h5>").text(createdbyFirstName + " " + createdbyLastName);
    var $emailCreatorP = $("<p>").text(createdbyEmail);
    var $compCreator = $("<p>").text(data.createdbycompanyname);

    $div.append($divCreator);
    $divCreator.append($creator);
    $divCreator.append($creatorName);
    $divCreator.append($emailCreatorP);
    $divCreator.append($compCreator);

    /* Set Owner Details */
    var $divOwner = $('<div>').addClass('popover-content-box');
    var $owner = $("<h6>").text('Owner');
    var ownerbyname = data.ownerbyname.split(" ");
    var ownerbyLastName = ownerbyname[0] == undefined ? "" : ownerbyname[0].replace(/,/g, '');
    var ownerbyFirstName = ownerbyname[1] == undefined ? "" : ownerbyname[1];
    var ownerbyEmail = ownerbyname[2] == undefined ? "" : ownerbyname[2].replace(/[()]/g, '');
    var $ownerName = $("<h5>").text(ownerbyFirstName + " " + ownerbyLastName);
    var $emailOwnerP = $("<p>").text(ownerbyEmail);
    var $compOwner = $("<p>").text(data.ownerbycompanyname);

    $div.append($divOwner);
    $divOwner.append($owner);
    $divOwner.append($ownerName);
    $divOwner.append($emailOwnerP);
    $divOwner.append($compOwner);

    var $divIneterst = $('<div>').addClass('popover-content-box');
    var $interest = $("<h6>").text('Interest');
    var $interestP = $("<p>").text(data.intereststatus);

    /* Set Interest Color */
    if (data.intereststatus != undefined && data.intereststatus != null) {

        if (data.intereststatus.indexOf("Active") > -1) {
            $interestP.addClass('intereststatus-active');
        }
        if (data.intereststatus.indexOf("Not Sure") > -1) {
            $interestP.addClass('intereststatus-notsure');
        }
        if (data.intereststatus.indexOf("Other") > -1) {
            $interestP.addClass('intereststatus-other');
        }
        if (data.intereststatus.indexOf("Hot") > -1) {
            $interestP.addClass('intereststatus-hot');
        }
        if (data.intereststatus.indexOf("Closed") > -1) {
            $interestP.addClass('intereststatus-closed');
        }
        if (data.intereststatus.indexOf("High") > -1) {
            $interestP.addClass('intereststatus-high');
        }
        if (data.intereststatus.indexOf("Medium") > -1) {
            $interestP.addClass('intereststatus-medium');
        }
        if (data.intereststatus.indexOf("Low") > -1) {
            $interestP.addClass('intereststatus-low');
        }
        if (data.intereststatus.indexOf("Not Interested") > -1) {
            $interestP.addClass('intereststatus-notinterested');
        }
    }
    $div.append($divIneterst);
    $divIneterst.append($interest);
    $divIneterst.append($interestP);

    var $divCreateInfo = $('<div>').addClass('popover-content-box footer');
    var $createdOn = $("<h6>").text('Created On');
    var $createdOns = $("<h6>").addClass("fontMedium");
    var $createdOnP = "";

    /* Set Date Time Format */
    var createdOnDetails = longDateFromUTC(data.createdon);
    if (createdOnDetails != null && createdOnDetails != undefined) {
        $createdOnP = $("<p>").text(createdOnDetails);
    }
    $div.append($divCreateInfo);
    $divCreateInfo.append($createdOn);
    $divCreateInfo.append($createdOns);
    $divCreateInfo.append($createdOnP);
    return $div[0].innerHTML;
}

function getPlaybookHoverTitlev5(data) {
    var name = "";
    var userIconText = "";
    if (data.firstname != null) {
        name = data.firstname.trim();
    }
    if (data.lastname != null) {
        name += " " + data.lastname.trim();
    }
    if (data.firstname == null && data.lastname == null) {
        name = "";
    }

    if (data.profileoptimized != "null") { var $userimg = $("<img>").attr('src', data.profileoptimized); }
    if (data.firstname != null) {
        userIconText = data.firstname.trim().charAt(0);
    }
    if (data.lastname != null) {
        userIconText += data.lastname.trim().charAt(0);
    }
    if (data.firstname == null && data.lastname == null) {
        userIconText = "NN";
    }
    var email = data.email == null ? "" : data.email;
    var $userDiv = $("<div>").addClass('user-icon');
    var $userIcon = $("<b>").text(userIconText);
    var $rightDiv = $("<div>").addClass('right-side');
    var $userName = $("<h3>").text(name);
    var $userEmail = $("<p>").text(email);
    var $content = $("<div>");

    $content.append($userDiv);
    if (data.profileoptimized != "null")
        $userDiv.append($userimg);
    else
        $userDiv.append($userIcon);
    $content.append($rightDiv);
    $rightDiv.append($userName);
    $rightDiv.append($userEmail);

    return $content[0].innerHTML;
}
function getPlaybookHoverContentV5(data) {
    var $div = $("<div>");

    /* Set Phone Details */
    var mobile = data.mobilenumber == null ? "" : data.mobilenumber.replace(/("|'|,)/g, "");
    var work = data.worknumber == null ? "" : data.worknumber.replace(/("|'|,)/g, "");
    comma = "";
    if (mobile != "" && work != "")
        comma = ", ";
    var phone = mobile + comma + work;
    var $divPhone = $('<div>').addClass('popover-content-box');
    var $phone = $("<h6>").text('Phone');
    var $contactPhone = $("<h5>").text(phone);
    $div.append($divPhone);
    $divPhone.append($phone);
    $divPhone.append($contactPhone);

    /* Set Company Details */
    var contactCompany = data.contactcompany == null ? null : data.contactcompany.replace(/("|'|-|,)/g, "")
    if (contactCompany == null)
        contactCompany = "";
    var $divCompany = $('<div>').addClass('popover-content-box');
    var $company = $("<h6>").text('Company');
    var $contactCompany = $("<h5>").text(contactCompany);
    $div.append($divCompany);
    $divCompany.append($company);
    $divCompany.append($contactCompany);

    if (data.comments != null) {
        var comment = data.comments;
        var $divComment = $('<div>').addClass('popover-content-box');
        var $comment = $("<h6>").text('Comment');
        var $contactComment = $("<h5>").text(comment);
        $div.append($divComment);
        $divComment.append($comment);
        $divComment.append($contactComment);
    }

    /* Set Creator Details */
    var $divCreator = $('<div>').addClass('popover-content-box');
    var $creator = $("<h6>").text('Creator');
    var createdByName = data.createdbyname.split(" ");
    var createdByLastName = createdByName[0] == undefined ? "" : createdByName[0].replace(/,/g, '');
    var createdByFirstName = createdByName[1] == undefined ? "" : createdByName[1];
    var createdByEmail = createdByName[2] == undefined ? "" : createdByName[2].replace(/[()]/g, '');
    var $creatorName = $("<h5>").text(createdByLastName + " " + createdByFirstName);
    var $emailCreatorP = $("<p>").text(createdByEmail);
    var $compCreator = $("<p>").text(data.createdbycompanyname);

    $div.append($divCreator);
    $divCreator.append($creator);
    $divCreator.append($creatorName);
    $divCreator.append($emailCreatorP);
    $divCreator.append($compCreator);

    /* Set Owner Details */
    var $divOwner = $('<div>').addClass('popover-content-box');
    var $owner = $("<h6>").text('Owner');
    var ownerByName = data.ownerbyname.split(" ");
    var ownerByLastName = ownerByName[0] == undefined ? "" : ownerByName[0].replace(/,/g, '');
    var ownerByFirstName = ownerByName[1] == undefined ? "" : ownerByName[1];
    var ownerByEmail = ownerByName[2] == undefined ? "" : ownerByName[2].replace(/[()]/g, '');
    var $ownerName = $("<h5>").text(ownerByLastName + " " + ownerByFirstName);
    var $emailOwnerP = $("<p>").text(ownerByEmail);
    var $compOwner = $("<p>").text(data.ownerbycompanyname);

    $div.append($divOwner);
    $divOwner.append($owner);
    $divOwner.append($ownerName);
    $divOwner.append($emailOwnerP);
    $divOwner.append($compOwner);

    var $divIneterst = $('<div>').addClass('popover-content-box');
    var $interest = $("<h6>").text('Interest');
    var $interestP = $("<p>").text(data.intereststatus);

    /* Set Interest Color */
    if (data.intereststatus != undefined && data.intereststatus != null) {

        if (data.intereststatus.indexOf("Active") > -1) {
            $interestP.addClass('intereststatus-active');
        }
        if (data.intereststatus.indexOf("Not Sure") > -1) {
            $interestP.addClass('intereststatus-notsure');
        }
        if (data.intereststatus.indexOf("Other") > -1) {
            $interestP.addClass('intereststatus-other');
        }
        if (data.intereststatus.indexOf("Hot") > -1) {
            $interestP.addClass('intereststatus-hot');
        }
        if (data.intereststatus.indexOf("Closed") > -1) {
            $interestP.addClass('intereststatus-closed');
        }
        if (data.intereststatus.indexOf("High") > -1) {
            $interestP.addClass('intereststatus-high');
        }
        if (data.intereststatus.indexOf("Medium") > -1) {
            $interestP.addClass('intereststatus-medium');
        }
        if (data.intereststatus.indexOf("Low") > -1) {
            $interestP.addClass('intereststatus-low');
        }
        if (data.intereststatus.indexOf("Not Interested") > -1) {
            $interestP.addClass('intereststatus-notinterested');
        }
    }
    $div.append($divIneterst);
    $divIneterst.append($interest);
    $divIneterst.append($interestP);

    var $divCreateInfo = $('<div>').addClass('popover-content-box');
    var $createdOn = $("<h6>").text('Created On');
    var $cretaedOns = $("<h6>").addClass("fontMedium");
    var $createdOnP = "";

    /* Set Date Time Format */
    var createdOnDetails = longDateFromUTC(data.createdon);
    if (createdOnDetails != null && createdOnDetails != undefined) {
        $createdOnP = $("<p>").text(createdOnDetails);
    }
    $div.append($divCreateInfo);
    $divCreateInfo.append($createdOn);
    $divCreateInfo.append($cretaedOns);
    $divCreateInfo.append($createdOnP);

    var $divUpdateInfo = $('<div>').addClass('popover-content-box');
    var $updatedOn = $("<h6>").text('Updated On');
    var $updatedOns = $("<h6>").addClass("fontMedium");
    var $updatedOnP = "";

    /* Set Date Time Format */
    var updatedOnDetails = longDateFromUTC(data.updatedon);
    if (updatedOnDetails != null && updatedOnDetails != undefined) {
        $updatedOnP = $("<p>").text(updatedOnDetails);
    }
    $div.append($divUpdateInfo);
    $divUpdateInfo.append($updatedOn);
    $divUpdateInfo.append($updatedOns);
    $divUpdateInfo.append($updatedOnP);

    return $div[0].innerHTML;
}
function getHoverContentForUser(data) {
    var firstname = data.firstname == null ? "" : data.firstname.replace(/("|'|-|,)/g, "");
    var lastname = data.lastname == null ? "" : data.lastname.replace(/("|'|-|,)/g, ""); 
    var name = "";
    if (firstname != "" && lastname != "")
         name = firstname + " " + lastname;
    else if (firstname != "")
         name = firstname + " " + lastname;
    else
         name = "";
    //setting location value
    var city = data.city == null ? "" : data.city.replace(/("|'|-|,)/g, "");
    var comma = "";
    var state = data.state == null ? "" : data.state.replace(/("|'|-|,)/g, "");
    var country = data.country == null ? "" : data.country.replace(/("|'|-|,)/g, "");
    if (city != "" && city != " " && state != "" && state != " ")
        comma = ", ";
    var location = city + comma + state + " " + country;

    //setting phone value
    var mobile = data.mobilenumber == null ? "" : data.mobilenumber.replace(/("|'|,)/g, "");
    var work = data.worknumber == null ? "" : data.worknumber.replace(/("|'|,)/g, "");
    comma = "";
    if (mobile != "" && work != "")
        comma = ", ";
    var phone = mobile + comma + work;

    //setting comments value 
    var comments = data.mobilenumber == null ? null : data.comments.replace(/("|'|,)/g, "");
    if (comments == undefined || comments == null)
        comments = "";
    if (comments.length > 150)
        comments = comments.substring(0, 150) + '...';

    var contactcompany = data.contactcompany == null ? null : data.contactcompany.replace(/("|'|-|,)/g, "")
    if (contactcompany == null)
        contactcompany = "";

    var label = ['Name', 'Location', 'Email', 'Phone', 'Company', 'Comment', 'Interest', 'Created On', 'Last Login'];//label array
    var value = [name, location, data.email, phone, contactcompany, comments, data.interest, longDateFromUTC(data.createdon), longDateFromUTC(data.lastlogin)];//value array
    var content = "";

    for (var i = 0; i < label.length; i++) {
        if (value[i] != '' && value[i] != "" && value[i] != " ")
            content += "<strong><span class='font-sm'>" + label[i] + " : </span></strong><div class='font-xs' style='max-width:100%;word-wrap:break-word;'>" + value[i] + "</div>";
    }
    return content;
}

function getUserHoverContentv5(data) {
    var email = data.email == null ? "" : data.email;
    var $div = $("<div>");

    /* Set Creator Details */
    var $divCreator = $('<div>').addClass('popover-content-box');
    var $creator = $("<h6>").text('Location');
    var location = data.country.replace(/("|'|-|,)/g, "");
    var $locationName = $("<h5>").text(location);

    $div.append($divCreator);
    $divCreator.append($creator);
    $divCreator.append($locationName);

    var $divIneterst = $('<div>').addClass('popover-content-box');
    var $interest = $("<h6>").text('Interest');
    var $interestP = $("<p>").text(data.interest);

    /* Set Interest Color */
    if (data.interest != undefined && data.interest != null) {

        if (data.interest.indexOf("Active") > -1) {
            $interestP.addClass('intereststatus-active');
        }
        if (data.interest.indexOf("Not Sure") > -1) {
            $interestP.addClass('intereststatus-notsure');
        }
        if (data.interest.indexOf("Other") > -1) {
            $interestP.addClass('intereststatus-other');
        }
        if (data.interest.indexOf("Hot") > -1) {
            $interestP.addClass('intereststatus-hot');
        }
        if (data.interest.indexOf("Closed") > -1) {
            $interestP.addClass('intereststatus-closed');
        }
        if (data.interest.indexOf("High") > -1) {
            $interestP.addClass('intereststatus-high');
        }
        if (data.interest.indexOf("Medium") > -1) {
            $interestP.addClass('intereststatus-medium');
        }
        if (data.interest.indexOf("Low") > -1) {
            $interestP.addClass('intereststatus-low');
        }
        if (data.interest.indexOf("Not Interested") > -1) {
            $interestP.addClass('intereststatus-notinterested');
        }
    }
    $div.append($divIneterst);
    $divIneterst.append($interest);
    $divIneterst.append($interestP);

    var $divCreateInfo = $('<div>').addClass('popover-content-box user-create-date');
    var $createdOn = $("<h6>").text('Created On');
    var $createdOns = $("<h6>").addClass("fontMedium");
    var $createdOnP = "";
    
    /* Set Date Time Format */
    
    var createdOnDetails = longDateFromUTC(data.createdon);
    if (createdOnDetails != null && createdOnDetails != undefined) {
        $createdOnP = $("<p>").text(createdOnDetails);
    }
    $div.append($divCreateInfo);
    $divCreateInfo.append($createdOn);
    $divCreateInfo.append($createdOns);
    $divCreateInfo.append($createdOnP);


    var $divLoginInfo = $('<div>').addClass('popover-content-box footer');
    var $loggedOn = $("<h6>").text('Last Login');
    var $loggedOns = $("<h6>").addClass("fontMedium");
    var $loggedOnP = "";

    /* Set Date Time Format */
    var loggedOnDetails = longDateFromUTC(data.lastlogin);
    if (loggedOnDetails != null && loggedOnDetails != undefined) {
        $loggedOnP = $("<p>").text(loggedOnDetails);
    }
        $div.append($divLoginInfo);
        $divLoginInfo.append($loggedOn);
        $divLoginInfo.append($loggedOns);
        $divLoginInfo.append($loggedOnP);
    return $div[0].innerHTML;
}
//Hover consistency for Opportunity grid #27669
function getOpportunityHoverContents(item) {
    var desc = item.description;
    if (desc == null || desc == undefined)
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var label = ['Name', 'Description', 'Creator', 'Owner'];//label array
    var value = [item.opportunity, desc, item.createdbyname, item.ownername];//value array

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        if (value[i] != "" && value[i] != " ") {
            var $strong = $("<strong>");
            var $span = $('<span>').addClass('font-sm').text(label[i] + ' :');
            var $div = $('<div>').addClass('font-xs').css({ "max-width": "100%", "word-wrap": "break-word" }).text(value[i]);
            $strong.append($span);
            $content.append($strong);
            $content.append($div);
        }
    }
    return $content[0].innerHTML;
}

function getUserHoverContent(result) {
    var userName = null;
    if (result.createdbyname != null && result.createdbyname != "")
        userName = result.createdbyname;
    else
        userName = 'No Name'
    var label = ["Name"];
    var value = [userName];
    var $mainDiv = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strong = $("<strong>");
        var $span = $("<span>").addClass("font-sm").text(label[i] + " :");
        var $div = $("<div>").addClass("font-xs").css({ "max-width": "100%", "word-wrap": "break-word" }).text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strong.append($span);
            $mainDiv.append($strong);
            $mainDiv.append($div);
        }
    }
    return $mainDiv[0].innerHTML;
}
//End - Mouse over content
function emptyDataCustomMessage(customMessage, hasPermission, action, linkText, note) {
    var $innerDiv = $("<div>");
    var $br = $("<br/>");
    var $p = $("<p>");
    $span = $("<span>");
    $span.text('There is no data for you to see yet. ');
    $p.append($span);
    var $brTag = $("<br/>");
    $p.append($brTag);
    

    $a = $("<a>");
    $a.addClass("btn btn-primary type2 cursor-pointer");
    $a.attr("href", "javascript:void(0);");
    $a.css('text-decoration', 'none');
    $a.css('margin-bottom', '2px');
    $a.attr("data-action", "create");
    $a.text(linkText);

    var $span_a = $("<span>");
    $span_a.append($a);

    $p.append(customMessage.replace("{0}", $span_a.html()));
    $p.append($br);
    $innerDiv.append($p);
    return $innerDiv;
}
function getCharArray() {
    var alphabets = [], i = 'A'.charCodeAt(0), j = 'Z'.charCodeAt(0);
    for (; i <= j; ++i) {
        alphabets.push(String.fromCharCode(i));
    }
    return alphabets;
}

function getInformativeHoverContentv5(item) {    
    var message = "";
    var xml = "";
    var name = "";
    var data = $("<div>").html(item.message);
    try {
        var xmlDoc = $.parseXML(item.message);
        xml = $(xmlDoc);
        name = xml.find("name").text();
    } catch (e) {
        name = $(item).find("name").text();
    }
    var msg = "";
    if (name != "" && name != undefined) {
        try {
            desc = xml.find("description").text();
        } catch (e) {
            desc = $(item).find("description").text();
        }
        var nType = item.notificationtype;
        if (nType == 1000 || nType == 1100 || nType == 1900 || nType == 2800 || nType == 1600 || nType == 1300 || nType == 2600) {
            if (desc.length == 0) {
                msg = "<div style='width:100%;color:#3276b1;'><span style='font-size:15px;'><strong data-action-item=" + item.id + " data-action='view'>" + item.name + "</strong><br/>&nbsp;to&nbsp;" + "'" + name + "'" + "</span><br/><span style='font-size:11px;'><i data-action-item=" + item.id + " data-action='view'>" + desc + "</i></span></div>";
                $(".add").css('margin-right', '29px');
            }
            else if (desc.length > 70) {
                msg = "<div style='width:100%;color:#3276b1;'><span style='font-size:15px;'><strong data-action-item=" + item.id + " data-action='view'>" + item.name + "</strong>" + "'" + name + "'" + "</span><br/><span style='font-size:11px;' data-placement='top'  data-original-title='" + desc + "'><i data-action-item=" + item.id + " data-action='view'>" + desc + "</i></span></div>";
            }
            else {
                msg = "<div style='width:100%;color:#3276b1;'><span style='font-size:15px;'><strong data-action-item=" + item.id + " data-action='view'>" + item.name + "</strong><br/>&nbsp;to&nbsp;" + "'" + name + "'" + "</span><br/><span style='font-size:11px;'><i data-action-item=" + item.id + " data-action='view'>" + desc + "</i></span></div>";
            }
        }
        else if (nType == 1200) {
            msg = "<div style='width:100%;color:#3276b1;'><span style='font-size:15px;'><strong data-action-item=" + item.id + " data-action='view'>" + item.name + ": " + name + "</strong></span><br/><span style='font-size:11px;'><i data-action-item=" + item.id + " data-action='view'>" + desc + "</i></span></div>"
        }
        else if (nType == 1400) {
            var userName = $(data).find("username").text();
            var contactName = $(data).find("contactname").text();
            msg = "<div style='width:100%;color:#3276b1;'><span style='font-size:15px;'><strong data-action-item=" + item.id + " data-action='view'>" + item.name + "</strong><br/>&nbsp;" + contactName + "</span><br/><span style='font-size:11px;'><i data-action-item=" + item.id + " data-action='view'>" + "'" + name + "'" + "-" + desc + "</i></span></div>"
        }
        else if (nType == 1800) {
            msg = "<div style='width:100%;color:#3276b1;'><span style='font-size:15px;'><strong data-action-item=" + item.id + " data-action='view'>" + item.name + "</strong></span><br/><span style='font-size:11px;'><i data-action-item=" + item.id + " data-action='view'>" + "'" + name + "'" + "-" + desc + "</i></span></div>"
        }
        else if (nType == 1700) {
            msg = "<div style='width:100%;color:#3276b1;'><span style='font-size:15px;'><strong data-action-item=" + item.id + " data-action='view'>" + item.name + "</strong></span><br/><span style='font-size:11px;'><i data-action-item=" + item.id + " data-action='view'>" + name + "</i></span></div>";
            if (desc.length > 70) {
                msg = "<div style='width:100%;color:#3276b1;'><span style='font-size:15px;'><strong data-action-item=" + item.id + " data-action='view'>" + item.name + "</strong></span><br/><span style='font-size:11px;' data-placement='top'  data-original-title='" + desc + "'><i data-action-item=" + item.id + " data-action='view'>" + "'" + name + "'" + "-" + desc + "</i></span></div>";
            }
        }
        else {
            msg = "<div style='width:100%;color:#3276b1;'><span style='font-size:15px;'><strong data-action-item=" + item.id + " data-action='view'>" + item.name + "</strong><br/>&nbsp;to&nbsp;" + "'" + name + "'" + "</span><br/><span style='font-size:11px;'><i data-action-item=" + item.id + " data-action='view'>" + desc + "</i></span></div>";
        }
    }
    else {
        if (item.message.length == 0) {
            msg = "<div style='width:100%;color:#3276b1;'><span style='font-size:15px;' ><strong data-action-item=" + item.id + " data-action='view'>" + item.name + "</strong></span></div>";
        }
        else if (item.message.length > 70) {
            msg = "<div style='width:100%;color:#3276b1;'><span style='font-size:15px;'><strong data-action-item=" + item.id + " data-action='view'>" + item.name + "</strong></span><br/><span style='font-size:11px;' data-placement='top'  data-original-title='" + unescape(item.message) + "'><i>" + unescape(item.message) + "</i></span></div>";
        }
        else {
            msg = "<div style='width:100%;color:#3276b1;'><span style='font-size:15px;'><strong data-action-item=" + item.id + " data-action='view'>" + item.name + "</strong></span><br/><span style='font-size:11px;'><i>" + unescape(item.message) + "</i></span></div>";
        }
    }
    message = msg;
    return message;
}
function checkUncheckFilters($quickaccess, $filterholder) {
    //when user checks the filter check box and close the window. Below code is used to unheck those filters
    $quickaccess.find(".filter-body").find("input[data-filter]:checkbox:checked").each(function () {
        var $this = $(this);
        if ($filterholder.find("li[data-filter=" + $this.data("filter") + "]").length <= 0) {
            $this.closest("li").removeClass("active");
            $this.prop('checked', false);
        }
    });
    hideShowFilterWindowButtons($quickaccess, $filterholder);
}

function hideShowFilterWindowButtons($quickaccess, $filterholder) {
    if ($quickaccess.find(".filter-body").find("input[data-filter]:checkbox:checked").length > 0) {
        $quickaccess.find(".filtermenu-lg .applyCategorizeFilters").removeAttr("disabled");
        $quickaccess.find(".clear-btn").removeClass("hide");
    }
    else if ($filterholder.find("li").length > 0) {
        $quickaccess.find(".filtermenu-lg .applyCategorizeFilters").removeAttr("disabled");
    }
    else {
        $quickaccess.find(".filtermenu-lg .applyCategorizeFilters").attr("disabled", "disabled");
        $quickaccess.find(".clear-btn").addClass("hide");
    }
}

;
/**
 * http://www.openjs.com/scripts/events/keyboard_shortcuts/
 * Version : 2.01.B
 * By Binny V A
 * License : BSD
 */
shortcut = {
    'all_shortcuts': {},//All the shortcuts are stored in this array
    'add': function (shortcut_combination, callback, opt) {
        //Provide a set of default options
        var default_options = {
            'type': 'keydown',
            'propagate': false,
            'disable_in_input': false,
            'target': document,
            'keycode': false
        }
        if (!opt) opt = default_options;
        else {
            for (var dfo in default_options) {
                if (typeof opt[dfo] == 'undefined') opt[dfo] = default_options[dfo];
            }
        }

        var ele = opt.target;
        if (typeof opt.target == 'string') ele = document.getElementById(opt.target);
        var ths = this;
        shortcut_combination = shortcut_combination.toLowerCase();

        //The function to be called at keypress
        var func = function (e) {
            e = e || window.event;

            if (opt['disable_in_input']) { //Don't enable shortcut keys in Input, Textarea fields
                var element;
                if (e.target) element = e.target;
                else if (e.srcElement) element = e.srcElement;
                if (element.nodeType == 3) element = element.parentNode;

                if (element.tagName == 'INPUT' || element.tagName == 'TEXTAREA') return;
            }

            //Find Which key is pressed
            if (e.keyCode) code = e.keyCode;
            else if (e.which) code = e.which;
            var character = String.fromCharCode(code).toLowerCase();

            if (code == 188) character = ","; //If the user presses , when the type is onkeydown
            if (code == 190) character = "."; //If the user presses , when the type is onkeydown

            var keys = shortcut_combination.split("+");
            //Key Pressed - counts the number of valid keypresses - if it is same as the number of keys, the shortcut function is invoked
            var kp = 0;

            //Work around for stupid Shift key bug created by using lowercase - as a result the shift+num combination was broken
            var shift_nums = {
                "`": "~",
                "1": "!",
                "2": "@",
                "3": "#",
                "4": "$",
                "5": "%",
                "6": "^",
                "7": "&",
                "8": "*",
                "9": "(",
                "0": ")",
                "-": "_",
                "=": "+",
                ";": ":",
                "'": "\"",
                ",": "<",
                ".": ">",
                "/": "?",
                "\\": "|"
            }
            //Special Keys - and their codes
            var special_keys = {
                'esc': 27,
                'escape': 27,
                'tab': 9,
                'space': 32,
                'return': 13,
                'enter': 13,
                'backspace': 8,

                'scrolllock': 145,
                'scroll_lock': 145,
                'scroll': 145,
                'capslock': 20,
                'caps_lock': 20,
                'caps': 20,
                'numlock': 144,
                'num_lock': 144,
                'num': 144,

                'pause': 19,
                'break': 19,

                'insert': 45,
                'home': 36,
                'delete': 46,
                'end': 35,

                'pageup': 33,
                'page_up': 33,
                'pu': 33,

                'pagedown': 34,
                'page_down': 34,
                'pd': 34,

                'left': 37,
                'up': 38,
                'right': 39,
                'down': 40,

                'f1': 112,
                'f2': 113,
                'f3': 114,
                'f4': 115,
                'f5': 116,
                'f6': 117,
                'f7': 118,
                'f8': 119,
                'f9': 120,
                'f10': 121,
                'f11': 122,
                'f12': 123
            }

            var modifiers = {
                shift: { wanted: false, pressed: false },
                ctrl: { wanted: false, pressed: false },
                alt: { wanted: false, pressed: false },
                meta: { wanted: false, pressed: false }	//Meta is Mac specific
            };

            if (e.ctrlKey) modifiers.ctrl.pressed = true;
            if (e.shiftKey) modifiers.shift.pressed = true;
            if (e.altKey) modifiers.alt.pressed = true;
            if (e.metaKey) modifiers.meta.pressed = true;

            for (var i = 0; k = keys[i], i < keys.length; i++) {
                //Modifiers
                if (k == 'ctrl' || k == 'control') {
                    kp++;
                    modifiers.ctrl.wanted = true;

                } else if (k == 'shift') {
                    kp++;
                    modifiers.shift.wanted = true;

                } else if (k == 'alt') {
                    kp++;
                    modifiers.alt.wanted = true;
                } else if (k == 'meta') {
                    kp++;
                    modifiers.meta.wanted = true;
                } else if (k.length > 1) { //If it is a special key
                    if (special_keys[k] == code) kp++;

                } else if (opt['keycode']) {
                    if (opt['keycode'] == code) kp++;

                } else { //The special keys did not match
                    if (character == k) kp++;
                    else {
                        if (shift_nums[character] && e.shiftKey) { //Stupid Shift key bug created by using lowercase
                            character = shift_nums[character];
                            if (character == k) kp++;
                        }
                    }
                }
            }

            if (kp == keys.length &&
						modifiers.ctrl.pressed == modifiers.ctrl.wanted &&
						modifiers.shift.pressed == modifiers.shift.wanted &&
						modifiers.alt.pressed == modifiers.alt.wanted &&
						modifiers.meta.pressed == modifiers.meta.wanted) {
                callback(e);

                if (!opt['propagate']) { //Stop the event
                    //e.cancelBubble is supported by IE - this will kill the bubbling process.
                    e.cancelBubble = true;
                    e.returnValue = false;

                    //e.stopPropagation works in Firefox.
                    if (e.stopPropagation) {
                        e.stopPropagation();
                        e.preventDefault();
                    }
                    return false;
                }
            }
        }
        this.all_shortcuts[shortcut_combination] = {
            'callback': func,
            'target': ele,
            'event': opt['type']
        };
        //Attach the function with the event
        if (ele.addEventListener) ele.addEventListener(opt['type'], func, false);
        else if (ele.attachEvent) ele.attachEvent('on' + opt['type'], func);
        else ele['on' + opt['type']] = func;
    },

    //Remove the shortcut - just specify the shortcut and I will remove the binding
    'remove': function (shortcut_combination) {
        shortcut_combination = shortcut_combination.toLowerCase();
        var binding = this.all_shortcuts[shortcut_combination];
        delete (this.all_shortcuts[shortcut_combination])
        if (!binding) return;
        var type = binding['event'];
        var ele = binding['target'];
        var callback = binding['callback'];

        if (ele.detachEvent) ele.detachEvent('on' + type, callback);
        else if (ele.removeEventListener) ele.removeEventListener(type, callback, false);
        else ele['on' + type] = false;
    }
}
;
/*
 ### jQuery XML to JSON Plugin v1.0 - 2008-07-01 ###
 * http://www.fyneworks.com/ - diego@fyneworks.com
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 ###
 Website: http://www.fyneworks.com/jquery/xml-to-json/
*/
eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}(';5(10.M)(w($){$.N({11:w(j,k){5(!j)t{};w B(d,e){5(!d)t y;6 f=\'\',2=y,E=y;6 g=d.x,12=l(d.O||d.P);6 h=d.v||d.F||\'\';5(d.G){5(d.G.7>0){$.Q(d.G,w(n,a){6 b=a.x,u=l(a.O||a.P);6 c=a.v||a.F||\'\';5(b==8){t}z 5(b==3||b==4||!u){5(c.13(/^\\s+$/)){t};f+=c.H(/^\\s+/,\'\').H(/\\s+$/,\'\')}z{2=2||{};5(2[u]){5(!2[u].7)2[u]=p(2[u]);2[u][2[u].7]=B(a,R);2[u].7=2[u].7}z{2[u]=B(a)}}})}};5(d.I){5(d.I.7>0){E={};2=2||{};$.Q(d.I,w(a,b){6 c=l(b.14),C=b.15;E[c]=C;5(2[c]){5(!2[c].7)2[c]=p(2[c]);2[c][2[c].7]=C;2[c].7=2[c].7}z{2[c]=C}})}};5(2){2=$.N((f!=\'\'?A J(f):{}),2||{});f=(2.v)?(D(2.v)==\'16\'?2.v:[2.v||\'\']).17([f]):f;5(f)2.v=f;f=\'\'};6 i=2||f;5(k){5(f)i={};f=i.v||f||\'\';5(f)i.v=f;5(!e)i=p(i)};t i};6 l=w(s){t J(s||\'\').H(/-/g,"18")};6 m=w(s){t(D s=="19")||J((s&&D s=="K")?s:\'\').1a(/^((-)?([0-9]*)((\\.{0,1})([0-9]+))?$)/)};6 p=w(o){5(!o.7)o=[o];o.7=o.7;t o};5(D j==\'K\')j=$.S(j);5(!j.x)t;5(j.x==3||j.x==4)t j.F;6 q=(j.x==9)?j.1b:j;6 r=B(q,R);j=y;q=y;t r},S:w(a){6 b;T{6 c=($.U.V)?A 1c("1d.1e"):A 1f();c.1g=W}X(e){Y A L("Z 1h 1i 1j 1k 1l")};T{5($.U.V)b=(c.1m(a))?c:W;z b=c.1n(a,"v/1o")}X(e){Y A L("L 1p Z K")};t b}})})(M);',62,88,'||obj|||if|var|length||||||||||||||||||||||return|cnn|text|function|nodeType|null|else|new|parseXML|atv|typeof|att|nodeValue|childNodes|replace|attributes|String|string|Error|jQuery|extend|localName|nodeName|each|true|text2xml|try|browser|msie|false|catch|throw|XML|window|xml2json|nn|match|name|value|object|concat|_|number|test|documentElement|ActiveXObject|Microsoft|XMLDOM|DOMParser|async|Parser|could|not|be|instantiated|loadXML|parseFromString|xml|parsing'.split('|'),0,{}))
;
/* Laura Doktorova https://github.com/olado/doT */
function encode_doT(a) {
    return a === 0 ? "0" : a;
}

!(function () {
    function o() {
        var e = { "&": "&#38;", "<": "&#60;", ">": "&#62;", '"': "&#34;", "'": "&#39;", "/": "&#47;" },
            t = /&(?!#?\w+;)|<|>|"|'|\//g;
        return function () {
            return this
                ? this.replace(t, function (t) {
                    return e[t] || t;
                })
                : this;
        };
    }
    function m(e) {
        return e.replace(/\\('|\\)/g, "$1").replace(/[\r\t\n]/g, " ");
    }
    var q,
        j = {
            version: "1.0.1",
            templateSettings: {
                evaluate: /\{\{([\s\S]+?(\}?)+)\}\}/g,
                interpolate: /\{\{=([\s\S]+?)\}\}/g,
                encode: /\{\{!([\s\S]+?)\}\}/g,
                use: /\{\{#([\s\S]+?)\}\}/g,
                useParams: /(^|[^\w$])def(?:\.|\[[\'\"])([\w$\.]+)(?:[\'\"]\])?\s*\:\s*([\w$\.]+|\"[^\"]+\"|\'[^\']+\'|\{[^\}]+\})/g,
                define: /\{\{##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\}\}/g,
                defineParams: /^\s*([\w$]+):([\s\S]+)/,
                conditional: /\{\{\?(\?)?\s*([\s\S]*?)\s*\}\}/g,
                iterate: /\{\{~\s*(?:\}\}|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\}\})/g,
                varname: "it",
                strip: !0,
                append: !0,
                selfcontained: !1,
            },
            template: void 0,
            compile: void 0,
        };
    "undefined" != typeof module && module.exports
        ? (module.exports = j)
        : "function" == typeof define && define.amd
            ? define(function () {
                return j;
            })
            : ((function () {
                return this || (0, eval)("this");
            })().doT = j),
        (String.prototype.encodeHTML = o());
    var r = { append: { start: "'+(", end: ")+'", endencode: "||'').toString().encodeHTML()+'" }, split: { start: "';out+=(", end: ");out+='", endencode: "||'').toString().encodeHTML();out+='" } },
        i = /$^/;
    (j.template = function (e, t, n) {
        var a,
            u,
            c = (t = t || j.templateSettings).append ? r.append : r.split,
            s = 0;
        (e =
            t.use || t.define
                ? (function e(t, n, a) {
                    return ("string" == typeof n ? n : n.toString())
                        .replace(t.define || i, function (e, n, u, c) {
                            return (
                                0 === n.indexOf("def.") && (n = n.substring(4)),
                                !(n in a) &&
                                (":" === u
                                    ? (t.defineParams &&
                                        c.replace(t.defineParams, function (e, t, u) {
                                            a[n] = { arg: t, text: u };
                                        }),
                                        n in a || (a[n] = c))
                                    : Function("def", "def['" + n + "']=" + c)(a)),
                                ""
                            );
                        })
                        .replace(t.use || i, function (n, u) {
                            t.useParams &&
                                (u = u.replace(t.useParams, function (e, t, n, u) {
                                    if (a[n] && a[n].arg && u)
                                        return (
                                            (e = (n + ":" + u).replace(/'|\\/g, "_")),
                                            (a.__exp = a.__exp || {}),
                                            (a.__exp[e] = a[n].text.replace(RegExp("(^|[^\\w$])" + a[n].arg + "([^\\w$])", "g"), "$1" + u + "$2")),
                                            t + "def.__exp['" + e + "']"
                                        );
                                }));
                            var c = Function("def", "return " + u)(a);
                            return c ? e(t, c, a) : c;
                        });
                })(t, e, n || {})
                : e),
            (e = (
                "var out='" +
                (t.strip ? e.replace(/(^|\r|\n)\t* +| +\t*(\r|\n|$)/g, " ").replace(/\r|\n|\t|\/\*[\s\S]*?\*\//g, "") : e)
                    .replace(/'|\\/g, "\\$&")
                    .replace(t.interpolate || i, function (e, t) {
                        return c.start + m(t) + c.end;
                    })
                    .replace(t.encode || i, function (e, t) {
                        return c.start + `encode_doT(${m(t)})` + c.endencode;
                    })
                    .replace(t.conditional || i, function (e, t, n) {
                        return t ? (n ? "';}else if(" + m(n) + "){out+='" : "';}else{out+='") : n ? "';if(" + m(n) + "){out+='" : "';}out+='";
                    })
                    .replace(t.iterate || i, function (e, t, n, a) {
                        return t
                            ? ((s += 1),
                                (u = a || "i" + s),
                                "';var arr" + s + "=" + (t = m(t)) + ";if(arr" + s + "){var " + n + "," + u + "=-1,l" + s + "=arr" + s + ".length-1;while(" + u + "<l" + s + "){" + n + "=arr" + s + "[" + u + "+=1];out+='")
                            : "';} } out+='";
                    })
                    .replace(t.evaluate || i, function (e, t) {
                        return "';" + m(t) + "out+='";
                    }) +
                "';return out;"
            )
                .replace(/\n/g, "\\n")
                .replace(/\t/g, "\\t")
                .replace(/\r/g, "\\r")
                .replace(/(\s|;|\}|^|\{)out\+='';/g, "$1")
                .replace(/\+''/g, "")
                .replace(/(\s|;|\}|^|\{)out\+=''\+/g, "$1out+=")),
            a && t.selfcontained && (e = "String.prototype.encodeHTML=(" + o.toString() + "());" + e);
        try {
            return Function(t.varname, e);
        } catch (p) {
            throw ("undefined" != typeof console && console.log("Could not create a template function: " + e), p);
        }
    }),
        (j.compile = function (e, t) {
            return j.template(e, null, t);
        });
})();

;
/*!
  * Bootstrap v5.3.2 (https://getbootstrap.com/)
  * Copyright 2011-2023 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");!function(t){"use strict";var e=jQuery.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||3<e[0])throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(),function(n){"use strict";n.fn.emulateTransitionEnd=function(t){var e=!1,i=this;n(this).one("bsTransitionEnd",function(){e=!0});return setTimeout(function(){e||n(i).trigger(n.support.transition.end)},t),this},n(function(){n.support.transition=function o(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in e)if(t.style[i]!==undefined)return{end:e[i]};return!1}(),n.support.transition&&(n.event.special.bsTransitionEnd={bindType:n.support.transition.end,delegateType:n.support.transition.end,handle:function(t){if(n(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}})})}(jQuery),function(s){"use strict";var e='[data-dismiss="alert"]',a=function(t){s(t).on("click",e,this.close)};a.VERSION="3.4.1",a.TRANSITION_DURATION=150,a.prototype.close=function(t){var e=s(this),i=e.attr("data-target");i||(i=(i=e.attr("href"))&&i.replace(/.*(?=#[^\s]*$)/,"")),i="#"===i?[]:i;var o=s(document).find(i);function n(){o.detach().trigger("closed.bs.alert").remove()}t&&t.preventDefault(),o.length||(o=e.closest(".alert")),o.trigger(t=s.Event("close.bs.alert")),t.isDefaultPrevented()||(o.removeClass("in"),s.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",n).emulateTransitionEnd(a.TRANSITION_DURATION):n())};var t=s.fn.alert;s.fn.alert=function o(i){return this.each(function(){var t=s(this),e=t.data("bs.alert");e||t.data("bs.alert",e=new a(this)),"string"==typeof i&&e[i].call(t)})},s.fn.alert.Constructor=a,s.fn.alert.noConflict=function(){return s.fn.alert=t,this},s(document).on("click.bs.alert.data-api",e,a.prototype.close)}(jQuery),function(s){"use strict";var n=function(t,e){this.$element=s(t),this.options=s.extend({},n.DEFAULTS,e),this.isLoading=!1};function i(o){return this.each(function(){var t=s(this),e=t.data("bs.button"),i="object"==typeof o&&o;e||t.data("bs.button",e=new n(this,i)),"toggle"==o?e.toggle():o&&e.setState(o)})}n.VERSION="3.4.1",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(t){var e="disabled",i=this.$element,o=i.is("input")?"val":"html",n=i.data();t+="Text",null==n.resetText&&i.data("resetText",i[o]()),setTimeout(s.proxy(function(){i[o](null==n[t]?this.options[t]:n[t]),"loadingText"==t?(this.isLoading=!0,i.addClass(e).attr(e,e).prop(e,!0)):this.isLoading&&(this.isLoading=!1,i.removeClass(e).removeAttr(e).prop(e,!1))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var i=this.$element.find("input");"radio"==i.prop("type")?(i.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==i.prop("type")&&(i.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),i.prop("checked",this.$element.hasClass("active")),t&&i.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var t=s.fn.button;s.fn.button=i,s.fn.button.Constructor=n,s.fn.button.noConflict=function(){return s.fn.button=t,this},s(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(t){var e=s(t.target).closest(".btn");i.call(e,"toggle"),s(t.target).is('input[type="radio"], input[type="checkbox"]')||(t.preventDefault(),e.is("input,button")?e.trigger("focus"):e.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(t){s(t.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(t.type))})}(jQuery),function(p){"use strict";var c=function(t,e){this.$element=p(t),this.$indicators=this.$element.find(".carousel-indicators"),this.options=e,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",p.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",p.proxy(this.pause,this)).on("mouseleave.bs.carousel",p.proxy(this.cycle,this))};function r(n){return this.each(function(){var t=p(this),e=t.data("bs.carousel"),i=p.extend({},c.DEFAULTS,t.data(),"object"==typeof n&&n),o="string"==typeof n?n:i.slide;e||t.data("bs.carousel",e=new c(this,i)),"number"==typeof n?e.to(n):o?e[o]():i.interval&&e.pause().cycle()})}c.VERSION="3.4.1",c.TRANSITION_DURATION=600,c.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},c.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},c.prototype.cycle=function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(p.proxy(this.next,this),this.options.interval)),this},c.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},c.prototype.getItemForDirection=function(t,e){var i=this.getItemIndex(e);if(("prev"==t&&0===i||"next"==t&&i==this.$items.length-1)&&!this.options.wrap)return e;var o=(i+("prev"==t?-1:1))%this.$items.length;return this.$items.eq(o)},c.prototype.to=function(t){var e=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):i==t?this.pause().cycle():this.slide(i<t?"next":"prev",this.$items.eq(t))},c.prototype.pause=function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&p.support.transition&&(this.$element.trigger(p.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},c.prototype.next=function(){if(!this.sliding)return this.slide("next")},c.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},c.prototype.slide=function(t,e){var i=this.$element.find(".item.active"),o=e||this.getItemForDirection(t,i),n=this.interval,s="next"==t?"left":"right",a=this;if(o.hasClass("active"))return this.sliding=!1;var r=o[0],l=p.Event("slide.bs.carousel",{relatedTarget:r,direction:s});if(this.$element.trigger(l),!l.isDefaultPrevented()){if(this.sliding=!0,n&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var h=p(this.$indicators.children()[this.getItemIndex(o)]);h&&h.addClass("active")}var d=p.Event("slid.bs.carousel",{relatedTarget:r,direction:s});return p.support.transition&&this.$element.hasClass("slide")?(o.addClass(t),"object"==typeof o&&o.length&&o[0].offsetWidth,i.addClass(s),o.addClass(s),i.one("bsTransitionEnd",function(){o.removeClass([t,s].join(" ")).addClass("active"),i.removeClass(["active",s].join(" ")),a.sliding=!1,setTimeout(function(){a.$element.trigger(d)},0)}).emulateTransitionEnd(c.TRANSITION_DURATION)):(i.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger(d)),n&&this.cycle(),this}};var t=p.fn.carousel;p.fn.carousel=r,p.fn.carousel.Constructor=c,p.fn.carousel.noConflict=function(){return p.fn.carousel=t,this};var e=function(t){var e=p(this),i=e.attr("href");i&&(i=i.replace(/.*(?=#[^\s]+$)/,""));var o=e.attr("data-target")||i,n=p(document).find(o);if(n.hasClass("carousel")){var s=p.extend({},n.data(),e.data()),a=e.attr("data-slide-to");a&&(s.interval=!1),r.call(n,s),a&&n.data("bs.carousel").to(a),t.preventDefault()}};p(document).on("click.bs.carousel.data-api","[data-slide]",e).on("click.bs.carousel.data-api","[data-slide-to]",e),p(window).on("load",function(){p('[data-ride="carousel"]').each(function(){var t=p(this);r.call(t,t.data())})})}(jQuery),function(a){"use strict";var r=function(t,e){this.$element=a(t),this.options=a.extend({},r.DEFAULTS,e),this.$trigger=a('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};function n(t){var e,i=t.attr("data-target")||(e=t.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,"");return a(document).find(i)}function l(o){return this.each(function(){var t=a(this),e=t.data("bs.collapse"),i=a.extend({},r.DEFAULTS,t.data(),"object"==typeof o&&o);!e&&i.toggle&&/show|hide/.test(o)&&(i.toggle=!1),e||t.data("bs.collapse",e=new r(this,i)),"string"==typeof o&&e[o]()})}r.VERSION="3.4.1",r.TRANSITION_DURATION=350,r.DEFAULTS={toggle:!0},r.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},r.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var t,e=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(e&&e.length&&(t=e.data("bs.collapse"))&&t.transitioning)){var i=a.Event("show.bs.collapse");if(this.$element.trigger(i),!i.isDefaultPrevented()){e&&e.length&&(l.call(e,"hide"),t||e.data("bs.collapse",null));var o=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[o](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var n=function(){this.$element.removeClass("collapsing").addClass("collapse in")[o](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!a.support.transition)return n.call(this);var s=a.camelCase(["scroll",o].join("-"));this.$element.one("bsTransitionEnd",a.proxy(n,this)).emulateTransitionEnd(r.TRANSITION_DURATION)[o](this.$element[0][s])}}}},r.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var t=a.Event("hide.bs.collapse");if(this.$element.trigger(t),!t.isDefaultPrevented()){var e=this.dimension();this.$element[e](this.$element[e]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var i=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!a.support.transition)return i.call(this);this.$element[e](0).one("bsTransitionEnd",a.proxy(i,this)).emulateTransitionEnd(r.TRANSITION_DURATION)}}},r.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},r.prototype.getParent=function(){return a(document).find(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(a.proxy(function(t,e){var i=a(e);this.addAriaAndCollapsedClass(n(i),i)},this)).end()},r.prototype.addAriaAndCollapsedClass=function(t,e){var i=t.hasClass("in");t.attr("aria-expanded",i),e.toggleClass("collapsed",!i).attr("aria-expanded",i)};var t=a.fn.collapse;a.fn.collapse=l,a.fn.collapse.Constructor=r,a.fn.collapse.noConflict=function(){return a.fn.collapse=t,this},a(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(t){var e=a(this);e.attr("data-target")||t.preventDefault();var i=n(e),o=i.data("bs.collapse")?"toggle":e.data();l.call(i,o)})}(jQuery),function(a){"use strict";var r='[data-toggle="dropdown"]',o=function(t){a(t).on("click.bs.dropdown",this.toggle)};function l(t){var e=t.attr("data-target");e||(e=(e=t.attr("href"))&&/#[A-Za-z]/.test(e)&&e.replace(/.*(?=#[^\s]*$)/,""));var i="#"!==e?a(document).find(e):null;return i&&i.length?i:t.parent()}function s(o){o&&3===o.which||(a(".dropdown-backdrop").remove(),a(r).each(function(){var t=a(this),e=l(t),i={relatedTarget:this};e.hasClass("open")&&(o&&"click"==o.type&&/input|textarea/i.test(o.target.tagName)&&a.contains(e[0],o.target)||(e.trigger(o=a.Event("hide.bs.dropdown",i)),o.isDefaultPrevented()||(t.attr("aria-expanded","false"),e.removeClass("open").trigger(a.Event("hidden.bs.dropdown",i)))))}))}o.VERSION="3.4.1",o.prototype.toggle=function(t){var e=a(this);if(!e.is(".disabled, :disabled")){var i=l(e),o=i.hasClass("open");if(s(),!o){"ontouchstart"in document.documentElement&&!i.closest(".navbar-nav").length&&a(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(a(this)).on("click",s);var n={relatedTarget:this};if(i.trigger(t=a.Event("show.bs.dropdown",n)),t.isDefaultPrevented())return;e.trigger("focus").attr("aria-expanded","true"),i.toggleClass("open").trigger(a.Event("shown.bs.dropdown",n))}return!1}},o.prototype.keydown=function(t){if(/(38|40|27|32)/.test(t.which)&&!/input|textarea/i.test(t.target.tagName)){var e=a(this);if(t.preventDefault(),t.stopPropagation(),!e.is(".disabled, :disabled")){var i=l(e),o=i.hasClass("open");if(!o&&27!=t.which||o&&27==t.which)return 27==t.which&&i.find(r).trigger("focus"),e.trigger("click");var n=i.find(".dropdown-menu li:not(.disabled):visible a");if(n.length){var s=n.index(t.target);38==t.which&&0<s&&s--,40==t.which&&s<n.length-1&&s++,~s||(s=0),n.eq(s).trigger("focus")}}}};var t=a.fn.dropdown;a.fn.dropdown=function e(i){return this.each(function(){var t=a(this),e=t.data("bs.dropdown");e||t.data("bs.dropdown",e=new o(this)),"string"==typeof i&&e[i].call(t)})},a.fn.dropdown.Constructor=o,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=t,this},a(document).on("click.bs.dropdown.data-api",s).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",r,o.prototype.toggle).on("keydown.bs.dropdown.data-api",r,o.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",o.prototype.keydown)}(jQuery),function(a){"use strict";var s=function(t,e){this.options=e,this.$body=a(document.body),this.$element=a(t),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.fixedContent=".navbar-fixed-top, .navbar-fixed-bottom",this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,a.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};function r(o,n){return this.each(function(){var t=a(this),e=t.data("bs.modal"),i=a.extend({},s.DEFAULTS,t.data(),"object"==typeof o&&o);e||t.data("bs.modal",e=new s(this,i)),"string"==typeof o?e[o](n):i.show&&e.show(n)})}s.VERSION="3.4.1",s.TRANSITION_DURATION=300,s.BACKDROP_TRANSITION_DURATION=150,s.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},s.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},s.prototype.show=function(i){var o=this,t=a.Event("show.bs.modal",{relatedTarget:i});this.$element.trigger(t),this.isShown||t.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',a.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){o.$element.one("mouseup.dismiss.bs.modal",function(t){a(t.target).is(o.$element)&&(o.ignoreBackdropClick=!0)})}),this.backdrop(function(){var t=a.support.transition&&o.$element.hasClass("fade");o.$element.parent().length||o.$element.appendTo(o.$body),o.$element.show().scrollTop(0),o.adjustDialog(),t&&o.$element[0].offsetWidth,o.$element.addClass("in"),o.enforceFocus();var e=a.Event("shown.bs.modal",{relatedTarget:i});t?o.$dialog.one("bsTransitionEnd",function(){o.$element.trigger("focus").trigger(e)}).emulateTransitionEnd(s.TRANSITION_DURATION):o.$element.trigger("focus").trigger(e)}))},s.prototype.hide=function(t){t&&t.preventDefault(),t=a.Event("hide.bs.modal"),this.$element.trigger(t),this.isShown&&!t.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),a(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),a.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",a.proxy(this.hideModal,this)).emulateTransitionEnd(s.TRANSITION_DURATION):this.hideModal())},s.prototype.enforceFocus=function(){a(document).off("focusin.bs.modal").on("focusin.bs.modal",a.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},s.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",a.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},s.prototype.resize=function(){this.isShown?a(window).on("resize.bs.modal",a.proxy(this.handleUpdate,this)):a(window).off("resize.bs.modal")},s.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},s.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},s.prototype.backdrop=function(t){var e=this,i=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var o=a.support.transition&&i;if(this.$backdrop=a(document.createElement("div")).addClass("modal-backdrop "+i).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",a.proxy(function(t){this.ignoreBackdropClick?this.ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())},this)),o&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!t)return;o?this.$backdrop.one("bsTransitionEnd",t).emulateTransitionEnd(s.BACKDROP_TRANSITION_DURATION):t()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var n=function(){e.removeBackdrop(),t&&t()};a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",n).emulateTransitionEnd(s.BACKDROP_TRANSITION_DURATION):n()}else t&&t()},s.prototype.handleUpdate=function(){this.adjustDialog()},s.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},s.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},s.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},s.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"";var n=this.scrollbarWidth;this.bodyIsOverflowing&&(this.$body.css("padding-right",t+n),a(this.fixedContent).each(function(t,e){var i=e.style.paddingRight,o=a(e).css("padding-right");a(e).data("padding-right",i).css("padding-right",parseFloat(o)+n+"px")}))},s.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad),a(this.fixedContent).each(function(t,e){var i=a(e).data("padding-right");a(e).removeData("padding-right"),e.style.paddingRight=i||""})},s.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var t=a.fn.modal;a.fn.modal=r,a.fn.modal.Constructor=s,a.fn.modal.noConflict=function(){return a.fn.modal=t,this},a(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(t){var e=a(this),i=e.attr("href"),o=e.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,""),n=a(document).find(o),s=n.data("bs.modal")?"toggle":a.extend({remote:!/#/.test(i)&&i},n.data(),e.data());e.is("a")&&t.preventDefault(),n.one("show.bs.modal",function(t){t.isDefaultPrevented()||n.one("hidden.bs.modal",function(){e.is(":visible")&&e.trigger("focus")})}),r.call(n,s,this)})}(jQuery),function(g){"use strict";var o=["sanitize","whiteList","sanitizeFn"],a=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],t={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},r=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,l=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;function u(t,e){var i=t.nodeName.toLowerCase();if(-1!==g.inArray(i,e))return-1===g.inArray(i,a)||Boolean(t.nodeValue.match(r)||t.nodeValue.match(l));for(var o=g(e).filter(function(t,e){return e instanceof RegExp}),n=0,s=o.length;n<s;n++)if(i.match(o[n]))return!0;return!1}function n(t,e,i){if(0===t.length)return t;if(i&&"function"==typeof i)return i(t);if(!document.implementation||!document.implementation.createHTMLDocument)return t;var o=document.implementation.createHTMLDocument("sanitization");o.body.innerHTML=t;for(var n=g.map(e,function(t,e){return e}),s=g(o.body).find("*"),a=0,r=s.length;a<r;a++){var l=s[a],h=l.nodeName.toLowerCase();if(-1!==g.inArray(h,n))for(var d=g.map(l.attributes,function(t){return t}),p=[].concat(e["*"]||[],e[h]||[]),c=0,f=d.length;c<f;c++)u(d[c],p)||l.removeAttribute(d[c].nodeName);else l.parentNode.removeChild(l)}return o.body.innerHTML}var m=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};m.VERSION="3.4.1",m.TRANSITION_DURATION=150,m.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0},sanitize:!0,sanitizeFn:null,whiteList:t},m.prototype.init=function(t,e,i){if(this.enabled=!0,this.type=t,this.$element=g(e),this.options=this.getOptions(i),this.$viewport=this.options.viewport&&g(document).find(g.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var o=this.options.trigger.split(" "),n=o.length;n--;){var s=o[n];if("click"==s)this.$element.on("click."+this.type,this.options.selector,g.proxy(this.toggle,this));else if("manual"!=s){var a="hover"==s?"mouseenter":"focusin",r="hover"==s?"mouseleave":"focusout";this.$element.on(a+"."+this.type,this.options.selector,g.proxy(this.enter,this)),this.$element.on(r+"."+this.type,this.options.selector,g.proxy(this.leave,this))}}this.options.selector?this._options=g.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},m.prototype.getDefaults=function(){return m.DEFAULTS},m.prototype.getOptions=function(t){var e=this.$element.data();for(var i in e)e.hasOwnProperty(i)&&-1!==g.inArray(i,o)&&delete e[i];return(t=g.extend({},this.getDefaults(),e,t)).delay&&"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),t.sanitize&&(t.template=n(t.template,t.whiteList,t.sanitizeFn)),t},m.prototype.getDelegateOptions=function(){var i={},o=this.getDefaults();return this._options&&g.each(this._options,function(t,e){o[t]!=e&&(i[t]=e)}),i},m.prototype.enter=function(t){var e=t instanceof this.constructor?t:g(t.currentTarget).data("bs."+this.type);if(e||(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),g(t.currentTarget).data("bs."+this.type,e)),t instanceof g.Event&&(e.inState["focusin"==t.type?"focus":"hover"]=!0),e.tip().hasClass("in")||"in"==e.hoverState)e.hoverState="in";else{if(clearTimeout(e.timeout),e.hoverState="in",!e.options.delay||!e.options.delay.show)return e.show();e.timeout=setTimeout(function(){"in"==e.hoverState&&e.show()},e.options.delay.show)}},m.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},m.prototype.leave=function(t){var e=t instanceof this.constructor?t:g(t.currentTarget).data("bs."+this.type);if(e||(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),g(t.currentTarget).data("bs."+this.type,e)),t instanceof g.Event&&(e.inState["focusout"==t.type?"focus":"hover"]=!1),!e.isInStateTrue()){if(clearTimeout(e.timeout),e.hoverState="out",!e.options.delay||!e.options.delay.hide)return e.hide();e.timeout=setTimeout(function(){"out"==e.hoverState&&e.hide()},e.options.delay.hide)}},m.prototype.show=function(){var t=g.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(t);var e=g.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(t.isDefaultPrevented()||!e)return;var i=this,o=this.tip(),n=this.getUID(this.type);this.setContent(),o.attr("id",n),this.$element.attr("aria-describedby",n),this.options.animation&&o.addClass("fade");var s="function"==typeof this.options.placement?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement,a=/\s?auto?\s?/i,r=a.test(s);r&&(s=s.replace(a,"")||"top"),o.detach().css({top:0,left:0,display:"block"}).addClass(s).data("bs."+this.type,this),this.options.container?o.appendTo(g(document).find(this.options.container)):o.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var l=this.getPosition(),h=o[0].offsetWidth,d=o[0].offsetHeight;if(r){var p=s,c=this.getPosition(this.$viewport);s="bottom"==s&&l.bottom+d>c.bottom?"top":"top"==s&&l.top-d<c.top?"bottom":"right"==s&&l.right+h>c.width?"left":"left"==s&&l.left-h<c.left?"right":s,o.removeClass(p).addClass(s)}var f=this.getCalculatedOffset(s,l,h,d);this.applyPlacement(f,s);var u=function(){var t=i.hoverState;i.$element.trigger("shown.bs."+i.type),i.hoverState=null,"out"==t&&i.leave(i)};g.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",u).emulateTransitionEnd(m.TRANSITION_DURATION):u()}},m.prototype.applyPlacement=function(t,e){var i=this.tip(),o=i[0].offsetWidth,n=i[0].offsetHeight,s=parseInt(i.css("margin-top"),10),a=parseInt(i.css("margin-left"),10);isNaN(s)&&(s=0),isNaN(a)&&(a=0),t.top+=s,t.left+=a,g.offset.setOffset(i[0],g.extend({using:function(t){i.css({top:Math.round(t.top),left:Math.round(t.left)})}},t),0),i.addClass("in");var r=i[0].offsetWidth,l=i[0].offsetHeight;"top"==e&&l!=n&&(t.top=t.top+n-l);var h=this.getViewportAdjustedDelta(e,t,r,l);h.left?t.left+=h.left:t.top+=h.top;var d=/top|bottom/.test(e),p=d?2*h.left-o+r:2*h.top-n+l,c=d?"offsetWidth":"offsetHeight";i.offset(t),this.replaceArrow(p,i[0][c],d)},m.prototype.replaceArrow=function(t,e,i){this.arrow().css(i?"left":"top",50*(1-t/e)+"%").css(i?"top":"left","")},m.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();this.options.html?(this.options.sanitize&&(e=n(e,this.options.whiteList,this.options.sanitizeFn)),t.find(".tooltip-inner").html(e)):t.find(".tooltip-inner").text(e),t.removeClass("fade in top bottom left right")},m.prototype.hide=function(t){var e=this,i=g(this.$tip),o=g.Event("hide.bs."+this.type);function n(){"in"!=e.hoverState&&i.detach(),e.$element&&e.$element.removeAttr("aria-describedby").trigger("hidden.bs."+e.type),t&&t()}if(this.$element.trigger(o),!o.isDefaultPrevented())return i.removeClass("in"),g.support.transition&&i.hasClass("fade")?i.one("bsTransitionEnd",n).emulateTransitionEnd(m.TRANSITION_DURATION):n(),this.hoverState=null,this},m.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},m.prototype.hasContent=function(){return this.getTitle()},m.prototype.getPosition=function(t){var e=(t=t||this.$element)[0],i="BODY"==e.tagName,o=e.getBoundingClientRect();null==o.width&&(o=g.extend({},o,{width:o.right-o.left,height:o.bottom-o.top}));var n=window.SVGElement&&e instanceof window.SVGElement,s=i?{top:0,left:0}:n?null:t.offset(),a={scroll:i?document.documentElement.scrollTop||document.body.scrollTop:t.scrollTop()},r=i?{width:g(window).width(),height:g(window).height()}:null;return g.extend({},o,a,r,s)},m.prototype.getCalculatedOffset=function(t,e,i,o){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-i/2}:"top"==t?{top:e.top-o,left:e.left+e.width/2-i/2}:"left"==t?{top:e.top+e.height/2-o/2,left:e.left-i}:{top:e.top+e.height/2-o/2,left:e.left+e.width}},m.prototype.getViewportAdjustedDelta=function(t,e,i,o){var n={top:0,left:0};if(!this.$viewport)return n;var s=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var r=e.top-s-a.scroll,l=e.top+s-a.scroll+o;r<a.top?n.top=a.top-r:l>a.top+a.height&&(n.top=a.top+a.height-l)}else{var h=e.left-s,d=e.left+s+i;h<a.left?n.left=a.left-h:d>a.right&&(n.left=a.left+a.width-d)}return n},m.prototype.getTitle=function(){var t=this.$element,e=this.options;return t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},m.prototype.getUID=function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},m.prototype.tip=function(){if(!this.$tip&&(this.$tip=g(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},m.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},m.prototype.enable=function(){this.enabled=!0},m.prototype.disable=function(){this.enabled=!1},m.prototype.toggleEnabled=function(){this.enabled=!this.enabled},m.prototype.toggle=function(t){var e=this;t&&((e=g(t.currentTarget).data("bs."+this.type))||(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),g(t.currentTarget).data("bs."+this.type,e))),t?(e.inState.click=!e.inState.click,e.isInStateTrue()?e.enter(e):e.leave(e)):e.tip().hasClass("in")?e.leave(e):e.enter(e)},m.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})},m.prototype.sanitizeHtml=function(t){return n(t,this.options.whiteList,this.options.sanitizeFn)};var e=g.fn.tooltip;g.fn.tooltip=function i(o){return this.each(function(){var t=g(this),e=t.data("bs.tooltip"),i="object"==typeof o&&o;!e&&/destroy|hide/.test(o)||(e||t.data("bs.tooltip",e=new m(this,i)),"string"==typeof o&&e[o]())})},g.fn.tooltip.Constructor=m,g.fn.tooltip.noConflict=function(){return g.fn.tooltip=e,this}}(jQuery),function(n){"use strict";var s=function(t,e){this.init("popover",t,e)};if(!n.fn.tooltip)throw new Error("Popover requires tooltip.js");s.VERSION="3.4.1",s.DEFAULTS=n.extend({},n.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),((s.prototype=n.extend({},n.fn.tooltip.Constructor.prototype)).constructor=s).prototype.getDefaults=function(){return s.DEFAULTS},s.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),i=this.getContent();if(this.options.html){var o=typeof i;this.options.sanitize&&(e=this.sanitizeHtml(e),"string"===o&&(i=this.sanitizeHtml(i))),t.find(".popover-title").html(e),t.find(".popover-content").children().detach().end()["string"===o?"html":"append"](i)}else t.find(".popover-title").text(e),t.find(".popover-content").children().detach().end().text(i);t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},s.prototype.hasContent=function(){return this.getTitle()||this.getContent()},s.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},s.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var t=n.fn.popover;n.fn.popover=function e(o){return this.each(function(){var t=n(this),e=t.data("bs.popover"),i="object"==typeof o&&o;!e&&/destroy|hide/.test(o)||(e||t.data("bs.popover",e=new s(this,i)),"string"==typeof o&&e[o]())})},n.fn.popover.Constructor=s,n.fn.popover.noConflict=function(){return n.fn.popover=t,this}}(jQuery),function(s){"use strict";function n(t,e){this.$body=s(document.body),this.$scrollElement=s(t).is(document.body)?s(window):s(t),this.options=s.extend({},n.DEFAULTS,e),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",s.proxy(this.process,this)),this.refresh(),this.process()}function e(o){return this.each(function(){var t=s(this),e=t.data("bs.scrollspy"),i="object"==typeof o&&o;e||t.data("bs.scrollspy",e=new n(this,i)),"string"==typeof o&&e[o]()})}n.VERSION="3.4.1",n.DEFAULTS={offset:10},n.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},n.prototype.refresh=function(){var t=this,o="offset",n=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),s.isWindow(this.$scrollElement[0])||(o="position",n=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var t=s(this),e=t.data("target")||t.attr("href"),i=/^#./.test(e)&&s(e);return i&&i.length&&i.is(":visible")&&[[i[o]().top+n,e]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){t.offsets.push(this[0]),t.targets.push(this[1])})},n.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,i=this.getScrollHeight(),o=this.options.offset+i-this.$scrollElement.height(),n=this.offsets,s=this.targets,a=this.activeTarget;if(this.scrollHeight!=i&&this.refresh(),o<=e)return a!=(t=s[s.length-1])&&this.activate(t);if(a&&e<n[0])return this.activeTarget=null,this.clear();for(t=n.length;t--;)a!=s[t]&&e>=n[t]&&(n[t+1]===undefined||e<n[t+1])&&this.activate(s[t])},n.prototype.activate=function(t){this.activeTarget=t,this.clear();var e=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',i=s(e).parents("li").addClass("active");i.parent(".dropdown-menu").length&&(i=i.closest("li.dropdown").addClass("active")),i.trigger("activate.bs.scrollspy")},n.prototype.clear=function(){s(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var t=s.fn.scrollspy;s.fn.scrollspy=e,s.fn.scrollspy.Constructor=n,s.fn.scrollspy.noConflict=function(){return s.fn.scrollspy=t,this},s(window).on("load.bs.scrollspy.data-api",function(){s('[data-spy="scroll"]').each(function(){var t=s(this);e.call(t,t.data())})})}(jQuery),function(r){"use strict";var a=function(t){this.element=r(t)};function e(i){return this.each(function(){var t=r(this),e=t.data("bs.tab");e||t.data("bs.tab",e=new a(this)),"string"==typeof i&&e[i]()})}a.VERSION="3.4.1",a.TRANSITION_DURATION=150,a.prototype.show=function(){var t=this.element,e=t.closest("ul:not(.dropdown-menu)"),i=t.data("target");if(i||(i=(i=t.attr("href"))&&i.replace(/.*(?=#[^\s]*$)/,"")),!t.parent("li").hasClass("active")){var o=e.find(".active:last a"),n=r.Event("hide.bs.tab",{relatedTarget:t[0]}),s=r.Event("show.bs.tab",{relatedTarget:o[0]});if(o.trigger(n),t.trigger(s),!s.isDefaultPrevented()&&!n.isDefaultPrevented()){var a=r(document).find(i);this.activate(t.closest("li"),e),this.activate(a,a.parent(),function(){o.trigger({type:"hidden.bs.tab",relatedTarget:t[0]}),t.trigger({type:"shown.bs.tab",relatedTarget:o[0]})})}}},a.prototype.activate=function(t,e,i){var o=e.find("> .active"),n=i&&r.support.transition&&(o.length&&o.hasClass("fade")||!!e.find("> .fade").length);function s(){o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),t.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),n?(t[0].offsetWidth,t.addClass("in")):t.removeClass("fade"),t.parent(".dropdown-menu").length&&t.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),i&&i()}o.length&&n?o.one("bsTransitionEnd",s).emulateTransitionEnd(a.TRANSITION_DURATION):s(),o.removeClass("in")};var t=r.fn.tab;r.fn.tab=e,r.fn.tab.Constructor=a,r.fn.tab.noConflict=function(){return r.fn.tab=t,this};var i=function(t){t.preventDefault(),e.call(r(this),"show")};r(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',i).on("click.bs.tab.data-api",'[data-toggle="pill"]',i)}(jQuery),function(l){"use strict";var h=function(t,e){this.options=l.extend({},h.DEFAULTS,e);var i=this.options.target===h.DEFAULTS.target?l(this.options.target):l(document).find(this.options.target);this.$target=i.on("scroll.bs.affix.data-api",l.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",l.proxy(this.checkPositionWithEventLoop,this)),this.$element=l(t),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};function i(o){return this.each(function(){var t=l(this),e=t.data("bs.affix"),i="object"==typeof o&&o;e||t.data("bs.affix",e=new h(this,i)),"string"==typeof o&&e[o]()})}h.VERSION="3.4.1",h.RESET="affix affix-top affix-bottom",h.DEFAULTS={offset:0,target:window},h.prototype.getState=function(t,e,i,o){var n=this.$target.scrollTop(),s=this.$element.offset(),a=this.$target.height();if(null!=i&&"top"==this.affixed)return n<i&&"top";if("bottom"==this.affixed)return null!=i?!(n+this.unpin<=s.top)&&"bottom":!(n+a<=t-o)&&"bottom";var r=null==this.affixed,l=r?n:s.top;return null!=i&&n<=i?"top":null!=o&&t-o<=l+(r?a:e)&&"bottom"},h.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(h.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},h.prototype.checkPositionWithEventLoop=function(){setTimeout(l.proxy(this.checkPosition,this),1)},h.prototype.checkPosition=function(){if(this.$element.is(":visible")){var t=this.$element.height(),e=this.options.offset,i=e.top,o=e.bottom,n=Math.max(l(document).height(),l(document.body).height());"object"!=typeof e&&(o=i=e),"function"==typeof i&&(i=e.top(this.$element)),"function"==typeof o&&(o=e.bottom(this.$element));var s=this.getState(n,t,i,o);if(this.affixed!=s){null!=this.unpin&&this.$element.css("top","");var a="affix"+(s?"-"+s:""),r=l.Event(a+".bs.affix");if(this.$element.trigger(r),r.isDefaultPrevented())return;this.affixed=s,this.unpin="bottom"==s?this.getPinnedOffset():null,this.$element.removeClass(h.RESET).addClass(a).trigger(a.replace("affix","affixed")+".bs.affix")}"bottom"==s&&this.$element.offset({top:n-t-o})}};var t=l.fn.affix;l.fn.affix=i,l.fn.affix.Constructor=h,l.fn.affix.noConflict=function(){return l.fn.affix=t,this},l(window).on("load",function(){l('[data-spy="affix"]').each(function(){var t=l(this),e=t.data();e.offset=e.offset||{},null!=e.offsetBottom&&(e.offset.bottom=e.offsetBottom),null!=e.offsetTop&&(e.offset.top=e.offsetTop),i.call(t,e)})})}(jQuery);

;
$.sound_path = "v4u/sound/"; $(document).ready(function () { $("body").append("<div id='divSmallBoxes'></div>"); $("body").append("<div id='divMiniIcons'></div><div id='divbigBoxes'></div>") }); function SmartUnLoading() { $(".divMessageBox").fadeOut(300, function () { $(this).remove() }); $(".LoadingBoxContainer").fadeOut(300, function () { $(this).remove() }) } var ExistMsg = 0, SmartMSGboxCount = 0, PrevTop = 0; (function ($) { $.SmartMessageBox = function (settings, callback) { var SmartMSG, Content; settings = $.extend({ title: "", content: "", NormalButton: undefined, ActiveButton: undefined, buttons: undefined, input: undefined, inputValue: undefined, placeholder: "", options: undefined, selfClose: true/*this will be  used if there is any validation error when submitting the input and you don't want to close the smartmessagebox*/ }, settings); var PlaySound = 0; PlaySound = 1; if (isIE8orlower() == 0) { var audioElement = document.createElement("audio"); audioElement.setAttribute("src", $.sound_path + "messagebox.mp3"); $.get(); audioElement.addEventListener("load", function () { }, true); } SmartMSGboxCount = SmartMSGboxCount + 1; if (ExistMsg == 0) { ExistMsg = 1; SmartMSG = "<div class='divMessageBox animated fadeIn fast' id='MsgBoxBack'></div>"; $("body").append(SmartMSG); if (isIE8orlower() == 1) { $("#MsgBoxBack").addClass("MessageIE") } } var InputType = ""; var HasInput = 0; if (settings.input != undefined) { HasInput = 1; settings.input = settings.input.toLowerCase(); switch (settings.input) { case "text": settings.inputValue = $.type(settings.inputValue) === "string" ? settings.inputValue.replace(/'/g, "&#x27;") : settings.inputValue; InputType = "<input class='form-control' type='" + settings.input + "' id='txt" + SmartMSGboxCount + "' placeholder='" + settings.placeholder + "' value='" + settings.inputValue + "'/><br/><br/>"; break; case "password": InputType = "<input class='form-control' type='" + settings.input + "' id='txt" + SmartMSGboxCount + "' placeholder='" + settings.placeholder + "'/><br/><br/>"; break; case "select": if (settings.options == undefined) { alert("For this type of input, the options parameter is required.") } else { InputType = "<select class='form-control' id='txt" + SmartMSGboxCount + "'>"; for (var i = 0; i <= settings.options.length - 1; i++) { if (settings.options[i] == "[") { Name = "" } else { if (settings.options[i] == "]") { NumBottons = NumBottons + 1; Name = "<option>" + Name + "</option>"; InputType += Name } else { Name += settings.options[i] } } } InputType += "</select>" } break; default: alert("That type of input is not handled yet") } } Content = "<div class='MessageBoxContainer animated fadeIn fast' id='Msg" + SmartMSGboxCount + "'>"; Content += "<div class='MessageBoxMiddle'>"; Content += "<span class='MsgTitle'>" + settings.title + "</span class='MsgTitle'>"; Content += "<p class='pText'>" + settings.content + "</p>"; Content += InputType; Content += "<div class='MessageBoxButtonSection'>"; if (settings.buttons == undefined) { settings.buttons = "[Accept]" } settings.buttons = $.trim(settings.buttons); settings.buttons = settings.buttons.split(""); var Name = ""; var NumBottons = 0; if (settings.NormalButton == undefined) { settings.NormalButton = "#232323" } if (settings.ActiveButton == undefined) { settings.ActiveButton = "#ed145b" } for (var i = 0; i <= settings.buttons.length - 1; i++) { if (settings.buttons[i] == "[") { Name = "" } else { if (settings.buttons[i] == "]") { NumBottons = NumBottons + 1; Name = "<button id='bot" + NumBottons + "-Msg" + SmartMSGboxCount + "' class='btn btn-default btn-sm botTempo'> " + Name + "</button>"; Content += Name } else { Name += settings.buttons[i] } } } Content += "</div>"; Content += "</div>"; Content += "</div>"; if (SmartMSGboxCount > 1) { $(".MessageBoxContainer").hide(); $(".MessageBoxContainer").css("z-index", 99999) } $(".divMessageBox").append(Content); if (HasInput == 1) { $("#txt" + SmartMSGboxCount).focus() } $(".botTempo").hover(function () { var ThisID = $(this).attr("id") }, function () { var ThisID = $(this).attr("id") }); $(".botTempo").click(function () { var ThisID = $(this).attr("id"); var MsgBoxID = ThisID.substr(ThisID.indexOf("-") + 1); var Press = $.trim($(this).text()); if (HasInput == 1) { if (typeof callback == "function") { var IDNumber = MsgBoxID.replace("Msg", ""); var Value = $("#txt" + IDNumber).val(); if (callback) { callback(Press, Value, settings) } } } else { if (typeof callback == "function") { if (callback) { callback(Press, settings) } } } if (settings.selfClose) { $("#" + MsgBoxID).addClass("animated fadeOut fast"); SmartMSGboxCount = SmartMSGboxCount - 1; } if (SmartMSGboxCount == 0) { $("#MsgBoxBack").removeClass("fadeIn").addClass("fadeOut").delay(300).queue(function () { ExistMsg = 0; $(this).remove() }) } }) } })(jQuery); var BigBoxes = 0; (function ($) { $.bigBox = function (settings, callback) { var boxBig, content; settings = $.extend({ title: "", content: "", icon: undefined, number: undefined, color: undefined, sound: true, timeout: undefined, colortime: 1500, colors: undefined }, settings); if (settings.sound === true) { if (isIE8orlower() == 0) { var audioElement = document.createElement("audio"); if (navigator.userAgent.match("Firefox/")) { audioElement.setAttribute("src", $.sound_path + "bigbox.ogg") } else { audioElement.setAttribute("src", $.sound_path + "bigbox.mp3") } $.get(); } } BigBoxes = BigBoxes + 1; boxBig = "<div id='bigBox" + BigBoxes + "' class='bigBox animated fadeIn fast'><div id='bigBoxColor" + BigBoxes + "'><i class='botClose fa fa-times' id='botClose" + BigBoxes + "'></i>"; boxBig += "<span>" + settings.title + "</span>"; boxBig += "<p>" + settings.content + "</p>"; boxBig += "<div class='bigboxicon'>"; if (settings.icon == undefined) { settings.icon = "fa fa-cloud" } boxBig += "<i class='" + settings.icon + "'></i>"; boxBig += "</div>"; boxBig += "<div class='bigboxnumber'>"; if (settings.number != undefined) { boxBig += settings.number } boxBig += "</div></div>"; boxBig += "</div>"; $("#divbigBoxes").append(boxBig); if (settings.color == undefined) { settings.color = "#004d60" } $("#bigBox" + BigBoxes).css("background-color", settings.color); $("#divMiniIcons").append("<div id='miniIcon" + BigBoxes + "' class='cajita animated fadeIn' style='background-color: " + settings.color + ";'><i class='" + settings.icon + "'/></i></div>"); $("#miniIcon" + BigBoxes).bind("click", function () { var FrontBox = $(this).attr("id"); var FrontBigBox = FrontBox.replace("miniIcon", "bigBox"); var FronBigBoxColor = FrontBox.replace("miniIcon", "bigBoxColor"); $(".cajita").each(function (index) { var BackBox = $(this).attr("id"); var BigBoxID = BackBox.replace("miniIcon", "bigBox"); $("#" + BigBoxID).css("z-index", 9998) }); $("#" + FrontBigBox).css("z-index", 9999); $("#" + FronBigBoxColor).removeClass("animated fadeIn").delay(1).queue(function () { $(this).show(); $(this).addClass("animated fadeIn"); $(this).clearQueue() }) }); var ThisBigBoxCloseCross = $("#botClose" + BigBoxes); var ThisBigBox = $("#bigBox" + BigBoxes); var ThisMiniIcon = $("#miniIcon" + BigBoxes); var ColorTimeInterval; if (settings.colors != undefined && settings.colors.length > 0) { ThisBigBoxCloseCross.attr("colorcount", "0"); ColorTimeInterval = setInterval(function () { var ColorIndex = ThisBigBoxCloseCross.attr("colorcount"); ThisBigBoxCloseCross.animate({ backgroundColor: settings.colors[ColorIndex].color }); ThisBigBox.animate({ backgroundColor: settings.colors[ColorIndex].color }); ThisMiniIcon.animate({ backgroundColor: settings.colors[ColorIndex].color }); if (ColorIndex < settings.colors.length - 1) { ThisBigBoxCloseCross.attr("colorcount", ((ColorIndex * 1) + 1)) } else { ThisBigBoxCloseCross.attr("colorcount", 0) } }, settings.colortime) } ThisBigBoxCloseCross.bind("click", function () { clearInterval(ColorTimeInterval); if (typeof callback == "function") { if (callback) { callback() } } var FrontBox = $(this).attr("id"); var FrontBigBox = FrontBox.replace("botClose", "bigBox"); var miniIcon = FrontBox.replace("botClose", "miniIcon"); $("#" + FrontBigBox).removeClass("fadeIn fast"); $("#" + FrontBigBox).addClass("fadeOut fast").delay(300).queue(function () { $(this).clearQueue(); $(this).remove() }); $("#" + miniIcon).removeClass("fadeIn fast"); $("#" + miniIcon).addClass("fadeOut fast").delay(300).queue(function () { $(this).clearQueue(); $(this).remove() }) }); if (settings.timeout != undefined) { var TimedID = BigBoxes; setTimeout(function () { clearInterval(ColorTimeInterval); $("#bigBox" + TimedID).removeClass("fadeIn fast"); $("#bigBox" + TimedID).addClass("fadeOut fast").delay(300).queue(function () { $(this).clearQueue(); $(this).remove() }); $("#miniIcon" + TimedID).removeClass("fadeIn fast"); $("#miniIcon" + TimedID).addClass("fadeOut fast").delay(300).queue(function () { $(this).clearQueue(); $(this).remove() }) }, settings.timeout) } } })(jQuery); var SmallBoxes = 0, SmallCount = 0, SmallBoxesAnchos = 0; (function ($) { $.smallBox = function (settings, callback) { var BoxSmall, content; settings = $.extend({ title: "", content: "", icon: undefined, iconSmall: undefined, sound: true, color: undefined, timeout: undefined, colortime: 1500, colors: undefined }, settings); if (settings.sound === true) { if (isIE8orlower() == 0) { var audioElement = document.createElement("audio"); if (navigator.userAgent.match("Firefox/")) { audioElement.setAttribute("src", $.sound_path + "smallbox.ogg") } /*else { audioElement.setAttribute("src", $.sound_path + "smallbox.mp3") }*/ $.get();} } SmallBoxes = SmallBoxes + 1; BoxSmall = ""; var IconSection = "", CurrentIDSmallbox = "smallbox" + SmallBoxes; if (settings.iconSmall == undefined) { IconSection = "<div class='miniIcono'></div>" } else { IconSection = "<div class='miniIcono'><i class='miniPic " + settings.iconSmall + "'></i></div>" } if (settings.icon == undefined) { BoxSmall = "<div id='smallbox" + SmallBoxes + "' class='SmallBox animated fadeInRight fast'><div class='textoFull'><span>" + settings.title + "</span><p>" + settings.content + "</p></div>" + IconSection + "</div>" } else { BoxSmall = "<div id='smallbox" + SmallBoxes + "' class='SmallBox animated fadeInRight fast'><div class='foto'><i class='" + settings.icon + "'></i></div><div class='textoFoto'><span>" + settings.title + "</span><p>" + settings.content + "</p></div>" + IconSection + "</div>" } if (SmallBoxes == 1) { $("#divSmallBoxes").append(BoxSmall); SmallBoxesAnchos = $("#smallbox" + SmallBoxes).height() + 40 } else { var SmartExist = $(".SmallBox").length; if (SmartExist == 0) { $("#divSmallBoxes").append(BoxSmall); SmallBoxesAnchos = $("#smallbox" + SmallBoxes).height() + 40 } else { $("#divSmallBoxes").append(BoxSmall); $("#smallbox" + SmallBoxes).css("top", SmallBoxesAnchos); SmallBoxesAnchos = SmallBoxesAnchos + $("#smallbox" + SmallBoxes).height() + 20; $(".SmallBox").each(function (index) { if (index == 0) { $(this).css("top", 20); heightPrev = $(this).height() + 40; SmallBoxesAnchos = $(this).height() + 40 } else { $(this).css("top", heightPrev); heightPrev = heightPrev + $(this).height() + 20; SmallBoxesAnchos = SmallBoxesAnchos + $(this).height() + 20 } }) } } var ThisSmallBox = $("#smallbox" + SmallBoxes); if (settings.color == undefined) { ThisSmallBox.css("background-color", "#004d60") } else { ThisSmallBox.css("background-color", settings.color) } var ColorTimeInterval; if (settings.colors != undefined && settings.colors.length > 0) { ThisSmallBox.attr("colorcount", "0"); ColorTimeInterval = setInterval(function () { var ColorIndex = ThisSmallBox.attr("colorcount"); ThisSmallBox.animate({ backgroundColor: settings.colors[ColorIndex].color }); if (ColorIndex < settings.colors.length - 1) { ThisSmallBox.attr("colorcount", ((ColorIndex * 1) + 1)) } else { ThisSmallBox.attr("colorcount", 0) } }, settings.colortime) } if (settings.timeout != undefined) { setTimeout(function () { clearInterval(ColorTimeInterval); var ThisHeight = $(this).height() + 20; var ID = CurrentIDSmallbox; var ThisTop = $("#" + CurrentIDSmallbox).css("top"); if ($("#" + CurrentIDSmallbox + ":hover").length != 0) { $("#" + CurrentIDSmallbox).on("mouseleave", function () { SmallBoxesAnchos = SmallBoxesAnchos - ThisHeight; $("#" + CurrentIDSmallbox).remove(); if (typeof callback == "function") { if (callback) { callback() } } var Primero = 1; var heightPrev = 0; $(".SmallBox").each(function (index) { if (index == 0) { $(this).animate({ top: 20 }, 300); heightPrev = $(this).height() + 40; SmallBoxesAnchos = $(this).height() + 40 } else { $(this).animate({ top: heightPrev }, 350); heightPrev = heightPrev + $(this).height() + 20; SmallBoxesAnchos = SmallBoxesAnchos + $(this).height() + 20 } }) }) } else { clearInterval(ColorTimeInterval); SmallBoxesAnchos = SmallBoxesAnchos - ThisHeight; if (typeof callback == "function") { if (callback) { callback() } } $("#" + CurrentIDSmallbox).removeClass().addClass("SmallBox").animate({ opacity: 0 }, 300, function () { $(this).remove(); var Primero = 1; var heightPrev = 0; $(".SmallBox").each(function (index) { if (index == 0) { $(this).animate({ top: 20 }, 300); heightPrev = $(this).height() + 40; SmallBoxesAnchos = $(this).height() + 40 } else { $(this).animate({ top: heightPrev }); heightPrev = heightPrev + $(this).height() + 20; SmallBoxesAnchos = SmallBoxesAnchos + $(this).height() + 20 } }) }) } }, settings.timeout) } $("#smallbox" + SmallBoxes).bind("click", function () { clearInterval(ColorTimeInterval); if (typeof callback == "function") { if (callback) { callback() } } var ThisHeight = $(this).height() + 20; var ID = $(this).attr("id"); var ThisTop = $(this).css("top"); SmallBoxesAnchos = SmallBoxesAnchos - ThisHeight; $(this).removeClass().addClass("SmallBox").animate({ opacity: 0 }, 300, function () { $(this).remove(); var Primero = 1; var heightPrev = 0; $(".SmallBox").each(function (index) { if (index == 0) { $(this).animate({ top: 20 }, 300); heightPrev = $(this).height() + 40; SmallBoxesAnchos = $(this).height() + 40 } else { $(this).animate({ top: heightPrev }, 350); heightPrev = heightPrev + $(this).height() + 20; SmallBoxesAnchos = SmallBoxesAnchos + $(this).height() + 20 } }) }) }) } })(jQuery); function getInternetExplorerVersion() { var rv = -1; if (navigator.appName == "Microsoft Internet Explorer") { var ua = navigator.userAgent; var re = new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})"); if (re.exec(ua) != null) { rv = parseFloat(RegExp.$1) } } return rv } function checkVersion() { var msg = "You're not using Windows Internet Explorer."; var ver = getInternetExplorerVersion(); if (ver > -1) { if (ver >= 8) { msg = "You're using a recent copy of Windows Internet Explorer." } else { msg = "You should upgrade your copy of Windows Internet Explorer." } } alert(msg) } function isIE8orlower() { var msg = "0"; var ver = getInternetExplorerVersion(); if (ver > -1) { if (ver >= 9) { msg = 0 } else { msg = 1 } } return msg };

;
// Original Smart Notification (bootstraphunter.com)


//$(document).ready(function () {

//    // Plugins placing
//    $("body").append("<div id='divSmallBoxes'></div>");
//    $("body").append("<div id='divMiniIcons'></div><div id='divbigBoxes'></div>");

//});

(function ($) {
    // Messagebox
    var ExistMsg2 = 0,
        SmartMSGboxCount2 = 0,
        PrevTop2 = 0;
    $.OpenSmartMessageBox2 = function (settings, callback) {
        //if (SmartMSGboxCount2 == 0) {
            var SmartMSG, Content;
            settings = $.extend({
                title: "",
                content: "",
                NormalButton: undefined,
                ActiveButton: undefined,
                buttons: undefined,
                input: undefined,
                inputValue: undefined,
                placeholder: "",
                options: undefined
            }, settings);

            SmartMSGboxCount2 = SmartMSGboxCount2 + 1;

            if (ExistMsg2 == 0) {
                ExistMsg2 = 1;
                SmartMSG = "<div class='divMessageBox animated fadeIn fast' id='MsgBoxBack'></div>";
                $("body").append(SmartMSG);

                if (isIE8orlower() == 1) {
                    $("#MsgBoxBack").addClass("MessageIE");
                }
            }

            var InputType = "";
            var HasInput = 0;
            if (settings.input != undefined) {
                HasInput = 1;
                settings.input = settings.input.toLowerCase();

                switch (settings.input) {
                    case "text":
                        settings.inputValue = $.type(settings.inputValue) === 'string' ? settings.inputValue.replace(/'/g, "&#x27;") : settings.inputValue;
                        InputType = "<input class='form-control' type='" + settings.input + "' id='txt" +
                            SmartMSGboxCount2 + "' placeholder='" + settings.placeholder + "' value='" + settings.inputValue + "'/><br/><br/>";
                        break;
                    case "password":
                        InputType = "<input class='form-control' type='" + settings.input + "' id='txt" +
                            SmartMSGboxCount2 + "' placeholder='" + settings.placeholder + "'/><br/><br/>";
                        break;

                    case "select":
                        if (settings.options == undefined) {
                            alert("For this type of input, the options parameter is required.");
                        } else {
                            InputType = "<select class='form-control' id='txt" + SmartMSGboxCount2 + "'>";
                            for (var i = 0; i <= settings.options.length - 1; i++) {
                                if (settings.options[i] == "[") {
                                    Name = "";
                                } else {
                                    if (settings.options[i] == "]") {
                                        NumBottons = NumBottons + 1;
                                        Name = "<option>" + Name + "</option>";
                                        InputType += Name;
                                    } else {
                                        Name += settings.options[i];
                                    }
                                }
                            };
                            InputType += "</select>"
                        }

                        break;
                    default:
                        alert("That type of input is not handled yet");
                }

            }

            Content = "<div class='MessageBoxContainer animated fadeIn fast' id='Msg2-" + SmartMSGboxCount2 +
                "'>";
            Content += "<div class='MessageBoxMiddle'>";
            Content += "<span class='MsgTitle'>" + settings.title + "</span class='MsgTitle'>";
            Content += "<p class='pText'>" + settings.content + "</p>";
            Content += InputType;
            Content += "<div class='MessageBoxButtonSection'>";

            if (settings.buttons == undefined || settings.buttons == null) {
                settings.buttons = "[Accept]";
            } else if (typeof (settings.buttons) === "object" && settings.buttons.length !== undefined) {
                settings.buttons = settings.buttons.join(',');
            }

            settings.buttons = $.trim(settings.buttons);
            settings.buttons = settings.buttons.split('');

            var Name = "";
            var NumBottons = 0;
            if (settings.NormalButton == undefined) {
                settings.NormalButton = "#232323";
            }

            if (settings.ActiveButton == undefined) {
                settings.ActiveButton = "#ed145b";
            }

            for (var i = 0; i <= settings.buttons.length - 1; i++) {

                if (settings.buttons[i] == "[") {
                    Name = "";
                } else {
                    if (settings.buttons[i] == "]") {
                        NumBottons = NumBottons + 1;
                        Name = "<button id='bot" + NumBottons + "-Msg2-" + SmartMSGboxCount2 +
                            "' class='btn btn-default btn-sm botTempo'> " + Name + "</button>";
                        Content += Name;
                    } else {
                        Name += settings.buttons[i];
                    }
                }
            };

            Content += "</div>";
            //MessageBoxButtonSection
            Content += "</div>";
            //MessageBoxMiddle
            Content += "</div>";
            //MessageBoxContainer

            // alert(SmartMSGboxCount2);
            if (SmartMSGboxCount2 > 1) {
                $(".MessageBoxContainer").hide();
                $(".MessageBoxContainer").css("z-index", 99999);
            }

            $(".divMessageBox").append(Content);

            // Focus
            if (HasInput == 1) {
                $("#txt" + SmartMSGboxCount2).focus();
            }

            $('.botTempo').hover(function () {
                var ThisID = $(this).attr('id');
                // alert(ThisID);
                // $("#"+ThisID).css("background-color", settings.ActiveButton);
            }, function () {
                var ThisID = $(this).attr('id');
                //$("#"+ThisID).css("background-color", settings.NormalButton);
            });

            // Callback and button Pressed
            $(".MessageBoxButtonSection:last .botTempo").click(function () {
                // Closing Method
                var $this = $(this);
                var thisId = $this.attr('id');
                var msgBoxId;
                if (thisId != undefined)            //added for #8683
                    msgBoxId = thisId.substr(thisId.indexOf("-") + 1);
                var press = $.trim($this.text());

                var close = true;
                if (HasInput == 1) {
                    if (typeof callback == "function") {
                        var idNumber = msgBoxId.replace("Msg", "");
                        var Value = $("#txt" + idNumber).val();
                        if (callback)
                            callback(press, Value);
                    }
                } else {
                    if (typeof callback == "function") {
                        if (callback)
                            callback(press);
                    }
                }


                //$("#" + MsgBoxID).addClass("animated fadeOut fast");
                //SmartMSGboxCount2 = SmartMSGboxCount2 - 1;

                //if (SmartMSGboxCount2 == 0) {
                //    $("#MsgBoxBack").removeClass("fadeIn").addClass("fadeOut").delay(300).queue(function () {
                //        ExistMsg2 = 0;
                //        $(this).remove();
                //    });
                //}
            });
        //}
    }

    $.CloseSmartMessageBox2 = function (settings, callback) {
        if (SmartMSGboxCount2 > 0) {
            var MsgBoxID = "Msg2-" + SmartMSGboxCount2;

            $("#" + MsgBoxID).addClass("animated fadeOut fast");
            //SmartMSGboxCount2 = SmartMSGboxCount2 - 1; Commenting this cause we dont know what effect it may have in long term
            SmartMSGboxCount2 = 0;

            if (SmartMSGboxCount2 == 0) {
                $("#MsgBoxBack").removeClass("fadeIn").addClass("fadeOut").delay(300).queue(function () {
                    ExistMsg2 = 0;
                    $(this).remove();
                });
            }
        }
    }

    $.CloseAllSmartMessageBox2 = function (settings, callback) {
        $("#MsgBoxBack").removeClass("fadeIn").addClass("fadeOut").delay(300).queue(function () {
            ExistMsg2 = 0;
            $(this).remove();
        });
    }
})(jQuery);


;
(function($,window,document,undefined){var pluginName="jarvisWidgets";function Plugin(element,options){this.obj=$(element);this.o=$.extend({},$.fn[pluginName].defaults,options);this.objId=this.obj.attr("id");this.pwCtrls=".jarviswidget-ctrls";this.widget=this.obj.find(this.o.widgets);this.toggleClass=this.o.toggleClass.split("|");this.editClass=this.o.editClass.split("|");this.fullscreenClass=this.o.fullscreenClass.split("|");this.customClass=this.o.customClass.split("|");this.init()}Plugin.prototype={_settings:function(){var self=this;storage=!!function(){var result,uid=+new Date;try{localStorage.setItem(uid,uid);result=localStorage.getItem(uid)==uid;localStorage.removeItem(uid);return result}catch(e){}}()&&localStorage;if(storage&&self.o.localStorage){if(self.o.ajaxnav===true){widget_url=location.hash.replace(/^#/,"");keySettings="Plugin_settings_"+widget_url+"_"+self.objId;getKeySettings=localStorage.getItem(keySettings);keyPosition="Plugin_position_"+widget_url+"_"+self.objId;getKeyPosition=localStorage.getItem(keyPosition)}else{keySettings="jarvisWidgets_settings_"+location.pathname+"_"+self.objId;getKeySettings=localStorage.getItem(keySettings);keyPosition="jarvisWidgets_position_"+location.pathname+"_"+self.objId;getKeyPosition=localStorage.getItem(keyPosition)}}if(("ontouchstart" in window)||window.DocumentTouch&&document instanceof DocumentTouch){clickEvent="touchstart"}else{clickEvent="click"}},_runLoaderWidget:function(elm){var self=this;if(self.o.indicator===true){elm.parents(self.o.widgets).find(".jarviswidget-loader").stop(true,true).fadeIn(100).delay(self.o.indicatorTime).fadeOut(100)}},_getPastTimestamp:function(t){var self=this;var da=new Date(t);tsMonth=da.getMonth()+1;tsDay=da.getDate();tsYear=da.getFullYear();tsHours=da.getHours();tsMinutes=da.getMinutes();tsSeconds=da.getUTCSeconds();if(tsMonth<10){var tsMonth="0"+tsMonth}if(tsDay<10){var tsDay="0"+tsDay}if(tsHours<10){var tsHours="0"+tsHours}if(tsMinutes<10){var tsMinutes="0"+tsMinutes}if(tsSeconds<10){var tsSeconds="0"+tsSeconds}var format=self.o.timestampFormat.replace(/%d%/g,tsDay).replace(/%m%/g,tsMonth).replace(/%y%/g,tsYear).replace(/%h%/g,tsHours).replace(/%i%/g,tsMinutes).replace(/%s%/g,tsSeconds);return format},_loadAjaxFile:function(awidget,file,loader){var self=this;awidget.find(".widget-body").load(file,function(response,status,xhr){var $this=$(this);if(status=="error"){$this.html('<h4 class="alert alert-danger">'+self.o.labelError+"<b> "+xhr.status+" "+xhr.statusText+"</b></h4>")}if(status=="success"){var aPalceholder=awidget.find(self.o.timestampPlaceholder);if(aPalceholder.length){aPalceholder.html(self._getPastTimestamp(new Date()))}if(typeof self.o.afterLoad=="function"){self.o.afterLoad.call(this,awidget)}}});self._runLoaderWidget(loader)},_saveSettingsWidget:function(){var self=this;self._settings();if(storage&&self.o.localStorage){var storeSettings=[];self.obj.find(self.o.widgets).each(function(){var storeSettingsStr={};storeSettingsStr.id=$(this).attr("id");storeSettingsStr.style=$(this).attr("data-widget-attstyle");storeSettingsStr.title=$(this).children("header").children("h2").text();storeSettingsStr.hidden=($(this).is(":hidden")?1:0);storeSettingsStr.collapsed=($(this).hasClass("jarviswidget-collapsed")?1:0);storeSettings.push(storeSettingsStr)});var storeSettingsObj=JSON.stringify({widget:storeSettings});if(getKeySettings!=storeSettingsObj){localStorage.setItem(keySettings,storeSettingsObj)}}if(typeof self.o.onSave=="function"){self.o.onSave.call(this,null,storeSettingsObj)}},_savePositionWidget:function(){var self=this;self._settings();if(storage&&self.o.localStorage){var mainArr=[];self.obj.find(self.o.grid+".sortable-grid").each(function(){var subArr=[];$(this).children(self.o.widgets).each(function(){var subObj={};subObj.id=$(this).attr("id");subArr.push(subObj)});var out={section:subArr};mainArr.push(out)});var storePositionObj=JSON.stringify({grid:mainArr});if(getKeyPosition!=storePositionObj){localStorage.setItem(keyPosition,storePositionObj,null)}}if(typeof self.o.onSave=="function"){self.o.onSave.call(this,storePositionObj)}},init:function(){var self=this;self._settings();if(!$("#"+self.objId).length){alert("It looks like your using a class instead of an ID, dont do that!")}if(self.o.rtl===true){$("body").addClass("rtl")}$(self.o.grid).each(function(){if($(this).find(self.o.widgets).length){$(this).addClass("sortable-grid")}});if(storage&&self.o.localStorage&&getKeyPosition){var jsonPosition=JSON.parse(getKeyPosition);for(var key in jsonPosition.grid){var changeOrder=self.obj.find(self.o.grid+".sortable-grid").eq(key);for(var key2 in jsonPosition.grid[key].section){changeOrder.append($("#"+jsonPosition.grid[key].section[key2].id))}}}if(storage&&self.o.localStorage&&getKeySettings){var jsonSettings=JSON.parse(getKeySettings);for(var key in jsonSettings.widget){var widgetId=$("#"+jsonSettings.widget[key].id);if(jsonSettings.widget[key].style){widgetId.removeClassPrefix("jarviswidget-color-").addClass(jsonSettings.widget[key].style).attr("data-widget-attstyle",""+jsonSettings.widget[key].style+"")}if(jsonSettings.widget[key].hidden==1){widgetId.hide(1)}else{widgetId.show(1).removeAttr("data-widget-hidden")}if(jsonSettings.widget[key].collapsed==1){widgetId.addClass("jarviswidget-collapsed").children("div").hide(1)}if(widgetId.children("header").children("h2").text()!=jsonSettings.widget[key].title){widgetId.children("header").children("h2").text(jsonSettings.widget[key].title)}}}self.widget.each(function(){var tWidget=$(this);var thisHeader=$(this).children("header");if(!thisHeader.parent().attr("role")){if(tWidget.data("widget-hidden")===true){tWidget.hide()}if(tWidget.data("widget-collapsed")===true){tWidget.addClass("jarviswidget-collapsed").children("div").hide()}if(self.o.customButton===true&&tWidget.data("widget-custombutton")===undefined&&self.customClass[0].length!=0){var customBtn='<a href="javascript:void(0);" class="button-icon jarviswidget-custom-btn"><i class="'+self.customClass[0]+'"></i></a>'}else{customBtn=""}if(self.o.deleteButton===true&&tWidget.data("widget-deletebutton")===undefined){var deleteBtn='<a href="javascript:void(0);" class="button-icon jarviswidget-delete-btn" rel="tooltip" title="Delete" data-placement="bottom"><i class="'+self.o.deleteClass+'"></i></a>'}else{deleteBtn=""}if(self.o.editButton===true&&tWidget.data("widget-editbutton")===undefined){var editBtn='<a href="javascript:void(0);" class="button-icon jarviswidget-edit-btn" rel="tooltip" title="Edit Title" data-placement="bottom"><i class="'+self.editClass[0]+'"></i></a>'}else{editBtn=""}if(self.o.fullscreenButton===true&&tWidget.data("widget-fullscreenbutton")===undefined){var fullscreenBtn='<a href="javascript:void(0);" class="button-icon jarviswidget-fullscreen-btn" rel="tooltip" title="Fullscreen" data-placement="bottom"><i class="'+self.fullscreenClass[0]+'"></i></a>'}else{fullscreenBtn=""}if(self.o.colorButton===true&&tWidget.data("widget-colorbutton")===undefined){var widgetcolorBtn='<a data-toggle="dropdown" class="dropdown-toggle color-box selector" href="javascript:void(0);"></a><ul class="dropdown-menu arrow-box-up-right color-select pull-right"><li><span class="bg-color-green" data-widget-setstyle="jarviswidget-color-green" rel="tooltip" data-placement="left" data-original-title="Green Grass"></span></li><li><span class="bg-color-greenDark" data-widget-setstyle="jarviswidget-color-greenDark" rel="tooltip" data-placement="top" data-original-title="Dark Green"></span></li><li><span class="bg-color-greenLight" data-widget-setstyle="jarviswidget-color-greenLight" rel="tooltip" data-placement="top" data-original-title="Light Green"></span></li><li><span class="bg-color-purple" data-widget-setstyle="jarviswidget-color-purple" rel="tooltip" data-placement="top" data-original-title="Purple"></span></li><li><span class="bg-color-magenta" data-widget-setstyle="jarviswidget-color-magenta" rel="tooltip" data-placement="top" data-original-title="Magenta"></span></li><li><span class="bg-color-pink" data-widget-setstyle="jarviswidget-color-pink" rel="tooltip" data-placement="right" data-original-title="Pink"></span></li><li><span class="bg-color-pinkDark" data-widget-setstyle="jarviswidget-color-pinkDark" rel="tooltip" data-placement="left" data-original-title="Fade Pink"></span></li><li><span class="bg-color-blueLight" data-widget-setstyle="jarviswidget-color-blueLight" rel="tooltip" data-placement="top" data-original-title="Light Blue"></span></li><li><span class="bg-color-teal" data-widget-setstyle="jarviswidget-color-teal" rel="tooltip" data-placement="top" data-original-title="Teal"></span></li><li><span class="bg-color-blue" data-widget-setstyle="jarviswidget-color-blue" rel="tooltip" data-placement="top" data-original-title="Ocean Blue"></span></li><li><span class="bg-color-blueDark" data-widget-setstyle="jarviswidget-color-blueDark" rel="tooltip" data-placement="top" data-original-title="Night Sky"></span></li><li><span class="bg-color-darken" data-widget-setstyle="jarviswidget-color-darken" rel="tooltip" data-placement="right" data-original-title="Night"></span></li><li><span class="bg-color-yellow" data-widget-setstyle="jarviswidget-color-yellow" rel="tooltip" data-placement="left" data-original-title="Day Light"></span></li><li><span class="bg-color-orange" data-widget-setstyle="jarviswidget-color-orange" rel="tooltip" data-placement="bottom" data-original-title="Orange"></span></li><li><span class="bg-color-orangeDark" data-widget-setstyle="jarviswidget-color-orangeDark" rel="tooltip" data-placement="bottom" data-original-title="Dark Orange"></span></li><li><span class="bg-color-red" data-widget-setstyle="jarviswidget-color-red" rel="tooltip" data-placement="bottom" data-original-title="Red Rose"></span></li><li><span class="bg-color-redLight" data-widget-setstyle="jarviswidget-color-redLight" rel="tooltip" data-placement="bottom" data-original-title="Light Red"></span></li><li><span class="bg-color-white" data-widget-setstyle="jarviswidget-color-white" rel="tooltip" data-placement="right" data-original-title="Purity"></span></li><li><a href="javascript:void(0);" class="jarviswidget-remove-colors" data-widget-setstyle="" rel="tooltip" data-placement="bottom" data-original-title="Reset widget color to default">Remove</a></li></ul>';thisHeader.prepend('<div class="widget-toolbar">'+widgetcolorBtn+"</div>")}else{widgetcolorBtn=""}if(self.o.toggleButton===true&&tWidget.data("widget-togglebutton")===undefined){if(tWidget.data("widget-collapsed")===true||tWidget.hasClass("jarviswidget-collapsed")){var toggleSettings=self.toggleClass[1]}else{toggleSettings=self.toggleClass[0]}var toggleBtn='<a href="#" class="button-icon jarviswidget-toggle-btn" rel="tooltip" title="Collapse" data-placement="bottom"><i class="'+toggleSettings+'"></i></a>'}else{toggleBtn=""}if(self.o.refreshButton===true&&tWidget.data("widget-refreshbutton")!=false&&tWidget.data("widget-load")){var refreshBtn='<a href="#" class="button-icon jarviswidget-refresh-btn" data-loading-text="&nbsp;&nbsp;Loading...&nbsp;" rel="tooltip" title="Refresh" data-placement="bottom"><i class="'+self.o.refreshButtonClass+'"></i></a>'}else{refreshBtn=""}var formatButtons=self.o.buttonOrder.replace(/%refresh%/g,refreshBtn).replace(/%delete%/g,deleteBtn).replace(/%custom%/g,customBtn).replace(/%fullscreen%/g,fullscreenBtn).replace(/%edit%/g,editBtn).replace(/%toggle%/g,toggleBtn);if(refreshBtn!=""||deleteBtn!=""||customBtn!=""||fullscreenBtn!=""||editBtn!=""||toggleBtn!=""){thisHeader.prepend('<div class="jarviswidget-ctrls">'+formatButtons+"</div>")}if(self.o.sortable===true&&tWidget.data("widget-sortable")===undefined){tWidget.addClass("jarviswidget-sortable")}if(tWidget.find(self.o.editPlaceholder).length){tWidget.find(self.o.editPlaceholder).find("input").val($.trim(thisHeader.children("h2").text()))}thisHeader.append('<span class="jarviswidget-loader"><i class="fa fa-sync fa-spin"></i></span>');tWidget.attr("role","widget").children("div").attr("role","content").prev("header").attr("role","heading").children("div").attr("role","menu")}});if(self.o.buttonsHidden===true){$(self.o.pwCtrls).hide()}$(".jarviswidget header [rel=tooltip]").tooltip();self.obj.find("[data-widget-load]").each(function(){var thisItem=$(this),thisItemHeader=thisItem.children(),pathToFile=thisItem.data("widget-load"),reloadTime=thisItem.data("widget-refresh")*1000,ajaxLoader=thisItem.children();if(!thisItem.find(".jarviswidget-ajax-placeholder").length){thisItem.children("widget-body").append('<div class="jarviswidget-ajax-placeholder">'+self.o.loadingLabel+"</div>");if(thisItem.data("widget-refresh")>0){self._loadAjaxFile(thisItem,pathToFile,thisItemHeader);setInterval(function(){self._loadAjaxFile(thisItem,pathToFile,thisItemHeader)},reloadTime)}else{self._loadAjaxFile(thisItem,pathToFile,thisItemHeader)}}});if(self.o.sortable===true&&jQuery.ui){var sortItem=self.obj.find(".sortable-grid").not("[data-widget-excludegrid]");sortItem.sortable({items:sortItem.find(".jarviswidget-sortable"),connectWith:sortItem,placeholder:self.o.placeholderClass,cursor:"move",revert:true,opacity:self.o.opacity,delay:200,cancel:".button-icon, #jarviswidget-fullscreen-mode > div",zIndex:10000,handle:self.o.dragHandle,forcePlaceholderSize:true,forceHelperSize:true,update:function(event,ui){self._runLoaderWidget(ui.item.children());self._savePositionWidget();if(typeof self.o.onChange=="function"){self.o.onChange.call(this,ui.item)}}})}if(self.o.buttonsHidden===true){self.widget.children("header").hover(function(){$(this).children(self.o.pwCtrls).stop(true,true).fadeTo(100,1)},function(){$(this).children(self.o.pwCtrls).stop(true,true).fadeTo(100,0)})}self._clickEvents();$(self.o.deleteSettingsKey).on(clickEvent,this,function(e){if(storage&&self.o.localStorage){var cleared=confirm(self.o.settingsKeyLabel);if(cleared){localStorage.removeItem(keySettings)}}e.preventDefault()});$(self.o.deletePositionKey).on(clickEvent,this,function(e){if(storage&&self.o.localStorage){var cleared=confirm(self.o.positionKeyLabel);if(cleared){localStorage.removeItem(keyPosition)}}e.preventDefault()});if(storage&&self.o.localStorage){if(getKeySettings===null||getKeySettings.length<1){self._saveSettingsWidget()}if(getKeyPosition===null||getKeyPosition.length<1){self._savePositionWidget()}}},_clickEvents:function(){var self=this;self._settings();self.widget.on(clickEvent,".jarviswidget-toggle-btn",function(e){var tWidget=$(this);var pWidget=tWidget.parents(self.o.widgets);self._runLoaderWidget(tWidget);if(pWidget.hasClass("jarviswidget-collapsed")){tWidget.children().removeClass(self.toggleClass[1]).addClass(self.toggleClass[0]).parents(self.o.widgets).removeClass("jarviswidget-collapsed").children("[role=content]").slideDown(self.o.toggleSpeed,function(){self._saveSettingsWidget()})}else{tWidget.children().removeClass(self.toggleClass[0]).addClass(self.toggleClass[1]).parents(self.o.widgets).addClass("jarviswidget-collapsed").children("[role=content]").slideUp(self.o.toggleSpeed,function(){self._saveSettingsWidget()})}if(typeof self.o.onToggle=="function"){self.o.onToggle.call(this,pWidget)}e.preventDefault()});function heightFullscreen(){if($("#jarviswidget-fullscreen-mode").length){var heightWindow=$(window).height();var heightHeader=$("#jarviswidget-fullscreen-mode").find(self.o.widgets).children("header").height();$("#jarviswidget-fullscreen-mode").find(self.o.widgets).children("div").height(heightWindow-heightHeader-15)}}self.widget.on(clickEvent,".jarviswidget-fullscreen-btn",function(e){var thisWidget=$(this).parents(self.o.widgets);var thisWidgetContent=thisWidget.children("div");self._runLoaderWidget($(this));if($("#jarviswidget-fullscreen-mode").length){$(".nooverflow").removeClass("nooverflow");thisWidget.unwrap("<div>").children("div").removeAttr("style").end().find(".jarviswidget-fullscreen-btn").children().removeClass(self.fullscreenClass[1]).addClass(self.fullscreenClass[0]).parents(self.pwCtrls).children("a").show();if(thisWidgetContent.hasClass("jarviswidget-visible")){thisWidgetContent.hide().removeClass("jarviswidget-visible")}}else{$("body").addClass("nooverflow");thisWidget.wrap('<div id="jarviswidget-fullscreen-mode"/>').parent().find(".jarviswidget-fullscreen-btn").children().removeClass(self.fullscreenClass[0]).addClass(self.fullscreenClass[1]).parents(self.pwCtrls).children("a:not(.jarviswidget-fullscreen-btn)").hide();if(thisWidgetContent.is(":hidden")){thisWidgetContent.show().addClass("jarviswidget-visible")}}heightFullscreen();if(typeof self.o.onFullscreen=="function"){self.o.onFullscreen.call(this,thisWidget)}e.preventDefault()});$(window).resize(function(){heightFullscreen()});self.widget.on(clickEvent,".jarviswidget-edit-btn",function(e){var tWidget=$(this).parents(self.o.widgets);self._runLoaderWidget($(this));if(tWidget.find(self.o.editPlaceholder).is(":visible")){$(this).children().removeClass(self.editClass[1]).addClass(self.editClass[0]).parents(self.o.widgets).find(self.o.editPlaceholder).slideUp(self.o.editSpeed,function(){self._saveSettingsWidget()})}else{$(this).children().removeClass(self.editClass[0]).addClass(self.editClass[1]).parents(self.o.widgets).find(self.o.editPlaceholder).slideDown(self.o.editSpeed)}if(typeof self.o.onEdit=="function"){self.o.onEdit.call(this,tWidget)}e.preventDefault()});$(self.o.editPlaceholder).find("input").keyup(function(){$(this).parents(self.o.widgets).children("header").children("h2").text($(this).val())});self.widget.on(clickEvent,"[data-widget-setstyle]",function(e){var val=$(this).data("widget-setstyle");var styles="";$(this).parents(self.o.editPlaceholder).find("[data-widget-setstyle]").each(function(){styles+=$(this).data("widget-setstyle")+" "});$(this).parents(self.o.widgets).attr("data-widget-attstyle",""+val+"").removeClassPrefix("jarviswidget-color-").addClass(val);self._runLoaderWidget($(this));self._saveSettingsWidget();e.preventDefault()});self.widget.on(clickEvent,".jarviswidget-custom-btn",function(e){var w=$(this).parents(self.o.widgets);self._runLoaderWidget($(this));if($(this).children("."+self.customClass[0]).length){$(this).children().removeClass(self.customClass[0]).addClass(self.customClass[1]);if(typeof self.o.customStart=="function"){self.o.customStart.call(this,w)}}else{$(this).children().removeClass(self.customClass[1]).addClass(self.customClass[0]);if(typeof self.o.customEnd=="function"){self.o.customEnd.call(this,w)}}self._saveSettingsWidget();e.preventDefault()});self.widget.on(clickEvent,".jarviswidget-delete-btn",function(e){var tWidget=$(this).parents(self.o.widgets);var removeId=tWidget.attr("id");var widTitle=tWidget.children("header").children("h2").text();$.SmartMessageBox({title:"<i class='fa fa-times' style='color:#ed1c24'></i> "+self.o.labelDelete+' "'+widTitle+'"',content:"Warning: This action cannot be undone",buttons:"[No][Yes]"},function(ButtonPressed){if(ButtonPressed=="Yes"){self._runLoaderWidget($(this));$("#"+removeId).fadeOut(self.o.deleteSpeed,function(){$(this).remove();if(typeof self.o.onDelete=="function"){self.o.onDelete.call(this,tWidget)}})}});e.preventDefault()});self.widget.on(clickEvent,".jarviswidget-refresh-btn",function(e){var rItem=$(this).parents(self.o.widgets),pathToFile=rItem.data("widget-load"),ajaxLoader=rItem.children(),btn=$(this);btn.button("loading");ajaxLoader.addClass("widget-body-ajax-loading");setTimeout(function(){btn.button("reset");ajaxLoader.removeClass("widget-body-ajax-loading");self._loadAjaxFile(rItem,pathToFile,ajaxLoader)},1000);e.preventDefault()})},destroy:function(){var self=this;self.widget.off("click",self._clickEvents());self.obj.removeData(pluginName)}};$.fn[pluginName]=function(option){return this.each(function(){var $this=$(this);var data=$this.data(pluginName);var options=typeof option=="object"&&option;if(!data){$this.data(pluginName,(data=new Plugin(this,options)))}if(typeof option=="string"){data[option]()}})};$.fn[pluginName].defaults={grid:"section",widgets:".jarviswidget",localStorage:true,deleteSettingsKey:"",settingsKeyLabel:"Reset settings?",deletePositionKey:"",positionKeyLabel:"Reset position?",sortable:true,buttonsHidden:false,toggleButton:true,toggleClass:"min-10 | plus-10",toggleSpeed:200,onToggle:function(){},deleteButton:true,deleteClass:"trashcan-10",deleteSpeed:200,onDelete:function(){},editButton:true,editPlaceholder:".jarviswidget-editbox",editClass:"pencil-10 | delete-10",editSpeed:200,onEdit:function(){},colorButton:true,fullscreenButton:true,fullscreenClass:"fullscreen-10 | normalscreen-10",fullscreenDiff:3,onFullscreen:function(){},customButton:true,customClass:"",customStart:function(){},customEnd:function(){},buttonOrder:"%refresh% %delete% %custom% %edit% %fullscreen% %toggle%",opacity:1,dragHandle:"> header",placeholderClass:"jarviswidget-placeholder",indicator:true,indicatorTime:600,ajax:true,loadingLabel:"loading...",timestampPlaceholder:".jarviswidget-timestamp",timestampFormat:"Last update: %m%/%d%/%y% %h%:%i%:%s%",refreshButton:true,refreshButtonClass:"refresh-10",labelError:"Sorry but there was a error:",labelUpdated:"Last Update:",labelRefresh:"Refresh",labelDelete:"Delete widget:",afterLoad:function(){},rtl:false,onChange:function(){},onSave:function(){},ajaxnav:true};$.fn.removeClassPrefix=function(prefix){this.each(function(i,it){var classes=it.className.split(" ").map(function(item){return item.indexOf(prefix)===0?"":item});it.className=$.trim(classes.join(" "))});return this}})(jQuery,window,document);
;
/**!
 * easy-pie-chart
 * Lightweight plugin to render simple, animated and retina optimized pie charts
 *
 * @license 
 * @author Robert Fleischmann <rendro87@gmail.com> (http://robert-fleischmann.de)
 * @version 2.1.7
 **/
!function(a,b){"function"==typeof define&&define.amd?define(["jquery"],function(a){return b(a)}):"object"==typeof exports?module.exports=b(require("jquery")):b(jQuery)}(this,function(a){var b=function(a,b){var c,d=document.createElement("canvas");a.appendChild(d),"object"==typeof G_vmlCanvasManager&&G_vmlCanvasManager.initElement(d);var e=d.getContext("2d");d.width=d.height=b.size;var f=1;window.devicePixelRatio>1&&(f=window.devicePixelRatio,d.style.width=d.style.height=[b.size,"px"].join(""),d.width=d.height=b.size*f,e.scale(f,f)),e.translate(b.size/2,b.size/2),e.rotate((-0.5+b.rotate/180)*Math.PI);var g=(b.size-b.lineWidth)/2;b.scaleColor&&b.scaleLength&&(g-=b.scaleLength+2),Date.now=Date.now||function(){return+new Date};var h=function(a,b,c){c=Math.min(Math.max(-1,c||0),1);var d=0>=c?!0:!1;e.beginPath(),e.arc(0,0,g,0,2*Math.PI*c,d),e.strokeStyle=a,e.lineWidth=b,e.stroke()},i=function(){var a,c;e.lineWidth=1,e.fillStyle=b.scaleColor,e.save();for(var d=24;d>0;--d)d%6===0?(c=b.scaleLength,a=0):(c=.6*b.scaleLength,a=b.scaleLength-c),e.fillRect(-b.size/2+a,0,c,1),e.rotate(Math.PI/12);e.restore()},j=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(a){window.setTimeout(a,1e3/60)}}(),k=function(){b.scaleColor&&i(),b.trackColor&&h(b.trackColor,b.trackWidth||b.lineWidth,1)};this.getCanvas=function(){return d},this.getCtx=function(){return e},this.clear=function(){e.clearRect(b.size/-2,b.size/-2,b.size,b.size)},this.draw=function(a){b.scaleColor||b.trackColor?e.getImageData&&e.putImageData?c?e.putImageData(c,0,0):(k(),c=e.getImageData(0,0,b.size*f,b.size*f)):(this.clear(),k()):this.clear(),e.lineCap=b.lineCap;var d;d="function"==typeof b.barColor?b.barColor(a):b.barColor,h(d,b.lineWidth,a/100)}.bind(this),this.animate=function(a,c){var d=Date.now();b.onStart(a,c);var e=function(){var f=Math.min(Date.now()-d,b.animate.duration),g=b.easing(this,f,a,c-a,b.animate.duration);this.draw(g),b.onStep(a,c,g),f>=b.animate.duration?b.onStop(a,c):j(e)}.bind(this);j(e)}.bind(this)},c=function(a,c){var d={barColor:"#ef1e25",trackColor:"#f9f9f9",scaleColor:"#dfe0e0",scaleLength:5,lineCap:"round",lineWidth:3,trackWidth:void 0,size:110,rotate:0,animate:{duration:1e3,enabled:!0},easing:function(a,b,c,d,e){return b/=e/2,1>b?d/2*b*b+c:-d/2*(--b*(b-2)-1)+c},onStart:function(a,b){},onStep:function(a,b,c){},onStop:function(a,b){}};if("undefined"!=typeof b)d.renderer=b;else{if("undefined"==typeof SVGRenderer)throw new Error("Please load either the SVG- or the CanvasRenderer");d.renderer=SVGRenderer}var e={},f=0,g=function(){this.el=a,this.options=e;for(var b in d)d.hasOwnProperty(b)&&(e[b]=c&&"undefined"!=typeof c[b]?c[b]:d[b],"function"==typeof e[b]&&(e[b]=e[b].bind(this)));"string"==typeof e.easing&&"undefined"!=typeof jQuery&&jQuery.isFunction(jQuery.easing[e.easing])?e.easing=jQuery.easing[e.easing]:e.easing=d.easing,"number"==typeof e.animate&&(e.animate={duration:e.animate,enabled:!0}),"boolean"!=typeof e.animate||e.animate||(e.animate={duration:1e3,enabled:e.animate}),this.renderer=new e.renderer(a,e),this.renderer.draw(f),a.dataset&&a.dataset.percent?this.update(parseFloat(a.dataset.percent)):a.getAttribute&&a.getAttribute("data-percent")&&this.update(parseFloat(a.getAttribute("data-percent")))}.bind(this);this.update=function(a){return a=parseFloat(a),e.animate.enabled?this.renderer.animate(f,a):this.renderer.draw(a),f=a,this}.bind(this),this.disableAnimation=function(){return e.animate.enabled=!1,this},this.enableAnimation=function(){return e.animate.enabled=!0,this},g()};a.fn.easyPieChart=function(b){return this.each(function(){var d;a.data(this,"easyPieChart")||(d=a.extend({},b,a(this).data()),a.data(this,"easyPieChart",new c(this,d)))})}});
;
/* jquery.sparkline 2.1.2 - http://omnipotent.net/jquery.sparkline/ 
** Licensed under the New BSD License - see above site for details */

(function(a,b,c){(function(a){typeof define=="function"&&define.amd?define(["jquery"],a):jQuery&&!jQuery.fn.sparkline&&a(jQuery)})(function(d){"use strict";var e={},f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L=0;f=function(){return{common:{type:"line",lineColor:"#00f",fillColor:"#cdf",defaultPixelsPerValue:3,width:"auto",height:"auto",composite:!1,tagValuesAttribute:"values",tagOptionsPrefix:"spark",enableTagOptions:!1,enableHighlight:!0,highlightLighten:1.4,tooltipSkipNull:!0,tooltipPrefix:"",tooltipSuffix:"",disableHiddenCheck:!1,numberFormatter:!1,numberDigitGroupCount:3,numberDigitGroupSep:",",numberDecimalMark:".",disableTooltips:!1,disableInteraction:!1},line:{spotColor:"#f80",highlightSpotColor:"#5f5",highlightLineColor:"#f22",spotRadius:1.5,minSpotColor:"#f80",maxSpotColor:"#f80",lineWidth:1,normalRangeMin:c,normalRangeMax:c,normalRangeColor:"#ccc",drawNormalOnTop:!1,chartRangeMin:c,chartRangeMax:c,chartRangeMinX:c,chartRangeMaxX:c,tooltipFormat:new h('<span style="color: {{color}}">&#9679;</span> {{prefix}}{{y}}{{suffix}}')},bar:{barColor:"#3366cc",negBarColor:"#f44",stackedBarColor:["#3366cc","#dc3912","#ff9900","#109618","#66aa00","#dd4477","#0099c6","#990099"],zeroColor:c,nullColor:c,zeroAxis:!0,barWidth:4,barSpacing:1,chartRangeMax:c,chartRangeMin:c,chartRangeClip:!1,colorMap:c,tooltipFormat:new h('<span style="color: {{color}}">&#9679;</span> {{prefix}}{{value}}{{suffix}}')},tristate:{barWidth:4,barSpacing:1,posBarColor:"#6f6",negBarColor:"#f44",zeroBarColor:"#999",colorMap:{},tooltipFormat:new h('<span style="color: {{color}}">&#9679;</span> {{value:map}}'),tooltipValueLookups:{map:{"-1":"Loss",0:"Draw",1:"Win"}}},discrete:{lineHeight:"auto",thresholdColor:c,thresholdValue:0,chartRangeMax:c,chartRangeMin:c,chartRangeClip:!1,tooltipFormat:new h("{{prefix}}{{value}}{{suffix}}")},bullet:{targetColor:"#f33",targetWidth:3,performanceColor:"#33f",rangeColors:["#d3dafe","#a8b6ff","#7f94ff"],base:c,tooltipFormat:new h("{{fieldkey:fields}} - {{value}}"),tooltipValueLookups:{fields:{r:"Range",p:"Performance",t:"Target"}}},pie:{offset:0,sliceColors:["#3366cc","#dc3912","#ff9900","#109618","#66aa00","#dd4477","#0099c6","#990099"],borderWidth:0,borderColor:"#000",tooltipFormat:new h('<span style="color: {{color}}">&#9679;</span> {{value}} ({{percent.1}}%)')},box:{raw:!1,boxLineColor:"#000",boxFillColor:"#cdf",whiskerColor:"#000",outlierLineColor:"#333",outlierFillColor:"#fff",medianColor:"#f00",showOutliers:!0,outlierIQR:1.5,spotRadius:1.5,target:c,targetColor:"#4a2",chartRangeMax:c,chartRangeMin:c,tooltipFormat:new h("{{field:fields}}: {{value}}"),tooltipFormatFieldlistKey:"field",tooltipValueLookups:{fields:{lq:"Lower Quartile",med:"Median",uq:"Upper Quartile",lo:"Left Outlier",ro:"Right Outlier",lw:"Left Whisker",rw:"Right Whisker"}}}}},E='.jqstooltip { position: absolute;left: 0px;top: 0px;visibility: hidden;background: rgb(0, 0, 0) transparent;background-color: rgba(0,0,0,0.6);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000);-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)";color: white;font: 10px arial, san serif;text-align: left;white-space: nowrap;padding: 5px;border: 1px solid white;z-index: 10000;}.jqsfield { color: white;font: 10px arial, san serif;text-align: left;}',g=function(){var a,b;return a=function(){this.init.apply(this,arguments)},arguments.length>1?(arguments[0]?(a.prototype=d.extend(new arguments[0],arguments[arguments.length-1]),a._super=arguments[0].prototype):a.prototype=arguments[arguments.length-1],arguments.length>2&&(b=Array.prototype.slice.call(arguments,1,-1),b.unshift(a.prototype),d.extend.apply(d,b))):a.prototype=arguments[0],a.prototype.cls=a,a},d.SPFormatClass=h=g({fre:/\{\{([\w.]+?)(:(.+?))?\}\}/g,precre:/(\w+)\.(\d+)/,init:function(a,b){this.format=a,this.fclass=b},render:function(a,b,d){var e=this,f=a,g,h,i,j,k;return this.format.replace(this.fre,function(){var a;return h=arguments[1],i=arguments[3],g=e.precre.exec(h),g?(k=g[2],h=g[1]):k=!1,j=f[h],j===c?"":i&&b&&b[i]?(a=b[i],a.get?b[i].get(j)||j:b[i][j]||j):(n(j)&&(d.get("numberFormatter")?j=d.get("numberFormatter")(j):j=s(j,k,d.get("numberDigitGroupCount"),d.get("numberDigitGroupSep"),d.get("numberDecimalMark"))),j)})}}),d.spformat=function(a,b){return new h(a,b)},i=function(a,b,c){return a<b?b:a>c?c:a},j=function(a,c){var d;return c===2?(d=b.floor(a.length/2),a.length%2?a[d]:(a[d-1]+a[d])/2):a.length%2?(d=(a.length*c+c)/4,d%1?(a[b.floor(d)]+a[b.floor(d)-1])/2:a[d-1]):(d=(a.length*c+2)/4,d%1?(a[b.floor(d)]+a[b.floor(d)-1])/2:a[d-1])},k=function(a){var b;switch(a){case"undefined":a=c;break;case"null":a=null;break;case"true":a=!0;break;case"false":a=!1;break;default:b=parseFloat(a),a==b&&(a=b)}return a},l=function(a){var b,c=[];for(b=a.length;b--;)c[b]=k(a[b]);return c},m=function(a,b){var c,d,e=[];for(c=0,d=a.length;c<d;c++)a[c]!==b&&e.push(a[c]);return e},n=function(a){return!isNaN(parseFloat(a))&&isFinite(a)},s=function(a,b,c,e,f){var g,h;a=(b===!1?parseFloat(a).toString():a.toFixed(b)).split(""),g=(g=d.inArray(".",a))<0?a.length:g,g<a.length&&(a[g]=f);for(h=g-c;h>0;h-=c)a.splice(h,0,e);return a.join("")},o=function(a,b,c){var d;for(d=b.length;d--;){if(c&&b[d]===null)continue;if(b[d]!==a)return!1}return!0},p=function(a){var b=0,c;for(c=a.length;c--;)b+=typeof a[c]=="number"?a[c]:0;return b},r=function(a){return d.isArray(a)?a:[a]},q=function(b){var c;a.createStyleSheet?a.createStyleSheet().cssText=b:(c=a.createElement("style"),c.type="text/css",a.getElementsByTagName("head")[0].appendChild(c),c[typeof a.body.style.WebkitAppearance=="string"?"innerText":"innerHTML"]=b)},d.fn.simpledraw=function(b,e,f,g){var h,i;if(f&&(h=this.data("_jqs_vcanvas")))return h;if(d.fn.sparkline.canvas===!1)return!1;if(d.fn.sparkline.canvas===c){var j=a.createElement("canvas");if(!j.getContext||!j.getContext("2d")){if(!a.namespaces||!!a.namespaces.v)return d.fn.sparkline.canvas=!1,!1;a.namespaces.add("v","urn:schemas-microsoft-com:vml","#default#VML"),d.fn.sparkline.canvas=function(a,b,c,d){return new J(a,b,c)}}else d.fn.sparkline.canvas=function(a,b,c,d){return new I(a,b,c,d)}}return b===c&&(b=d(this).innerWidth()),e===c&&(e=d(this).innerHeight()),h=d.fn.sparkline.canvas(b,e,this,g),i=d(this).data("_jqs_mhandler"),i&&i.registerCanvas(h),h},d.fn.cleardraw=function(){var a=this.data("_jqs_vcanvas");a&&a.reset()},d.RangeMapClass=t=g({init:function(a){var b,c,d=[];for(b in a)a.hasOwnProperty(b)&&typeof b=="string"&&b.indexOf(":")>-1&&(c=b.split(":"),c[0]=c[0].length===0?-Infinity:parseFloat(c[0]),c[1]=c[1].length===0?Infinity:parseFloat(c[1]),c[2]=a[b],d.push(c));this.map=a,this.rangelist=d||!1},get:function(a){var b=this.rangelist,d,e,f;if((f=this.map[a])!==c)return f;if(b)for(d=b.length;d--;){e=b[d];if(e[0]<=a&&e[1]>=a)return e[2]}return c}}),d.range_map=function(a){return new t(a)},u=g({init:function(a,b){var c=d(a);this.$el=c,this.options=b,this.currentPageX=0,this.currentPageY=0,this.el=a,this.splist=[],this.tooltip=null,this.over=!1,this.displayTooltips=!b.get("disableTooltips"),this.highlightEnabled=!b.get("disableHighlight")},registerSparkline:function(a){this.splist.push(a),this.over&&this.updateDisplay()},registerCanvas:function(a){var b=d(a.canvas);this.canvas=a,this.$canvas=b,b.mouseenter(d.proxy(this.mouseenter,this)),b.mouseleave(d.proxy(this.mouseleave,this)),b.click(d.proxy(this.mouseclick,this))},reset:function(a){this.splist=[],this.tooltip&&a&&(this.tooltip.remove(),this.tooltip=c)},mouseclick:function(a){var b=d.Event("sparklineClick");b.originalEvent=a,b.sparklines=this.splist,this.$el.trigger(b)},mouseenter:function(b){d(a.body).unbind("mousemove.jqs"),d(a.body).bind("mousemove.jqs",d.proxy(this.mousemove,this)),this.over=!0,this.currentPageX=b.pageX,this.currentPageY=b.pageY,this.currentEl=b.target,!this.tooltip&&this.displayTooltips&&(this.tooltip=new v(this.options),this.tooltip.updatePosition(b.pageX,b.pageY)),this.updateDisplay()},mouseleave:function(){d(a.body).unbind("mousemove.jqs");var b=this.splist,c=b.length,e=!1,f,g;this.over=!1,this.currentEl=null,this.tooltip&&(this.tooltip.remove(),this.tooltip=null);for(g=0;g<c;g++)f=b[g],f.clearRegionHighlight()&&(e=!0);e&&this.canvas.render()},mousemove:function(a){this.currentPageX=a.pageX,this.currentPageY=a.pageY,this.currentEl=a.target,this.tooltip&&this.tooltip.updatePosition(a.pageX,a.pageY),this.updateDisplay()},updateDisplay:function(){var a=this.splist,b=a.length,c=!1,e=this.$canvas.offset(),f=this.currentPageX-e.left,g=this.currentPageY-e.top,h,i,j,k,l;if(!this.over)return;for(j=0;j<b;j++)i=a[j],k=i.setRegionHighlight(this.currentEl,f,g),k&&(c=!0);if(c){l=d.Event("sparklineRegionChange"),l.sparklines=this.splist,this.$el.trigger(l);if(this.tooltip){h="";for(j=0;j<b;j++)i=a[j],h+=i.getCurrentRegionTooltip();this.tooltip.setContent(h)}this.disableHighlight||this.canvas.render()}k===null&&this.mouseleave()}}),v=g({sizeStyle:"position: static !important;display: block !important;visibility: hidden !important;float: left !important;",init:function(b){var c=b.get("tooltipClassname","jqstooltip"),e=this.sizeStyle,f;this.container=b.get("tooltipContainer")||a.body,this.tooltipOffsetX=b.get("tooltipOffsetX",10),this.tooltipOffsetY=b.get("tooltipOffsetY",12),d("#jqssizetip").remove(),d("#jqstooltip").remove(),this.sizetip=d("<div/>",{id:"jqssizetip",style:e,"class":c}),this.tooltip=d("<div/>",{id:"jqstooltip","class":c}).appendTo(this.container),f=this.tooltip.offset(),this.offsetLeft=f.left,this.offsetTop=f.top,this.hidden=!0,d(window).unbind("resize.jqs scroll.jqs"),d(window).bind("resize.jqs scroll.jqs",d.proxy(this.updateWindowDims,this)),this.updateWindowDims()},updateWindowDims:function(){this.scrollTop=d(window).scrollTop(),this.scrollLeft=d(window).scrollLeft(),this.scrollRight=this.scrollLeft+d(window).width(),this.updatePosition()},getSize:function(a){this.sizetip.html(a).appendTo(this.container),this.width=this.sizetip.width()+1,this.height=this.sizetip.height(),this.sizetip.remove()},setContent:function(a){if(!a){this.tooltip.css("visibility","hidden"),this.hidden=!0;return}this.getSize(a),this.tooltip.html(a).css({width:this.width,height:this.height,visibility:"visible"}),this.hidden&&(this.hidden=!1,this.updatePosition())},updatePosition:function(a,b){if(a===c){if(this.mousex===c)return;a=this.mousex-this.offsetLeft,b=this.mousey-this.offsetTop}else this.mousex=a-=this.offsetLeft,this.mousey=b-=this.offsetTop;if(!this.height||!this.width||this.hidden)return;b-=this.height+this.tooltipOffsetY,a+=this.tooltipOffsetX,b<this.scrollTop&&(b=this.scrollTop),a<this.scrollLeft?a=this.scrollLeft:a+this.width>this.scrollRight&&(a=this.scrollRight-this.width),this.tooltip.css({left:a,top:b})},remove:function(){this.tooltip.remove(),this.sizetip.remove(),this.sizetip=this.tooltip=c,d(window).unbind("resize.jqs scroll.jqs")}}),F=function(){q(E)},d(F),K=[],d.fn.sparkline=function(b,e){return this.each(function(){var f=new d.fn.sparkline.options(this,e),g=d(this),h,i;h=function(){var e,h,i,j,k,l,m;if(b==="html"||b===c){m=this.getAttribute(f.get("tagValuesAttribute"));if(m===c||m===null)m=g.html();e=m.replace(/(^\s*<!--)|(-->\s*$)|\s+/g,"").split(",")}else e=b;h=f.get("width")==="auto"?e.length*f.get("defaultPixelsPerValue"):f.get("width");if(f.get("height")==="auto"){if(!f.get("composite")||!d.data(this,"_jqs_vcanvas"))j=a.createElement("span"),j.innerHTML="a",g.html(j),i=d(j).innerHeight()||d(j).height(),d(j).remove(),j=null}else i=f.get("height");f.get("disableInteraction")?k=!1:(k=d.data(this,"_jqs_mhandler"),k?f.get("composite")||k.reset():(k=new u(this,f),d.data(this,"_jqs_mhandler",k)));if(f.get("composite")&&!d.data(this,"_jqs_vcanvas")){d.data(this,"_jqs_errnotify")||(alert("Attempted to attach a composite sparkline to an element with no existing sparkline"),d.data(this,"_jqs_errnotify",!0));return}l=new(d.fn.sparkline[f.get("type")])(this,e,f,h,i),l.render(),k&&k.registerSparkline(l)};if(d(this).html()&&!f.get("disableHiddenCheck")&&d(this).is(":hidden")||!d(this).parents("body").length){if(!f.get("composite")&&d.data(this,"_jqs_pending"))for(i=K.length;i;i--)K[i-1][0]==this&&K.splice(i-1,1);K.push([this,h]),d.data(this,"_jqs_pending",!0)}else h.call(this)})},d.fn.sparkline.defaults=f(),d.sparkline_display_visible=function(){var a,b,c,e=[];for(b=0,c=K.length;b<c;b++)a=K[b][0],d(a).is(":visible")&&!d(a).parents().is(":hidden")?(K[b][1].call(a),d.data(K[b][0],"_jqs_pending",!1),e.push(b)):!d(a).closest("html").length&&!d.data(a,"_jqs_pending")&&(d.data(K[b][0],"_jqs_pending",!1),e.push(b));for(b=e.length;b;b--)K.splice(e[b-1],1)},d.fn.sparkline.options=g({init:function(a,b){var c,f,g,h;this.userOptions=b=b||{},this.tag=a,this.tagValCache={},f=d.fn.sparkline.defaults,g=f.common,this.tagOptionsPrefix=b.enableTagOptions&&(b.tagOptionsPrefix||g.tagOptionsPrefix),h=this.getTagSetting("type"),h===e?c=f[b.type||g.type]:c=f[h],this.mergedOptions=d.extend({},g,c,b)},getTagSetting:function(a){var b=this.tagOptionsPrefix,d,f,g,h;if(b===!1||b===c)return e;if(this.tagValCache.hasOwnProperty(a))d=this.tagValCache.key;else{d=this.tag.getAttribute(b+a);if(d===c||d===null)d=e;else if(d.substr(0,1)==="["){d=d.substr(1,d.length-2).split(",");for(f=d.length;f--;)d[f]=k(d[f].replace(/(^\s*)|(\s*$)/g,""))}else if(d.substr(0,1)==="{"){g=d.substr(1,d.length-2).split(","),d={};for(f=g.length;f--;)h=g[f].split(":",2),d[h[0].replace(/(^\s*)|(\s*$)/g,"")]=k(h[1].replace(/(^\s*)|(\s*$)/g,""))}else d=k(d);this.tagValCache.key=d}return d},get:function(a,b){var d=this.getTagSetting(a),f;return d!==e?d:(f=this.mergedOptions[a])===c?b:f}}),d.fn.sparkline._base=g({disabled:!1,init:function(a,b,e,f,g){this.el=a,this.$el=d(a),this.values=b,this.options=e,this.width=f,this.height=g,this.currentRegion=c},initTarget:function(){var a=!this.options.get("disableInteraction");(this.target=this.$el.simpledraw(this.width,this.height,this.options.get("composite"),a))?(this.canvasWidth=this.target.pixelWidth,this.canvasHeight=this.target.pixelHeight):this.disabled=!0},render:function(){return this.disabled?(this.el.innerHTML="",!1):!0},getRegion:function(a,b){},setRegionHighlight:function(a,b,d){var e=this.currentRegion,f=!this.options.get("disableHighlight"),g;return b>this.canvasWidth||d>this.canvasHeight||b<0||d<0?null:(g=this.getRegion(a,b,d),e!==g?(e!==c&&f&&this.removeHighlight(),this.currentRegion=g,g!==c&&f&&this.renderHighlight(),!0):!1)},clearRegionHighlight:function(){return this.currentRegion!==c?(this.removeHighlight(),this.currentRegion=c,!0):!1},renderHighlight:function(){this.changeHighlight(!0)},removeHighlight:function(){this.changeHighlight(!1)},changeHighlight:function(a){},getCurrentRegionTooltip:function(){var a=this.options,b="",e=[],f,g,i,j,k,l,m,n,o,p,q,r,s,t;if(this.currentRegion===c)return"";f=this.getCurrentRegionFields(),q=a.get("tooltipFormatter");if(q)return q(this,a,f);a.get("tooltipChartTitle")&&(b+='<div class="jqs jqstitle">'+a.get("tooltipChartTitle")+"</div>\n"),g=this.options.get("tooltipFormat");if(!g)return"";d.isArray(g)||(g=[g]),d.isArray(f)||(f=[f]),m=this.options.get("tooltipFormatFieldlist"),n=this.options.get("tooltipFormatFieldlistKey");if(m&&n){o=[];for(l=f.length;l--;)p=f[l][n],(t=d.inArray(p,m))!=-1&&(o[t]=f[l]);f=o}i=g.length,s=f.length;for(l=0;l<i;l++){r=g[l],typeof r=="string"&&(r=new h(r)),j=r.fclass||"jqsfield";for(t=0;t<s;t++)if(!f[t].isNull||!a.get("tooltipSkipNull"))d.extend(f[t],{prefix:a.get("tooltipPrefix"),suffix:a.get("tooltipSuffix")}),k=r.render(f[t],a.get("tooltipValueLookups"),a),e.push('<div class="'+j+'">'+k+"</div>")}return e.length?b+e.join("\n"):""},getCurrentRegionFields:function(){},calcHighlightColor:function(a,c){var d=c.get("highlightColor"),e=c.get("highlightLighten"),f,g,h,j;if(d)return d;if(e){f=/^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(a)||/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(a);if(f){h=[],g=a.length===4?16:1;for(j=0;j<3;j++)h[j]=i(b.round(parseInt(f[j+1],16)*g*e),0,255);return"rgb("+h.join(",")+")"}}return a}}),w={changeHighlight:function(a){var b=this.currentRegion,c=this.target,e=this.regionShapes[b],f;e&&(f=this.renderRegion(b,a),d.isArray(f)||d.isArray(e)?(c.replaceWithShapes(e,f),this.regionShapes[b]=d.map(f,function(a){return a.id})):(c.replaceWithShape(e,f),this.regionShapes[b]=f.id))},render:function(){var a=this.values,b=this.target,c=this.regionShapes,e,f,g,h;if(!this.cls._super.render.call(this))return;for(g=a.length;g--;){e=this.renderRegion(g);if(e)if(d.isArray(e)){f=[];for(h=e.length;h--;)e[h].append(),f.push(e[h].id);c[g]=f}else e.append(),c[g]=e.id;else c[g]=null}b.render()}},d.fn.sparkline.line=x=g(d.fn.sparkline._base,{type:"line",init:function(a,b,c,d,e){x._super.init.call(this,a,b,c,d,e),this.vertices=[],this.regionMap=[],this.xvalues=[],this.yvalues=[],this.yminmax=[],this.hightlightSpotId=null,this.lastShapeId=null,this.initTarget()},getRegion:function(a,b,d){var e,f=this.regionMap;for(e=f.length;e--;)if(f[e]!==null&&b>=f[e][0]&&b<=f[e][1])return f[e][2];return c},getCurrentRegionFields:function(){var a=this.currentRegion;return{isNull:this.yvalues[a]===null,x:this.xvalues[a],y:this.yvalues[a],color:this.options.get("lineColor"),fillColor:this.options.get("fillColor"),offset:a}},renderHighlight:function(){var a=this.currentRegion,b=this.target,d=this.vertices[a],e=this.options,f=e.get("spotRadius"),g=e.get("highlightSpotColor"),h=e.get("highlightLineColor"),i,j;if(!d)return;f&&g&&(i=b.drawCircle(d[0],d[1],f,c,g),this.highlightSpotId=i.id,b.insertAfterShape(this.lastShapeId,i)),h&&(j=b.drawLine(d[0],this.canvasTop,d[0],this.canvasTop+this.canvasHeight,h),this.highlightLineId=j.id,b.insertAfterShape(this.lastShapeId,j))},removeHighlight:function(){var a=this.target;this.highlightSpotId&&(a.removeShapeId(this.highlightSpotId),this.highlightSpotId=null),this.highlightLineId&&(a.removeShapeId(this.highlightLineId),this.highlightLineId=null)},scanValues:function(){var a=this.values,c=a.length,d=this.xvalues,e=this.yvalues,f=this.yminmax,g,h,i,j,k;for(g=0;g<c;g++)h=a[g],i=typeof a[g]=="string",j=typeof a[g]=="object"&&a[g]instanceof Array,k=i&&a[g].split(":"),i&&k.length===2?(d.push(Number(k[0])),e.push(Number(k[1])),f.push(Number(k[1]))):j?(d.push(h[0]),e.push(h[1]),f.push(h[1])):(d.push(g),a[g]===null||a[g]==="null"?e.push(null):(e.push(Number(h)),f.push(Number(h))));this.options.get("xvalues")&&(d=this.options.get("xvalues")),this.maxy=this.maxyorg=b.max.apply(b,f),this.miny=this.minyorg=b.min.apply(b,f),this.maxx=b.max.apply(b,d),this.minx=b.min.apply(b,d),this.xvalues=d,this.yvalues=e,this.yminmax=f},processRangeOptions:function(){var a=this.options,b=a.get("normalRangeMin"),d=a.get("normalRangeMax");b!==c&&(b<this.miny&&(this.miny=b),d>this.maxy&&(this.maxy=d)),a.get("chartRangeMin")!==c&&(a.get("chartRangeClip")||a.get("chartRangeMin")<this.miny)&&(this.miny=a.get("chartRangeMin")),a.get("chartRangeMax")!==c&&(a.get("chartRangeClip")||a.get("chartRangeMax")>this.maxy)&&(this.maxy=a.get("chartRangeMax")),a.get("chartRangeMinX")!==c&&(a.get("chartRangeClipX")||a.get("chartRangeMinX")<this.minx)&&(this.minx=a.get("chartRangeMinX")),a.get("chartRangeMaxX")!==c&&(a.get("chartRangeClipX")||a.get("chartRangeMaxX")>this.maxx)&&(this.maxx=a.get("chartRangeMaxX"))},drawNormalRange:function(a,d,e,f,g){var h=this.options.get("normalRangeMin"),i=this.options.get("normalRangeMax"),j=d+b.round(e-e*((i-this.miny)/g)),k=b.round(e*(i-h)/g);this.target.drawRect(a,j,f,k,c,this.options.get("normalRangeColor")).append()},render:function(){var a=this.options,e=this.target,f=this.canvasWidth,g=this.canvasHeight,h=this.vertices,i=a.get("spotRadius"),j=this.regionMap,k,l,m,n,o,p,q,r,s,u,v,w,y,z,A,B,C,D,E,F,G,H,I,J,K;if(!x._super.render.call(this))return;this.scanValues(),this.processRangeOptions(),I=this.xvalues,J=this.yvalues;if(!this.yminmax.length||this.yvalues.length<2)return;n=o=0,k=this.maxx-this.minx===0?1:this.maxx-this.minx,l=this.maxy-this.miny===0?1:this.maxy-this.miny,m=this.yvalues.length-1,i&&(f<i*4||g<i*4)&&(i=0);if(i){G=a.get("highlightSpotColor")&&!a.get("disableInteraction");if(G||a.get("minSpotColor")||a.get("spotColor")&&J[m]===this.miny)g-=b.ceil(i);if(G||a.get("maxSpotColor")||a.get("spotColor")&&J[m]===this.maxy)g-=b.ceil(i),n+=b.ceil(i);if(G||(a.get("minSpotColor")||a.get("maxSpotColor"))&&(J[0]===this.miny||J[0]===this.maxy))o+=b.ceil(i),f-=b.ceil(i);if(G||a.get("spotColor")||a.get("minSpotColor")||a.get("maxSpotColor")&&(J[m]===this.miny||J[m]===this.maxy))f-=b.ceil(i)}g--,a.get("normalRangeMin")!==c&&!a.get("drawNormalOnTop")&&this.drawNormalRange(o,n,g,f,l),q=[],r=[q],z=A=null,B=J.length;for(K=0;K<B;K++)s=I[K],v=I[K+1],u=J[K],w=o+b.round((s-this.minx)*(f/k)),y=K<B-1?o+b.round((v-this.minx)*(f/k)):f,A=w+(y-w)/2,j[K]=[z||0,A,K],z=A,u===null?K&&(J[K-1]!==null&&(q=[],r.push(q)),h.push(null)):(u<this.miny&&(u=this.miny),u>this.maxy&&(u=this.maxy),q.length||q.push([w,n+g]),p=[w,n+b.round(g-g*((u-this.miny)/l))],q.push(p),h.push(p));C=[],D=[],E=r.length;for(K=0;K<E;K++)q=r[K],q.length&&(a.get("fillColor")&&(q.push([q[q.length-1][0],n+g]),D.push(q.slice(0)),q.pop()),q.length>2&&(q[0]=[q[0][0],q[1][1]]),C.push(q));E=D.length;for(K=0;K<E;K++)e.drawShape(D[K],a.get("fillColor"),a.get("fillColor")).append();a.get("normalRangeMin")!==c&&a.get("drawNormalOnTop")&&this.drawNormalRange(o,n,g,f,l),E=C.length;for(K=0;K<E;K++)e.drawShape(C[K],a.get("lineColor"),c,a.get("lineWidth")).append();if(i&&a.get("valueSpots")){F=a.get("valueSpots"),F.get===c&&(F=new t(F));for(K=0;K<B;K++)H=F.get(J[K]),H&&e.drawCircle(o+b.round((I[K]-this.minx)*(f/k)),n+b.round(g-g*((J[K]-this.miny)/l)),i,c,H).append()}i&&a.get("spotColor")&&J[m]!==null&&e.drawCircle(o+b.round((I[I.length-1]-this.minx)*(f/k)),n+b.round(g-g*((J[m]-this.miny)/l)),i,c,a.get("spotColor")).append(),this.maxy!==this.minyorg&&(i&&a.get("minSpotColor")&&(s=I[d.inArray(this.minyorg,J)],e.drawCircle(o+b.round((s-this.minx)*(f/k)),n+b.round(g-g*((this.minyorg-this.miny)/l)),i,c,a.get("minSpotColor")).append()),i&&a.get("maxSpotColor")&&(s=I[d.inArray(this.maxyorg,J)],e.drawCircle(o+b.round((s-this.minx)*(f/k)),n+b.round(g-g*((this.maxyorg-this.miny)/l)),i,c,a.get("maxSpotColor")).append())),this.lastShapeId=e.getLastShapeId(),this.canvasTop=n,e.render()}}),d.fn.sparkline.bar=y=g(d.fn.sparkline._base,w,{type:"bar",init:function(a,e,f,g,h){var j=parseInt(f.get("barWidth"),10),n=parseInt(f.get("barSpacing"),10),o=f.get("chartRangeMin"),p=f.get("chartRangeMax"),q=f.get("chartRangeClip"),r=Infinity,s=-Infinity,u,v,w,x,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R;y._super.init.call(this,a,e,f,g,h);for(A=0,B=e.length;A<B;A++){O=e[A],u=typeof O=="string"&&O.indexOf(":")>-1;if(u||d.isArray(O))J=!0,u&&(O=e[A]=l(O.split(":"))),O=m(O,null),v=b.min.apply(b,O),w=b.max.apply(b,O),v<r&&(r=v),w>s&&(s=w)}this.stacked=J,this.regionShapes={},this.barWidth=j,this.barSpacing=n,this.totalBarWidth=j+n,this.width=g=e.length*j+(e.length-1)*n,this.initTarget(),q&&(H=o===c?-Infinity:o,I=p===c?Infinity:p),z=[],x=J?[]:z;var S=[],T=[];for(A=0,B=e.length;A<B;A++)if(J){K=e[A],e[A]=N=[],S[A]=0,x[A]=T[A]=0;for(L=0,M=K.length;L<M;L++)O=N[L]=q?i(K[L],H,I):K[L],O!==null&&(O>0&&(S[A]+=O),r<0&&s>0?O<0?T[A]+=b.abs(O):x[A]+=O:x[A]+=b.abs(O-(O<0?s:r)),z.push(O))}else O=q?i(e[A],H,I):e[A],O=e[A]=k(O),O!==null&&z.push(O);this.max=G=b.max.apply(b,z),this.min=F=b.min.apply(b,z),this.stackMax=s=J?b.max.apply(b,S):G,this.stackMin=r=J?b.min.apply(b,z):F,f.get("chartRangeMin")!==c&&(f.get("chartRangeClip")||f.get("chartRangeMin")<F)&&(F=f.get("chartRangeMin")),f.get("chartRangeMax")!==c&&(f.get("chartRangeClip")||f.get("chartRangeMax")>G)&&(G=f.get("chartRangeMax")),this.zeroAxis=D=f.get("zeroAxis",!0),F<=0&&G>=0&&D?E=0:D==0?E=F:F>0?E=F:E=G,this.xaxisOffset=E,C=J?b.max.apply(b,x)+b.max.apply(b,T):G-F,this.canvasHeightEf=D&&F<0?this.canvasHeight-2:this.canvasHeight-1,F<E?(Q=J&&G>=0?s:G,P=(Q-E)/C*this.canvasHeight,P!==b.ceil(P)&&(this.canvasHeightEf-=2,P=b.ceil(P))):P=this.canvasHeight,this.yoffset=P,d.isArray(f.get("colorMap"))?(this.colorMapByIndex=f.get("colorMap"),this.colorMapByValue=null):(this.colorMapByIndex=null,this.colorMapByValue=f.get("colorMap"),this.colorMapByValue&&this.colorMapByValue.get===c&&(this.colorMapByValue=new t(this.colorMapByValue))),this.range=C},getRegion:function(a,d,e){var f=b.floor(d/this.totalBarWidth);return f<0||f>=this.values.length?c:f},getCurrentRegionFields:function(){var a=this.currentRegion,b=r(this.values[a]),c=[],d,e;for(e=b.length;e--;)d=b[e],c.push({isNull:d===null,value:d,color:this.calcColor(e,d,a),offset:a});return c},calcColor:function(a,b,e){var f=this.colorMapByIndex,g=this.colorMapByValue,h=this.options,i,j;return this.stacked?i=h.get("stackedBarColor"):i=b<0?h.get("negBarColor"):h.get("barColor"),b===0&&h.get("zeroColor")!==c&&(i=h.get("zeroColor")),g&&(j=g.get(b))?i=j:f&&f.length>e&&(i=f[e]),d.isArray(i)?i[a%i.length]:i},renderRegion:function(a,e){var f=this.values[a],g=this.options,h=this.xaxisOffset,i=[],j=this.range,k=this.stacked,l=this.target,m=a*this.totalBarWidth,n=this.canvasHeightEf,p=this.yoffset,q,r,s,t,u,v,w,x,y,z;f=d.isArray(f)?f:[f],w=f.length,x=f[0],t=o(null,f),z=o(h,f,!0);if(t)return g.get("nullColor")?(s=e?g.get("nullColor"):this.calcHighlightColor(g.get("nullColor"),g),q=p>0?p-1:p,l.drawRect(m,q,this.barWidth-1,0,s,s)):c;u=p;for(v=0;v<w;v++){x=f[v];if(k&&x===h){if(!z||y)continue;y=!0}j>0?r=b.floor(n*(b.abs(x-h)/j))+1:r=1,x<h||x===h&&p===0?(q=u,u+=r):(q=p-r,p-=r),s=this.calcColor(v,x,a),e&&(s=this.calcHighlightColor(s,g)),i.push(l.drawRect(m,q,this.barWidth-1,r-1,s,s))}return i.length===1?i[0]:i}}),d.fn.sparkline.tristate=z=g(d.fn.sparkline._base,w,{type:"tristate",init:function(a,b,e,f,g){var h=parseInt(e.get("barWidth"),10),i=parseInt(e.get("barSpacing"),10);z._super.init.call(this,a,b,e,f,g),this.regionShapes={},this.barWidth=h,this.barSpacing=i,this.totalBarWidth=h+i,this.values=d.map(b,Number),this.width=f=b.length*h+(b.length-1)*i,d.isArray(e.get("colorMap"))?(this.colorMapByIndex=e.get("colorMap"),this.colorMapByValue=null):(this.colorMapByIndex=null,this.colorMapByValue=e.get("colorMap"),this.colorMapByValue&&this.colorMapByValue.get===c&&(this.colorMapByValue=new t(this.colorMapByValue))),this.initTarget()},getRegion:function(a,c,d){return b.floor(c/this.totalBarWidth)},getCurrentRegionFields:function(){var a=this.currentRegion;return{isNull:this.values[a]===c,value:this.values[a],color:this.calcColor(this.values[a],a),offset:a}},calcColor:function(a,b){var c=this.values,d=this.options,e=this.colorMapByIndex,f=this.colorMapByValue,g,h;return f&&(h=f.get(a))?g=h:e&&e.length>b?g=e[b]:c[b]<0?g=d.get("negBarColor"):c[b]>0?g=d.get("posBarColor"):g=d.get("zeroBarColor"),g},renderRegion:function(a,c){var d=this.values,e=this.options,f=this.target,g,h,i,j,k,l;g=f.pixelHeight,i=b.round(g/2),j=a*this.totalBarWidth,d[a]<0?(k=i,h=i-1):d[a]>0?(k=0,h=i-1):(k=i-1,h=2),l=this.calcColor(d[a],a);if(l===null)return;return c&&(l=this.calcHighlightColor(l,e)),f.drawRect(j,k,this.barWidth-1,h-1,l,l)}}),d.fn.sparkline.discrete=A=g(d.fn.sparkline._base,w,{type:"discrete",init:function(a,e,f,g,h){A._super.init.call(this,a,e,f,g,h),this.regionShapes={},this.values=e=d.map(e,Number),this.min=b.min.apply(b,e),this.max=b.max.apply(b,e),this.range=this.max-this.min,this.width=g=f.get("width")==="auto"?e.length*2:this.width,this.interval=b.floor(g/e.length),this.itemWidth=g/e.length,f.get("chartRangeMin")!==c&&(f.get("chartRangeClip")||f.get("chartRangeMin")<this.min)&&(this.min=f.get("chartRangeMin")),f.get("chartRangeMax")!==c&&(f.get("chartRangeClip")||f.get("chartRangeMax")>this.max)&&(this.max=f.get("chartRangeMax")),this.initTarget(),this.target&&(this.lineHeight=f.get("lineHeight")==="auto"?b.round(this.canvasHeight*.3):f.get("lineHeight"))},getRegion:function(a,c,d){return b.floor(c/this.itemWidth)},getCurrentRegionFields:function(){var a=this.currentRegion;return{isNull:this.values[a]===c,value:this.values[a],offset:a}},renderRegion:function(a,c){var d=this.values,e=this.options,f=this.min,g=this.max,h=this.range,j=this.interval,k=this.target,l=this.canvasHeight,m=this.lineHeight,n=l-m,o,p,q,r;return p=i(d[a],f,g),r=a*j,o=b.round(n-n*((p-f)/h)),q=e.get("thresholdColor")&&p<e.get("thresholdValue")?e.get("thresholdColor"):e.get("lineColor"),c&&(q=this.calcHighlightColor(q,e)),k.drawLine(r,o,r,o+m,q)}}),d.fn.sparkline.bullet=B=g(d.fn.sparkline._base,{type:"bullet",init:function(a,d,e,f,g){var h,i,j;B._super.init.call(this,a,d,e,f,g),this.values=d=l(d),j=d.slice(),j[0]=j[0]===null?j[2]:j[0],j[1]=d[1]===null?j[2]:j[1],h=b.min.apply(b,d),i=b.max.apply(b,d),e.get("base")===c?h=h<0?h:0:h=e.get("base"),this.min=h,this.max=i,this.range=i-h,this.shapes={},this.valueShapes={},this.regiondata={},this.width=f=e.get("width")==="auto"?"4.0em":f,this.target=this.$el.simpledraw(f,g,e.get("composite")),d.length||(this.disabled=!0),this.initTarget()},getRegion:function(a,b,d){var e=this.target.getShapeAt(a,b,d);return e!==c&&this.shapes[e]!==c?this.shapes[e]:c},getCurrentRegionFields:function(){var a=this.currentRegion;return{fieldkey:a.substr(0,1),value:this.values[a.substr(1)],region:a}},changeHighlight:function(a){var b=this.currentRegion,c=this.valueShapes[b],d;delete this.shapes[c];switch(b.substr(0,1)){case"r":d=this.renderRange(b.substr(1),a);break;case"p":d=this.renderPerformance(a);break;case"t":d=this.renderTarget(a)}this.valueShapes[b]=d.id,this.shapes[d.id]=b,this.target.replaceWithShape(c,d)},renderRange:function(a,c){var d=this.values[a],e=b.round(this.canvasWidth*((d-this.min)/this.range)),f=this.options.get("rangeColors")[a-2];return c&&(f=this.calcHighlightColor(f,this.options)),this.target.drawRect(0,0,e-1,this.canvasHeight-1,f,f)},renderPerformance:function(a){var c=this.values[1],d=b.round(this.canvasWidth*((c-this.min)/this.range)),e=this.options.get("performanceColor");return a&&(e=this.calcHighlightColor(e,this.options)),this.target.drawRect(0,b.round(this.canvasHeight*.3),d-1,b.round(this.canvasHeight*.4)-1,e,e)},renderTarget:function(a){var c=this.values[0],d=b.round(this.canvasWidth*((c-this.min)/this.range)-this.options.get("targetWidth")/2),e=b.round(this.canvasHeight*.1),f=this.canvasHeight-e*2,g=this.options.get("targetColor");return a&&(g=this.calcHighlightColor(g,this.options)),this.target.drawRect(d,e,this.options.get("targetWidth")-1,f-1,g,g)},render:function(){var a=this.values.length,b=this.target,c,d;if(!B._super.render.call(this))return;for(c=2;c<a;c++)d=this.renderRange(c).append(),this.shapes[d.id]="r"+c,this.valueShapes["r"+c]=d.id;this.values[1]!==null&&(d=this.renderPerformance().append(),this.shapes[d.id]="p1",this.valueShapes.p1=d.id),this.values[0]!==null&&(d=this.renderTarget().append(),this.shapes[d.id]="t0",this.valueShapes.t0=d.id),b.render()}}),d.fn.sparkline.pie=C=g(d.fn.sparkline._base,{type:"pie",init:function(a,c,e,f,g){var h=0,i;C._super.init.call(this,a,c,e,f,g),this.shapes={},this.valueShapes={},this.values=c=d.map(c,Number),e.get("width")==="auto"&&(this.width=this.height);if(c.length>0)for(i=c.length;i--;)h+=c[i];this.total=h,this.initTarget(),this.radius=b.floor(b.min(this.canvasWidth,this.canvasHeight)/2)},getRegion:function(a,b,d){var e=this.target.getShapeAt(a,b,d);return e!==c&&this.shapes[e]!==c?this.shapes[e]:c},getCurrentRegionFields:function(){var a=this.currentRegion;return{isNull:this.values[a]===c,value:this.values[a],percent:this.values[a]/this.total*100,color:this.options.get("sliceColors")[a%this.options.get("sliceColors").length],offset:a}},changeHighlight:function(a){var b=this.currentRegion,c=this.renderSlice(b,a),d=this.valueShapes[b];delete this.shapes[d],this.target.replaceWithShape(d,c),this.valueShapes[b]=c.id,this.shapes[c.id]=b},renderSlice:function(a,d){var e=this.target,f=this.options,g=this.radius,h=f.get("borderWidth"),i=f.get("offset"),j=2*b.PI,k=this.values,l=this.total,m=i?2*b.PI*(i/360):0,n,o,p,q,r;q=k.length;for(p=0;p<q;p++){n=m,o=m,l>0&&(o=m+j*(k[p]/l));if(a===p)return r=f.get("sliceColors")[p%f.get("sliceColors").length],d&&(r=this.calcHighlightColor(r,f)),e.drawPieSlice(g,g,g-h,n,o,c,r);m=o}},render:function(){var a=this.target,d=this.values,e=this.options,f=this.radius,g=e.get("borderWidth"),h,i;if(!C._super.render.call(this))return;g&&a.drawCircle(f,f,b.floor(f-g/2),e.get("borderColor"),c,g).append();for(i=d.length;i--;)d[i]&&(h=this.renderSlice(i).append(),this.valueShapes[i]=h.id,this.shapes[h.id]=i);a.render()}}),d.fn.sparkline.box=D=g(d.fn.sparkline._base,{type:"box",init:function(a,b,c,e,f){D._super.init.call(this,a,b,c,e,f),this.values=d.map(b,Number),this.width=c.get("width")==="auto"?"4.0em":e,this.initTarget(),this.values.length||(this.disabled=1)},getRegion:function(){return 1},getCurrentRegionFields:function(){var a=[{field:"lq",value:this.quartiles[0]},{field:"med",value:this.quartiles
[1]},{field:"uq",value:this.quartiles[2]}];return this.loutlier!==c&&a.push({field:"lo",value:this.loutlier}),this.routlier!==c&&a.push({field:"ro",value:this.routlier}),this.lwhisker!==c&&a.push({field:"lw",value:this.lwhisker}),this.rwhisker!==c&&a.push({field:"rw",value:this.rwhisker}),a},render:function(){var a=this.target,d=this.values,e=d.length,f=this.options,g=this.canvasWidth,h=this.canvasHeight,i=f.get("chartRangeMin")===c?b.min.apply(b,d):f.get("chartRangeMin"),k=f.get("chartRangeMax")===c?b.max.apply(b,d):f.get("chartRangeMax"),l=0,m,n,o,p,q,r,s,t,u,v,w;if(!D._super.render.call(this))return;if(f.get("raw"))f.get("showOutliers")&&d.length>5?(n=d[0],m=d[1],p=d[2],q=d[3],r=d[4],s=d[5],t=d[6]):(m=d[0],p=d[1],q=d[2],r=d[3],s=d[4]);else{d.sort(function(a,b){return a-b}),p=j(d,1),q=j(d,2),r=j(d,3),o=r-p;if(f.get("showOutliers")){m=s=c;for(u=0;u<e;u++)m===c&&d[u]>p-o*f.get("outlierIQR")&&(m=d[u]),d[u]<r+o*f.get("outlierIQR")&&(s=d[u]);n=d[0],t=d[e-1]}else m=d[0],s=d[e-1]}this.quartiles=[p,q,r],this.lwhisker=m,this.rwhisker=s,this.loutlier=n,this.routlier=t,w=g/(k-i+1),f.get("showOutliers")&&(l=b.ceil(f.get("spotRadius")),g-=2*b.ceil(f.get("spotRadius")),w=g/(k-i+1),n<m&&a.drawCircle((n-i)*w+l,h/2,f.get("spotRadius"),f.get("outlierLineColor"),f.get("outlierFillColor")).append(),t>s&&a.drawCircle((t-i)*w+l,h/2,f.get("spotRadius"),f.get("outlierLineColor"),f.get("outlierFillColor")).append()),a.drawRect(b.round((p-i)*w+l),b.round(h*.1),b.round((r-p)*w),b.round(h*.8),f.get("boxLineColor"),f.get("boxFillColor")).append(),a.drawLine(b.round((m-i)*w+l),b.round(h/2),b.round((p-i)*w+l),b.round(h/2),f.get("lineColor")).append(),a.drawLine(b.round((m-i)*w+l),b.round(h/4),b.round((m-i)*w+l),b.round(h-h/4),f.get("whiskerColor")).append(),a.drawLine(b.round((s-i)*w+l),b.round(h/2),b.round((r-i)*w+l),b.round(h/2),f.get("lineColor")).append(),a.drawLine(b.round((s-i)*w+l),b.round(h/4),b.round((s-i)*w+l),b.round(h-h/4),f.get("whiskerColor")).append(),a.drawLine(b.round((q-i)*w+l),b.round(h*.1),b.round((q-i)*w+l),b.round(h*.9),f.get("medianColor")).append(),f.get("target")&&(v=b.ceil(f.get("spotRadius")),a.drawLine(b.round((f.get("target")-i)*w+l),b.round(h/2-v),b.round((f.get("target")-i)*w+l),b.round(h/2+v),f.get("targetColor")).append(),a.drawLine(b.round((f.get("target")-i)*w+l-v),b.round(h/2),b.round((f.get("target")-i)*w+l+v),b.round(h/2),f.get("targetColor")).append()),a.render()}}),G=g({init:function(a,b,c,d){this.target=a,this.id=b,this.type=c,this.args=d},append:function(){return this.target.appendShape(this),this}}),H=g({_pxregex:/(\d+)(px)?\s*$/i,init:function(a,b,c){if(!a)return;this.width=a,this.height=b,this.target=c,this.lastShapeId=null,c[0]&&(c=c[0]),d.data(c,"_jqs_vcanvas",this)},drawLine:function(a,b,c,d,e,f){return this.drawShape([[a,b],[c,d]],e,f)},drawShape:function(a,b,c,d){return this._genShape("Shape",[a,b,c,d])},drawCircle:function(a,b,c,d,e,f){return this._genShape("Circle",[a,b,c,d,e,f])},drawPieSlice:function(a,b,c,d,e,f,g){return this._genShape("PieSlice",[a,b,c,d,e,f,g])},drawRect:function(a,b,c,d,e,f){return this._genShape("Rect",[a,b,c,d,e,f])},getElement:function(){return this.canvas},getLastShapeId:function(){return this.lastShapeId},reset:function(){alert("reset not implemented")},_insert:function(a,b){d(b).html(a)},_calculatePixelDims:function(a,b,c){var e;e=this._pxregex.exec(b),e?this.pixelHeight=e[1]:this.pixelHeight=d(c).height(),e=this._pxregex.exec(a),e?this.pixelWidth=e[1]:this.pixelWidth=d(c).width()},_genShape:function(a,b){var c=L++;return b.unshift(c),new G(this,c,a,b)},appendShape:function(a){alert("appendShape not implemented")},replaceWithShape:function(a,b){alert("replaceWithShape not implemented")},insertAfterShape:function(a,b){alert("insertAfterShape not implemented")},removeShapeId:function(a){alert("removeShapeId not implemented")},getShapeAt:function(a,b,c){alert("getShapeAt not implemented")},render:function(){alert("render not implemented")}}),I=g(H,{init:function(b,e,f,g){I._super.init.call(this,b,e,f),this.canvas=a.createElement("canvas"),f[0]&&(f=f[0]),d.data(f,"_jqs_vcanvas",this),d(this.canvas).css({display:"inline-block",width:b,height:e,verticalAlign:"top"}),this._insert(this.canvas,f),this._calculatePixelDims(b,e,this.canvas),this.canvas.width=this.pixelWidth,this.canvas.height=this.pixelHeight,this.interact=g,this.shapes={},this.shapeseq=[],this.currentTargetShapeId=c,d(this.canvas).css({width:this.pixelWidth,height:this.pixelHeight})},_getContext:function(a,b,d){var e=this.canvas.getContext("2d");return a!==c&&(e.strokeStyle=a),e.lineWidth=d===c?1:d,b!==c&&(e.fillStyle=b),e},reset:function(){var a=this._getContext();a.clearRect(0,0,this.pixelWidth,this.pixelHeight),this.shapes={},this.shapeseq=[],this.currentTargetShapeId=c},_drawShape:function(a,b,d,e,f){var g=this._getContext(d,e,f),h,i;g.beginPath(),g.moveTo(b[0][0]+.5,b[0][1]+.5);for(h=1,i=b.length;h<i;h++)g.lineTo(b[h][0]+.5,b[h][1]+.5);d!==c&&g.stroke(),e!==c&&g.fill(),this.targetX!==c&&this.targetY!==c&&g.isPointInPath(this.targetX,this.targetY)&&(this.currentTargetShapeId=a)},_drawCircle:function(a,d,e,f,g,h,i){var j=this._getContext(g,h,i);j.beginPath(),j.arc(d,e,f,0,2*b.PI,!1),this.targetX!==c&&this.targetY!==c&&j.isPointInPath(this.targetX,this.targetY)&&(this.currentTargetShapeId=a),g!==c&&j.stroke(),h!==c&&j.fill()},_drawPieSlice:function(a,b,d,e,f,g,h,i){var j=this._getContext(h,i);j.beginPath(),j.moveTo(b,d),j.arc(b,d,e,f,g,!1),j.lineTo(b,d),j.closePath(),h!==c&&j.stroke(),i&&j.fill(),this.targetX!==c&&this.targetY!==c&&j.isPointInPath(this.targetX,this.targetY)&&(this.currentTargetShapeId=a)},_drawRect:function(a,b,c,d,e,f,g){return this._drawShape(a,[[b,c],[b+d,c],[b+d,c+e],[b,c+e],[b,c]],f,g)},appendShape:function(a){return this.shapes[a.id]=a,this.shapeseq.push(a.id),this.lastShapeId=a.id,a.id},replaceWithShape:function(a,b){var c=this.shapeseq,d;this.shapes[b.id]=b;for(d=c.length;d--;)c[d]==a&&(c[d]=b.id);delete this.shapes[a]},replaceWithShapes:function(a,b){var c=this.shapeseq,d={},e,f,g;for(f=a.length;f--;)d[a[f]]=!0;for(f=c.length;f--;)e=c[f],d[e]&&(c.splice(f,1),delete this.shapes[e],g=f);for(f=b.length;f--;)c.splice(g,0,b[f].id),this.shapes[b[f].id]=b[f]},insertAfterShape:function(a,b){var c=this.shapeseq,d;for(d=c.length;d--;)if(c[d]===a){c.splice(d+1,0,b.id),this.shapes[b.id]=b;return}},removeShapeId:function(a){var b=this.shapeseq,c;for(c=b.length;c--;)if(b[c]===a){b.splice(c,1);break}delete this.shapes[a]},getShapeAt:function(a,b,c){return this.targetX=b,this.targetY=c,this.render(),this.currentTargetShapeId},render:function(){var a=this.shapeseq,b=this.shapes,c=a.length,d=this._getContext(),e,f,g;d.clearRect(0,0,this.pixelWidth,this.pixelHeight);for(g=0;g<c;g++)e=a[g],f=b[e],this["_draw"+f.type].apply(this,f.args);this.interact||(this.shapes={},this.shapeseq=[])}}),J=g(H,{init:function(b,c,e){var f;J._super.init.call(this,b,c,e),e[0]&&(e=e[0]),d.data(e,"_jqs_vcanvas",this),this.canvas=a.createElement("span"),d(this.canvas).css({display:"inline-block",position:"relative",overflow:"hidden",width:b,height:c,margin:"0px",padding:"0px",verticalAlign:"top"}),this._insert(this.canvas,e),this._calculatePixelDims(b,c,this.canvas),this.canvas.width=this.pixelWidth,this.canvas.height=this.pixelHeight,f='<v:group coordorigin="0 0" coordsize="'+this.pixelWidth+" "+this.pixelHeight+'"'+' style="position:absolute;top:0;left:0;width:'+this.pixelWidth+"px;height="+this.pixelHeight+'px;"></v:group>',this.canvas.insertAdjacentHTML("beforeEnd",f),this.group=d(this.canvas).children()[0],this.rendered=!1,this.prerender=""},_drawShape:function(a,b,d,e,f){var g=[],h,i,j,k,l,m,n;for(n=0,m=b.length;n<m;n++)g[n]=""+b[n][0]+","+b[n][1];return h=g.splice(0,1),f=f===c?1:f,i=d===c?' stroked="false" ':' strokeWeight="'+f+'px" strokeColor="'+d+'" ',j=e===c?' filled="false"':' fillColor="'+e+'" filled="true" ',k=g[0]===g[g.length-1]?"x ":"",l='<v:shape coordorigin="0 0" coordsize="'+this.pixelWidth+" "+this.pixelHeight+'" '+' id="jqsshape'+a+'" '+i+j+' style="position:absolute;left:0px;top:0px;height:'+this.pixelHeight+"px;width:"+this.pixelWidth+'px;padding:0px;margin:0px;" '+' path="m '+h+" l "+g.join(", ")+" "+k+'e">'+" </v:shape>",l},_drawCircle:function(a,b,d,e,f,g,h){var i,j,k;return b-=e,d-=e,i=f===c?' stroked="false" ':' strokeWeight="'+h+'px" strokeColor="'+f+'" ',j=g===c?' filled="false"':' fillColor="'+g+'" filled="true" ',k='<v:oval  id="jqsshape'+a+'" '+i+j+' style="position:absolute;top:'+d+"px; left:"+b+"px; width:"+e*2+"px; height:"+e*2+'px"></v:oval>',k},_drawPieSlice:function(a,d,e,f,g,h,i,j){var k,l,m,n,o,p,q,r;if(g===h)return"";h-g===2*b.PI&&(g=0,h=2*b.PI),l=d+b.round(b.cos(g)*f),m=e+b.round(b.sin(g)*f),n=d+b.round(b.cos(h)*f),o=e+b.round(b.sin(h)*f);if(l===n&&m===o){if(h-g<b.PI)return"";l=n=d+f,m=o=e}return l===n&&m===o&&h-g<b.PI?"":(k=[d-f,e-f,d+f,e+f,l,m,n,o],p=i===c?' stroked="false" ':' strokeWeight="1px" strokeColor="'+i+'" ',q=j===c?' filled="false"':' fillColor="'+j+'" filled="true" ',r='<v:shape coordorigin="0 0" coordsize="'+this.pixelWidth+" "+this.pixelHeight+'" '+' id="jqsshape'+a+'" '+p+q+' style="position:absolute;left:0px;top:0px;height:'+this.pixelHeight+"px;width:"+this.pixelWidth+'px;padding:0px;margin:0px;" '+' path="m '+d+","+e+" wa "+k.join(", ")+' x e">'+" </v:shape>",r)},_drawRect:function(a,b,c,d,e,f,g){return this._drawShape(a,[[b,c],[b,c+e],[b+d,c+e],[b+d,c],[b,c]],f,g)},reset:function(){this.group.innerHTML=""},appendShape:function(a){var b=this["_draw"+a.type].apply(this,a.args);return this.rendered?this.group.insertAdjacentHTML("beforeEnd",b):this.prerender+=b,this.lastShapeId=a.id,a.id},replaceWithShape:function(a,b){var c=d("#jqsshape"+a),e=this["_draw"+b.type].apply(this,b.args);c[0].outerHTML=e},replaceWithShapes:function(a,b){var c=d("#jqsshape"+a[0]),e="",f=b.length,g;for(g=0;g<f;g++)e+=this["_draw"+b[g].type].apply(this,b[g].args);c[0].outerHTML=e;for(g=1;g<a.length;g++)d("#jqsshape"+a[g]).remove()},insertAfterShape:function(a,b){var c=d("#jqsshape"+a),e=this["_draw"+b.type].apply(this,b.args);c[0].insertAdjacentHTML("afterEnd",e)},removeShapeId:function(a){var b=d("#jqsshape"+a);this.group.removeChild(b[0])},getShapeAt:function(a,b,c){var d=a.id.substr(8);return d},render:function(){this.rendered||(this.group.innerHTML=this.prerender,this.rendered=!0)}})})})(document,Math);
;
/*! jQuery Validation Plugin - v1.21.0 - 7/17/2024
 * https://jqueryvalidation.org/
 * Copyright (c) 2024 Jörn Zaefferer; Licensed MIT */
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):"object"==typeof module&&module.exports?module.exports=a(require("jquery")):a(jQuery)}(function(a){a.extend(a.fn,{validate:function(b){if(!this.length)return void(b&&b.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing."));var c=a.data(this[0],"validator");return c?c:(this.attr("novalidate","novalidate"),c=new a.validator(b,this[0]),a.data(this[0],"validator",c),c.settings.onsubmit&&(this.on("click.validate",":submit",function(b){c.submitButton=b.currentTarget,a(this).hasClass("cancel")&&(c.cancelSubmit=!0),void 0!==a(this).attr("formnovalidate")&&(c.cancelSubmit=!0)}),this.on("submit.validate",function(b){function d(){var d,e;return c.submitButton&&(c.settings.submitHandler||c.formSubmitted)&&(d=a("<input type='hidden'/>").attr("name",c.submitButton.name).val(a(c.submitButton).val()).appendTo(c.currentForm)),!(c.settings.submitHandler&&!c.settings.debug)||(e=c.settings.submitHandler.call(c,c.currentForm,b),d&&d.remove(),void 0!==e&&e)}return c.settings.debug&&b.preventDefault(),c.cancelSubmit?(c.cancelSubmit=!1,d()):c.form()?c.pendingRequest?(c.formSubmitted=!0,!1):d():(c.focusInvalid(),!1)})),c)},valid:function(){var b,c,d;return a(this[0]).is("form")?b=this.validate().form():(d=[],b=!0,c=a(this[0].form).validate(),this.each(function(){b=c.element(this)&&b,b||(d=d.concat(c.errorList))}),c.errorList=d),b},rules:function(b,c){var d,e,f,g,h,i,j=this[0],k="undefined"!=typeof this.attr("contenteditable")&&"false"!==this.attr("contenteditable");if(null!=j&&(!j.form&&k&&(j.form=this.closest("form")[0],j.name=this.attr("name")),null!=j.form)){if(b)switch(d=a.data(j.form,"validator").settings,e=d.rules,f=a.validator.staticRules(j),b){case"add":a.extend(f,a.validator.normalizeRule(c)),delete f.messages,e[j.name]=f,c.messages&&(d.messages[j.name]=a.extend(d.messages[j.name],c.messages));break;case"remove":return c?(i={},a.each(c.split(/\s/),function(a,b){i[b]=f[b],delete f[b]}),i):(delete e[j.name],f)}return g=a.validator.normalizeRules(a.extend({},a.validator.classRules(j),a.validator.attributeRules(j),a.validator.dataRules(j),a.validator.staticRules(j)),j),g.required&&(h=g.required,delete g.required,g=a.extend({required:h},g)),g.remote&&(h=g.remote,delete g.remote,g=a.extend(g,{remote:h})),g}}});var b=function(a){return a.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")};a.extend(a.expr.pseudos||a.expr[":"],{blank:function(c){return!b(""+a(c).val())},filled:function(c){var d=a(c).val();return null!==d&&!!b(""+d)},unchecked:function(b){return!a(b).prop("checked")}}),a.validator=function(b,c){this.settings=a.extend(!0,{},a.validator.defaults,b),this.currentForm=c,this.init()},a.validator.format=function(b,c){return 1===arguments.length?function(){var c=a.makeArray(arguments);return c.unshift(b),a.validator.format.apply(this,c)}:void 0===c?b:(arguments.length>2&&c.constructor!==Array&&(c=a.makeArray(arguments).slice(1)),c.constructor!==Array&&(c=[c]),a.each(c,function(a,c){b=b.replace(new RegExp("\\{"+a+"\\}","g"),function(){return c})}),b)},a.extend(a.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:a([]),errorLabelContainer:a([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,customElements:[],onfocusin:function(a){this.lastActive=a,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,a,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(a)))},onfocusout:function(a){this.checkable(a)||!(a.name in this.submitted)&&this.optional(a)||this.element(a)},onkeyup:function(b,c){var d=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===c.which&&""===this.elementValue(b)||a.inArray(c.keyCode,d)!==-1||(b.name in this.submitted||b.name in this.invalid)&&this.element(b)},onclick:function(a){a.name in this.submitted?this.element(a):a.parentNode.name in this.submitted&&this.element(a.parentNode)},highlight:function(b,c,d){"radio"===b.type?this.findByName(b.name).addClass(c).removeClass(d):a(b).addClass(c).removeClass(d)},unhighlight:function(b,c,d){"radio"===b.type?this.findByName(b.name).removeClass(c).addClass(d):a(b).removeClass(c).addClass(d)}},setDefaults:function(b){a.extend(a.validator.defaults,b)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:a.validator.format("Please enter no more than {0} characters."),minlength:a.validator.format("Please enter at least {0} characters."),rangelength:a.validator.format("Please enter a value between {0} and {1} characters long."),range:a.validator.format("Please enter a value between {0} and {1}."),max:a.validator.format("Please enter a value less than or equal to {0}."),min:a.validator.format("Please enter a value greater than or equal to {0}."),step:a.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){function b(b){var c="undefined"!=typeof a(this).attr("contenteditable")&&"false"!==a(this).attr("contenteditable");if(!this.form&&c&&(this.form=a(this).closest("form")[0],this.name=a(this).attr("name")),d===this.form){var e=a.data(this.form,"validator"),f="on"+b.type.replace(/^validate/,""),g=e.settings;g[f]&&!a(this).is(g.ignore)&&g[f].call(e,this,b)}}this.labelContainer=a(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||a(this.currentForm),this.containers=a(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var c,d=this.currentForm,e=this.groups={};a.each(this.settings.groups,function(b,c){"string"==typeof c&&(c=c.split(/\s/)),a.each(c,function(a,c){e[c]=b})}),c=this.settings.rules,a.each(c,function(b,d){c[b]=a.validator.normalizeRule(d)});var f=[":text","[type='password']","[type='file']","select","textarea","[type='number']","[type='search']","[type='tel']","[type='url']","[type='email']","[type='datetime']","[type='date']","[type='month']","[type='week']","[type='time']","[type='datetime-local']","[type='range']","[type='color']","[type='radio']","[type='checkbox']","[contenteditable]","[type='button']"],g=["select","option","[type='radio']","[type='checkbox']"];a(this.currentForm).on("focusin.validate focusout.validate keyup.validate",f.concat(this.settings.customElements).join(", "),b).on("click.validate",g.concat(this.settings.customElements).join(", "),b),this.settings.invalidHandler&&a(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),a.extend(this.submitted,this.errorMap),this.invalid=a.extend({},this.errorMap),this.valid()||a(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var a=0,b=this.currentElements=this.elements();b[a];a++)this.check(b[a]);return this.valid()},element:function(b){var c,d,e=this.clean(b),f=this.validationTargetFor(e),g=this,h=!0;return void 0===f?delete this.invalid[e.name]:(this.prepareElement(f),this.currentElements=a(f),d=this.groups[f.name],d&&a.each(this.groups,function(a,b){b===d&&a!==f.name&&(e=g.validationTargetFor(g.clean(g.findByName(a))),e&&e.name in g.invalid&&(g.currentElements.push(e),h=g.check(e)&&h))}),c=this.check(f)!==!1,h=h&&c,c?this.invalid[f.name]=!1:this.invalid[f.name]=!0,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),a(b).attr("aria-invalid",!c)),h},showErrors:function(b){if(b){var c=this;a.extend(this.errorMap,b),this.errorList=a.map(this.errorMap,function(a,b){return{message:a,element:c.findByName(b)[0]}}),this.successList=a.grep(this.successList,function(a){return!(a.name in b)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){a.fn.resetForm&&a(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var b=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(b)},resetElements:function(a){var b;if(this.settings.unhighlight)for(b=0;a[b];b++)this.settings.unhighlight.call(this,a[b],this.settings.errorClass,""),this.findByName(a[b].name).removeClass(this.settings.validClass);else a.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(a){var b,c=0;for(b in a)void 0!==a[b]&&null!==a[b]&&a[b]!==!1&&c++;return c},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(a){a.not(this.containers).text(""),this.addWrapper(a).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{a(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").trigger("focus").trigger("focusin")}catch(b){}},findLastActive:function(){var b=this.lastActive;return b&&1===a.grep(this.errorList,function(a){return a.element.name===b.name}).length&&b},elements:function(){var b=this,c={},d=["input","select","textarea","[contenteditable]"];return a(this.currentForm).find(d.concat(this.settings.customElements).join(", ")).not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){var d=this.name||a(this).attr("name"),e="undefined"!=typeof a(this).attr("contenteditable")&&"false"!==a(this).attr("contenteditable");return!d&&b.settings.debug&&window.console&&console.error("%o has no name assigned",this),e&&(this.form=a(this).closest("form")[0],this.name=d),this.form===b.currentForm&&(!(d in c||!b.objectLength(a(this).rules()))&&(c[d]=!0,!0))})},clean:function(b){return a(b)[0]},errors:function(){var b=this.settings.errorClass.split(" ").join(".");return a(this.settings.errorElement+"."+b,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=a([]),this.toHide=a([])},reset:function(){this.resetInternals(),this.currentElements=a([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(a){this.reset(),this.toHide=this.errorsFor(a)},elementValue:function(b){var c,d,e=a(b),f=b.type,g="undefined"!=typeof e.attr("contenteditable")&&"false"!==e.attr("contenteditable");return"radio"===f||"checkbox"===f?this.findByName(b.name).filter(":checked").val():"number"===f&&"undefined"!=typeof b.validity?b.validity.badInput?"NaN":e.val():(c=g?e.text():e.val(),"file"===f?"C:\\fakepath\\"===c.substr(0,12)?c.substr(12):(d=c.lastIndexOf("/"),d>=0?c.substr(d+1):(d=c.lastIndexOf("\\"),d>=0?c.substr(d+1):c)):"string"==typeof c?c.replace(/\r/g,""):c)},check:function(b){b=this.validationTargetFor(this.clean(b));var c,d,e,f,g=a(b).rules(),h=a.map(g,function(a,b){return b}).length,i=!1,j=this.elementValue(b);this.abortRequest(b),"function"==typeof g.normalizer?f=g.normalizer:"function"==typeof this.settings.normalizer&&(f=this.settings.normalizer),f&&(j=f.call(b,j),delete g.normalizer);for(d in g){e={method:d,parameters:g[d]};try{if(c=a.validator.methods[d].call(this,j,b,e.parameters),"dependency-mismatch"===c&&1===h){i=!0;continue}if(i=!1,"pending"===c)return void(this.toHide=this.toHide.not(this.errorsFor(b)));if(!c)return this.formatAndAdd(b,e),!1}catch(k){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+b.id+", check the '"+e.method+"' method.",k),k instanceof TypeError&&(k.message+=".  Exception occurred when checking element "+b.id+", check the '"+e.method+"' method."),k}}if(!i)return this.objectLength(g)&&this.successList.push(b),!0},customDataMessage:function(b,c){return a(b).data("msg"+c.charAt(0).toUpperCase()+c.substring(1).toLowerCase())||a(b).data("msg")},customMessage:function(a,b){var c=this.settings.messages[a];return c&&(c.constructor===String?c:c[b])},findDefined:function(){for(var a=0;a<arguments.length;a++)if(void 0!==arguments[a])return arguments[a]},defaultMessage:function(b,c){"string"==typeof c&&(c={method:c});var d=this.findDefined(this.customMessage(b.name,c.method),this.customDataMessage(b,c.method),!this.settings.ignoreTitle&&b.title||void 0,a.validator.messages[c.method],"<strong>Warning: No message defined for "+b.name+"</strong>"),e=/\$?\{(\d+)\}/g;return"function"==typeof d?d=d.call(this,c.parameters,b):e.test(d)&&(d=a.validator.format(d.replace(e,"{$1}"),c.parameters)),d},formatAndAdd:function(a,b){var c=this.defaultMessage(a,b);this.errorList.push({message:c,element:a,method:b.method}),this.errorMap[a.name]=c,this.submitted[a.name]=c},addWrapper:function(a){return this.settings.wrapper&&(a=a.add(a.parent(this.settings.wrapper))),a},defaultShowErrors:function(){var a,b,c;for(a=0;this.errorList[a];a++)c=this.errorList[a],this.settings.highlight&&this.settings.highlight.call(this,c.element,this.settings.errorClass,this.settings.validClass),this.showLabel(c.element,c.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(a=0;this.successList[a];a++)this.showLabel(this.successList[a]);if(this.settings.unhighlight)for(a=0,b=this.validElements();b[a];a++)this.settings.unhighlight.call(this,b[a],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return a(this.errorList).map(function(){return this.element})},showLabel:function(b,c){var d,e,f,g,h=this.errorsFor(b),i=this.idOrName(b),j=a(b).attr("aria-describedby");h.length?(h.removeClass(this.settings.validClass).addClass(this.settings.errorClass),this.settings&&this.settings.escapeHtml?h.text(c||""):h.html(c||"")):(h=a("<"+this.settings.errorElement+">").attr("id",i+"-error").addClass(this.settings.errorClass),this.settings&&this.settings.escapeHtml?h.text(c||""):h.html(c||""),d=h,this.settings.wrapper&&(d=h.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(d):this.settings.errorPlacement?this.settings.errorPlacement.call(this,d,a(b)):d.insertAfter(b),h.is("label")?h.attr("for",i):0===h.parents("label[for='"+this.escapeCssMeta(i)+"']").length&&(f=h.attr("id"),j?j.match(new RegExp("\\b"+this.escapeCssMeta(f)+"\\b"))||(j+=" "+f):j=f,a(b).attr("aria-describedby",j),e=this.groups[b.name],e&&(g=this,a.each(g.groups,function(b,c){c===e&&a("[name='"+g.escapeCssMeta(b)+"']",g.currentForm).attr("aria-describedby",h.attr("id"))})))),!c&&this.settings.success&&(h.text(""),"string"==typeof this.settings.success?h.addClass(this.settings.success):this.settings.success(h,b)),this.toShow=this.toShow.add(h)},errorsFor:function(b){var c=this.escapeCssMeta(this.idOrName(b)),d=a(b).attr("aria-describedby"),e="label[for='"+c+"'], label[for='"+c+"'] *";return d&&(e=e+", #"+this.escapeCssMeta(d).replace(/\s+/g,", #")),this.errors().filter(e)},escapeCssMeta:function(a){return void 0===a?"":a.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(a){return this.groups[a.name]||(this.checkable(a)?a.name:a.id||a.name)},validationTargetFor:function(b){return this.checkable(b)&&(b=this.findByName(b.name)),a(b).not(this.settings.ignore)[0]},checkable:function(a){return/radio|checkbox/i.test(a.type)},findByName:function(b){return a(this.currentForm).find("[name='"+this.escapeCssMeta(b)+"']")},getLength:function(b,c){switch(c.nodeName.toLowerCase()){case"select":return a("option:selected",c).length;case"input":if(this.checkable(c))return this.findByName(c.name).filter(":checked").length}return b.length},depend:function(a,b){return!this.dependTypes[typeof a]||this.dependTypes[typeof a](a,b)},dependTypes:{"boolean":function(a){return a},string:function(b,c){return!!a(b,c.form).length},"function":function(a,b){return a(b)}},optional:function(b){var c=this.elementValue(b);return!a.validator.methods.required.call(this,c,b)&&"dependency-mismatch"},elementAjaxPort:function(a){return"validate"+a.name},startRequest:function(b){this.pending[b.name]||(this.pendingRequest++,a(b).addClass(this.settings.pendingClass),this.pending[b.name]=!0)},stopRequest:function(b,c){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[b.name],a(b).removeClass(this.settings.pendingClass),c&&0===this.pendingRequest&&this.formSubmitted&&this.form()&&0===this.pendingRequest?(a(this.currentForm).trigger("submit"),this.submitButton&&a("input:hidden[name='"+this.submitButton.name+"']",this.currentForm).remove(),this.formSubmitted=!1):!c&&0===this.pendingRequest&&this.formSubmitted&&(a(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},abortRequest:function(b){var c;this.pending[b.name]&&(c=this.elementAjaxPort(b),a.ajaxAbort(c),this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[b.name],a(b).removeClass(this.settings.pendingClass))},previousValue:function(b,c){return c="string"==typeof c&&c||"remote",a.data(b,"previousValue")||a.data(b,"previousValue",{old:null,valid:!0,message:this.defaultMessage(b,{method:c})})},destroy:function(){this.resetForm(),a(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(b,c){b.constructor===String?this.classRuleSettings[b]=c:a.extend(this.classRuleSettings,b)},classRules:function(b){var c={},d=a(b).attr("class");return d&&a.each(d.split(" "),function(){this in a.validator.classRuleSettings&&a.extend(c,a.validator.classRuleSettings[this])}),c},normalizeAttributeRule:function(a,b,c,d){/min|max|step/.test(c)&&(null===b||/number|range|text/.test(b))&&(d=Number(d),isNaN(d)&&(d=void 0)),d||0===d?a[c]=d:b===c&&"range"!==b&&(a["date"===b?"dateISO":c]=!0)},attributeRules:function(b){var c,d,e={},f=a(b),g=b.getAttribute("type");for(c in a.validator.methods)"required"===c?(d=b.getAttribute(c),""===d&&(d=!0),d=!!d):d=f.attr(c),this.normalizeAttributeRule(e,g,c,d);return e.maxlength&&/-1|2147483647|524288/.test(e.maxlength)&&delete e.maxlength,e},dataRules:function(b){var c,d,e={},f=a(b),g=b.getAttribute("type");for(c in a.validator.methods)d=f.data("rule"+c.charAt(0).toUpperCase()+c.substring(1).toLowerCase()),""===d&&(d=!0),this.normalizeAttributeRule(e,g,c,d);return e},staticRules:function(b){var c={},d=a.data(b.form,"validator");return d.settings.rules&&(c=a.validator.normalizeRule(d.settings.rules[b.name])||{}),c},normalizeRules:function(b,c){return a.each(b,function(d,e){if(e===!1)return void delete b[d];if(e.param||e.depends){var f=!0;switch(typeof e.depends){case"string":f=!!a(e.depends,c.form).length;break;case"function":f=e.depends.call(c,c)}f?b[d]=void 0===e.param||e.param:(a.data(c.form,"validator").resetElements(a(c)),delete b[d])}}),a.each(b,function(a,d){b[a]="function"==typeof d&&"normalizer"!==a?d(c):d}),a.each(["minlength","maxlength"],function(){b[this]&&(b[this]=Number(b[this]))}),a.each(["rangelength","range"],function(){var a;b[this]&&(Array.isArray(b[this])?b[this]=[Number(b[this][0]),Number(b[this][1])]:"string"==typeof b[this]&&(a=b[this].replace(/[\[\]]/g,"").split(/[\s,]+/),b[this]=[Number(a[0]),Number(a[1])]))}),a.validator.autoCreateRanges&&(null!=b.min&&null!=b.max&&(b.range=[b.min,b.max],delete b.min,delete b.max),null!=b.minlength&&null!=b.maxlength&&(b.rangelength=[b.minlength,b.maxlength],delete b.minlength,delete b.maxlength)),b},normalizeRule:function(b){if("string"==typeof b){var c={};a.each(b.split(/\s/),function(){c[this]=!0}),b=c}return b},addMethod:function(b,c,d){a.validator.methods[b]=c,a.validator.messages[b]=void 0!==d?d:a.validator.messages[b],c.length<3&&a.validator.addClassRules(b,a.validator.normalizeRule(b))},methods:{required:function(b,c,d){if(!this.depend(d,c))return"dependency-mismatch";if("select"===c.nodeName.toLowerCase()){var e=a(c).val();return e&&e.length>0}return this.checkable(c)?this.getLength(b,c)>0:void 0!==b&&null!==b&&b.length>0},email:function(a,b){return this.optional(b)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(a)},url:function(a,b){return this.optional(b)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})+(?::(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(a)},date:function(){var a=!1;return function(b,c){return a||(a=!0,this.settings.debug&&window.console&&console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\nPlease don't use it, since it relies on the Date constructor, which\nbehaves very differently across browsers and locales. Use `dateISO`\ninstead or one of the locale specific methods in `localizations/`\nand `additional-methods.js`.")),this.optional(c)||!/Invalid|NaN/.test(new Date(b).toString())}}(),dateISO:function(a,b){return this.optional(b)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(a)},number:function(a,b){return this.optional(b)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:-?\.\d+)?$/.test(a)},digits:function(a,b){return this.optional(b)||/^\d+$/.test(a)},minlength:function(a,b,c){var d=Array.isArray(a)?a.length:this.getLength(a,b);return this.optional(b)||d>=c},maxlength:function(a,b,c){var d=Array.isArray(a)?a.length:this.getLength(a,b);return this.optional(b)||d<=c},rangelength:function(a,b,c){var d=Array.isArray(a)?a.length:this.getLength(a,b);return this.optional(b)||d>=c[0]&&d<=c[1]},min:function(a,b,c){return this.optional(b)||a>=c},max:function(a,b,c){return this.optional(b)||a<=c},range:function(a,b,c){return this.optional(b)||a>=c[0]&&a<=c[1]},step:function(b,c,d){var e,f=a(c).attr("type"),g="Step attribute on input type "+f+" is not supported.",h=["text","number","range"],i=new RegExp("\\b"+f+"\\b"),j=f&&!i.test(h.join()),k=function(a){var b=(""+a).match(/(?:\.(\d+))?$/);return b&&b[1]?b[1].length:0},l=function(a){return Math.round(a*Math.pow(10,e))},m=!0;if(j)throw new Error(g);return e=k(d),(k(b)>e||l(b)%l(d)!==0)&&(m=!1),this.optional(c)||m},equalTo:function(b,c,d){var e=a(d);return this.settings.onfocusout&&e.not(".validate-equalTo-blur").length&&e.addClass("validate-equalTo-blur").on("blur.validate-equalTo",function(){a(c).valid()}),b===e.val()},remote:function(b,c,d,e){if(this.optional(c))return"dependency-mismatch";e="string"==typeof e&&e||"remote";var f,g,h,i=this.previousValue(c,e);return this.settings.messages[c.name]||(this.settings.messages[c.name]={}),i.originalMessage=i.originalMessage||this.settings.messages[c.name][e],this.settings.messages[c.name][e]=i.message,d="string"==typeof d&&{url:d}||d,h=a.param(a.extend({data:b},d.data)),null!==i.valid&&i.old===h?i.valid:(i.old=h,i.valid=null,f=this,this.startRequest(c),g={},g[c.name]=b,a.ajax(a.extend(!0,{mode:"abort",port:this.elementAjaxPort(c),dataType:"json",data:g,context:f.currentForm,success:function(a){var d,g,h,j=a===!0||"true"===a;f.settings.messages[c.name][e]=i.originalMessage,j?(h=f.formSubmitted,f.toHide=f.errorsFor(c),f.formSubmitted=h,f.successList.push(c),f.invalid[c.name]=!1,f.showErrors()):(d={},g=a||f.defaultMessage(c,{method:e,parameters:b}),d[c.name]=i.message=g,f.invalid[c.name]=!0,f.showErrors(d)),i.valid=j,f.stopRequest(c,j)}},d)),"pending")}}});var c,d={};return a.ajaxPrefilter?a.ajaxPrefilter(function(b,c,e){var f=b.port;"abort"===b.mode&&(a.ajaxAbort(f),d[f]=e)}):(c=a.ajax,a.ajax=function(b){var e=("mode"in b?b:a.ajaxSettings).mode,f=("port"in b?b:a.ajaxSettings).port;return"abort"===e?(a.ajaxAbort(f),d[f]=c.apply(this,arguments),d[f]):c.apply(this,arguments)}),a.ajaxAbort=function(a){d[a]&&(d[a].abort(),delete d[a])},a});
;
/* Masked Input plugin for jQuery
Copyright (c) 2007-2013 Josh Bush (digitalbush.com)
Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license)
Version: 1.3.1 */
(function(e){function t(){var e=document.createElement("input"),t="onpaste";return e.setAttribute(t,""),"function"==typeof e[t]?"paste":"input"}var n,a=t()+".mask",r=navigator.userAgent,i=/iphone/i.test(r),o=/android/i.test(r);e.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},dataName:"rawMaskFn",placeholder:"_"},e.fn.extend({caret:function(e,t){var n;if(0!==this.length&&!this.is(":hidden"))return"number"==typeof e?(t="number"==typeof t?t:e,this.each(function(){this.setSelectionRange?this.setSelectionRange(e,t):this.createTextRange&&(n=this.createTextRange(),n.collapse(!0),n.moveEnd("character",t),n.moveStart("character",e),n.select())})):(this[0].setSelectionRange?(e=this[0].selectionStart,t=this[0].selectionEnd):document.selection&&document.selection.createRange&&(n=document.selection.createRange(),e=0-n.duplicate().moveStart("character",-1e5),t=e+n.text.length),{begin:e,end:t})},unmask:function(){return this.trigger("unmask")},mask:function(t,r){var c,l,s,u,f,h;return!t&&this.length>0?(c=e(this[0]),c.data(e.mask.dataName)()):(r=e.extend({placeholder:e.mask.placeholder,completed:null},r),l=e.mask.definitions,s=[],u=h=t.length,f=null,e.each(t.split(""),function(e,t){"?"==t?(h--,u=e):l[t]?(s.push(RegExp(l[t])),null===f&&(f=s.length-1)):s.push(null)}),this.trigger("unmask").each(function(){function c(e){for(;h>++e&&!s[e];);return e}function d(e){for(;--e>=0&&!s[e];);return e}function m(e,t){var n,a;if(!(0>e)){for(n=e,a=c(t);h>n;n++)if(s[n]){if(!(h>a&&s[n].test(R[a])))break;R[n]=R[a],R[a]=r.placeholder,a=c(a)}b(),x.caret(Math.max(f,e))}}function p(e){var t,n,a,i;for(t=e,n=r.placeholder;h>t;t++)if(s[t]){if(a=c(t),i=R[t],R[t]=n,!(h>a&&s[a].test(i)))break;n=i}}function g(e){var t,n,a,r=e.which;8===r||46===r||i&&127===r?(t=x.caret(),n=t.begin,a=t.end,0===a-n&&(n=46!==r?d(n):a=c(n-1),a=46===r?c(a):a),k(n,a),m(n,a-1),e.preventDefault()):27==r&&(x.val(S),x.caret(0,y()),e.preventDefault())}function v(t){var n,a,i,l=t.which,u=x.caret();t.ctrlKey||t.altKey||t.metaKey||32>l||l&&(0!==u.end-u.begin&&(k(u.begin,u.end),m(u.begin,u.end-1)),n=c(u.begin-1),h>n&&(a=String.fromCharCode(l),s[n].test(a)&&(p(n),R[n]=a,b(),i=c(n),o?setTimeout(e.proxy(e.fn.caret,x,i),0):x.caret(i),r.completed&&i>=h&&r.completed.call(x))),t.preventDefault())}function k(e,t){var n;for(n=e;t>n&&h>n;n++)s[n]&&(R[n]=r.placeholder)}function b(){x.val(R.join(""))}function y(e){var t,n,a=x.val(),i=-1;for(t=0,pos=0;h>t;t++)if(s[t]){for(R[t]=r.placeholder;pos++<a.length;)if(n=a.charAt(pos-1),s[t].test(n)){R[t]=n,i=t;break}if(pos>a.length)break}else R[t]===a.charAt(pos)&&t!==u&&(pos++,i=t);return e?b():u>i+1?(x.val(""),k(0,h)):(b(),x.val(x.val().substring(0,i+1))),u?t:f}var x=e(this),R=e.map(t.split(""),function(e){return"?"!=e?l[e]?r.placeholder:e:void 0}),S=x.val();x.data(e.mask.dataName,function(){return e.map(R,function(e,t){return s[t]&&e!=r.placeholder?e:null}).join("")}),x.attr("readonly")||x.one("unmask",function(){x.unbind(".mask").removeData(e.mask.dataName)}).bind("focus.mask",function(){clearTimeout(n);var e;S=x.val(),e=y(),n=setTimeout(function(){b(),e==t.length?x.caret(0,e):x.caret(e)},10)}).bind("blur.mask",function(){y(),x.val()!=S&&x.change()}).bind("keydown.mask",g).bind("keypress.mask",v).bind(a,function(){setTimeout(function(){var e=y(!0);x.caret(e),r.completed&&e==x.val().length&&r.completed.call(x)},0)}),y()}))}})})(jQuery);
;
/*
Copyright 2012 Igor Vaynberg

Version: 3.4.5 Timestamp: Mon Nov  4 08:22:42 PST 2013

This software is licensed under the Apache License, Version 2.0 (the "Apache License") or the GNU
General Public License version 2 (the "GPL License"). You may choose either license to govern your
use of this software only upon the condition that you accept all of the terms of either the Apache
License or the GPL License.

You may obtain a copy of the Apache License and the GPL License at:

    http://www.apache.org/licenses/LICENSE-2.0
    http://www.gnu.org/licenses/gpl-2.0.html

Unless required by applicable law or agreed to in writing, software distributed under the
Apache License or the GPL Licesnse is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the Apache License and the GPL License for
the specific language governing permissions and limitations under the Apache License and the GPL License.
*/
(function ($) {
    if(typeof $.fn.each2 == "undefined") {
        $.extend($.fn, {
            /*
            * 4-10 times faster .each replacement
            * use it carefully, as it overrides jQuery context of element on each iteration
            */
            each2 : function (c) {
                var j = $([0]), i = -1, l = this.length;
                while (
                    ++i < l
                    && (j.context = j[0] = this[i])
                    && c.call(j[0], i, j) !== false //"this"=DOM, i=index, j=jQuery object
                );
                return this;
            }
        });
    }
})(jQuery);

(function ($, undefined) {
    "use strict";
    /*global document, window, jQuery, console */

    if (window.Select2 !== undefined) {
        return;
    }

    var KEY, AbstractSelect2, SingleSelect2, MultiSelect2, nextUid, sizer,
        lastMousePosition={x:0,y:0}, $document, scrollBarDimensions,

    KEY = {
        TAB: 9,
        ENTER: 13,
        ESC: 27,
        SPACE: 32,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        HOME: 36,
        END: 35,
        BACKSPACE: 8,
        DELETE: 46,
        isArrow: function (k) {
            k = k.which ? k.which : k;
            switch (k) {
            case KEY.LEFT:
            case KEY.RIGHT:
            case KEY.UP:
            case KEY.DOWN:
                return true;
            }
            return false;
        },
        isControl: function (e) {
            var k = e.which;
            switch (k) {
            case KEY.SHIFT:
            case KEY.CTRL:
            case KEY.ALT:
                return true;
            }

            if (e.metaKey) return true;

            return false;
        },
        isFunctionKey: function (k) {
            k = k.which ? k.which : k;
            return k >= 112 && k <= 123;
        }
    },
    MEASURE_SCROLLBAR_TEMPLATE = "<div class='select2-measure-scrollbar'></div>",

    DIACRITICS = {"\u24B6":"A","\uFF21":"A","\u00C0":"A","\u00C1":"A","\u00C2":"A","\u1EA6":"A","\u1EA4":"A","\u1EAA":"A","\u1EA8":"A","\u00C3":"A","\u0100":"A","\u0102":"A","\u1EB0":"A","\u1EAE":"A","\u1EB4":"A","\u1EB2":"A","\u0226":"A","\u01E0":"A","\u00C4":"A","\u01DE":"A","\u1EA2":"A","\u00C5":"A","\u01FA":"A","\u01CD":"A","\u0200":"A","\u0202":"A","\u1EA0":"A","\u1EAC":"A","\u1EB6":"A","\u1E00":"A","\u0104":"A","\u023A":"A","\u2C6F":"A","\uA732":"AA","\u00C6":"AE","\u01FC":"AE","\u01E2":"AE","\uA734":"AO","\uA736":"AU","\uA738":"AV","\uA73A":"AV","\uA73C":"AY","\u24B7":"B","\uFF22":"B","\u1E02":"B","\u1E04":"B","\u1E06":"B","\u0243":"B","\u0182":"B","\u0181":"B","\u24B8":"C","\uFF23":"C","\u0106":"C","\u0108":"C","\u010A":"C","\u010C":"C","\u00C7":"C","\u1E08":"C","\u0187":"C","\u023B":"C","\uA73E":"C","\u24B9":"D","\uFF24":"D","\u1E0A":"D","\u010E":"D","\u1E0C":"D","\u1E10":"D","\u1E12":"D","\u1E0E":"D","\u0110":"D","\u018B":"D","\u018A":"D","\u0189":"D","\uA779":"D","\u01F1":"DZ","\u01C4":"DZ","\u01F2":"Dz","\u01C5":"Dz","\u24BA":"E","\uFF25":"E","\u00C8":"E","\u00C9":"E","\u00CA":"E","\u1EC0":"E","\u1EBE":"E","\u1EC4":"E","\u1EC2":"E","\u1EBC":"E","\u0112":"E","\u1E14":"E","\u1E16":"E","\u0114":"E","\u0116":"E","\u00CB":"E","\u1EBA":"E","\u011A":"E","\u0204":"E","\u0206":"E","\u1EB8":"E","\u1EC6":"E","\u0228":"E","\u1E1C":"E","\u0118":"E","\u1E18":"E","\u1E1A":"E","\u0190":"E","\u018E":"E","\u24BB":"F","\uFF26":"F","\u1E1E":"F","\u0191":"F","\uA77B":"F","\u24BC":"G","\uFF27":"G","\u01F4":"G","\u011C":"G","\u1E20":"G","\u011E":"G","\u0120":"G","\u01E6":"G","\u0122":"G","\u01E4":"G","\u0193":"G","\uA7A0":"G","\uA77D":"G","\uA77E":"G","\u24BD":"H","\uFF28":"H","\u0124":"H","\u1E22":"H","\u1E26":"H","\u021E":"H","\u1E24":"H","\u1E28":"H","\u1E2A":"H","\u0126":"H","\u2C67":"H","\u2C75":"H","\uA78D":"H","\u24BE":"I","\uFF29":"I","\u00CC":"I","\u00CD":"I","\u00CE":"I","\u0128":"I","\u012A":"I","\u012C":"I","\u0130":"I","\u00CF":"I","\u1E2E":"I","\u1EC8":"I","\u01CF":"I","\u0208":"I","\u020A":"I","\u1ECA":"I","\u012E":"I","\u1E2C":"I","\u0197":"I","\u24BF":"J","\uFF2A":"J","\u0134":"J","\u0248":"J","\u24C0":"K","\uFF2B":"K","\u1E30":"K","\u01E8":"K","\u1E32":"K","\u0136":"K","\u1E34":"K","\u0198":"K","\u2C69":"K","\uA740":"K","\uA742":"K","\uA744":"K","\uA7A2":"K","\u24C1":"L","\uFF2C":"L","\u013F":"L","\u0139":"L","\u013D":"L","\u1E36":"L","\u1E38":"L","\u013B":"L","\u1E3C":"L","\u1E3A":"L","\u0141":"L","\u023D":"L","\u2C62":"L","\u2C60":"L","\uA748":"L","\uA746":"L","\uA780":"L","\u01C7":"LJ","\u01C8":"Lj","\u24C2":"M","\uFF2D":"M","\u1E3E":"M","\u1E40":"M","\u1E42":"M","\u2C6E":"M","\u019C":"M","\u24C3":"N","\uFF2E":"N","\u01F8":"N","\u0143":"N","\u00D1":"N","\u1E44":"N","\u0147":"N","\u1E46":"N","\u0145":"N","\u1E4A":"N","\u1E48":"N","\u0220":"N","\u019D":"N","\uA790":"N","\uA7A4":"N","\u01CA":"NJ","\u01CB":"Nj","\u24C4":"O","\uFF2F":"O","\u00D2":"O","\u00D3":"O","\u00D4":"O","\u1ED2":"O","\u1ED0":"O","\u1ED6":"O","\u1ED4":"O","\u00D5":"O","\u1E4C":"O","\u022C":"O","\u1E4E":"O","\u014C":"O","\u1E50":"O","\u1E52":"O","\u014E":"O","\u022E":"O","\u0230":"O","\u00D6":"O","\u022A":"O","\u1ECE":"O","\u0150":"O","\u01D1":"O","\u020C":"O","\u020E":"O","\u01A0":"O","\u1EDC":"O","\u1EDA":"O","\u1EE0":"O","\u1EDE":"O","\u1EE2":"O","\u1ECC":"O","\u1ED8":"O","\u01EA":"O","\u01EC":"O","\u00D8":"O","\u01FE":"O","\u0186":"O","\u019F":"O","\uA74A":"O","\uA74C":"O","\u01A2":"OI","\uA74E":"OO","\u0222":"OU","\u24C5":"P","\uFF30":"P","\u1E54":"P","\u1E56":"P","\u01A4":"P","\u2C63":"P","\uA750":"P","\uA752":"P","\uA754":"P","\u24C6":"Q","\uFF31":"Q","\uA756":"Q","\uA758":"Q","\u024A":"Q","\u24C7":"R","\uFF32":"R","\u0154":"R","\u1E58":"R","\u0158":"R","\u0210":"R","\u0212":"R","\u1E5A":"R","\u1E5C":"R","\u0156":"R","\u1E5E":"R","\u024C":"R","\u2C64":"R","\uA75A":"R","\uA7A6":"R","\uA782":"R","\u24C8":"S","\uFF33":"S","\u1E9E":"S","\u015A":"S","\u1E64":"S","\u015C":"S","\u1E60":"S","\u0160":"S","\u1E66":"S","\u1E62":"S","\u1E68":"S","\u0218":"S","\u015E":"S","\u2C7E":"S","\uA7A8":"S","\uA784":"S","\u24C9":"T","\uFF34":"T","\u1E6A":"T","\u0164":"T","\u1E6C":"T","\u021A":"T","\u0162":"T","\u1E70":"T","\u1E6E":"T","\u0166":"T","\u01AC":"T","\u01AE":"T","\u023E":"T","\uA786":"T","\uA728":"TZ","\u24CA":"U","\uFF35":"U","\u00D9":"U","\u00DA":"U","\u00DB":"U","\u0168":"U","\u1E78":"U","\u016A":"U","\u1E7A":"U","\u016C":"U","\u00DC":"U","\u01DB":"U","\u01D7":"U","\u01D5":"U","\u01D9":"U","\u1EE6":"U","\u016E":"U","\u0170":"U","\u01D3":"U","\u0214":"U","\u0216":"U","\u01AF":"U","\u1EEA":"U","\u1EE8":"U","\u1EEE":"U","\u1EEC":"U","\u1EF0":"U","\u1EE4":"U","\u1E72":"U","\u0172":"U","\u1E76":"U","\u1E74":"U","\u0244":"U","\u24CB":"V","\uFF36":"V","\u1E7C":"V","\u1E7E":"V","\u01B2":"V","\uA75E":"V","\u0245":"V","\uA760":"VY","\u24CC":"W","\uFF37":"W","\u1E80":"W","\u1E82":"W","\u0174":"W","\u1E86":"W","\u1E84":"W","\u1E88":"W","\u2C72":"W","\u24CD":"X","\uFF38":"X","\u1E8A":"X","\u1E8C":"X","\u24CE":"Y","\uFF39":"Y","\u1EF2":"Y","\u00DD":"Y","\u0176":"Y","\u1EF8":"Y","\u0232":"Y","\u1E8E":"Y","\u0178":"Y","\u1EF6":"Y","\u1EF4":"Y","\u01B3":"Y","\u024E":"Y","\u1EFE":"Y","\u24CF":"Z","\uFF3A":"Z","\u0179":"Z","\u1E90":"Z","\u017B":"Z","\u017D":"Z","\u1E92":"Z","\u1E94":"Z","\u01B5":"Z","\u0224":"Z","\u2C7F":"Z","\u2C6B":"Z","\uA762":"Z","\u24D0":"a","\uFF41":"a","\u1E9A":"a","\u00E0":"a","\u00E1":"a","\u00E2":"a","\u1EA7":"a","\u1EA5":"a","\u1EAB":"a","\u1EA9":"a","\u00E3":"a","\u0101":"a","\u0103":"a","\u1EB1":"a","\u1EAF":"a","\u1EB5":"a","\u1EB3":"a","\u0227":"a","\u01E1":"a","\u00E4":"a","\u01DF":"a","\u1EA3":"a","\u00E5":"a","\u01FB":"a","\u01CE":"a","\u0201":"a","\u0203":"a","\u1EA1":"a","\u1EAD":"a","\u1EB7":"a","\u1E01":"a","\u0105":"a","\u2C65":"a","\u0250":"a","\uA733":"aa","\u00E6":"ae","\u01FD":"ae","\u01E3":"ae","\uA735":"ao","\uA737":"au","\uA739":"av","\uA73B":"av","\uA73D":"ay","\u24D1":"b","\uFF42":"b","\u1E03":"b","\u1E05":"b","\u1E07":"b","\u0180":"b","\u0183":"b","\u0253":"b","\u24D2":"c","\uFF43":"c","\u0107":"c","\u0109":"c","\u010B":"c","\u010D":"c","\u00E7":"c","\u1E09":"c","\u0188":"c","\u023C":"c","\uA73F":"c","\u2184":"c","\u24D3":"d","\uFF44":"d","\u1E0B":"d","\u010F":"d","\u1E0D":"d","\u1E11":"d","\u1E13":"d","\u1E0F":"d","\u0111":"d","\u018C":"d","\u0256":"d","\u0257":"d","\uA77A":"d","\u01F3":"dz","\u01C6":"dz","\u24D4":"e","\uFF45":"e","\u00E8":"e","\u00E9":"e","\u00EA":"e","\u1EC1":"e","\u1EBF":"e","\u1EC5":"e","\u1EC3":"e","\u1EBD":"e","\u0113":"e","\u1E15":"e","\u1E17":"e","\u0115":"e","\u0117":"e","\u00EB":"e","\u1EBB":"e","\u011B":"e","\u0205":"e","\u0207":"e","\u1EB9":"e","\u1EC7":"e","\u0229":"e","\u1E1D":"e","\u0119":"e","\u1E19":"e","\u1E1B":"e","\u0247":"e","\u025B":"e","\u01DD":"e","\u24D5":"f","\uFF46":"f","\u1E1F":"f","\u0192":"f","\uA77C":"f","\u24D6":"g","\uFF47":"g","\u01F5":"g","\u011D":"g","\u1E21":"g","\u011F":"g","\u0121":"g","\u01E7":"g","\u0123":"g","\u01E5":"g","\u0260":"g","\uA7A1":"g","\u1D79":"g","\uA77F":"g","\u24D7":"h","\uFF48":"h","\u0125":"h","\u1E23":"h","\u1E27":"h","\u021F":"h","\u1E25":"h","\u1E29":"h","\u1E2B":"h","\u1E96":"h","\u0127":"h","\u2C68":"h","\u2C76":"h","\u0265":"h","\u0195":"hv","\u24D8":"i","\uFF49":"i","\u00EC":"i","\u00ED":"i","\u00EE":"i","\u0129":"i","\u012B":"i","\u012D":"i","\u00EF":"i","\u1E2F":"i","\u1EC9":"i","\u01D0":"i","\u0209":"i","\u020B":"i","\u1ECB":"i","\u012F":"i","\u1E2D":"i","\u0268":"i","\u0131":"i","\u24D9":"j","\uFF4A":"j","\u0135":"j","\u01F0":"j","\u0249":"j","\u24DA":"k","\uFF4B":"k","\u1E31":"k","\u01E9":"k","\u1E33":"k","\u0137":"k","\u1E35":"k","\u0199":"k","\u2C6A":"k","\uA741":"k","\uA743":"k","\uA745":"k","\uA7A3":"k","\u24DB":"l","\uFF4C":"l","\u0140":"l","\u013A":"l","\u013E":"l","\u1E37":"l","\u1E39":"l","\u013C":"l","\u1E3D":"l","\u1E3B":"l","\u017F":"l","\u0142":"l","\u019A":"l","\u026B":"l","\u2C61":"l","\uA749":"l","\uA781":"l","\uA747":"l","\u01C9":"lj","\u24DC":"m","\uFF4D":"m","\u1E3F":"m","\u1E41":"m","\u1E43":"m","\u0271":"m","\u026F":"m","\u24DD":"n","\uFF4E":"n","\u01F9":"n","\u0144":"n","\u00F1":"n","\u1E45":"n","\u0148":"n","\u1E47":"n","\u0146":"n","\u1E4B":"n","\u1E49":"n","\u019E":"n","\u0272":"n","\u0149":"n","\uA791":"n","\uA7A5":"n","\u01CC":"nj","\u24DE":"o","\uFF4F":"o","\u00F2":"o","\u00F3":"o","\u00F4":"o","\u1ED3":"o","\u1ED1":"o","\u1ED7":"o","\u1ED5":"o","\u00F5":"o","\u1E4D":"o","\u022D":"o","\u1E4F":"o","\u014D":"o","\u1E51":"o","\u1E53":"o","\u014F":"o","\u022F":"o","\u0231":"o","\u00F6":"o","\u022B":"o","\u1ECF":"o","\u0151":"o","\u01D2":"o","\u020D":"o","\u020F":"o","\u01A1":"o","\u1EDD":"o","\u1EDB":"o","\u1EE1":"o","\u1EDF":"o","\u1EE3":"o","\u1ECD":"o","\u1ED9":"o","\u01EB":"o","\u01ED":"o","\u00F8":"o","\u01FF":"o","\u0254":"o","\uA74B":"o","\uA74D":"o","\u0275":"o","\u01A3":"oi","\u0223":"ou","\uA74F":"oo","\u24DF":"p","\uFF50":"p","\u1E55":"p","\u1E57":"p","\u01A5":"p","\u1D7D":"p","\uA751":"p","\uA753":"p","\uA755":"p","\u24E0":"q","\uFF51":"q","\u024B":"q","\uA757":"q","\uA759":"q","\u24E1":"r","\uFF52":"r","\u0155":"r","\u1E59":"r","\u0159":"r","\u0211":"r","\u0213":"r","\u1E5B":"r","\u1E5D":"r","\u0157":"r","\u1E5F":"r","\u024D":"r","\u027D":"r","\uA75B":"r","\uA7A7":"r","\uA783":"r","\u24E2":"s","\uFF53":"s","\u00DF":"s","\u015B":"s","\u1E65":"s","\u015D":"s","\u1E61":"s","\u0161":"s","\u1E67":"s","\u1E63":"s","\u1E69":"s","\u0219":"s","\u015F":"s","\u023F":"s","\uA7A9":"s","\uA785":"s","\u1E9B":"s","\u24E3":"t","\uFF54":"t","\u1E6B":"t","\u1E97":"t","\u0165":"t","\u1E6D":"t","\u021B":"t","\u0163":"t","\u1E71":"t","\u1E6F":"t","\u0167":"t","\u01AD":"t","\u0288":"t","\u2C66":"t","\uA787":"t","\uA729":"tz","\u24E4":"u","\uFF55":"u","\u00F9":"u","\u00FA":"u","\u00FB":"u","\u0169":"u","\u1E79":"u","\u016B":"u","\u1E7B":"u","\u016D":"u","\u00FC":"u","\u01DC":"u","\u01D8":"u","\u01D6":"u","\u01DA":"u","\u1EE7":"u","\u016F":"u","\u0171":"u","\u01D4":"u","\u0215":"u","\u0217":"u","\u01B0":"u","\u1EEB":"u","\u1EE9":"u","\u1EEF":"u","\u1EED":"u","\u1EF1":"u","\u1EE5":"u","\u1E73":"u","\u0173":"u","\u1E77":"u","\u1E75":"u","\u0289":"u","\u24E5":"v","\uFF56":"v","\u1E7D":"v","\u1E7F":"v","\u028B":"v","\uA75F":"v","\u028C":"v","\uA761":"vy","\u24E6":"w","\uFF57":"w","\u1E81":"w","\u1E83":"w","\u0175":"w","\u1E87":"w","\u1E85":"w","\u1E98":"w","\u1E89":"w","\u2C73":"w","\u24E7":"x","\uFF58":"x","\u1E8B":"x","\u1E8D":"x","\u24E8":"y","\uFF59":"y","\u1EF3":"y","\u00FD":"y","\u0177":"y","\u1EF9":"y","\u0233":"y","\u1E8F":"y","\u00FF":"y","\u1EF7":"y","\u1E99":"y","\u1EF5":"y","\u01B4":"y","\u024F":"y","\u1EFF":"y","\u24E9":"z","\uFF5A":"z","\u017A":"z","\u1E91":"z","\u017C":"z","\u017E":"z","\u1E93":"z","\u1E95":"z","\u01B6":"z","\u0225":"z","\u0240":"z","\u2C6C":"z","\uA763":"z"};

    $document = $(document);

    nextUid=(function() { var counter=1; return function() { return counter++; }; }());


    function stripDiacritics(str) {
        var ret, i, l, c;

        if (!str || str.length < 1) return str;

        ret = "";
        for (i = 0, l = str.length; i < l; i++) {
            c = str.charAt(i);
            ret += DIACRITICS[c] || c;
        }
        return ret;
    }

    function indexOf(value, array) {
        var i = 0, l = array.length;
        for (; i < l; i = i + 1) {
            if (equal(value, array[i])) return i;
        }
        return -1;
    }

    function measureScrollbar () {
        var $template = $( MEASURE_SCROLLBAR_TEMPLATE );
        $template.appendTo('body');

        var dim = {
            width: $template.width() - $template[0].clientWidth,
            height: $template.height() - $template[0].clientHeight
        };
        $template.remove();

        return dim;
    }

    /**
     * Compares equality of a and b
     * @param a
     * @param b
     */
    function equal(a, b) {
        if (a === b) return true;
        if (a === undefined || b === undefined) return false;
        if (a === null || b === null) return false;
        // Check whether 'a' or 'b' is a string (primitive or object).
        // The concatenation of an empty string (+'') converts its argument to a string's primitive.
        if (a.constructor === String) return a+'' === b+''; // a+'' - in case 'a' is a String object
        if (b.constructor === String) return b+'' === a+''; // b+'' - in case 'b' is a String object
        return false;
    }

    /**
     * Splits the string into an array of values, trimming each value. An empty array is returned for nulls or empty
     * strings
     * @param string
     * @param separator
     */
    function splitVal(string, separator) {
        var val, i, l;
        if (string === null || string.length < 1) return [];
        val = string.split(separator);
        for (i = 0, l = val.length; i < l; i = i + 1) val[i] = $.trim(val[i]);
        return val;
    }

    function getSideBorderPadding(element) {
        return element.outerWidth(false) - element.width();
    }

    function installKeyUpChangeEvent(element) {
        var key="keyup-change-value";
        element.on("keydown", function () {
            if ($.data(element, key) === undefined) {
                $.data(element, key, element.val());
            }
        });
        element.on("keyup", function () {
            var val= $.data(element, key);
            if (val !== undefined && element.val() !== val) {
                $.removeData(element, key);
                element.trigger("keyup-change");
            }
        });
    }

    $document.on("mousemove", function (e) {
        lastMousePosition.x = e.pageX;
        lastMousePosition.y = e.pageY;
    });

    /**
     * filters mouse events so an event is fired only if the mouse moved.
     *
     * filters out mouse events that occur when mouse is stationary but
     * the elements under the pointer are scrolled.
     */
    function installFilteredMouseMove(element) {
        element.on("mousemove", function (e) {
            var lastpos = lastMousePosition;
            if (lastpos === undefined || lastpos.x !== e.pageX || lastpos.y !== e.pageY) {
                $(e.target).trigger("mousemove-filtered", e);
            }
        });
    }

    /**
     * Debounces a function. Returns a function that calls the original fn function only if no invocations have been made
     * within the last quietMillis milliseconds.
     *
     * @param quietMillis number of milliseconds to wait before invoking fn
     * @param fn function to be debounced
     * @param ctx object to be used as this reference within fn
     * @return debounced version of fn
     */
    function debounce(quietMillis, fn, ctx) {
        ctx = ctx || undefined;
        var timeout;
        return function () {
            var args = arguments;
            window.clearTimeout(timeout);
            timeout = window.setTimeout(function() {
                fn.apply(ctx, args);
            }, quietMillis);
        };
    }

    /**
     * A simple implementation of a thunk
     * @param formula function used to lazily initialize the thunk
     * @return {Function}
     */
    function thunk(formula) {
        var evaluated = false,
            value;
        return function() {
            if (evaluated === false) { value = formula(); evaluated = true; }
            return value;
        };
    };

    function installDebouncedScroll(threshold, element) {
        var notify = debounce(threshold, function (e) { element.trigger("scroll-debounced", e);});
        element.on("scroll", function (e) {
            if (indexOf(e.target, element.get()) >= 0) notify(e);
        });
    }

    function focus($el) {
        if ($el[0] === document.activeElement) return;

        /* set the focus in a 0 timeout - that way the focus is set after the processing
            of the current event has finished - which seems like the only reliable way
            to set focus */
        window.setTimeout(function() {
            var el=$el[0], pos=$el.val().length, range;

            $el.focus();

            /* make sure el received focus so we do not error out when trying to manipulate the caret.
                sometimes modals or others listeners may steal it after its set */
            if ($el.is(":visible") && el === document.activeElement) {

                /* after the focus is set move the caret to the end, necessary when we val()
                    just before setting focus */
                if(el.setSelectionRange)
                {
                    el.setSelectionRange(pos, pos);
                }
                else if (el.createTextRange) {
                    range = el.createTextRange();
                    range.collapse(false);
                    range.select();
                }
            }
        }, 0);
    }

    function getCursorInfo(el) {
        el = $(el)[0];
        var offset = 0;
        var length = 0;
        if ('selectionStart' in el) {
            offset = el.selectionStart;
            length = el.selectionEnd - offset;
        } else if ('selection' in document) {
            el.focus();
            var sel = document.selection.createRange();
            length = document.selection.createRange().text.length;
            sel.moveStart('character', -el.value.length);
            offset = sel.text.length - length;
        }
        return { offset: offset, length: length };
    }

    function killEvent(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    function killEventImmediately(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
    }

    function measureTextWidth(e) {
        if (!sizer){
            var style = e[0].currentStyle || window.getComputedStyle(e[0], null);
            sizer = $(document.createElement("div")).css({
                position: "absolute",
                left: "-10000px",
                top: "-10000px",
                display: "none",
                fontSize: style.fontSize,
                fontFamily: style.fontFamily,
                fontStyle: style.fontStyle,
                fontWeight: style.fontWeight,
                letterSpacing: style.letterSpacing,
                textTransform: style.textTransform,
                whiteSpace: "nowrap"
            });
            sizer.attr("class","select2-sizer");
            $("body").append(sizer);
        }
        sizer.text(e.val());
        return sizer.width();
    }

    function syncCssClasses(dest, src, adapter) {
        var classes, replacements = [], adapted;

        classes = dest.attr("class");
        if (classes) {
            classes = '' + classes; // for IE which returns object
            $(classes.split(" ")).each2(function() {
                if (this.indexOf("select2-") === 0) {
                    replacements.push(this);
                }
            });
        }
        classes = src.attr("class");
        if (classes) {
            classes = '' + classes; // for IE which returns object
            $(classes.split(" ")).each2(function() {
                if (this.indexOf("select2-") !== 0) {
                    adapted = adapter(this);
                    if (adapted) {
                        replacements.push(adapted);
                    }
                }
            });
        }
        dest.attr("class", replacements.join(" "));
    }


    function markMatch(text, term, markup, escapeMarkup) {
        var match=stripDiacritics(text.toUpperCase()).indexOf(stripDiacritics(term.toUpperCase())),
            tl=term.length;

        if (match<0) {
            markup.push(escapeMarkup(text));
            return;
        }

        markup.push(escapeMarkup(text.substring(0, match)));
        markup.push("<span class='select2-match'>");
        markup.push(escapeMarkup(text.substring(match, match + tl)));
        markup.push("</span>");
        markup.push(escapeMarkup(text.substring(match + tl, text.length)));
    }

    function defaultEscapeMarkup(markup) {
        var replace_map = {
            '\\': '&#92;',
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            "/": '&#47;'
        };

        return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
            return replace_map[match];
        });
    }

    // Handled special characters to allow them in the multiselect dropdown
    function escapeReplaceSpecialChars(data) {
         return String(data).replace(/[!"#$%&'()*+,.\/:;<=>?@[\\\]^`{|}~\s]/g, '_'); 
    }
    /**
     * Produces an ajax-based query function
     *
     * @param options object containing configuration paramters
     * @param options.params parameter map for the transport ajax call, can contain such options as cache, jsonpCallback, etc. see $.ajax
     * @param options.transport function that will be used to execute the ajax request. must be compatible with parameters supported by $.ajax
     * @param options.url url for the data
     * @param options.data a function(searchTerm, pageNumber, context) that should return an object containing query string parameters for the above url.
     * @param options.dataType request data type: ajax, jsonp, other datatatypes supported by jQuery's $.ajax function or the transport function if specified
     * @param options.quietMillis (optional) milliseconds to wait before making the ajaxRequest, helps debounce the ajax function if invoked too often
     * @param options.results a function(remoteData, pageNumber) that converts data returned form the remote request to the format expected by Select2.
     *      The expected format is an object containing the following keys:
     *      results array of objects that will be used as choices
     *      more (optional) boolean indicating whether there are more results available
     *      Example: {results:[{id:1, text:'Red'},{id:2, text:'Blue'}], more:true}
     */
    function ajax(options) {
        var timeout, // current scheduled but not yet executed request
            handler = null,
            quietMillis = options.quietMillis || 100,
            ajaxUrl = options.url,
            self = this;

        return function (query) {
            window.clearTimeout(timeout);
            timeout = window.setTimeout(function () {
                var data = options.data, // ajax data function
                    url = ajaxUrl, // ajax url string or function
                    transport = options.transport || $.fn.select2.ajaxDefaults.transport,
                    // deprecated - to be removed in 4.0  - use params instead
                    deprecated = {
                        type: options.type || 'GET', // set type of request (GET or POST)
                        cache: options.cache || false,
                        jsonpCallback: options.jsonpCallback||undefined,
                        dataType: options.dataType||"json"
                    },
                    params = $.extend({}, $.fn.select2.ajaxDefaults.params, deprecated);

                data = data ? data.call(self, query.term, query.page, query.context) : null;
                url = (typeof url === 'function') ? url.call(self, query.term, query.page, query.context) : url;

                if (handler) { handler.abort(); }

                if (options.params) {
                    if ($.isFunction(options.params)) {
                        $.extend(params, options.params.call(self));
                    } else {
                        $.extend(params, options.params);
                    }
                }

                $.extend(params, {
                    url: url,
                    dataType: options.dataType,
                    data: data,
                    success: function (data) {
                        // TODO - replace query.page with query so users have access to term, page, etc.
                        var results = options.results(data, query.page);
                        query.callback(results);
                    }
                });
                handler = transport.call(self, params);
            }, quietMillis);
        };
    }

    /**
     * Produces a query function that works with a local array
     *
     * @param options object containing configuration parameters. The options parameter can either be an array or an
     * object.
     *
     * If the array form is used it is assumed that it contains objects with 'id' and 'text' keys.
     *
     * If the object form is used ti is assumed that it contains 'data' and 'text' keys. The 'data' key should contain
     * an array of objects that will be used as choices. These objects must contain at least an 'id' key. The 'text'
     * key can either be a String in which case it is expected that each element in the 'data' array has a key with the
     * value of 'text' which will be used to match choices. Alternatively, text can be a function(item) that can extract
     * the text.
     */
    function local(options) {
        var data = options, // data elements
            dataText,
            tmp,
            text = function (item) { return ""+item.text; }; // function used to retrieve the text portion of a data item that is matched against the search

         if ($.isArray(data)) {
            tmp = data;
            data = { results: tmp };
        }

         if ($.isFunction(data) === false) {
            tmp = data;
            data = function() { return tmp; };
        }

        var dataItem = data();
        if (dataItem.text) {
            text = dataItem.text;
            // if text is not a function we assume it to be a key name
            if (!$.isFunction(text)) {
                dataText = dataItem.text; // we need to store this in a separate variable because in the next step data gets reset and data.text is no longer available
                text = function (item) { return item[dataText]; };
            }
        }

        return function (query) {
            var t = query.term, filtered = { results: [] }, process;
            if (t === "") {
                query.callback(data());
                return;
            }

            process = function(datum, collection) {
                var group, attr;
                datum = datum[0];
                if (datum.children) {
                    group = {};
                    for (attr in datum) {
                        if (datum.hasOwnProperty(attr)) group[attr]=datum[attr];
                    }
                    group.children=[];
                    $(datum.children).each2(function(i, childDatum) { process(childDatum, group.children); });
                    if (group.children.length || query.matcher(t, text(group), datum)) {
                        collection.push(group);
                    }
                } else {
                    if (query.matcher(t, text(datum), datum)) {
                        collection.push(datum);
                    }
                }
            };

            $(data().results).each2(function(i, datum) { process(datum, filtered.results); });
            query.callback(filtered);
        };
    }

    // TODO javadoc
    function tags(data) {
        var isFunc = $.isFunction(data);
        return function (query) {
            var t = query.term, filtered = {results: []};
            $(isFunc ? data() : data).each(function () {
                var isObject = this.text !== undefined,
                    text = isObject ? this.text : this;
                if (t === "" || query.matcher(t, text)) {
                    filtered.results.push(isObject ? this : {id: this, text: this});
                }
            });
            query.callback(filtered);
        };
    }

    /**
     * Checks if the formatter function should be used.
     *
     * Throws an error if it is not a function. Returns true if it should be used,
     * false if no formatting should be performed.
     *
     * @param formatter
     */
    function checkFormatter(formatter, formatterName) {
        if ($.isFunction(formatter)) return true;
        if (!formatter) return false;
        throw new Error(formatterName +" must be a function or a falsy value");
    }

    function evaluate(val) {
        return $.isFunction(val) ? val() : val;
    }

    function countResults(results) {
        var count = 0;
        $.each(results, function(i, item) {
            if (item.children) {
                count += countResults(item.children);
            } else {
                count++;
            }
        });
        return count;
    }

    /**
     * Default tokenizer. This function uses breaks the input on substring match of any string from the
     * opts.tokenSeparators array and uses opts.createSearchChoice to create the choice object. Both of those
     * two options have to be defined in order for the tokenizer to work.
     *
     * @param input text user has typed so far or pasted into the search field
     * @param selection currently selected choices
     * @param selectCallback function(choice) callback tho add the choice to selection
     * @param opts select2's opts
     * @return undefined/null to leave the current input unchanged, or a string to change the input to the returned value
     */
    function defaultTokenizer(input, selection, selectCallback, opts) {
        var original = input, // store the original so we can compare and know if we need to tell the search to update its text
            dupe = false, // check for whether a token we extracted represents a duplicate selected choice
            token, // token
            index, // position at which the separator was found
            i, l, // looping variables
            separator; // the matched separator

        if (!opts.createSearchChoice || !opts.tokenSeparators || opts.tokenSeparators.length < 1) return undefined;

        while (true) {
            index = -1;

            for (i = 0, l = opts.tokenSeparators.length; i < l; i++) {
                separator = opts.tokenSeparators[i];
                index = input.indexOf(separator);
                if (index >= 0) break;
            }

            if (index < 0) break; // did not find any token separator in the input string, bail

            token = input.substring(0, index);
            input = input.substring(index + separator.length);

            if (token.length > 0) {
                token = opts.createSearchChoice.call(this, token, selection);
                if (token !== undefined && token !== null && opts.id(token) !== undefined && opts.id(token) !== null) {
                    dupe = false;
                    for (i = 0, l = selection.length; i < l; i++) {
                        if (equal(opts.id(token), opts.id(selection[i]))) {
                            dupe = true; break;
                        }
                    }

                    if (!dupe) selectCallback(token);
                }
            }
        }

        if (original!==input) return input;
    }

    /**
     * Creates a new class
     *
     * @param superClass
     * @param methods
     */
    function clazz(SuperClass, methods) {
        var constructor = function () {};
        constructor.prototype = new SuperClass;
        constructor.prototype.constructor = constructor;
        constructor.prototype.parent = SuperClass.prototype;
        constructor.prototype = $.extend(constructor.prototype, methods);
        return constructor;
    }

    AbstractSelect2 = clazz(Object, {

        // abstract
        bind: function (func) {
            var self = this;
            return function () {
                func.apply(self, arguments);
            };
        },

        // abstract
        init: function (opts) {
            var results, search, resultsSelector = ".select2-results";

            // prepare options
            this.opts = opts = this.prepareOpts(opts);

            this.id=opts.id;

            // destroy if called on an existing component
            if (opts.element.data("select2") !== undefined &&
                opts.element.data("select2") !== null) {
                opts.element.data("select2").destroy();
            }

            this.container = this.createContainer();

            this.containerId="s2id_"+(opts.element.attr("id") || "autogen"+nextUid());
            this.containerSelector="#"+this.containerId.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, '\\$1');
            this.container.attr("id", this.containerId);

            // cache the body so future lookups are cheap
            this.body = thunk(function() { return opts.element.closest("body"); });

            syncCssClasses(this.container, this.opts.element, this.opts.adaptContainerCssClass);

            this.container.attr("style", opts.element.attr("style"));
            this.container.css(evaluate(opts.containerCss));
            this.container.addClass(evaluate(opts.containerCssClass));

            this.elementTabIndex = this.opts.element.attr("tabindex");

            // swap container for the element
            this.opts.element
                .data("select2", this)
                .attr("tabindex", "-1")
                .before(this.container)
                .on("click.select2", killEvent); // do not leak click events

            this.container.data("select2", this);

            this.dropdown = this.container.find(".select2-drop");

            syncCssClasses(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);

            this.dropdown.addClass(evaluate(opts.dropdownCssClass));
            this.dropdown.data("select2", this);
            this.dropdown.on("click", killEvent);

            this.results = results = this.container.find(resultsSelector);
            this.search = search = this.container.find("input.select2-input");

            this.queryCount = 0;
            this.resultsPage = 0;
            this.context = null;

            // initialize the container
            this.initContainer();

            this.container.on("click", killEvent);

            installFilteredMouseMove(this.results);
            this.dropdown.on("mousemove-filtered touchstart touchmove touchend", resultsSelector, this.bind(this.highlightUnderEvent));

            installDebouncedScroll(80, this.results);
            this.dropdown.on("scroll-debounced", resultsSelector, this.bind(this.loadMoreIfNeeded));

            // do not propagate change event from the search field out of the component
            $(this.container).on("change", ".select2-input", function(e) {e.stopPropagation();});
            $(this.dropdown).on("change", ".select2-input", function(e) {e.stopPropagation();});

            // if jquery.mousewheel plugin is installed we can prevent out-of-bounds scrolling of results via mousewheel
            if ($.fn.mousewheel) {
                results.mousewheel(function (e, delta, deltaX, deltaY) {
                    var top = results.scrollTop();
                    if (deltaY > 0 && top - deltaY <= 0) {
                        results.scrollTop(0);
                        killEvent(e);
                    } else if (deltaY < 0 && results.get(0).scrollHeight - results.scrollTop() + deltaY <= results.height()) {
                        results.scrollTop(results.get(0).scrollHeight - results.height());
                        killEvent(e);
                    }
                });
            }

            installKeyUpChangeEvent(search);
            search.on("keyup-change input paste", this.bind(this.updateResults));
            search.on("focus", function () { search.addClass("select2-focused"); });
            search.on("blur", function () { search.removeClass("select2-focused");});

            this.dropdown.on("mouseup", resultsSelector, this.bind(function (e) {
                if ($(e.target).closest(".select2-result-selectable").length > 0) {
                    this.highlightUnderEvent(e);
                    this.selectHighlighted(e);
                }
            }));

            // trap all mouse events from leaving the dropdown. sometimes there may be a modal that is listening
            // for mouse events outside of itself so it can close itself. since the dropdown is now outside the select2's
            // dom it will trigger the popup close, which is not what we want
            this.dropdown.on("click mouseup mousedown", function (e) { e.stopPropagation(); });

            if ($.isFunction(this.opts.initSelection)) {
                // initialize selection based on the current value of the source element
                this.initSelection();

                // if the user has provided a function that can set selection based on the value of the source element
                // we monitor the change event on the element and trigger it, allowing for two way synchronization
                this.monitorSource();
            }

            if (opts.maximumInputLength !== null) {
                this.search.attr("maxlength", opts.maximumInputLength);
            }

            var disabled = opts.element.prop("disabled");
            if (disabled === undefined) disabled = false;
            this.enable(!disabled);

            var readonly = opts.element.prop("readonly");
            if (readonly === undefined) readonly = false;
            this.readonly(readonly);

            // Calculate size of scrollbar
            scrollBarDimensions = scrollBarDimensions || measureScrollbar();

            this.autofocus = opts.element.prop("autofocus");
            opts.element.prop("autofocus", false);
            if (this.autofocus) this.focus();

            this.nextSearchTerm = undefined;
        },

        // abstract
        destroy: function () {
            var element=this.opts.element, select2 = element.data("select2");

            this.close();

            if (this.propertyObserver) { delete this.propertyObserver; this.propertyObserver = null; }

            if (select2 !== undefined) {
                select2.container.remove();
                select2.dropdown.remove();
                element
                    .removeClass("select2-offscreen")
                    .removeData("select2")
                    .off(".select2")
                    .prop("autofocus", this.autofocus || false);
                if (this.elementTabIndex) {
                    element.attr({tabindex: this.elementTabIndex});
                } else {
                    element.removeAttr("tabindex");
                }
                element.show();
            }
        },

        // abstract
        optionToData: function(element) {
            if (element.is("option")) {
                return {
                    id:element.prop("value"),
                    text:element.text(),
                    element: element.get(),
                    css: element.attr("class"),
                    disabled: element.prop("disabled"),
                    locked: equal(element.attr("locked"), "locked") || equal(element.data("locked"), true)
                };
            } else if (element.is("optgroup")) {
                return {
                    text:element.attr("label"),
                    children:[],
                    element: element.get(),
                    css: element.attr("class")
                };
            }
        },

        // abstract
        prepareOpts: function (opts) {
            var element, select, idKey, ajaxUrl, self = this;

            element = opts.element;

            if (element.get(0).tagName.toLowerCase() === "select") {
                this.select = select = opts.element;
            }

            if (select) {
                // these options are not allowed when attached to a select because they are picked up off the element itself
                $.each(["id", "multiple", "ajax", "query", "createSearchChoice", "initSelection", "data", "tags"], function () {
                    if (this in opts) {
                        throw new Error("Option '" + this + "' is not allowed for Select2 when attached to a <select> element.");
                    }
                });
            }

            opts = $.extend({}, {
                populateResults: function(container, results, query) {
                    var populate, id=this.opts.id;

                    populate=function(results, container, depth) {

                        var i, l, result, selectable, disabled, compound, node, label, innerContainer, formatted;

                        results = opts.sortResults(results, container, query);

                        for (i = 0, l = results.length; i < l; i = i + 1) {

                            result=results[i];

                            disabled = (result.disabled === true);
                            selectable = (!disabled) && (id(result) !== undefined);

                            compound=result.children && result.children.length > 0;

                            node=$("<li></li>");
                            node.addClass("select2-results-dept-"+depth);
                            node.addClass("select2-result");
                            node.addClass(selectable ? "select2-result-selectable" : "select2-result-unselectable");
                            if (disabled) { node.addClass("select2-disabled"); }
                            if (compound) { node.addClass("select2-result-with-children"); }
                            node.addClass(self.opts.formatResultCssClass(result));

                            label=$(document.createElement("div"));
                            label.addClass("select2-result-label");
                            if (result.id == -3)
                                label.addClass("select2-highlighted-green");
                            formatted=opts.formatResult(result, label, query, self.opts.escapeMarkup);
                            if (formatted!==undefined) {
                                label.html(formatted);
                            }

                            node.append(label);

                            if (compound) {

                                innerContainer=$("<ul></ul>");
                                innerContainer.addClass("select2-result-sub");
                                populate(result.children, innerContainer, depth+1);
                                node.append(innerContainer);
                            }

                            node.data("select2-data", result);
                            container.append(node);
                        }
                    };

                    populate(results, container, 0);
                }
            }, $.fn.select2.defaults, opts);

            if (typeof(opts.id) !== "function") {
                idKey = opts.id;
                opts.id = function (e) { return e[idKey]; };
            }

            if ($.isArray(opts.element.data("select2Tags"))) {
                if ("tags" in opts) {
                    throw "tags specified as both an attribute 'data-select2-tags' and in options of Select2 " + opts.element.attr("id");
                }
                opts.tags=opts.element.data("select2Tags");
            }

            if (select) {
                opts.query = this.bind(function (query) {
                    var data = { results: [], more: false },
                        term = query.term,
                        children, placeholderOption, process;

                    process=function(element, collection) {
                        var group;
                        if (element.is("option")) {
                            if (query.matcher(term, element.text(), element)) {
                                collection.push(self.optionToData(element));
                            }
                        } else if (element.is("optgroup")) {
                            group=self.optionToData(element);
                            element.children().each2(function(i, elm) { process(elm, group.children); });
                            if (group.children.length>0) {
                                collection.push(group);
                            }
                        }
                    };

                    children=element.children();

                    // ignore the placeholder option if there is one
                    if (this.getPlaceholder() !== undefined && children.length > 0) {
                        placeholderOption = this.getPlaceholderOption();
                        if (placeholderOption) {
                            children=children.not(placeholderOption);
                        }
                    }

                    children.each2(function(i, elm) { process(elm, data.results); });

                    query.callback(data);
                });
                // this is needed because inside val() we construct choices from options and there id is hardcoded
                opts.id=function(e) { return e.id; };
                opts.formatResultCssClass = function(data) { return data.css; };
            } else {
                if (!("query" in opts)) {

                    if ("ajax" in opts) {
                        ajaxUrl = opts.element.data("ajax-url");
                        if (ajaxUrl && ajaxUrl.length > 0) {
                            opts.ajax.url = ajaxUrl;
                        }
                        opts.query = ajax.call(opts.element, opts.ajax);
                    } else if ("data" in opts) {
                        opts.query = local(opts.data);
                    } else if ("tags" in opts) {
                        opts.query = tags(opts.tags);
                        if (opts.createSearchChoice === undefined) {
                            opts.createSearchChoice = function (term) { return {id: $.trim(term), text: $.trim(term)}; };
                        }
                        if (opts.initSelection === undefined) {
                            opts.initSelection = function (element, callback) {
                                var data = [];
                                $(splitVal(element.val(), opts.separator)).each(function () {
                                    var obj = { id: this, text: this },
                                        tags = opts.tags;
                                    if ($.isFunction(tags)) tags=tags();
                                    $(tags).each(function() { if (equal(this.id, obj.id)) { obj = this; return false; } });
                                    data.push(obj);
                                });

                                callback(data);
                            };
                        }
                    }
                }
            }
            if (typeof(opts.query) !== "function") {
                throw "query function not defined for Select2 " + opts.element.attr("id");
            }

            return opts;
        },

        /**
         * Monitor the original element for changes and update select2 accordingly
         */
        // abstract
        monitorSource: function () {
            var el = this.opts.element, sync, observer;

            el.on("change.select2", this.bind(function (e) {
                if (this.opts.element.data("select2-change-triggered") !== true) {
                    this.initSelection();
                }
            }));

            sync = this.bind(function () {

                // sync enabled state
                var disabled = el.prop("disabled");
                if (disabled === undefined) disabled = false;
                this.enable(!disabled);

                var readonly = el.prop("readonly");
                if (readonly === undefined) readonly = false;
                this.readonly(readonly);

                syncCssClasses(this.container, this.opts.element, this.opts.adaptContainerCssClass);
                this.container.addClass(evaluate(this.opts.containerCssClass));

                syncCssClasses(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);
                this.dropdown.addClass(evaluate(this.opts.dropdownCssClass));

            });

            // IE8-10
            el.on("propertychange.select2", sync);

            // hold onto a reference of the callback to work around a chromium bug
            if (this.mutationCallback === undefined) {
                this.mutationCallback = function (mutations) {
                    mutations.forEach(sync);
                }
            }

            // safari, chrome, firefox, IE11
            observer = window.MutationObserver || window.WebKitMutationObserver|| window.MozMutationObserver;
            if (observer !== undefined) {
                if (this.propertyObserver) { delete this.propertyObserver; this.propertyObserver = null; }
                this.propertyObserver = new observer(this.mutationCallback);
                this.propertyObserver.observe(el.get(0), { attributes:true, subtree:false });
            }
        },

        // abstract
        triggerSelect: function(data) {
            var evt = $.Event("select2-selecting", { val: this.id(data), object: data });
            this.opts.element.trigger(evt);
            return !evt.isDefaultPrevented();
        },

        /**
         * Triggers the change event on the source element
         */
        // abstract
        triggerChange: function (details) {

            details = details || {};
            details= $.extend({}, details, { type: "change", val: this.val() });
            // prevents recursive triggering
            this.opts.element.data("select2-change-triggered", true);
            this.opts.element.trigger(details);
            this.opts.element.data("select2-change-triggered", false);

            // some validation frameworks ignore the change event and listen instead to keyup, click for selects
            // so here we trigger the click event manually
            this.opts.element.click();

            // ValidationEngine ignorea the change event and listens instead to blur
            // so here we trigger the blur event manually if so desired
            if (this.opts.blurOnChange)
                this.opts.element.blur();
        },

        //abstract
        isInterfaceEnabled: function()
        {
            return this.enabledInterface === true;
        },

        // abstract
        enableInterface: function() {
            var enabled = this._enabled && !this._readonly,
                disabled = !enabled;

            if (enabled === this.enabledInterface) return false;

            this.container.toggleClass("select2-container-disabled", disabled);
            this.close();
            this.enabledInterface = enabled;

            return true;
        },

        // abstract
        enable: function(enabled) {
            if (enabled === undefined) enabled = true;
            if (this._enabled === enabled) return;
            this._enabled = enabled;

            this.opts.element.prop("disabled", !enabled);
            this.enableInterface();
        },

        // abstract
        disable: function() {
            this.enable(false);
        },

        // abstract
        readonly: function(enabled) {
            if (enabled === undefined) enabled = false;
            if (this._readonly === enabled) return false;
            this._readonly = enabled;

            this.opts.element.prop("readonly", enabled);
            this.enableInterface();
            return true;
        },

        // abstract
        opened: function () {
            return this.container.hasClass("select2-dropdown-open");
        },

        // abstract
        positionDropdown: function() {
            var $dropdown = this.dropdown,
                offset = this.container.offset(),
                height = this.container.outerHeight(false),
                width = this.container.outerWidth(false),
                dropHeight = $dropdown.outerHeight(false),
                $window = $(window),
                windowWidth = $window.width(),
                windowHeight = $window.height(),
                viewPortRight = $window.scrollLeft() + windowWidth,
                viewportBottom = $window.scrollTop() + windowHeight,
                dropTop = offset.top + height,
                dropLeft = offset.left,
                enoughRoomBelow = dropTop + dropHeight <= viewportBottom,
                enoughRoomAbove = (offset.top - dropHeight) >= this.body().scrollTop(),
                dropWidth = $dropdown.outerWidth(false),
                enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight,
                aboveNow = $dropdown.hasClass("select2-drop-above"),
                bodyOffset,
                above,
                changeDirection,
                css,
                resultsListNode;

            // always prefer the current above/below alignment, unless there is not enough room
            if (aboveNow) {
                above = true;
                if (!enoughRoomAbove && enoughRoomBelow) {
                    changeDirection = true;
                    above = false;
                }
            } else {
                above = false;
                if (!enoughRoomBelow && enoughRoomAbove) {
                    changeDirection = true;
                    above = true;
                }
            }

            //if we are changing direction we need to get positions when dropdown is hidden;
            if (changeDirection) {
                $dropdown.hide();
                offset = this.container.offset();
                height = this.container.outerHeight(false);
                width = this.container.outerWidth(false);
                dropHeight = $dropdown.outerHeight(false);
                viewPortRight = $window.scrollLeft() + windowWidth;
                viewportBottom = $window.scrollTop() + windowHeight;
                dropTop = offset.top + height;
                dropLeft = offset.left;
                dropWidth = $dropdown.outerWidth(false);
                enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight;
                $dropdown.show();
            }

            if (this.opts.dropdownAutoWidth) {
                resultsListNode = $('.select2-results', $dropdown)[0];
                $dropdown.addClass('select2-drop-auto-width');
                $dropdown.css('width', '');
                // Add scrollbar width to dropdown if vertical scrollbar is present
                dropWidth = $dropdown.outerWidth(false) + (resultsListNode.scrollHeight === resultsListNode.clientHeight ? 0 : scrollBarDimensions.width);
                dropWidth > width ? width = dropWidth : dropWidth = width;
                enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight;
            }
            else {
                this.container.removeClass('select2-drop-auto-width');
            }

            //console.log("below/ droptop:", dropTop, "dropHeight", dropHeight, "sum", (dropTop+dropHeight)+" viewport bottom", viewportBottom, "enough?", enoughRoomBelow);
            //console.log("above/ offset.top", offset.top, "dropHeight", dropHeight, "top", (offset.top-dropHeight), "scrollTop", this.body().scrollTop(), "enough?", enoughRoomAbove);

            // fix positioning when body has an offset and is not position: static
            if (this.body().css('position') !== 'static') {
                bodyOffset = this.body().offset();
                dropTop -= bodyOffset.top;
                dropLeft -= bodyOffset.left;
            }

            if (!enoughRoomOnRight) {
               dropLeft = offset.left + width - dropWidth;
            }

            css =  {
                left: dropLeft,
                width: width
            };

            if (above) {
                css.bottom = windowHeight - offset.top;
                css.top = 'auto';
                this.container.addClass("select2-drop-above");
                $dropdown.addClass("select2-drop-above");
            }
            else {
                css.top = dropTop;
                css.bottom = 'auto';
                this.container.removeClass("select2-drop-above");
                $dropdown.removeClass("select2-drop-above");
            }
            css = $.extend(css, evaluate(this.opts.dropdownCss));

            $dropdown.css(css);
        },

        // abstract
        shouldOpen: function() {
            var event;

            if (this.opened()) return false;

            if (this._enabled === false || this._readonly === true) return false;

            event = $.Event("select2-opening");
            this.opts.element.trigger(event);
            return !event.isDefaultPrevented();
        },

        // abstract
        clearDropdownAlignmentPreference: function() {
            // clear the classes used to figure out the preference of where the dropdown should be opened
            this.container.removeClass("select2-drop-above");
            this.dropdown.removeClass("select2-drop-above");
        },

        /**
         * Opens the dropdown
         *
         * @return {Boolean} whether or not dropdown was opened. This method will return false if, for example,
         * the dropdown is already open, or if the 'open' event listener on the element called preventDefault().
         */
        // abstract
        open: function () {

            if (!this.shouldOpen()) return false;

            this.opening();

            return true;
        },

        /**
         * Performs the opening of the dropdown
         */
        // abstract
        opening: function() {
            var cid = this.containerId,
                scroll = "scroll." + cid,
                resize = "resize."+cid,
                orient = "orientationchange."+cid,
                mask;

            this.container.addClass("select2-dropdown-open").addClass("select2-container-active");

            this.clearDropdownAlignmentPreference();

            if(this.dropdown[0] !== this.body().children().last()[0]) {
                this.dropdown.detach().appendTo(this.body());
            }

            // create the dropdown mask if doesnt already exist
            mask = $("#select2-drop-mask");
            if (mask.length == 0) {
                mask = $(document.createElement("div"));
                mask.attr("id","select2-drop-mask").attr("class","select2-drop-mask");
                mask.hide();
                mask.appendTo(this.body());
                mask.on("mousedown touchstart click", function (e) {
                    var dropdown = $("#select2-drop"), self;
                    if (dropdown.length > 0) {
                        self=dropdown.data("select2");
                        if (self.opts.selectOnBlur) {
                            self.selectHighlighted({noFocus: true});
                        }
                        self.close({focus:true});
                        e.preventDefault();
                        e.stopPropagation();
                    }
                });
            }
            if (mask.hasClass('keyword-drop-mask')) //if dropdown mask exist from keyword js, remove the top
                mask.removeClass('keyword-drop-mask').css('top', 0);

            // ensure the mask is always right before the dropdown
            if (this.dropdown.prev()[0] !== mask[0]) {
                this.dropdown.before(mask);
            }

            // move the global id to the correct dropdown
            $("#select2-drop").removeAttr("id");
            this.dropdown.attr("id", "select2-drop");

            // show the elements
            mask.show();

            this.positionDropdown();
            this.dropdown.show();
            this.positionDropdown();

            this.dropdown.addClass("select2-drop-active");

            // attach listeners to events that can change the position of the container and thus require
            // the position of the dropdown to be updated as well so it does not come unglued from the container
            var that = this;
            this.container.parents().add(window).each(function () {
                $(this).on(resize+" "+scroll+" "+orient, function (e) {
                    that.positionDropdown();
                });
            });


        },

        // abstract
        close: function () {
            if (!this.opened()) return;

            var cid = this.containerId,
                scroll = "scroll." + cid,
                resize = "resize."+cid,
                orient = "orientationchange."+cid;

            // unbind event listeners
            this.container.parents().add(window).each(function () { $(this).off(scroll).off(resize).off(orient); });

            this.clearDropdownAlignmentPreference();

            $("#select2-drop-mask").hide();
            this.dropdown.removeAttr("id"); // only the active dropdown has the select2-drop id
            this.dropdown.hide();
            this.container.removeClass("select2-dropdown-open").removeClass("select2-container-active");
            this.results.empty();

            this.clearSearch();
            this.search.removeClass("select2-active");
            this.opts.element.trigger($.Event("select2-close"));
            this.blur();
        },

        /**
         * Opens control, sets input value, and updates results.
         */
        // abstract
        externalSearch: function (term) {
            this.open();
            this.search.val(term);
            this.updateResults(false);
        },

        // abstract
        clearSearch: function () {

        },

        //abstract
        getMaximumSelectionSize: function() {
            return evaluate(this.opts.maximumSelectionSize);
        },

        // abstract
        ensureHighlightVisible: function () {
            var results = this.results, children, index, child, hb, rb, y, more;

            index = this.highlight();

            if (index < 0) return;

            if (index == 0) {

                // if the first element is highlighted scroll all the way to the top,
                // that way any unselectable headers above it will also be scrolled
                // into view

                results.scrollTop(0);
                return;
            }

            children = this.findHighlightableChoices().find('.select2-result-label');

            child = $(children[index]);

            hb = child.offset().top + child.outerHeight(true);

            // if this is the last child lets also make sure select2-more-results is visible
            if (index === children.length - 1) {
                more = results.find("li.select2-more-results");
                if (more.length > 0) {
                    hb = more.offset().top + more.outerHeight(true);
                }
            }

            rb = results.offset().top + results.outerHeight(true);
            if (hb > rb) {
                results.scrollTop(results.scrollTop() + (hb - rb));
            }
            y = child.offset().top - results.offset().top;

            // make sure the top of the element is visible
            if (y < 0 && child.css('display') != 'none' ) {
                results.scrollTop(results.scrollTop() + y); // y is negative
            }
        },

        // abstract
        findHighlightableChoices: function() {
            return this.results.find(".select2-result-selectable:not(.select2-disabled, .select2-selected)");
        },

        // abstract
        moveHighlight: function (delta) {
            var choices = this.findHighlightableChoices(),
                index = this.highlight();

            while (index > -1 && index < choices.length) {
                index += delta;
                var choice = $(choices[index]);
                if (choice.hasClass("select2-result-selectable") && !choice.hasClass("select2-disabled") && !choice.hasClass("select2-selected")) {
                    this.highlight(index);
                    break;
                }
            }
        },

        // abstract
        highlight: function (index) {
            var choices = this.findHighlightableChoices(),
                choice,
                data;

            if (arguments.length === 0) {
                return indexOf(choices.filter(".select2-highlighted")[0], choices.get());
            }

            if (index >= choices.length) index = choices.length - 1;
            if (index < 0) index = 0;

            this.removeHighlight();

            choice = $(choices[index]);
            choice.addClass("select2-highlighted");

            this.ensureHighlightVisible();

            data = choice.data("select2-data");
            if (data) {
                this.opts.element.trigger({ type: "select2-highlight", val: this.id(data), choice: data });
            }
        },

        removeHighlight: function() {
            this.results.find(".select2-highlighted").removeClass("select2-highlighted");
        },

        // abstract
        countSelectableResults: function() {
            return this.findHighlightableChoices().length;
        },

        // abstract
        highlightUnderEvent: function (event) {
            var el = $(event.target).closest(".select2-result-selectable");
            if (el.length > 0 && !el.is(".select2-highlighted")) {
                var choices = this.findHighlightableChoices();
                this.highlight(choices.index(el));
            } else if (el.length == 0) {
                // if we are over an unselectable item remove all highlights
                this.removeHighlight();
            }
        },

        // abstract
        loadMoreIfNeeded: function () {
            var results = this.results,
                more = results.find("li.select2-more-results"),
                below, // pixels the element is below the scroll fold, below==0 is when the element is starting to be visible
                page = this.resultsPage + 1,
                self=this,
                term=this.search.val(),
                context=this.context;

            if (more.length === 0) return;
            below = more.offset().top - results.offset().top - results.height();

            if (below <= this.opts.loadMorePadding) {
                more.addClass("select2-active");
                this.opts.query({
                        element: this.opts.element,
                        term: term,
                        page: page,
                        context: context,
                        matcher: this.opts.matcher,
                        callback: this.bind(function (data) {

                    // ignore a response if the select2 has been closed before it was received
                    if (!self.opened()) return;


                    self.opts.populateResults.call(this, results, data.results, {term: term, page: page, context:context});
                    self.postprocessResults(data, false, false);

                    if (data.more===true) {
                        more.detach().appendTo(results).text(self.opts.formatLoadMore(page+1));
                        window.setTimeout(function() { self.loadMoreIfNeeded(); }, 10);
                    } else {
                        more.remove();
                    }
                    self.positionDropdown();
                    self.resultsPage = page;
                    self.context = data.context;
                    this.opts.element.trigger({ type: "select2-loaded", items: data });
                })});
            }
        },

        /**
         * Default tokenizer function which does nothing
         */
        tokenize: function() {

        },

        /**
         * @param initial whether or not this is the call to this method right after the dropdown has been opened
         */
        // abstract
        updateResults: function (initial) {
            var search = this.search,
                results = this.results,
                opts = this.opts,
                data,
                self = this,
                input,
                term = search.val(),
                lastTerm = $.data(this.container, "select2-last-term"),
                // sequence number used to drop out-of-order responses
                queryNumber;

            // prevent duplicate queries against the same term
            if (initial !== true && lastTerm && equal(term, lastTerm)) return;

            $.data(this.container, "select2-last-term", term);

            // if the search is currently hidden we do not alter the results
            if (initial !== true && (this.showSearchInput === false || !this.opened())) {
                return;
            }

            function postRender() {
                search.removeClass("select2-active");
                self.positionDropdown();
            }

            function render(html) {
                results.html(html);
                postRender();
            }

            queryNumber = ++this.queryCount;

            var maxSelSize = this.getMaximumSelectionSize();
            if (maxSelSize >=1) {
                data = this.data();
                if ($.isArray(data) && data.length >= maxSelSize && checkFormatter(opts.formatSelectionTooBig, "formatSelectionTooBig")) {
                    render("<li class='select2-selection-limit'>" + opts.formatSelectionTooBig(maxSelSize) + "</li>");
                    return;
                }
            }

            if (search.val().length < opts.minimumInputLength) {
                if (checkFormatter(opts.formatInputTooShort, "formatInputTooShort")) {
                    render("<li class='select2-no-results'>" + opts.formatInputTooShort(search.val(), opts.minimumInputLength) + "</li>");
                } else {
                    render("");
                }
                if (initial && this.showSearch) this.showSearch(true);
                return;
            }

            if (opts.maximumInputLength && search.val().length > opts.maximumInputLength) {
                if (checkFormatter(opts.formatInputTooLong, "formatInputTooLong")) {
                    render("<li class='select2-no-results'>" + opts.formatInputTooLong(search.val(), opts.maximumInputLength) + "</li>");
                } else {
                    render("");
                }
                return;
            }

            if (opts.formatSearching && this.findHighlightableChoices().length === 0) {
                render("<li class='select2-searching'>" + opts.formatSearching() + "</li>");
            }

            search.addClass("select2-active");

            this.removeHighlight();

            // give the tokenizer a chance to pre-process the input
            input = this.tokenize();
            if (input != undefined && input != null) {
                search.val(input);
            }

            this.resultsPage = 1;

            opts.query({
                element: opts.element,
                    term: search.val(),
                    page: this.resultsPage,
                    context: null,
                    matcher: opts.matcher,
                    callback: this.bind(function (data) {
                var def; // default choice

                // ignore old responses
                if (queryNumber != this.queryCount) {
                  return;
                }

                // ignore a response if the select2 has been closed before it was received
                if (!this.opened()) {
                    this.search.removeClass("select2-active");
                    return;
                }

                // save context, if any
                this.context = (data.context===undefined) ? null : data.context;
                // create a default choice and prepend it to the list
                if (this.opts.createSearchChoice && search.val() !== "") {
                    def = this.opts.createSearchChoice.call(self, search.val(), data.results);
                    if (def !== undefined && def !== null && self.id(def) !== undefined && self.id(def) !== null) {
                        if ($(data.results).filter(
                            function () {
                                return equal(self.id(this), self.id(def));
                            }).length === 0) {
                            data.results.unshift(def);
                        }
                    }
                }

                if (data.results.length === 0 && checkFormatter(opts.formatNoMatches, "formatNoMatches")) {
                    render("<li class='select2-no-results'>" + opts.formatNoMatches(search.val()) + "</li>");
                    return;
                }

                results.empty();
                self.opts.populateResults.call(this, results, data.results, {term: search.val(), page: this.resultsPage, context:null});

                if (data.more === true && checkFormatter(opts.formatLoadMore, "formatLoadMore")) {
                    results.append("<li class='select2-more-results'>" + self.opts.escapeMarkup(opts.formatLoadMore(this.resultsPage)) + "</li>");
                    window.setTimeout(function() { self.loadMoreIfNeeded(); }, 10);
                }

                this.postprocessResults(data, initial);

                postRender();

                this.opts.element.trigger({ type: "select2-loaded", items: data });
            })});
        },

        // abstract
        cancel: function () {
            this.close();
        },

        // abstract
        blur: function () {
            // if selectOnBlur == true, select the currently highlighted option
            if (this.opts.selectOnBlur)
                this.selectHighlighted({noFocus: true});

            this.close();
            this.container.removeClass("select2-container-active");
            // synonymous to .is(':focus'), which is available in jquery >= 1.6
            if (this.search[0] === document.activeElement) { this.search.blur(); }
            this.clearSearch();
            this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
        },

        // abstract
        focusSearch: function () {
            focus(this.search);
        },

        // abstract
        selectHighlighted: function (options) {
            var index=this.highlight(),
                highlighted=this.results.find(".select2-highlighted"),
                data = highlighted.closest('.select2-result').data("select2-data");

            if (data) {
                this.highlight(index);
                this.onSelect(data, options);
            } else if (options && options.noFocus) {
                this.close();
            }
        },

        // abstract
        getPlaceholder: function () {
            var placeholderOption;
            return this.opts.element.attr("placeholder") ||
                this.opts.element.attr("data-placeholder") || // jquery 1.4 compat
                this.opts.element.data("placeholder") ||
                this.opts.placeholder ||
                ((placeholderOption = this.getPlaceholderOption()) !== undefined ? placeholderOption.text() : undefined);
        },

        // abstract
        getPlaceholderOption: function() {
            if (this.select) {
                var firstOption = this.select.children('option').first();
                if (this.opts.placeholderOption !== undefined ) {
                    //Determine the placeholder option based on the specified placeholderOption setting
                    return (this.opts.placeholderOption === "first" && firstOption) ||
                           (typeof this.opts.placeholderOption === "function" && this.opts.placeholderOption(this.select));
                } else if (firstOption.text() === "" && firstOption.val() === "") {
                    //No explicit placeholder option specified, use the first if it's blank
                    return firstOption;
                }
            }
        },

        /**
         * Get the desired width for the container element.  This is
         * derived first from option `width` passed to select2, then
         * the inline 'style' on the original element, and finally
         * falls back to the jQuery calculated element width.
         */
        // abstract
        initContainerWidth: function () {
            function resolveContainerWidth() {
                var style, attrs, matches, i, l, attr;

                if (this.opts.width === "off") {
                    return null;
                } else if (this.opts.width === "element"){
                    return this.opts.element.outerWidth(false) === 0 ? 'auto' : this.opts.element.outerWidth(false) + 'px';
                } else if (this.opts.width === "copy" || this.opts.width === "resolve") {
                    // check if there is inline style on the element that contains width
                    style = this.opts.element.attr('style');
                    if (style !== undefined) {
                        attrs = style.split(';');
                        for (i = 0, l = attrs.length; i < l; i = i + 1) {
                            attr = attrs[i].replace(/\s/g, '');
                            matches = attr.match(/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i);
                            if (matches !== null && matches.length >= 1)
                                return matches[1];
                        }
                    }

                    if (this.opts.width === "resolve") {
                        // next check if css('width') can resolve a width that is percent based, this is sometimes possible
                        // when attached to input type=hidden or elements hidden via css
                        style = this.opts.element.css('width');
                        if (style.indexOf("%") > 0) return style;

                        // finally, fallback on the calculated width of the element
                        return (this.opts.element.outerWidth(false) === 0 ? 'auto' : this.opts.element.outerWidth(false) + 'px');
                    }

                    return null;
                } else if ($.isFunction(this.opts.width)) {
                    return this.opts.width();
                } else {
                    return this.opts.width;
               }
            };

            var width = resolveContainerWidth.call(this);
            if (width !== null) {
                this.container.css("width", width);
            }
        }
    });

    SingleSelect2 = clazz(AbstractSelect2, {

        // single

        createContainer: function () {
            var container = $(document.createElement("div")).attr({
                "class": "select2-container"
            }).html([
                "<a href='javascript:void(0)' onclick='return false;' class='select2-choice' tabindex='-1'>",
                "   <span class='select2-chosen'>&nbsp;</span><abbr class='select2-search-choice-close'></abbr>",
                "   <span class='select2-arrow'><b></b></span>",
                "</a>",
                "<input class='select2-focusser select2-offscreen' type='text'/>",
                "<div class='select2-drop select2-display-none'>",
                "   <div class='select2-search'>",
                "       <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input'/>",
                "   </div>",
                "   <ul class='select2-results'>",
                "   </ul>",
                "</div>"].join(""));
            return container;
        },

        // single
        enableInterface: function() {
            if (this.parent.enableInterface.apply(this, arguments)) {
                this.focusser.prop("disabled", !this.isInterfaceEnabled());
            }
        },

        // single
        opening: function () {
            var el, range, len;

            if (this.opts.minimumResultsForSearch >= 0) {
                this.showSearch(true);
            }

            this.parent.opening.apply(this, arguments);

            if (this.showSearchInput !== false) {
                // IE appends focusser.val() at the end of field :/ so we manually insert it at the beginning using a range
                // all other browsers handle this just fine

                this.search.val(this.focusser.val());
            }
            this.search.focus();
            // move the cursor to the end after focussing, otherwise it will be at the beginning and
            // new text will appear *before* focusser.val()
            el = this.search.get(0);
            if (el.createTextRange) {
                range = el.createTextRange();
                range.collapse(false);
                range.select();
            } else if (el.setSelectionRange) {
                len = this.search.val().length;
                el.setSelectionRange(len, len);
            }

            // initializes search's value with nextSearchTerm (if defined by user)
            // ignore nextSearchTerm if the dropdown is opened by the user pressing a letter
            if(this.search.val() === "") {
                if(this.nextSearchTerm != undefined){
                    this.search.val(this.nextSearchTerm);
                    this.search.select();
                }
            }

            this.focusser.prop("disabled", true).val("");
            this.updateResults(true);
            this.opts.element.trigger($.Event("select2-open"));
        },

        // single
        close: function (params) {
            if (!this.opened()) return;
            this.parent.close.apply(this, arguments);

            params = params || {focus: true};
            this.focusser.removeAttr("disabled");

            if (params.focus) {
                this.focusser.focus();
            }
        },

        // single
        focus: function () {
            if (this.opened()) {
                this.close();
            } else {
                this.focusser.removeAttr("disabled");
                this.focusser.focus();
            }
        },

        // single
        isFocused: function () {
            return this.container.hasClass("select2-container-active");
        },

        // single
        cancel: function () {
            this.parent.cancel.apply(this, arguments);
            this.focusser.removeAttr("disabled");
            this.focusser.focus();
        },

        // single
        destroy: function() {
            $("label[for='" + this.focusser.attr('id') + "']")
                .attr('for', this.opts.element.attr("id"));
            this.parent.destroy.apply(this, arguments);
        },

        // single
        initContainer: function () {

            var selection,
                container = this.container,
                dropdown = this.dropdown;

            if (this.opts.minimumResultsForSearch < 0) {
                this.showSearch(false);
            } else {
                this.showSearch(true);
            }

            this.selection = selection = container.find(".select2-choice");

            this.focusser = container.find(".select2-focusser");

            // rewrite labels from original element to focusser
            this.focusser.attr("id", "s2id_autogen"+nextUid());

            $("label[for='" + this.opts.element.attr("id") + "']")
                .attr('for', this.focusser.attr('id'));

            this.focusser.attr("tabindex", this.elementTabIndex);

            this.search.on("keydown", this.bind(function (e) {
                if (!this.isInterfaceEnabled()) return;

                if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {
                    // prevent the page from scrolling
                    killEvent(e);
                    return;
                }

                switch (e.which) {
                    case KEY.UP:
                    case KEY.DOWN:
                        this.moveHighlight((e.which === KEY.UP) ? -1 : 1);
                        killEvent(e);
                        return;
                    case KEY.ENTER:
                        this.selectHighlighted();
                        killEvent(e);
                        return;
                    case KEY.TAB:
                        this.selectHighlighted({noFocus: true});
                        return;
                    case KEY.ESC:
                        this.cancel(e);
                        killEvent(e);
                        return;
                }
            }));

            this.search.on("blur", this.bind(function(e) {
                // a workaround for chrome to keep the search field focussed when the scroll bar is used to scroll the dropdown.
                // without this the search field loses focus which is annoying
                if (document.activeElement === this.body().get(0)) {
                    window.setTimeout(this.bind(function() {
                        this.search.focus();
                    }), 0);
                }
            }));

            this.focusser.on("keydown", this.bind(function (e) {
                if (!this.isInterfaceEnabled()) return;

                if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
                    return;
                }

                if (this.opts.openOnEnter === false && e.which === KEY.ENTER) {
                    killEvent(e);
                    return;
                }

                if (e.which == KEY.DOWN || e.which == KEY.UP
                    || (e.which == KEY.ENTER && this.opts.openOnEnter)) {

                    if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) return;

                    this.open();
                    killEvent(e);
                    return;
                }

                if (e.which == KEY.DELETE || e.which == KEY.BACKSPACE) {
                    if (this.opts.allowClear) {
                        this.clear();
                    }
                    killEvent(e);
                    return;
                }
            }));


            installKeyUpChangeEvent(this.focusser);
            this.focusser.on("keyup-change input", this.bind(function(e) {
                if (this.opts.minimumResultsForSearch >= 0) {
                    e.stopPropagation();
                    if (this.opened()) return;
                    this.open();
                }
            }));

            selection.on("mousedown", "abbr", this.bind(function (e) {
                if (!this.isInterfaceEnabled()) return;
                this.clear();
                killEventImmediately(e);
                this.close();
                this.selection.focus();
            }));

            selection.on("mousedown", this.bind(function (e) {

                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"));
                }

                if (this.opened()) {
                    this.close();
                } else if (this.isInterfaceEnabled()) {
                    this.open();
                }

                killEvent(e);
            }));

            dropdown.on("mousedown", this.bind(function() { this.search.focus(); }));

            selection.on("focus", this.bind(function(e) {
                killEvent(e);
            }));

            this.focusser.on("focus", this.bind(function(){
                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"));
                }
                this.container.addClass("select2-container-active");
            })).on("blur", this.bind(function() {
                if (!this.opened()) {
                    this.container.removeClass("select2-container-active");
                    this.opts.element.trigger($.Event("select2-blur"));
                }
            }));
            this.search.on("focus", this.bind(function(){
                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"));
                }
                this.container.addClass("select2-container-active");
            }));

            this.initContainerWidth();
            this.opts.element.addClass("select2-offscreen");
            this.setPlaceholder();

        },

        // single
        clear: function(triggerChange) {
            var data=this.selection.data("select2-data");
            if (data) { // guard against queued quick consecutive clicks
                var evt = $.Event("select2-clearing");
                this.opts.element.trigger(evt);
                if (evt.isDefaultPrevented()) {
                    return;
                }
                var placeholderOption = this.getPlaceholderOption();
                this.opts.element.val(placeholderOption ? placeholderOption.val() : "");
                this.selection.find(".select2-chosen").empty();
                this.selection.removeData("select2-data");
                this.setPlaceholder();

                if (triggerChange !== false){
                    this.opts.element.trigger({ type: "select2-removed", val: this.id(data), choice: data });
                    this.triggerChange({removed:data});
                }
            }
        },

        /**
         * Sets selection based on source element's value
         */
        // single
        initSelection: function () {
            var selected;
            if (this.isPlaceholderOptionSelected()) {
                this.updateSelection(null);
                this.close();
                this.setPlaceholder();
            } else {
                var self = this;
                this.opts.initSelection.call(null, this.opts.element, function(selected){
                    if (selected !== undefined && selected !== null) {
                        self.updateSelection(selected);
                        self.close();
                        self.setPlaceholder();
                    }
                });
            }
        },

        isPlaceholderOptionSelected: function() {
            var placeholderOption;
            if (!this.getPlaceholder()) return false; // no placeholder specified so no option should be considered
            return ((placeholderOption = this.getPlaceholderOption()) !== undefined && placeholderOption.prop("selected"))
                || (this.opts.element.val() === "")
                || (this.opts.element.val() === undefined)
                || (this.opts.element.val() === null);
        },

        // single
        prepareOpts: function () {
            var opts = this.parent.prepareOpts.apply(this, arguments),
                self=this;

            if (opts.element.get(0).tagName.toLowerCase() === "select") {
                // install the selection initializer
                opts.initSelection = function (element, callback) {
                    var selected = element.find("option").filter(function() { return this.selected });
                    // a single select box always has a value, no need to null check 'selected'
                    callback(self.optionToData(selected));
                };
            } else if ("data" in opts) {
                // install default initSelection when applied to hidden input and data is local
                opts.initSelection = opts.initSelection || function (element, callback) {
                    var id = element.val();
                    //search in data by id, storing the actual matching item
                    var match = null;
                    opts.query({
                        matcher: function(term, text, el){
                            var is_match = equal(id, opts.id(el));
                            if (is_match) {
                                match = el;
                            }
                            return is_match;
                        },
                        callback: !$.isFunction(callback) ? $.noop : function() {
                            callback(match);
                        }
                    });
                };
            }

            return opts;
        },

        // single
        getPlaceholder: function() {
            // if a placeholder is specified on a single select without a valid placeholder option ignore it
            if (this.select) {
                if (this.getPlaceholderOption() === undefined) {
                    return undefined;
                }
            }

            return this.parent.getPlaceholder.apply(this, arguments);
        },

        // single
        setPlaceholder: function () {
            var placeholder = this.getPlaceholder();

            if (this.isPlaceholderOptionSelected() && placeholder !== undefined) {

                // check for a placeholder option if attached to a select
                if (this.select && this.getPlaceholderOption() === undefined) return;

                this.selection.find(".select2-chosen").html(this.opts.escapeMarkup(placeholder));

                this.selection.addClass("select2-default");

                this.container.removeClass("select2-allowclear");
            }
        },

        // single
        postprocessResults: function (data, initial, noHighlightUpdate) {
            var selected = 0, self = this, showSearchInput = true;

            // find the selected element in the result list

            this.findHighlightableChoices().each2(function (i, elm) {
                if (equal(self.id(elm.data("select2-data")), self.opts.element.val())) {
                    selected = i;
                    return false;
                }
            });

            // and highlight it
            if (noHighlightUpdate !== false) {
                if (initial === true && selected >= 0) {
                    this.highlight(selected);
                } else {
                    this.highlight(0);
                }
            }

            // hide the search box if this is the first we got the results and there are enough of them for search

            if (initial === true) {
                var min = this.opts.minimumResultsForSearch;
                if (min >= 0) {
                    this.showSearch(countResults(data.results) >= min);
                }
            }
        },

        // single
        showSearch: function(showSearchInput) {
            if (this.showSearchInput === showSearchInput) return;

            this.showSearchInput = showSearchInput;

            this.dropdown.find(".select2-search").toggleClass("select2-search-hidden", !showSearchInput);
            this.dropdown.find(".select2-search").toggleClass("select2-offscreen", !showSearchInput);
            //add "select2-with-searchbox" to the container if search box is shown
            $(this.dropdown, this.container).toggleClass("select2-with-searchbox", showSearchInput);
        },

        // single
        onSelect: function (data, options) {

            if (!this.triggerSelect(data)) { return; }

            var old = this.opts.element.val(),
                oldData = this.data();

            this.opts.element.val(this.id(data));
            this.updateSelection(data);

            this.opts.element.trigger({ type: "select2-selected", val: this.id(data), choice: data });

            this.nextSearchTerm = this.opts.nextSearchTerm(data, this.search.val());
            this.close();

            if (!options || !options.noFocus)
                this.focusser.focus();

            if (!equal(old, this.id(data))) { this.triggerChange({added:data,removed:oldData}); }
        },

        // single
        updateSelection: function (data) {

            var container=this.selection.find(".select2-chosen"), formatted, cssClass;

            this.selection.data("select2-data", data);

            container.empty();
            if (data !== null) {
                formatted=this.opts.formatSelection(data, container, this.opts.escapeMarkup);
            }
            if (formatted !== undefined) {
                container.append(formatted);
            }
            cssClass=this.opts.formatSelectionCssClass(data, container);
            if (cssClass !== undefined) {
                container.addClass(cssClass);
            }

            this.selection.removeClass("select2-default");

            if (this.opts.allowClear && this.getPlaceholder() !== undefined) {
                this.container.addClass("select2-allowclear");
            }
        },

        // single
        val: function () {
            var val,
                triggerChange = false,
                data = null,
                self = this,
                oldData = this.data();

            if (arguments.length === 0) {
                return this.opts.element.val();
            }

            val = arguments[0];

            if (arguments.length > 1) {
                triggerChange = arguments[1];
            }

            if (this.select) {
                this.select
                    .val(val)
                    .find("option").filter(function() { return this.selected }).each2(function (i, elm) {
                        data = self.optionToData(elm);
                        return false;
                    });
                this.updateSelection(data);
                this.setPlaceholder();
                if (triggerChange) {
                    this.triggerChange({added: data, removed:oldData});
                }
            } else {
                // val is an id. !val is true for [undefined,null,'',0] - 0 is legal
                if (!val && val !== 0) {
                    this.clear(triggerChange);
                    return;
                }
                if (this.opts.initSelection === undefined) {
                    throw new Error("cannot call val() if initSelection() is not defined");
                }
                this.opts.element.val(val);
                this.opts.initSelection(this.opts.element, function(data){
                    self.opts.element.val(!data ? "" : self.id(data));
                    self.updateSelection(data);
                    self.setPlaceholder();
                    if (triggerChange) {
                        self.triggerChange({added: data, removed:oldData});
                    }
                });
            }
        },

        // single
        clearSearch: function () {
            this.search.val("");
            this.focusser.val("");
        },

        // single
        data: function(value) {
            var data,
                triggerChange = false;

            if (arguments.length === 0) {
                data = this.selection.data("select2-data");
                if (data == undefined) data = null;
                return data;
            } else {
                if (arguments.length > 1) {
                    triggerChange = arguments[1];
                }
                if (!value) {
                    this.clear(triggerChange);
                } else {
                    data = this.data();
                    this.opts.element.val(!value ? "" : this.id(value));
                    this.updateSelection(value);
                    if (triggerChange) {
                        this.triggerChange({added: value, removed:data});
                    }
                }
            }
        }
    });

    MultiSelect2 = clazz(AbstractSelect2, {

        // multi
        createContainer: function () {
            var container = $(document.createElement("div")).attr({
                "class": "select2-container select2-container-multi"
            }).html([
                "<ul class='select2-choices'>",
                "  <li class='select2-search-field'>",
                "    <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input'>",
                "  </li>",
                "</ul>",
                "<div class='select2-drop select2-drop-multi select2-display-none'>",
                "   <ul class='select2-results'>",
                "   </ul>",
                "</div>"].join(""));
            return container;
        },

        // multi
        prepareOpts: function () {
            var opts = this.parent.prepareOpts.apply(this, arguments),
                self=this;

            // TODO validate placeholder is a string if specified

            if (opts.element.get(0).tagName.toLowerCase() === "select") {
                // install sthe selection initializer
                opts.initSelection = function (element, callback) {

                    var data = [];

                    element.find("option").filter(function() { return this.selected }).each2(function (i, elm) {
                        data.push(self.optionToData(elm));
                    });
                    callback(data);
                };
            } else if ("data" in opts) {
                // install default initSelection when applied to hidden input and data is local
                opts.initSelection = opts.initSelection || function (element, callback) {
                    var ids = splitVal(element.val(), opts.separator);
                    //search in data by array of ids, storing matching items in a list
                    var matches = [];
                    opts.query({
                        matcher: function(term, text, el){
                            var is_match = $.grep(ids, function(id) {
                                return equal(id, opts.id(el));
                            }).length;
                            if (is_match) {
                                matches.push(el);
                            }
                            return is_match;
                        },
                        callback: !$.isFunction(callback) ? $.noop : function() {
                            // reorder matches based on the order they appear in the ids array because right now
                            // they are in the order in which they appear in data array
                            var ordered = [];
                            for (var i = 0; i < ids.length; i++) {
                                var id = ids[i];
                                for (var j = 0; j < matches.length; j++) {
                                    var match = matches[j];
                                    if (equal(id, opts.id(match))) {
                                        ordered.push(match);
                                        matches.splice(j, 1);
                                        break;
                                    }
                                }
                            }
                            callback(ordered);
                        }
                    });
                };
            }

            return opts;
        },

        // multi
        selectChoice: function (choice) {

            var selected = this.container.find(".select2-search-choice-focus");
            if (selected.length && choice && choice[0] == selected[0]) {

            } else {
                if (selected.length) {
                    this.opts.element.trigger("choice-deselected", selected);
                }
                selected.removeClass("select2-search-choice-focus");
                if (choice && choice.length) {
                    this.close();
                    choice.addClass("select2-search-choice-focus");
                    this.opts.element.trigger("choice-selected", choice);
                }
            }
        },

        // multi
        destroy: function() {
            $("label[for='" + this.search.attr('id') + "']")
                .attr('for', this.opts.element.attr("id"));
            this.parent.destroy.apply(this, arguments);
        },

        // multi
        initContainer: function () {

            var selector = ".select2-choices", selection;

            this.searchContainer = this.container.find(".select2-search-field");
            this.selection = selection = this.container.find(selector);

            var _this = this;
            this.selection.on("click", ".select2-search-choice:not(.select2-locked)", function (e) {
                //killEvent(e);
                _this.search[0].focus();
                _this.selectChoice($(this));
            });

            // rewrite labels from original element to focusser
            this.search.attr("id", "s2id_autogen"+nextUid());
            $("label[for='" + this.opts.element.attr("id") + "']")
                .attr('for', this.search.attr('id'));

            this.search.on("input paste", this.bind(function() {
                if (!this.isInterfaceEnabled()) return;
                if (!this.opened()) {
                    this.open();
                }
            }));

            this.search.attr("tabindex", this.elementTabIndex);

            this.keydowns = 0;
            this.search.on("keydown", this.bind(function (e) {
                if (!this.isInterfaceEnabled()) return;

                ++this.keydowns;
                var selected = selection.find(".select2-search-choice-focus");
                var prev = selected.prev(".select2-search-choice:not(.select2-locked)");
                var next = selected.next(".select2-search-choice:not(.select2-locked)");
                var pos = getCursorInfo(this.search);
                var isSharedCategoryFilter = selected.find('li').attr("issharedcategoryfilter") == "true" ? true : false;
                var isAssetList = selected.find('li').attr("isassetlist") == "true" ? true : false;
                var isCategory = selected.find('li').attr("iscategory") == "true" ? true : false;

                if (selected.length &&
                    (e.which == KEY.LEFT || e.which == KEY.RIGHT || e.which == KEY.BACKSPACE || e.which == KEY.DELETE || e.which == KEY.ENTER)) {
                    var selectedChoice = selected;
                    if (e.which == KEY.LEFT && prev.length) {
                        selectedChoice = prev;
                    }
                    else if (e.which == KEY.RIGHT) {
                        selectedChoice = next.length ? next : null;
                    }
                    else if (e.which === KEY.BACKSPACE) {
                        if (!isSharedCategoryFilter && !isAssetList)//don't remove asset list and shared category filters
                        {
                            if (isCategory)
                                $(".tab-pane").find(".smart-form input[filterid='" + selected.find('li').attr("fid") + "']").prop("checked", false);
                            this.unselect(selected.first());
                            this.search.width(10);
                        }
                        selectedChoice = prev.length ? prev : next;
                    } else if (e.which == KEY.DELETE) {
                        if (!isSharedCategoryFilter && !isAssetList)
                        {
                            if (isCategory)
                                $(".tab-pane").find(".smart-form input[filterid='" + selected.find('li').attr("fid") + "']").prop("checked", false);
                            this.unselect(selected.first());
                            this.search.width(10);
                        }
                        selectedChoice = next.length ? next : null;
                    } else if (e.which == KEY.ENTER) {
                        selectedChoice = null;
                    }

                    this.selectChoice(selectedChoice);
                    killEvent(e);
                    if (!selectedChoice || !selectedChoice.length) {
                        this.open();
                    }
                    return;
                } else if (((e.which === KEY.BACKSPACE && this.keydowns == 1)
                    || e.which == KEY.LEFT) && (pos.offset == 0 && !pos.length)) {

                    this.selectChoice(selection.find(".select2-search-choice:not(.select2-locked)").last());
                    killEvent(e);
                    return;
                } else {
                    this.selectChoice(null);
                }

                if (this.opened()) {
                    switch (e.which) {
                    case KEY.UP:
                    case KEY.DOWN:
                        this.moveHighlight((e.which === KEY.UP) ? -1 : 1);
                        killEvent(e);
                        return;
                    case KEY.ENTER:
                        this.selectHighlighted();
                        killEvent(e);
                        return;
                    case KEY.TAB:
                        this.selectHighlighted({noFocus:true});
                        this.close();
                        return;
                    case KEY.ESC:
                        this.cancel(e);
                        killEvent(e);
                        return;
                    }
                }

                if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e)
                 || e.which === KEY.BACKSPACE || e.which === KEY.ESC) {
                    return;
                }

                if (e.which === KEY.ENTER) {
                    if (this.opts.openOnEnter === false) {
                        return;
                    } else if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) {
                        return;
                    }
                }

                this.open();

                if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {
                    // prevent the page from scrolling
                    killEvent(e);
                }

                if (e.which === KEY.ENTER) {
                    // prevent form from being submitted
                    killEvent(e);
                }

            }));

            this.search.on("keyup", this.bind(function (e) {
                this.keydowns = 0;
                this.resizeSearch();
            })
            );

            this.search.on("blur", this.bind(function(e) {
                this.container.removeClass("select2-container-active");
                this.search.removeClass("select2-focused");
                this.selectChoice(null);
                if (!this.opened()) this.clearSearch();
                e.stopImmediatePropagation();
                this.opts.element.trigger($.Event("select2-blur"));
            }));

            this.container.on("click", selector, this.bind(function (e) {
                if (!this.isInterfaceEnabled()) return;
                if ($(e.target).closest(".select2-search-choice").length > 0) {
                    // clicked inside a select2 search choice, do not open
                    return;
                }
                this.selectChoice(null);
                this.clearPlaceholder();
                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"));
                }
                this.open();
                this.focusSearch();
                e.preventDefault();
            }));

            this.container.on("focus", selector, this.bind(function () {
                if (!this.isInterfaceEnabled()) return;
                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"));
                }
                this.container.addClass("select2-container-active");
                this.dropdown.addClass("select2-drop-active");
                this.clearPlaceholder();
            }));

            this.initContainerWidth();
            this.opts.element.addClass("select2-offscreen");

            // set the placeholder if necessary
            this.clearSearch();
        },

        // multi
        enableInterface: function() {
            if (this.parent.enableInterface.apply(this, arguments)) {
                this.search.prop("disabled", !this.isInterfaceEnabled());
            }
        },

        // multi
        initSelection: function () {
            var data;
            if (this.opts.element.val() === "" && this.opts.element.text() === "") {
                this.updateSelection([]);
                this.close();
                // set the placeholder if necessary
                this.clearSearch();
            }
            if (this.select || this.opts.element.val() !== "") {
                var self = this;
                this.opts.initSelection.call(null, this.opts.element, function(data){
                    if (data !== undefined && data !== null) {
                        self.updateSelection(data);
                        self.close();
                        // set the placeholder if necessary
                        self.clearSearch();
                    }
                });
            }
        },

        // multi
        clearSearch: function () {
            var placeholder = this.getPlaceholder(),
                maxWidth = this.getMaxSearchWidth();

            if (placeholder !== undefined  && this.getVal().length === 0 && this.search.hasClass("select2-focused") === false) {
                this.search.val(placeholder).addClass("select2-default");
                // stretch the search box to full width of the container so as much of the placeholder is visible as possible
                // we could call this.resizeSearch(), but we do not because that requires a sizer and we do not want to create one so early because of a firefox bug, see #944
                this.search.width(maxWidth > 0 ? maxWidth : this.container.css("width"));
            } else {
                this.search.val("").width(10);
            }
        },

        // multi
        clearPlaceholder: function () {
            if (this.search.hasClass("select2-default")) {
                this.search.val("").removeClass("select2-default");
            }
        },

        // multi
        opening: function () {
            this.clearPlaceholder(); // should be done before super so placeholder is not used to search
            this.resizeSearch();

            this.parent.opening.apply(this, arguments);

            this.focusSearch();

            this.updateResults(true);
            this.search.focus();
            this.opts.element.trigger($.Event("select2-open"));
        },

        // multi
        close: function () {
            if (!this.opened()) return;
            this.parent.close.apply(this, arguments);
        },

        // multi
        focus: function () {
            this.close();
            this.search.focus();
        },

        // multi
        isFocused: function () {
            return this.search.hasClass("select2-focused");
        },

        // multi
        updateSelection: function (data) {
            var ids = [], filtered = [], self = this;

            // filter out duplicates
            $(data).each(function () {
                if (indexOf(self.id(this), ids) < 0) {
                    ids.push(self.id(this));
                    filtered.push(this);
                }
            });
            data = filtered;

            this.selection.find(".select2-search-choice").remove();
            $(data).each(function () {
                self.addSelectedChoice(this);
            });
            self.postprocessResults();
        },

        // multi
        tokenize: function() {
            var input = this.search.val();
            input = this.opts.tokenizer.call(this, input, this.data(), this.bind(this.onSelect), this.opts);
            if (input != null && input != undefined) {
                this.search.val(input);
                if (input.length > 0) {
                    this.open();
                }
            }

        },

        // multi
        onSelect: function (data, options) {

            if (!this.triggerSelect(data)) { return; }

            this.addSelectedChoice(data);

            this.opts.element.trigger({ type: "selected", val: this.id(data), choice: data });

            if (this.select || !this.opts.closeOnSelect) this.postprocessResults(data, false, this.opts.closeOnSelect===true);

            if (this.opts.closeOnSelect) {
                this.close();
                this.search.width(10);
            } else {
                if (this.countSelectableResults()>0) {
                    this.search.width(10);
                    this.resizeSearch();
                    if (this.getMaximumSelectionSize() > 0 && this.val().length >= this.getMaximumSelectionSize()) {
                        // if we reached max selection size repaint the results so choices
                        // are replaced with the max selection reached message
                        this.updateResults(true);
                    }
                    this.positionDropdown();
                } else {
                    // if nothing left to select close
                    this.close();
                    this.search.width(10);
                }
            }

            // since its not possible to select an element that has already been
            // added we do not need to check if this is a new element before firing change
            this.triggerChange({ added: data });

            if (!options || !options.noFocus)
                this.focusSearch();
        },

        // multi
        cancel: function () {
            this.close();
            this.focusSearch();
        },

        addSelectedChoice: function (data) {
            var enableChoice = !data.locked,
                enabledItem = $(
                    "<li class='select2-search-choice'>" +
                    "    <div></div>" +
                    "    <a href='#' onclick='return false;' class='select2-search-choice-close' tabindex='-1'></a>" +
                    "</li>"),
                disabledItem = $(
                    "<li class='select2-search-choice select2-locked'>" +
                    "<div></div>" +
                    "</li>");
            var choice = enableChoice ? enabledItem : disabledItem,
                id = this.id(data),
                val = this.getVal(),
                formatted,
                cssClass;

            formatted=this.opts.formatSelection(data, choice.find("div"), this.opts.escapeMarkup);
            if (formatted != undefined) {
                if (data.isassetlist)//for asset list filters
                {
                    choice.addClass('filter-list');
                    choice.find(".select2-search-choice-close").hide();
                }
                else if (data.issharedcategoryfilter && data.iscategory)//if same filter added from more than one company via category
                    choice.addClass('filter-blue');
                else
                {
                    if (data.iscategory) //for category filters
                        choice.addClass('filter-success');
                    if (data.issharedcategoryfilter) //category filters applied from other company
                    {
                        choice.addClass('filter-shared');
                        choice.find(".select2-search-choice-close").hide();
                    }
                }
                choice.find("div").replaceWith("<div>"+formatted+"</div>");
            }
            cssClass=this.opts.formatSelectionCssClass(data, choice.find("div"));
            if (cssClass != undefined) {
                choice.addClass(cssClass);
            }

            if(enableChoice){
              choice.find(".select2-search-choice-close")
                  .on("mousedown", killEvent)
                  .on("click dblclick", this.bind(function (e) {
                  if (!this.isInterfaceEnabled()) return;

                  if ($(e.target).parent().hasClass('filter-blue')) //For filters applied by more than one company, stop the removal of filter on click of cross icon      
                  {
                      killEventImmediately(e);
                      var parent = $(e.target).parent();
                      var $li = $(parent).find("li");
                      var fid = $li.attr("fid");

                      $(parent).removeClass('filter-blue').addClass('filter-shared');
                      $(e.target).hide();
                      $li.attr({'iscategory': false, 'data-original-title': 'Category filter from another company. You cannot remove this.'});
                      $(".tab-pane").find(".smart-form input[filterid='" + fid + "']").prop("checked", false);
                      triggerTooltip(".filters"); // trigger tooltip for filters

                      return false;
                  }

                  $(e.target).closest(".select2-search-choice").fadeOut('fast', this.bind(function(){
                      this.unselect($(e.target));
                      this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
                      this.close();
                      this.focusSearch();
                  })).dequeue();
                  killEvent(e);
              })).on("focus", this.bind(function () {
                  if (!this.isInterfaceEnabled()) return;
                  this.container.addClass("select2-container-active");
                  this.dropdown.addClass("select2-drop-active");
              }));
            }

            if ($(formatted).attr('pipekeywords') !== 'true') {
                formatted = escapeReplaceSpecialChars(formatted);
                choice.data("select2-data", data);
                choice.insertBefore(this.searchContainer);
            }

            triggerTooltip(".filters"); // trigger tooltip for filters
            val.push(id);
            this.setVal(val);
        },

        // multi
        unselect: function (selected) {
            var val = this.getVal(),
                data,
                index;
            selected = selected.closest(".select2-search-choice");

            if (selected.length === 0) {
                throw "Invalid argument: " + selected + ". Must be .select2-search-choice";
            }

            data = selected.data("select2-data");

            if (!data) {
                // prevent a race condition when the 'x' is clicked really fast repeatedly the event can be queued
                // and invoked on an element already removed
                return;
            }

            while((index = indexOf(this.id(data), val)) >= 0) {
                val.splice(index, 1);
                this.setVal(val);
                if (this.select) this.postprocessResults();
            }

            var evt = $.Event("select2-removing");
            evt.val = this.id(data);
            evt.choice = data;
            this.opts.element.trigger(evt);

            if (evt.isDefaultPrevented()) {
                return;
            }

            selected.remove();

            this.opts.element.trigger({ type: "select2-removed", val: this.id(data), choice: data });
            this.triggerChange({ removed: data });
        },

        // multi
        postprocessResults: function (data, initial, noHighlightUpdate) {
            var val = this.getVal(),
                choices = this.results.find(".select2-result"),
                compound = this.results.find(".select2-result-with-children"),
                self = this;

            choices.each2(function (i, choice) {
                var id = self.id(choice.data("select2-data"));
                if (indexOf(id, val) >= 0) {
                    choice.addClass("select2-selected");
                    // mark all children of the selected parent as selected
                    choice.find(".select2-result-selectable").addClass("select2-selected");
                }
            });

            compound.each2(function(i, choice) {
                // hide an optgroup if it doesnt have any selectable children
                if (!choice.is('.select2-result-selectable')
                    && choice.find(".select2-result-selectable:not(.select2-selected)").length === 0) {
                    choice.addClass("select2-selected");
                }
            });

            if (this.highlight() == -1 && noHighlightUpdate !== false){
                self.highlight(0);
            }

            //If all results are chosen render formatNoMAtches
            if(!this.opts.createSearchChoice && !choices.filter('.select2-result:not(.select2-selected)').length > 0){
                if(!data || data && !data.more && this.results.find(".select2-no-results").length === 0) {
                    if (checkFormatter(self.opts.formatNoMatches, "formatNoMatches")) {
                        this.results.append("<li class='select2-no-results'>" + self.opts.formatNoMatches(self.search.val()) + "</li>");
                    }
                }
            }

        },

        // multi
        getMaxSearchWidth: function() {
            return this.selection.width() - getSideBorderPadding(this.search);
        },

        // multi
        resizeSearch: function () {
            var minimumWidth, left, maxWidth, containerLeft, searchWidth,
                sideBorderPadding = getSideBorderPadding(this.search);

            minimumWidth = measureTextWidth(this.search) + 10;

            left = this.search.offset().left;

            maxWidth = this.selection.width();
            containerLeft = this.selection.offset().left;

            searchWidth = maxWidth - (left - containerLeft) - sideBorderPadding;

            if (searchWidth < minimumWidth) {
                searchWidth = maxWidth - sideBorderPadding;
            }

            if (searchWidth < 40) {
                searchWidth = maxWidth - sideBorderPadding;
            }

            if (searchWidth <= 0) {
              searchWidth = minimumWidth;
            }

            this.search.width(Math.floor(searchWidth));
        },

        // multi
        getVal: function () {
            var val;
            if (this.select) {
                val = this.select.val();
                return val === null ? [] : val;
            } else {
                val = this.opts.element.val();
                return splitVal(val, this.opts.separator);
            }
        },

        // multi
        setVal: function (val) {
            var unique;
            if (this.select) {
                this.select.val(val);
            } else {
                unique = [];
                // filter out duplicates
                $(val).each(function () {
                    if (indexOf(this, unique) < 0) unique.push(this);
                });
                this.opts.element.val(unique.length === 0 ? "" : unique.join(this.opts.separator));
            }
        },

        // multi
        buildChangeDetails: function (old, current) {
            var current = current.slice(0),
                old = old.slice(0);

            // remove intersection from each array
            for (var i = 0; i < current.length; i++) {
                for (var j = 0; j < old.length; j++) {
                    if (equal(this.opts.id(current[i]), this.opts.id(old[j]))) {
                        current.splice(i, 1);
                        if(i>0){
                        	i--;
                        }
                        old.splice(j, 1);
                        j--;
                    }
                }
            }

            return {added: current, removed: old};
        },


        // multi
        val: function (val, triggerChange) {
            var oldData, self=this;

            if (arguments.length === 0) {
                return this.getVal();
            }

            oldData=this.data();
            if (!oldData.length) oldData=[];

            // val is an id. !val is true for [undefined,null,'',0] - 0 is legal
            if (!val && val !== 0) {
                this.opts.element.val("");
                this.updateSelection([]);
                this.clearSearch();
                if (triggerChange) {
                    this.triggerChange({added: this.data(), removed: oldData});
                }
                return;
            }

            // val is a list of ids
            this.setVal(val);

            if (this.select) {
                this.opts.initSelection(this.select, this.bind(this.updateSelection));
                if (triggerChange) {
                    this.triggerChange(this.buildChangeDetails(oldData, this.data()));
                }
            } else {
                if (this.opts.initSelection === undefined) {
                    throw new Error("val() cannot be called if initSelection() is not defined");
                }

                this.opts.initSelection(this.opts.element, function(data){
                    var ids=$.map(data, self.id);
                    self.setVal(ids);
                    self.updateSelection(data);
                    self.clearSearch();
                    if (triggerChange) {
                        self.triggerChange(self.buildChangeDetails(oldData, self.data()));
                    }
                });
            }
            this.clearSearch();
        },

        // multi
        onSortStart: function() {
            if (this.select) {
                throw new Error("Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead.");
            }

            // collapse search field into 0 width so its container can be collapsed as well
            this.search.width(0);
            // hide the container
            this.searchContainer.hide();
        },

        // multi
        onSortEnd:function() {

            var val=[], self=this;

            // show search and move it to the end of the list
            this.searchContainer.show();
            // make sure the search container is the last item in the list
            this.searchContainer.appendTo(this.searchContainer.parent());
            // since we collapsed the width in dragStarted, we resize it here
            this.resizeSearch();

            // update selection
            this.selection.find(".select2-search-choice").each(function() {
                val.push(self.opts.id($(this).data("select2-data")));
            });
            this.setVal(val);
            this.triggerChange();
        },

        // multi
        data: function(values, triggerChange) {
            var self=this, ids, old;
            if (arguments.length === 0) {
                 return this.selection
                     .find(".select2-search-choice")
                     .map(function() { return $(this).data("select2-data"); })
                     .get();
            } else {
                old = this.data();
                if (!values) { values = []; }
                ids = $.map(values, function(e) { return self.opts.id(e); });
                this.setVal(ids);
                this.updateSelection(values);
                this.clearSearch();
                if (triggerChange) {
                    this.triggerChange(this.buildChangeDetails(old, this.data()));
                }
            }
        }
    });

    $.fn.select2 = function () {

        var args = Array.prototype.slice.call(arguments, 0),
            opts,
            select2,
            method, value, multiple,
            allowedMethods = ["val", "destroy", "opened", "open", "close", "focus", "isFocused", "container", "dropdown", "onSortStart", "onSortEnd", "enable", "disable", "readonly", "positionDropdown", "data", "search"],
            valueMethods = ["opened", "isFocused", "container", "dropdown"],
            propertyMethods = ["val", "data"],
            methodsMap = { search: "externalSearch" };

        this.each(function () {
            if (args.length === 0 || typeof(args[0]) === "object") {
                opts = args.length === 0 ? {} : $.extend({}, args[0]);
                opts.element = $(this);

                if (opts.element.get(0).tagName.toLowerCase() === "select") {
                    multiple = opts.element.prop("multiple");
                } else {
                    multiple = opts.multiple || false;
                    if ("tags" in opts) {opts.multiple = multiple = true;}
                }

                select2 = multiple ? new MultiSelect2() : new SingleSelect2();
                select2.init(opts);
            } else if (typeof(args[0]) === "string") {

                if (indexOf(args[0], allowedMethods) < 0) {
                    throw "Unknown method: " + args[0];
                }

                value = undefined;
                select2 = $(this).data("select2");
                if (select2 === undefined) return;

                method=args[0];

                if (method === "container") {
                    value = select2.container;
                } else if (method === "dropdown") {
                    value = select2.dropdown;
                } else {
                    if (methodsMap[method]) method = methodsMap[method];

                    value = select2[method].apply(select2, args.slice(1));
                }
                if (indexOf(args[0], valueMethods) >= 0
                    || (indexOf(args[0], propertyMethods) && args.length == 1)) {
                    return false; // abort the iteration, ready to return first matched value
                }
            } else {
                throw "Invalid arguments to select2 plugin: " + args;
            }
        });
        return (value === undefined) ? this : value;
    };

    // plugin defaults, accessible to users
    $.fn.select2.defaults = {
        width: "copy",
        loadMorePadding: 0,
        closeOnSelect: true,
        openOnEnter: true,
        containerCss: {},
        dropdownCss: {},
        containerCssClass: "",
        dropdownCssClass: "",
        formatResult: function(result, container, query, escapeMarkup) {
            var markup=[];
            markMatch(result.text, query.term, markup, escapeMarkup);
            return markup.join("");
        },
        formatSelection: function (data, container, escapeMarkup) {
            if (!data) return undefined;
            const escapedText = escapeMarkup(data.text);
            return '<div pipekeywords="false">' + escapedText + '</div>';
        },
        sortResults: function (results, container, query) {
            return results;
        },
        formatResultCssClass: function(data) {return undefined;},
        formatSelectionCssClass: function(data, container) {return undefined;},
        formatNoMatches: function () { return 'No matches found'; },
        formatInputTooShort: function (input, min) {  var n = min - input.length; return 'Please enter {0} more character{1}'.replace('{0}', n).replace('{1}', n == 1 ? '' : 's');},
        formatInputTooLong: function (input, max) { var n = input.length - max; return "Please delete " + n + " character" + (n == 1? "" : "s"); },
        formatSelectionTooBig: function (limit) { return "You can only select " + limit + " item" + (limit == 1 ? "" : "s"); },
        formatLoadMore: function (pageNumber) { return "Loading more results..."; },
        formatSearching: function () { return 'Searching...'; },
        minimumResultsForSearch: 0,
        minimumInputLength: 0,
        maximumInputLength: null,
        maximumSelectionSize: 0,
        id: function (e) { return e.id; },
        matcher: function(term, text) {
            return stripDiacritics(''+text).toUpperCase().indexOf(stripDiacritics(''+term).toUpperCase()) >= 0;
        },
        separator: ",",
        tokenSeparators: [],
        tokenizer: defaultTokenizer,
        escapeMarkup: defaultEscapeMarkup,
        blurOnChange: false,
        selectOnBlur: false,
        adaptContainerCssClass: function(c) { return c; },
        adaptDropdownCssClass: function(c) { return null; },
        nextSearchTerm: function(selectedObject, currentSearchTerm) { return undefined; }
    };

    $.fn.select2.ajaxDefaults = {
        transport: $.ajax,
        params: {
            type: "GET",
            cache: false,
            dataType: "json"
        }
    };

    // exports
    window.Select2 = {
        query: {
            ajax: ajax,
            local: local,
            tags: tags
        }, util: {
            debounce: debounce,
            markMatch: markMatch,
            escapeMarkup: defaultEscapeMarkup,
            stripDiacritics: stripDiacritics
        }, "class": {
            "abstract": AbstractSelect2,
            "single": SingleSelect2,
            "multi": MultiSelect2
        }
    };

}(jQuery));

;
!function($){var Slider=function(element,options){this.element=$(element);this.picker=$('<div class="slider"><div class="slider-track"><div class="slider-selection"></div><div class="slider-handle"></div><div class="slider-handle"></div></div><div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div></div>').insertBefore(this.element).prepend(this.element);this.id=this.element.data("slider-id")||options.id;if(this.id){this.picker[0].id=this.id}if(typeof Modernizr!=="undefined"&&Modernizr.touch){this.touchCapable=true}var tooltip=this.element.data("slider-tooltip")||options.tooltip;this.tooltip=this.picker.find(".tooltip");this.tooltipInner=this.tooltip.find("div.tooltip-inner");this.orientation=this.element.data("slider-orientation")||options.orientation;switch(this.orientation){case"vertical":this.picker.addClass("slider-vertical");this.stylePos="top";this.mousePos="pageY";this.sizePos="offsetHeight";this.tooltip.addClass("right")[0].style.left="100%";break;default:this.picker.addClass("slider-horizontal").css("width",this.element.outerWidth());this.orientation="horizontal";this.stylePos="left";this.mousePos="pageX";this.sizePos="offsetWidth";this.tooltip.addClass("top")[0].style.top=-this.tooltip.outerHeight()-14+"px";break}this.min=this.element.data("slider-min")||options.min;this.max=this.element.data("slider-max")||options.max;this.step=this.element.data("slider-step")||options.step;this.value=this.element.data("slider-value")||options.value;if(this.value[1]){this.range=true}this.selection=this.element.data("slider-selection")||options.selection;this.selectionEl=this.picker.find(".slider-selection");if(this.selection==="none"){this.selectionEl.addClass("hide")}this.selectionElStyle=this.selectionEl[0].style;this.handle1=this.picker.find(".slider-handle:first");this.handle1Stype=this.handle1[0].style;this.handle2=this.picker.find(".slider-handle:last");this.handle2Stype=this.handle2[0].style;var handle=this.element.data("slider-handle")||options.handle;switch(handle){case"round":this.handle1.addClass("round");this.handle2.addClass("round");break;case"triangle":this.handle1.addClass("triangle");this.handle2.addClass("triangle");break}if(this.range){this.value[0]=Math.max(this.min,Math.min(this.max,this.value[0]));this.value[1]=Math.max(this.min,Math.min(this.max,this.value[1]))}else{this.value=[Math.max(this.min,Math.min(this.max,this.value))];this.handle2.addClass("hide");if(this.selection=="after"){this.value[1]=this.max}else{this.value[1]=this.min}}this.diff=this.max-this.min;this.percentage=[(this.value[0]-this.min)*100/this.diff,(this.value[1]-this.min)*100/this.diff,this.step*100/this.diff];this.offset=this.picker.offset();this.size=this.picker[0][this.sizePos];this.formater=options.formater;this.layout();if(this.touchCapable){this.picker.on({touchstart:$.proxy(this.mousedown,this)})}else{this.picker.on({mousedown:$.proxy(this.mousedown,this)})}if(tooltip==="show"){this.picker.on({mouseenter:$.proxy(this.showTooltip,this),mouseleave:$.proxy(this.hideTooltip,this)})}else{this.tooltip.addClass("hide")}};Slider.prototype={constructor:Slider,over:false,inDrag:false,showTooltip:function(){this.tooltip.addClass("in");this.over=true},hideTooltip:function(){if(this.inDrag===false){this.tooltip.removeClass("in")}this.over=false},layout:function(){this.handle1Stype[this.stylePos]=this.percentage[0]+"%";this.handle2Stype[this.stylePos]=this.percentage[1]+"%";if(this.orientation=="vertical"){this.selectionElStyle.top=Math.min(this.percentage[0],this.percentage[1])+"%";this.selectionElStyle.height=Math.abs(this.percentage[0]-this.percentage[1])+"%"}else{this.selectionElStyle.left=Math.min(this.percentage[0],this.percentage[1])+"%";this.selectionElStyle.width=Math.abs(this.percentage[0]-this.percentage[1])+"%"}if(this.range){this.tooltipInner.text(this.formater(this.value[0])+" : "+this.formater(this.value[1]));this.tooltip[0].style[this.stylePos]=this.size*(this.percentage[0]+(this.percentage[1]-this.percentage[0])/2)/100-(this.orientation==="vertical"?this.tooltip.outerHeight()/2:this.tooltip.outerWidth()/2)+"px"}else{this.tooltipInner.text(this.formater(this.value[0]));this.tooltip[0].style[this.stylePos]=this.size*this.percentage[0]/100-(this.orientation==="vertical"?this.tooltip.outerHeight()/2:this.tooltip.outerWidth()/2)+"px"}},mousedown:function(ev){if(this.touchCapable&&ev.type==="touchstart"){ev=ev.originalEvent}this.offset=this.picker.offset();this.size=this.picker[0][this.sizePos];var percentage=this.getPercentage(ev);if(this.range){var diff1=Math.abs(this.percentage[0]-percentage);var diff2=Math.abs(this.percentage[1]-percentage);this.dragged=(diff1<diff2)?0:1}else{this.dragged=0}this.percentage[this.dragged]=percentage;this.layout();if(this.touchCapable){$(document).on({touchmove:$.proxy(this.mousemove,this),touchend:$.proxy(this.mouseup,this)})}else{$(document).on({mousemove:$.proxy(this.mousemove,this),mouseup:$.proxy(this.mouseup,this)})}this.inDrag=true;var val=this.calculateValue();this.element.trigger({type:"slideStart",value:val}).trigger({type:"slide",value:val});return false},mousemove:function(ev){if(this.touchCapable&&ev.type==="touchmove"){ev=ev.originalEvent}var percentage=this.getPercentage(ev);if(this.range){if(this.dragged===0&&this.percentage[1]<percentage){this.percentage[0]=this.percentage[1];this.dragged=1}else{if(this.dragged===1&&this.percentage[0]>percentage){this.percentage[1]=this.percentage[0];this.dragged=0}}}this.percentage[this.dragged]=percentage;this.layout();var val=this.calculateValue();this.element.trigger({type:"slide",value:val}).data("value",val).prop("value",val);return false},mouseup:function(ev){if(this.touchCapable){$(document).off({touchmove:this.mousemove,touchend:this.mouseup})}else{$(document).off({mousemove:this.mousemove,mouseup:this.mouseup})}this.inDrag=false;if(this.over==false){this.hideTooltip()}this.element;var val=this.calculateValue();this.element.trigger({type:"slideStop",value:val}).data("value",val).prop("value",val);return false},calculateValue:function(){var val;if(this.range){val=[(this.min+Math.round((this.diff*this.percentage[0]/100)/this.step)*this.step),(this.min+Math.round((this.diff*this.percentage[1]/100)/this.step)*this.step)];this.value=val}else{val=(this.min+Math.round((this.diff*this.percentage[0]/100)/this.step)*this.step);this.value=[val,this.value[1]]}return val},getPercentage:function(ev){if(this.touchCapable){ev=ev.touches[0]}var percentage=(ev[this.mousePos]-this.offset[this.stylePos])*100/this.size;percentage=Math.round(percentage/this.percentage[2])*this.percentage[2];return Math.max(0,Math.min(100,percentage))},getValue:function(){if(this.range){return this.value}return this.value[0]},setValue:function(val){this.value=val;if(this.range){this.value[0]=Math.max(this.min,Math.min(this.max,this.value[0]));this.value[1]=Math.max(this.min,Math.min(this.max,this.value[1]))}else{this.value=[Math.max(this.min,Math.min(this.max,this.value))];this.handle2.addClass("hide");if(this.selection=="after"){this.value[1]=this.max}else{this.value[1]=this.min}}this.diff=this.max-this.min;this.percentage=[(this.value[0]-this.min)*100/this.diff,(this.value[1]-this.min)*100/this.diff,this.step*100/this.diff];this.layout()}};$.fn.slider=function(option,val){return this.each(function(){var $this=$(this),data=$this.data("slider"),options=typeof option==="object"&&option;if(!data){$this.data("slider",(data=new Slider(this,$.extend({},$.fn.slider.defaults,options))))}if(typeof option=="string"){data[option](val)}})};$.fn.slider.defaults={min:0,max:10,step:1,orientation:"horizontal",value:5,selection:"before",tooltip:"show",handle:"round",formater:function(value){return value}};$.fn.slider.Constructor=Slider}(window.jQuery);
;
/*
 * ******************************************************************************
 *  jquery.mb.components
 *  file: jquery.mb.browser.min.js
 *
 *  Copyright (c) 2001-2013. Matteo Bicocchi (Pupunzi);
 *  Open lab srl, Firenze - Italy
 *  email: matteo@open-lab.com
 *  site: 	http://pupunzi.com
 *  blog:	http://pupunzi.open-lab.com
 * 	http://open-lab.com
 *
 *  Licences: MIT, GPL
 *  http://www.opensource.org/licenses/mit-license.php
 *  http://www.gnu.org/licenses/gpl.html
 *
 *  last modified: 17/01/13 0.12
 *  *****************************************************************************
 */
(function(){if(!jQuery.browser){jQuery.browser={};jQuery.browser.mozilla=!1;jQuery.browser.webkit=!1;jQuery.browser.opera=!1;jQuery.browser.msie=!1;var a=navigator.userAgent;jQuery.browser.name=navigator.appName;jQuery.browser.fullVersion=""+parseFloat(navigator.appVersion);jQuery.browser.majorVersion=parseInt(navigator.appVersion,10);var c,b;if(-1!=(b=a.indexOf("Opera"))){if(jQuery.browser.opera=!0,jQuery.browser.name="Opera",jQuery.browser.fullVersion=a.substring(b+6),-1!=(b=a.indexOf("Version")))jQuery.browser.fullVersion=
a.substring(b+8)}else if(-1!=(b=a.indexOf("MSIE")))jQuery.browser.msie=!0,jQuery.browser.name="Microsoft Internet Explorer",jQuery.browser.fullVersion=a.substring(b+5);else if(-1!=(b=a.indexOf("Chrome")))jQuery.browser.webkit=!0,jQuery.browser.name="Chrome",jQuery.browser.fullVersion=a.substring(b+7);else if(-1!=(b=a.indexOf("Safari"))){if(jQuery.browser.webkit=!0,jQuery.browser.name="Safari",jQuery.browser.fullVersion=a.substring(b+7),-1!=(b=a.indexOf("Version")))jQuery.browser.fullVersion=a.substring(b+
8)}else if(-1!=(b=a.indexOf("Firefox")))jQuery.browser.mozilla=!0,jQuery.browser.name="Firefox",jQuery.browser.fullVersion=a.substring(b+8);else if((c=a.lastIndexOf(" ")+1)<(b=a.lastIndexOf("/")))jQuery.browser.name=a.substring(c,b),jQuery.browser.fullVersion=a.substring(b+1),jQuery.browser.name.toLowerCase()==jQuery.browser.name.toUpperCase()&&(jQuery.browser.name=navigator.appName);if(-1!=(a=jQuery.browser.fullVersion.indexOf(";")))jQuery.browser.fullVersion=jQuery.browser.fullVersion.substring(0,
a);if(-1!=(a=jQuery.browser.fullVersion.indexOf(" ")))jQuery.browser.fullVersion=jQuery.browser.fullVersion.substring(0,a);jQuery.browser.majorVersion=parseInt(""+jQuery.browser.fullVersion,10);isNaN(jQuery.browser.majorVersion)&&(jQuery.browser.fullVersion=""+parseFloat(navigator.appVersion),jQuery.browser.majorVersion=parseInt(navigator.appVersion,10));jQuery.browser.version=jQuery.browser.majorVersion}})(jQuery);
;
!function(){"use strict";function t(e,o){function i(t,e){return function(){return t.apply(e,arguments)}}var r;if(o=o||{},this.trackingClick=!1,this.trackingClickStart=0,this.targetElement=null,this.touchStartX=0,this.touchStartY=0,this.lastTouchIdentifier=0,this.touchBoundary=o.touchBoundary||10,this.layer=e,this.tapDelay=o.tapDelay||200,this.tapTimeout=o.tapTimeout||700,!t.notNeeded(e)){for(var a=["onMouse","onClick","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel"],c=this,s=0,u=a.length;u>s;s++)c[a[s]]=i(c[a[s]],c);n&&(e.addEventListener("mouseover",this.onMouse,!0),e.addEventListener("mousedown",this.onMouse,!0),e.addEventListener("mouseup",this.onMouse,!0)),e.addEventListener("click",this.onClick,!0),e.addEventListener("touchstart",this.onTouchStart,!1),e.addEventListener("touchmove",this.onTouchMove,!1),e.addEventListener("touchend",this.onTouchEnd,!1),e.addEventListener("touchcancel",this.onTouchCancel,!1),Event.prototype.stopImmediatePropagation||(e.removeEventListener=function(t,n,o){var i=Node.prototype.removeEventListener;"click"===t?i.call(e,t,n.hijacked||n,o):i.call(e,t,n,o)},e.addEventListener=function(t,n,o){var i=Node.prototype.addEventListener;"click"===t?i.call(e,t,n.hijacked||(n.hijacked=function(t){t.propagationStopped||n(t)}),o):i.call(e,t,n,o)}),"function"==typeof e.onclick&&(r=e.onclick,e.addEventListener("click",function(t){r(t)},!1),e.onclick=null)}}var e=navigator.userAgent.indexOf("Windows Phone")>=0,n=navigator.userAgent.indexOf("Android")>0&&!e,o=/iP(ad|hone|od)/.test(navigator.userAgent)&&!e,i=o&&/OS 4_\d(_\d)?/.test(navigator.userAgent),r=o&&/OS [6-7]_\d/.test(navigator.userAgent),a=navigator.userAgent.indexOf("BB10")>0;t.prototype.needsClick=function(t){switch(t.nodeName.toLowerCase()){case"button":case"select":case"textarea":if(t.disabled)return!0;break;case"input":if(o&&"file"===t.type||t.disabled)return!0;break;case"label":case"iframe":case"video":return!0}return/\bneedsclick\b/.test(t.className)},t.prototype.needsFocus=function(t){switch(t.nodeName.toLowerCase()){case"textarea":return!0;case"select":return!n;case"input":switch(t.type){case"button":case"checkbox":case"file":case"image":case"radio":case"submit":return!1}return!t.disabled&&!t.readOnly;default:return/\bneedsfocus\b/.test(t.className)}},t.prototype.sendClick=function(t,e){var n,o;document.activeElement&&document.activeElement!==t&&document.activeElement.blur(),o=e.changedTouches[0],n=document.createEvent("MouseEvents"),n.initMouseEvent(this.determineEventType(t),!0,!0,window,1,o.screenX,o.screenY,o.clientX,o.clientY,!1,!1,!1,!1,0,null),n.forwardedTouchEvent=!0,t.dispatchEvent(n)},t.prototype.determineEventType=function(t){return n&&"select"===t.tagName.toLowerCase()?"mousedown":"click"},t.prototype.focus=function(t){var e;o&&t.setSelectionRange&&0!==t.type.indexOf("date")&&"time"!==t.type&&"month"!==t.type?(e=t.value.length,t.setSelectionRange(e,e)):t.focus()},t.prototype.updateScrollParent=function(t){var e,n;if(e=t.fastClickScrollParent,!e||!e.contains(t)){n=t;do{if(n.scrollHeight>n.offsetHeight){e=n,t.fastClickScrollParent=n;break}n=n.parentElement}while(n)}e&&(e.fastClickLastScrollTop=e.scrollTop)},t.prototype.getTargetElementFromEventTarget=function(t){return t.nodeType===Node.TEXT_NODE?t.parentNode:t},t.prototype.onTouchStart=function(t){var e,n,r;if(t.targetTouches.length>1)return!0;if(e=this.getTargetElementFromEventTarget(t.target),n=t.targetTouches[0],o){if(r=window.getSelection(),r.rangeCount&&!r.isCollapsed)return!0;if(!i){if(n.identifier&&n.identifier===this.lastTouchIdentifier)return t.preventDefault(),!1;this.lastTouchIdentifier=n.identifier,this.updateScrollParent(e)}}return this.trackingClick=!0,this.trackingClickStart=t.timeStamp,this.targetElement=e,this.touchStartX=n.pageX,this.touchStartY=n.pageY,t.timeStamp-this.lastClickTime<this.tapDelay&&t.preventDefault(),!0},t.prototype.touchHasMoved=function(t){var e=t.changedTouches[0],n=this.touchBoundary;return Math.abs(e.pageX-this.touchStartX)>n||Math.abs(e.pageY-this.touchStartY)>n?!0:!1},t.prototype.onTouchMove=function(t){return this.trackingClick?((this.targetElement!==this.getTargetElementFromEventTarget(t.target)||this.touchHasMoved(t))&&(this.trackingClick=!1,this.targetElement=null),!0):!0},t.prototype.findControl=function(t){return void 0!==t.control?t.control:t.htmlFor?document.getElementById(t.htmlFor):t.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea")},t.prototype.onTouchEnd=function(t){var e,a,c,s,u,l=this.targetElement;if(!this.trackingClick)return!0;if(t.timeStamp-this.lastClickTime<this.tapDelay)return this.cancelNextClick=!0,!0;if(t.timeStamp-this.trackingClickStart>this.tapTimeout)return!0;if(this.cancelNextClick=!1,this.lastClickTime=t.timeStamp,a=this.trackingClickStart,this.trackingClick=!1,this.trackingClickStart=0,r&&(u=t.changedTouches[0],l=document.elementFromPoint(u.pageX-window.pageXOffset,u.pageY-window.pageYOffset)||l,l.fastClickScrollParent=this.targetElement.fastClickScrollParent),c=l.tagName.toLowerCase(),"label"===c){if(e=this.findControl(l)){if(this.focus(l),n)return!1;l=e}}else if(this.needsFocus(l))return t.timeStamp-a>100||o&&window.top!==window&&"input"===c?(this.targetElement=null,!1):(this.focus(l),this.sendClick(l,t),o&&"select"===c||(this.targetElement=null,t.preventDefault()),!1);return o&&!i&&(s=l.fastClickScrollParent,s&&s.fastClickLastScrollTop!==s.scrollTop)?!0:(this.needsClick(l)||(t.preventDefault(),this.sendClick(l,t)),!1)},t.prototype.onTouchCancel=function(){this.trackingClick=!1,this.targetElement=null},t.prototype.onMouse=function(t){return this.targetElement?t.forwardedTouchEvent?!0:t.cancelable&&(!this.needsClick(this.targetElement)||this.cancelNextClick)?(t.stopImmediatePropagation?t.stopImmediatePropagation():t.propagationStopped=!0,t.stopPropagation(),t.preventDefault(),!1):!0:!0},t.prototype.onClick=function(t){var e;return this.trackingClick?(this.targetElement=null,this.trackingClick=!1,!0):"submit"===t.target.type&&0===t.detail?!0:(e=this.onMouse(t),e||(this.targetElement=null),e)},t.prototype.destroy=function(){var t=this.layer;n&&(t.removeEventListener("mouseover",this.onMouse,!0),t.removeEventListener("mousedown",this.onMouse,!0),t.removeEventListener("mouseup",this.onMouse,!0)),t.removeEventListener("click",this.onClick,!0),t.removeEventListener("touchstart",this.onTouchStart,!1),t.removeEventListener("touchmove",this.onTouchMove,!1),t.removeEventListener("touchend",this.onTouchEnd,!1),t.removeEventListener("touchcancel",this.onTouchCancel,!1)},t.notNeeded=function(t){var e,o,i,r;if("undefined"==typeof window.ontouchstart)return!0;if(o=+(/Chrome\/([0-9]+)/.exec(navigator.userAgent)||[,0])[1]){if(!n)return!0;if(e=document.querySelector("meta[name=viewport]")){if(-1!==e.content.indexOf("user-scalable=no"))return!0;if(o>31&&document.documentElement.scrollWidth<=window.outerWidth)return!0}}if(a&&(i=navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/),i[1]>=10&&i[2]>=3&&(e=document.querySelector("meta[name=viewport]")))){if(-1!==e.content.indexOf("user-scalable=no"))return!0;if(document.documentElement.scrollWidth<=window.outerWidth)return!0}return"none"===t.style.msTouchAction||"manipulation"===t.style.touchAction?!0:(r=+(/Firefox\/([0-9]+)/.exec(navigator.userAgent)||[,0])[1],r>=27&&(e=document.querySelector("meta[name=viewport]"),e&&(-1!==e.content.indexOf("user-scalable=no")||document.documentElement.scrollWidth<=window.outerWidth))?!0:"none"===t.style.touchAction||"manipulation"===t.style.touchAction?!0:!1)},t.attach=function(e,n){return new t(e,n)},"function"==typeof define&&"object"==typeof define.amd&&define.amd?define(function(){return t}):"undefined"!=typeof module&&module.exports?(module.exports=t.attach,module.exports.FastClick=t):window.FastClick=t}();
;
/*
    json2.js
    2014-02-04

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (typeof JSON !== 'object') {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function () {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear() + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate()) + 'T' +
                    f(this.getUTCHours()) + ':' +
                    f(this.getUTCMinutes()) + ':' +
                    f(this.getUTCSeconds()) + 'Z'
                : null;
        };

        String.prototype.toJSON =
            Number.prototype.toJSON =
            Boolean.prototype.toJSON = function () {
                return this.valueOf();
            };
    }

    var cx,
        escapable,
        gap,
        indent,
        meta,
        rep;


    function quote(string) {

        // If the string contains no control characters, no quote characters, and no
        // backslash characters, then we can safely slap some quotes around it.
        // Otherwise we must also replace the offending characters with safe escape
        // sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

        // Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

        // If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

        // If we were called with a replacer function, then call the replacer to
        // obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

        // What happens next depends on the value's type.

        switch (typeof value) {
            case 'string':
                return quote(value);

            case 'number':

                // JSON numbers must be finite. Encode non-finite numbers as null.

                return isFinite(value) ? String(value) : 'null';

            case 'boolean':
            case 'null':

                // If the value is a boolean or null, convert it to a string. Note:
                // typeof null does not produce 'null'. The case is included here in
                // the remote chance that this gets fixed someday.

                return String(value);

                // If the type is 'object', we might be dealing with an object or an array or
                // null.

            case 'object':

                // Due to a specification blunder in ECMAScript, typeof null is 'object',
                // so watch out for that case.

                if (!value) {
                    return 'null';
                }

                // Make an array to hold the partial results of stringifying this object value.

                gap += indent;
                partial = [];

                // Is the value an array?

                if (Object.prototype.toString.apply(value) === '[object Array]') {

                    // The value is an array. Stringify every element. Use null as a placeholder
                    // for non-JSON values.

                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || 'null';
                    }

                    // Join all of the elements together, separated with commas, and wrap them in
                    // brackets.

                    v = partial.length === 0
                        ? '[]'
                        : gap
                        ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                        : '[' + partial.join(',') + ']';
                    gap = mind;
                    return v;
                }

                // If the replacer is an array, use it to select the members to be stringified.

                if (rep && typeof rep === 'object') {
                    length = rep.length;
                    for (i = 0; i < length; i += 1) {
                        if (typeof rep[i] === 'string') {
                            k = rep[i];
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                } else {

                    // Otherwise, iterate through all of the keys in the object.

                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                }

                // Join all of the member texts together, separated with commas,
                // and wrap them in braces.

                v = partial.length === 0
                    ? '{}'
                    : gap
                    ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                    : '{' + partial.join(',') + '}';
                gap = mind;
                return v;
        }
    }

    // If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"': '\\"',
            '\\': '\\\\'
        };
        JSON.stringify = function (value, replacer, space) {

            // The stringify method takes a value and an optional replacer, and an optional
            // space parameter, and returns a JSON text. The replacer can be a function
            // that can replace values, or an array of strings that will select the keys.
            // A default replacer method can be provided. Use of the space parameter can
            // produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

            // If the space parameter is a number, make an indent string containing that
            // many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

                // If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

            // If there is a replacer, it must be a function or an array.
            // Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

            // Make a fake root object containing our value under the key of ''.
            // Return the result of stringifying the value.

            return str('', { '': value });
        };
    }


    // If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        JSON.parse = function (text, reviver) {

            // The parse method takes a text and an optional reviver function, and returns
            // a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

                // The walk method is used to recursively walk the resulting structure so
                // that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


            // Parsing happens in four stages. In the first stage, we replace certain
            // Unicode characters with escape sequences. JavaScript handles many characters
            // incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

            // In the second stage, we run the text against regular expressions that look
            // for non-JSON patterns. We are especially concerned with '()' and 'new'
            // because they can cause invocation, and '=' because it can cause mutation.
            // But just to be safe, we want to reject all unexpected forms.

            // We split the second stage into 4 regexp operations in order to work around
            // crippling inefficiencies in IE's and Safari's regexp engines. First we
            // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
            // replace all simple value tokens with ']' characters. Third, we delete all
            // open brackets that follow a colon or comma or that begin the text. Finally,
            // we look to see that the remaining characters are only whitespace or ']' or
            // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                // In the third stage we use the eval function to compile the text into a
                // JavaScript structure. The '{' operator is subject to a syntactic ambiguity
                // in JavaScript: it can begin a block or an object literal. We wrap the text
                // in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

                // In the optional fourth stage, we recursively walk the new structure, passing
                // each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({ '': j }, '')
                    : j;
            }

            // If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());
;
/* =========================================================
 * bootstrap-datepicker.js 
 * http://www.eyecon.ro/bootstrap-datepicker
 * =========================================================
 * Copyright 2012 Stefan Petre
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */
 
!function( $ ) {
	
	// Picker object
	
	var Datepicker = function(element, options){
		this.element = $(element);
		this.format = DPGlobal.parseFormat(options.format||this.element.data('date-format')||'mm/dd/yyyy');
		this.picker = $(DPGlobal.template)
							.appendTo('body')
							.on({
								click: $.proxy(this.click, this)//,
								//mousedown: $.proxy(this.mousedown, this)
							});
		this.isInput = this.element.is('input');
		this.component = this.element.is('.date') ? this.element.find('.add-on') : false;
		
		if (this.isInput) {
			this.element.on({
				focus: $.proxy(this.show, this),
				//blur: $.proxy(this.hide, this),
				keyup: $.proxy(this.update, this)
			});
		} else {
			if (this.component){
				this.component.on('click', $.proxy(this.show, this));
			} else {
				this.element.on('click', $.proxy(this.show, this));
			}
		}
	
		this.minViewMode = options.minViewMode||this.element.data('date-minviewmode')||0;
		if (typeof this.minViewMode === 'string') {
			switch (this.minViewMode) {
				case 'months':
					this.minViewMode = 1;
					break;
				case 'years':
					this.minViewMode = 2;
					break;
				default:
					this.minViewMode = 0;
					break;
			}
		}
		this.viewMode = options.viewMode||this.element.data('date-viewmode')||0;
		if (typeof this.viewMode === 'string') {
			switch (this.viewMode) {
				case 'months':
					this.viewMode = 1;
					break;
				case 'years':
					this.viewMode = 2;
					break;
				default:
					this.viewMode = 0;
					break;
			}
		}
		this.startViewMode = this.viewMode;
		this.weekStart = options.weekStart||this.element.data('date-weekstart')||0;
		this.weekEnd = this.weekStart === 0 ? 6 : this.weekStart - 1;
		this.onRender = options.onRender;
		this.fillDow();
		this.fillMonths();
		this.update();
		this.showMode();
	};
	
	Datepicker.prototype = {
		constructor: Datepicker,
		
		show: function(e) {
			this.picker.show();
			this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();
			this.place();
			$(window).on('resize', $.proxy(this.place, this));
			if (e ) {
				e.stopPropagation();
				e.preventDefault();
			}
			if (!this.isInput) {
			}
			var that = this;
			$(document).on('mousedown', function(ev){
				if ($(ev.target).closest('.datepicker').length == 0) {
					that.hide();
				}
			});
			this.element.trigger({
				type: 'show',
				date: this.date
			});
		},
		
		hide: function(){
			this.picker.hide();
			$(window).off('resize', this.place);
			this.viewMode = this.startViewMode;
			this.showMode();
			if (!this.isInput) {
				$(document).off('mousedown', this.hide);
			}
			//this.set();
			this.element.trigger({
				type: 'hide',
				date: this.date
			});
		},
		
		set: function() {
			var formated = DPGlobal.formatDate(this.date, this.format);
			if (!this.isInput) {
				if (this.component){
					this.element.find('input').prop('value', formated);
				}
				this.element.data('date', formated);
			} else {
				this.element.prop('value', formated);
			}
		},
		
		setValue: function(newDate) {
			if (typeof newDate === 'string') {
				this.date = DPGlobal.parseDate(newDate, this.format);
			} else {
				this.date = new Date(newDate);
			}
			this.set();
			this.viewDate = new Date(this.date.getFullYear(), this.date.getMonth(), 1, 0, 0, 0, 0);
			this.fill();
		},
		
		place: function(){
			var offset = this.component ? this.component.offset() : this.element.offset();
			this.picker.css({
				top: offset.top + this.height,
				left: offset.left
			});
		},
		
		update: function(newDate){
			this.date = DPGlobal.parseDate(
				typeof newDate === 'string' ? newDate : (this.isInput ? this.element.prop('value') : this.element.data('date')),
				this.format
			);
			this.viewDate = new Date(this.date.getFullYear(), this.date.getMonth(), 1, 0, 0, 0, 0);
			this.fill();
		},
		
		fillDow: function(){
			var dowCnt = this.weekStart;
			var html = '<tr>';
			while (dowCnt < this.weekStart + 7) {
				html += '<th class="dow">'+DPGlobal.dates.daysMin[(dowCnt++)%7]+'</th>';
			}
			html += '</tr>';
			this.picker.find('.datepicker-days thead').append(html);
		},
		
		fillMonths: function(){
			var html = '';
			var i = 0
			while (i < 12) {
				html += '<span class="month">'+DPGlobal.dates.monthsShort[i++]+'</span>';
			}
			this.picker.find('.datepicker-months td').append(html);
		},
		
		fill: function() {
			var d = new Date(this.viewDate),
				year = d.getFullYear(),
				month = d.getMonth(),
				currentDate = this.date.valueOf();
			this.picker.find('.datepicker-days th:eq(1)')
						.text(DPGlobal.dates.months[month]+' '+year);
			var prevMonth = new Date(year, month-1, 28,0,0,0,0),
				day = DPGlobal.getDaysInMonth(prevMonth.getFullYear(), prevMonth.getMonth());
			prevMonth.setDate(day);
			prevMonth.setDate(day - (prevMonth.getDay() - this.weekStart + 7)%7);
			var nextMonth = new Date(prevMonth);
			nextMonth.setDate(nextMonth.getDate() + 42);
			nextMonth = nextMonth.valueOf();
			var html = [];
			var clsName,
				prevY,
				prevM;
			while(prevMonth.valueOf() < nextMonth) {
				if (prevMonth.getDay() === this.weekStart) {
					html.push('<tr>');
				}
				clsName = this.onRender(prevMonth);
				prevY = prevMonth.getFullYear();
				prevM = prevMonth.getMonth();
				if ((prevM < month &&  prevY === year) ||  prevY < year) {
					clsName += ' old';
				} else if ((prevM > month && prevY === year) || prevY > year) {
					clsName += ' new';
				}
				if (prevMonth.valueOf() === currentDate) {
					clsName += ' active';
				}
				html.push('<td class="day '+clsName+'">'+prevMonth.getDate() + '</td>');
				if (prevMonth.getDay() === this.weekEnd) {
					html.push('</tr>');
				}
				prevMonth.setDate(prevMonth.getDate()+1);
			}
			this.picker.find('.datepicker-days tbody').empty().append(html.join(''));
			var currentYear = this.date.getFullYear();
			
			var months = this.picker.find('.datepicker-months')
						.find('th:eq(1)')
							.text(year)
							.end()
						.find('span').removeClass('active');
			if (currentYear === year) {
				months.eq(this.date.getMonth()).addClass('active');
			}
			
			html = '';
			year = parseInt(year/10, 10) * 10;
			var yearCont = this.picker.find('.datepicker-years')
								.find('th:eq(1)')
									.text(year + '-' + (year + 9))
									.end()
								.find('td');
			year -= 1;
			for (var i = -1; i < 11; i++) {
				html += '<span class="year'+(i === -1 || i === 10 ? ' old' : '')+(currentYear === year ? ' active' : '')+'">'+year+'</span>';
				year += 1;
			}
			yearCont.html(html);
		},
		
		click: function(e) {
			e.stopPropagation();
			e.preventDefault();
			var target = $(e.target).closest('span, td, th');
			if (target.length === 1) {
				switch(target[0].nodeName.toLowerCase()) {
					case 'th':
						switch(target[0].className) {
							case 'switch':
								this.showMode(1);
								break;
							case 'prev':
							case 'next':
								this.viewDate['set'+DPGlobal.modes[this.viewMode].navFnc].call(
									this.viewDate,
									this.viewDate['get'+DPGlobal.modes[this.viewMode].navFnc].call(this.viewDate) + 
									DPGlobal.modes[this.viewMode].navStep * (target[0].className === 'prev' ? -1 : 1)
								);
								this.fill();
								this.set();
								break;
						}
						break;
					case 'span':
						if (target.is('.month')) {
							var month = target.parent().find('span').index(target);
							this.viewDate.setMonth(month);
						} else {
							var year = parseInt(target.text(), 10)||0;
							this.viewDate.setFullYear(year);
						}
						if (this.viewMode !== 0) {
							this.date = new Date(this.viewDate);
							this.element.trigger({
								type: 'changeDate',
								date: this.date,
								viewMode: DPGlobal.modes[this.viewMode].clsName
							});
						}
						this.showMode(-1);
						this.fill();
						this.set();
						break;
					case 'td':
						if (target.is('.day') && !target.is('.disabled')){
							var day = parseInt(target.text(), 10)||1;
							var month = this.viewDate.getMonth();
							if (target.is('.old')) {
								month -= 1;
							} else if (target.is('.new')) {
								month += 1;
							}
							var year = this.viewDate.getFullYear();
							this.date = new Date(year, month, day,0,0,0,0);
							this.viewDate = new Date(year, month, Math.min(28, day),0,0,0,0);
							this.fill();
							this.set();
							this.element.trigger({
								type: 'changeDate',
								date: this.date,
								viewMode: DPGlobal.modes[this.viewMode].clsName
							});
						}
						break;
				}
			}
		},
		
		mousedown: function(e){
			e.stopPropagation();
			e.preventDefault();
		},
		
		showMode: function(dir) {
			if (dir) {
				this.viewMode = Math.max(this.minViewMode, Math.min(2, this.viewMode + dir));
			}
			this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();
		}
	};
	
	$.fn.datepicker = function ( option, val ) {
		return this.each(function () {
			var $this = $(this),
				data = $this.data('datepicker'),
				options = typeof option === 'object' && option;
			if (!data) {
				$this.data('datepicker', (data = new Datepicker(this, $.extend({}, $.fn.datepicker.defaults,options))));
			}
			if (typeof option === 'string') data[option](val);
		});
	};

	$.fn.datepicker.defaults = {
		onRender: function(date) {
			return '';
		}
	};
	$.fn.datepicker.Constructor = Datepicker;
	
	var DPGlobal = {
		modes: [
			{
				clsName: 'days',
				navFnc: 'Month',
				navStep: 1
			},
			{
				clsName: 'months',
				navFnc: 'FullYear',
				navStep: 1
			},
			{
				clsName: 'years',
				navFnc: 'FullYear',
				navStep: 10
		}],
		dates:{
			days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
			daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
			daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
			months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
		},
		isLeapYear: function (year) {
			return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0))
		},
		getDaysInMonth: function (year, month) {
			return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
		},
		parseFormat: function(format){
			var separator = format.match(/[.\/\-\s].*?/),
				parts = format.split(/\W+/);
			if (!separator || !parts || parts.length === 0){
				throw new Error("Invalid date format.");
			}
			return {separator: separator, parts: parts};
		},
		parseDate: function(date, format) {
			var parts = date.split(format.separator),
				date = new Date(),
				val;
			date.setHours(0);
			date.setMinutes(0);
			date.setSeconds(0);
			date.setMilliseconds(0);
			if (parts.length === format.parts.length) {
				var year = date.getFullYear(), day = date.getDate(), month = date.getMonth();
				for (var i=0, cnt = format.parts.length; i < cnt; i++) {
					val = parseInt(parts[i], 10)||1;
					switch(format.parts[i]) {
						case 'dd':
						case 'd':
							day = val;
							date.setDate(val);
							break;
						case 'mm':
						case 'm':
							month = val - 1;
							date.setMonth(val - 1);
							break;
						case 'yy':
							year = 2000 + val;
							date.setFullYear(2000 + val);
							break;
						case 'yyyy':
							year = val;
							date.setFullYear(val);
							break;
					}
				}
				date = new Date(year, month, day, 0 ,0 ,0);
			}
			return date;
		},
		formatDate: function(date, format){
			var val = {
				d: date.getDate(),
				m: date.getMonth() + 1,
				yy: date.getFullYear().toString().substring(2),
				yyyy: date.getFullYear()
			};
			val.dd = (val.d < 10 ? '0' : '') + val.d;
			val.mm = (val.m < 10 ? '0' : '') + val.m;
			var date = [];
			for (var i=0, cnt = format.parts.length; i < cnt; i++) {
				date.push(val[format.parts[i]]);
			}
			return date.join(format.separator);
		},
		headTemplate: '<thead>'+
							'<tr>'+
								'<th class="prev">&lsaquo;</th>'+
								'<th colspan="5" class="switch"></th>'+
								'<th class="next">&rsaquo;</th>'+
							'</tr>'+
						'</thead>',
		contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>'
	};
	DPGlobal.template = '<div class="datepicker dropdown-menu">'+
							'<div class="datepicker-days">'+
								'<table class=" table-condensed">'+
									DPGlobal.headTemplate+
									'<tbody></tbody>'+
								'</table>'+
							'</div>'+
							'<div class="datepicker-months">'+
								'<table class="table-condensed">'+
									DPGlobal.headTemplate+
									DPGlobal.contTemplate+
								'</table>'+
							'</div>'+
							'<div class="datepicker-years">'+
								'<table class="table-condensed">'+
									DPGlobal.headTemplate+
									DPGlobal.contTemplate+
								'</table>'+
							'</div>'+
						'</div>';

}( window.jQuery );
;
/*!
 * Datepicker for Bootstrap v1.6.4 (https://github.com/eternicode/bootstrap-datepicker)
 *
 * Copyright 2012 Stefan Petre
 * Improvements by Andrew Rowls
 * Licensed under the Apache License v2.0 (http://www.apache.org/licenses/LICENSE-2.0)
 */
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):a("object"==typeof exports?require("jquery"):jQuery)}(function(a,b){function c(){return new Date(Date.UTC.apply(Date,arguments))}function d(){var a=new Date;return c(a.getFullYear(),a.getMonth(),a.getDate())}function e(a,b){return a.getUTCFullYear()===b.getUTCFullYear()&&a.getUTCMonth()===b.getUTCMonth()&&a.getUTCDate()===b.getUTCDate()}function f(a){return function(){return this[a].apply(this,arguments)}}function g(a){return a&&!isNaN(a.getTime())}function h(b,c){function d(a,b){return b.toLowerCase()}var e,f=a(b).data(),g={},h=new RegExp("^"+c.toLowerCase()+"([A-Z])");c=new RegExp("^"+c.toLowerCase());for(var i in f)c.test(i)&&(e=i.replace(h,d),g[e]=f[i]);return g}function i(b){var c={};if(q[b]||(b=b.split("-")[0],q[b])){var d=q[b];return a.each(p,function(a,b){b in d&&(c[b]=d[b])}),c}}var j=function(){var b={get:function(a){return this.slice(a)[0]},contains:function(a){for(var b=a&&a.valueOf(),c=0,d=this.length;d>c;c++)if(this[c].valueOf()===b)return c;return-1},remove:function(a){this.splice(a,1)},replace:function(b){b&&(a.isArray(b)||(b=[b]),this.clear(),this.push.apply(this,b))},clear:function(){this.length=0},copy:function(){var a=new j;return a.replace(this),a}};return function(){var c=[];return c.push.apply(c,arguments),a.extend(c,b),c}}(),k=function(b,c){a(b).data("datepicker",this),this._process_options(c),this.dates=new j,this.viewDate=this.o.defaultViewDate,this.focusDate=null,this.element=a(b),this.isInput=this.element.is("input"),this.inputField=this.isInput?this.element:this.element.find("input"),this.component=this.element.hasClass("date")?this.element.find(".add-on, .input-group-addon, .btn"):!1,this.hasInput=this.component&&this.inputField.length,this.component&&0===this.component.length&&(this.component=!1),this.isInline=!this.component&&this.element.is("div"),this.picker=a(r.template),this._check_template(this.o.templates.leftArrow)&&this.picker.find(".prev").html(this.o.templates.leftArrow),this._check_template(this.o.templates.rightArrow)&&this.picker.find(".next").html(this.o.templates.rightArrow),this._buildEvents(),this._attachEvents(),this.isInline?this.picker.addClass("datepicker-inline").appendTo(this.element):this.picker.addClass("datepicker-dropdown dropdown-menu"),this.o.rtl&&this.picker.addClass("datepicker-rtl"),this.viewMode=this.o.startView,this.o.calendarWeeks&&this.picker.find("thead .datepicker-title, tfoot .today, tfoot .clear").attr("colspan",function(a,b){return parseInt(b)+1}),this._allow_update=!1,this.setStartDate(this._o.startDate),this.setEndDate(this._o.endDate),this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled),this.setDaysOfWeekHighlighted(this.o.daysOfWeekHighlighted),this.setDatesDisabled(this.o.datesDisabled),this.fillDow(),this.fillMonths(),this._allow_update=!0,this.update(),this.showMode(),this.isInline&&this.show()};k.prototype={constructor:k,_resolveViewName:function(a,c){return 0===a||"days"===a||"month"===a?0:1===a||"months"===a||"year"===a?1:2===a||"years"===a||"decade"===a?2:3===a||"decades"===a||"century"===a?3:4===a||"centuries"===a||"millennium"===a?4:c===b?!1:c},_check_template:function(c){try{if(c===b||""===c)return!1;if((c.match(/[<>]/g)||[]).length<=0)return!0;var d=a(c);return d.length>0}catch(e){return!1}},_process_options:function(b){this._o=a.extend({},this._o,b);var e=this.o=a.extend({},this._o),f=e.language;q[f]||(f=f.split("-")[0],q[f]||(f=o.language)),e.language=f,e.startView=this._resolveViewName(e.startView,0),e.minViewMode=this._resolveViewName(e.minViewMode,0),e.maxViewMode=this._resolveViewName(e.maxViewMode,4),e.startView=Math.min(e.startView,e.maxViewMode),e.startView=Math.max(e.startView,e.minViewMode),e.multidate!==!0&&(e.multidate=Number(e.multidate)||!1,e.multidate!==!1&&(e.multidate=Math.max(0,e.multidate))),e.multidateSeparator=String(e.multidateSeparator),e.weekStart%=7,e.weekEnd=(e.weekStart+6)%7;var g=r.parseFormat(e.format);e.startDate!==-(1/0)&&(e.startDate?e.startDate instanceof Date?e.startDate=this._local_to_utc(this._zero_time(e.startDate)):e.startDate=r.parseDate(e.startDate,g,e.language,e.assumeNearbyYear):e.startDate=-(1/0)),e.endDate!==1/0&&(e.endDate?e.endDate instanceof Date?e.endDate=this._local_to_utc(this._zero_time(e.endDate)):e.endDate=r.parseDate(e.endDate,g,e.language,e.assumeNearbyYear):e.endDate=1/0),e.daysOfWeekDisabled=e.daysOfWeekDisabled||[],a.isArray(e.daysOfWeekDisabled)||(e.daysOfWeekDisabled=e.daysOfWeekDisabled.split(/[,\s]*/)),e.daysOfWeekDisabled=a.map(e.daysOfWeekDisabled,function(a){return parseInt(a,10)}),e.daysOfWeekHighlighted=e.daysOfWeekHighlighted||[],a.isArray(e.daysOfWeekHighlighted)||(e.daysOfWeekHighlighted=e.daysOfWeekHighlighted.split(/[,\s]*/)),e.daysOfWeekHighlighted=a.map(e.daysOfWeekHighlighted,function(a){return parseInt(a,10)}),e.datesDisabled=e.datesDisabled||[],a.isArray(e.datesDisabled)||(e.datesDisabled=[e.datesDisabled]),e.datesDisabled=a.map(e.datesDisabled,function(a){return r.parseDate(a,g,e.language,e.assumeNearbyYear)});var h=String(e.orientation).toLowerCase().split(/\s+/g),i=e.orientation.toLowerCase();if(h=a.grep(h,function(a){return/^auto|left|right|top|bottom$/.test(a)}),e.orientation={x:"auto",y:"auto"},i&&"auto"!==i)if(1===h.length)switch(h[0]){case"top":case"bottom":e.orientation.y=h[0];break;case"left":case"right":e.orientation.x=h[0]}else i=a.grep(h,function(a){return/^left|right$/.test(a)}),e.orientation.x=i[0]||"auto",i=a.grep(h,function(a){return/^top|bottom$/.test(a)}),e.orientation.y=i[0]||"auto";else;if(e.defaultViewDate){var j=e.defaultViewDate.year||(new Date).getFullYear(),k=e.defaultViewDate.month||0,l=e.defaultViewDate.day||1;e.defaultViewDate=c(j,k,l)}else e.defaultViewDate=d()},_events:[],_secondaryEvents:[],_applyEvents:function(a){for(var c,d,e,f=0;f<a.length;f++)c=a[f][0],2===a[f].length?(d=b,e=a[f][1]):3===a[f].length&&(d=a[f][1],e=a[f][2]),c.on(e,d)},_unapplyEvents:function(a){for(var c,d,e,f=0;f<a.length;f++)c=a[f][0],2===a[f].length?(e=b,d=a[f][1]):3===a[f].length&&(e=a[f][1],d=a[f][2]),c.off(d,e)},_buildEvents:function(){var b={keyup:a.proxy(function(b){-1===a.inArray(b.keyCode,[27,37,39,38,40,32,13,9])&&this.update()},this),keydown:a.proxy(this.keydown,this),paste:a.proxy(this.paste,this)};this.o.showOnFocus===!0&&(b.focus=a.proxy(this.show,this)),this.isInput?this._events=[[this.element,b]]:this.component&&this.hasInput?this._events=[[this.inputField,b],[this.component,{click:a.proxy(this.show,this)}]]:this._events=[[this.element,{click:a.proxy(this.show,this),keydown:a.proxy(this.keydown,this)}]],this._events.push([this.element,"*",{blur:a.proxy(function(a){this._focused_from=a.target},this)}],[this.element,{blur:a.proxy(function(a){this._focused_from=a.target},this)}]),this.o.immediateUpdates&&this._events.push([this.element,{"changeYear changeMonth":a.proxy(function(a){this.update(a.date)},this)}]),this._secondaryEvents=[[this.picker,{click:a.proxy(this.click,this)}],[a(window),{resize:a.proxy(this.place,this)}],[a(document),{mousedown:a.proxy(function(a){this.element.is(a.target)||this.element.find(a.target).length||this.picker.is(a.target)||this.picker.find(a.target).length||this.isInline||this.hide()},this)}]]},_attachEvents:function(){this._detachEvents(),this._applyEvents(this._events)},_detachEvents:function(){this._unapplyEvents(this._events)},_attachSecondaryEvents:function(){this._detachSecondaryEvents(),this._applyEvents(this._secondaryEvents)},_detachSecondaryEvents:function(){this._unapplyEvents(this._secondaryEvents)},_trigger:function(b,c){var d=c||this.dates.get(-1),e=this._utc_to_local(d);this.element.trigger({type:b,date:e,dates:a.map(this.dates,this._utc_to_local),format:a.proxy(function(a,b){0===arguments.length?(a=this.dates.length-1,b=this.o.format):"string"==typeof a&&(b=a,a=this.dates.length-1),b=b||this.o.format;var c=this.dates.get(a);return r.formatDate(c,b,this.o.language)},this)})},show:function(){return this.inputField.prop("disabled")||this.inputField.prop("readonly")&&this.o.enableOnReadonly===!1?void 0:(this.isInline||this.picker.appendTo(this.o.container),this.place(),this.picker.show(),this._attachSecondaryEvents(),this._trigger("show"),(window.navigator.msMaxTouchPoints||"ontouchstart"in document)&&this.o.disableTouchKeyboard&&a(this.element).blur(),this)},hide:function(){return this.isInline||!this.picker.is(":visible")?this:(this.focusDate=null,this.picker.hide().detach(),this._detachSecondaryEvents(),this.viewMode=this.o.startView,this.showMode(),this.o.forceParse&&this.inputField.val()&&this.setValue(),this._trigger("hide"),this)},destroy:function(){return this.hide(),this._detachEvents(),this._detachSecondaryEvents(),this.picker.remove(),delete this.element.data().datepicker,this.isInput||delete this.element.data().date,this},paste:function(b){var c;if(b.originalEvent.clipboardData&&b.originalEvent.clipboardData.types&&-1!==a.inArray("text/plain",b.originalEvent.clipboardData.types))c=b.originalEvent.clipboardData.getData("text/plain");else{if(!window.clipboardData)return;c=window.clipboardData.getData("Text")}this.setDate(c),this.update(),b.preventDefault()},_utc_to_local:function(a){return a&&new Date(a.getTime()+6e4*a.getTimezoneOffset())},_local_to_utc:function(a){return a&&new Date(a.getTime()-6e4*a.getTimezoneOffset())},_zero_time:function(a){return a&&new Date(a.getFullYear(),a.getMonth(),a.getDate())},_zero_utc_time:function(a){return a&&new Date(Date.UTC(a.getUTCFullYear(),a.getUTCMonth(),a.getUTCDate()))},getDates:function(){return a.map(this.dates,this._utc_to_local)},getUTCDates:function(){return a.map(this.dates,function(a){return new Date(a)})},getDate:function(){return this._utc_to_local(this.getUTCDate())},getUTCDate:function(){var a=this.dates.get(-1);return"undefined"!=typeof a?new Date(a):null},clearDates:function(){this.inputField&&this.inputField.val(""),this.update(),this._trigger("changeDate"),this.o.autoclose&&this.hide()},setDates:function(){var b=a.isArray(arguments[0])?arguments[0]:arguments;return this.update.apply(this,b),this._trigger("changeDate"),this.setValue(),this},setUTCDates:function(){var b=a.isArray(arguments[0])?arguments[0]:arguments;return this.update.apply(this,a.map(b,this._utc_to_local)),this._trigger("changeDate"),this.setValue(),this},setDate:f("setDates"),setUTCDate:f("setUTCDates"),remove:f("destroy"),setValue:function(){var a=this.getFormattedDate();return this.inputField.val(a),this},getFormattedDate:function(c){c===b&&(c=this.o.format);var d=this.o.language;return a.map(this.dates,function(a){return r.formatDate(a,c,d)}).join(this.o.multidateSeparator)},getStartDate:function(){return this.o.startDate},setStartDate:function(a){return this._process_options({startDate:a}),this.update(),this.updateNavArrows(),this},getEndDate:function(){return this.o.endDate},setEndDate:function(a){return this._process_options({endDate:a}),this.update(),this.updateNavArrows(),this},setDaysOfWeekDisabled:function(a){return this._process_options({daysOfWeekDisabled:a}),this.update(),this.updateNavArrows(),this},setDaysOfWeekHighlighted:function(a){return this._process_options({daysOfWeekHighlighted:a}),this.update(),this},setDatesDisabled:function(a){this._process_options({datesDisabled:a}),this.update(),this.updateNavArrows()},place:function(){if(this.isInline)return this;var b=this.picker.outerWidth(),c=this.picker.outerHeight(),d=10,e=a(this.o.container),f=e.width(),g="body"===this.o.container?a(document).scrollTop():e.scrollTop(),h=e.offset(),i=[];this.element.parents().each(function(){var b=a(this).css("z-index");"auto"!==b&&0!==b&&i.push(parseInt(b))});var j=Math.max.apply(Math,i)+this.o.zIndexOffset,k=this.component?this.component.parent().offset():this.element.offset(),l=this.component?this.component.outerHeight(!0):this.element.outerHeight(!1),m=this.component?this.component.outerWidth(!0):this.element.outerWidth(!1),n=k.left-h.left,o=k.top-h.top;"body"!==this.o.container&&(o+=g),this.picker.removeClass("datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left"),"auto"!==this.o.orientation.x?(this.picker.addClass("datepicker-orient-"+this.o.orientation.x),"right"===this.o.orientation.x&&(n-=b-m)):k.left<0?(this.picker.addClass("datepicker-orient-left"),n-=k.left-d):n+b>f?(this.picker.addClass("datepicker-orient-right"),n+=m-b):this.picker.addClass("datepicker-orient-left");var p,q=this.o.orientation.y;if("auto"===q&&(p=-g+o-c,q=0>p?"bottom":"top"),this.picker.addClass("datepicker-orient-"+q),"top"===q?o-=c+parseInt(this.picker.css("padding-top")):o+=l,this.o.rtl){var r=f-(n+m);this.picker.css({top:o,right:r,zIndex:j})}else this.picker.css({top:o,left:n,zIndex:j});return this},_allow_update:!0,update:function(){if(!this._allow_update)return this;var b=this.dates.copy(),c=[],d=!1;return arguments.length?(a.each(arguments,a.proxy(function(a,b){b instanceof Date&&(b=this._local_to_utc(b)),c.push(b)},this)),d=!0):(c=this.isInput?this.element.val():this.element.data("date")||this.inputField.val(),c=c&&this.o.multidate?c.split(this.o.multidateSeparator):[c],delete this.element.data().date),c=a.map(c,a.proxy(function(a){return r.parseDate(a,this.o.format,this.o.language,this.o.assumeNearbyYear)},this)),c=a.grep(c,a.proxy(function(a){return!this.dateWithinRange(a)||!a},this),!0),this.dates.replace(c),this.dates.length?this.viewDate=new Date(this.dates.get(-1)):this.viewDate<this.o.startDate?this.viewDate=new Date(this.o.startDate):this.viewDate>this.o.endDate?this.viewDate=new Date(this.o.endDate):this.viewDate=this.o.defaultViewDate,d?this.setValue():c.length&&String(b)!==String(this.dates)&&this._trigger("changeDate"),!this.dates.length&&b.length&&this._trigger("clearDate"),this.fill(),this.element.change(),this},fillDow:function(){var b=this.o.weekStart,c="<tr>";for(this.o.calendarWeeks&&(this.picker.find(".datepicker-days .datepicker-switch").attr("colspan",function(a,b){return parseInt(b)+1}),c+='<th class="cw">&#160;</th>');b<this.o.weekStart+7;)c+='<th class="dow',a.inArray(b,this.o.daysOfWeekDisabled)>-1&&(c+=" disabled"),c+='">'+q[this.o.language].daysMin[b++%7]+"</th>";c+="</tr>",this.picker.find(".datepicker-days thead").append(c)},fillMonths:function(){for(var a=this._utc_to_local(this.viewDate),b="",c=0;12>c;){var d=a&&a.getMonth()===c?" focused":"";b+='<span class="month'+d+'">'+q[this.o.language].monthsShort[c++]+"</span>"}this.picker.find(".datepicker-months td").html(b)},setRange:function(b){b&&b.length?this.range=a.map(b,function(a){return a.valueOf()}):delete this.range,this.fill()},getClassNames:function(b){var c=[],d=this.viewDate.getUTCFullYear(),e=this.viewDate.getUTCMonth(),f=new Date;return b.getUTCFullYear()<d||b.getUTCFullYear()===d&&b.getUTCMonth()<e?c.push("old"):(b.getUTCFullYear()>d||b.getUTCFullYear()===d&&b.getUTCMonth()>e)&&c.push("new"),this.focusDate&&b.valueOf()===this.focusDate.valueOf()&&c.push("focused"),this.o.todayHighlight&&b.getUTCFullYear()===f.getFullYear()&&b.getUTCMonth()===f.getMonth()&&b.getUTCDate()===f.getDate()&&c.push("today"),-1!==this.dates.contains(b)&&c.push("active"),this.dateWithinRange(b)||c.push("disabled"),this.dateIsDisabled(b)&&c.push("disabled","disabled-date"),-1!==a.inArray(b.getUTCDay(),this.o.daysOfWeekHighlighted)&&c.push("highlighted"),this.range&&(b>this.range[0]&&b<this.range[this.range.length-1]&&c.push("range"),-1!==a.inArray(b.valueOf(),this.range)&&c.push("selected"),b.valueOf()===this.range[0]&&c.push("range-start"),b.valueOf()===this.range[this.range.length-1]&&c.push("range-end")),c},_fill_yearsView:function(c,d,e,f,g,h,i,j){var k,l,m,n,o,p,q,r,s,t,u;for(k="",l=this.picker.find(c),m=parseInt(g/e,10)*e,o=parseInt(h/f,10)*f,p=parseInt(i/f,10)*f,n=a.map(this.dates,function(a){return parseInt(a.getUTCFullYear()/f,10)*f}),l.find(".datepicker-switch").text(m+"-"+(m+9*f)),q=m-f,r=-1;11>r;r+=1)s=[d],t=null,-1===r?s.push("old"):10===r&&s.push("new"),-1!==a.inArray(q,n)&&s.push("active"),(o>q||q>p)&&s.push("disabled"),q===this.viewDate.getFullYear()&&s.push("focused"),j!==a.noop&&(u=j(new Date(q,0,1)),u===b?u={}:"boolean"==typeof u?u={enabled:u}:"string"==typeof u&&(u={classes:u}),u.enabled===!1&&s.push("disabled"),u.classes&&(s=s.concat(u.classes.split(/\s+/))),u.tooltip&&(t=u.tooltip)),k+='<span class="'+s.join(" ")+'"'+(t?' title="'+t+'"':"")+">"+q+"</span>",q+=f;l.find("td").html(k)},fill:function(){var d,e,f=new Date(this.viewDate),g=f.getUTCFullYear(),h=f.getUTCMonth(),i=this.o.startDate!==-(1/0)?this.o.startDate.getUTCFullYear():-(1/0),j=this.o.startDate!==-(1/0)?this.o.startDate.getUTCMonth():-(1/0),k=this.o.endDate!==1/0?this.o.endDate.getUTCFullYear():1/0,l=this.o.endDate!==1/0?this.o.endDate.getUTCMonth():1/0,m=q[this.o.language].today||q.en.today||"",n=q[this.o.language].clear||q.en.clear||"",o=q[this.o.language].titleFormat||q.en.titleFormat;if(!isNaN(g)&&!isNaN(h)){this.picker.find(".datepicker-days .datepicker-switch").text(r.formatDate(f,o,this.o.language)),this.picker.find("tfoot .today").text(m).toggle(this.o.todayBtn!==!1),this.picker.find("tfoot .clear").text(n).toggle(this.o.clearBtn!==!1),this.picker.find("thead .datepicker-title").text(this.o.title).toggle(""!==this.o.title),this.updateNavArrows(),this.fillMonths();var p=c(g,h-1,28),s=r.getDaysInMonth(p.getUTCFullYear(),p.getUTCMonth());p.setUTCDate(s),p.setUTCDate(s-(p.getUTCDay()-this.o.weekStart+7)%7);var t=new Date(p);p.getUTCFullYear()<100&&t.setUTCFullYear(p.getUTCFullYear()),t.setUTCDate(t.getUTCDate()+42),t=t.valueOf();for(var u,v=[];p.valueOf()<t;){if(p.getUTCDay()===this.o.weekStart&&(v.push("<tr>"),this.o.calendarWeeks)){var w=new Date(+p+(this.o.weekStart-p.getUTCDay()-7)%7*864e5),x=new Date(Number(w)+(11-w.getUTCDay())%7*864e5),y=new Date(Number(y=c(x.getUTCFullYear(),0,1))+(11-y.getUTCDay())%7*864e5),z=(x-y)/864e5/7+1;v.push('<td class="cw">'+z+"</td>")}u=this.getClassNames(p),u.push("day"),this.o.beforeShowDay!==a.noop&&(e=this.o.beforeShowDay(this._utc_to_local(p)),e===b?e={}:"boolean"==typeof e?e={enabled:e}:"string"==typeof e&&(e={classes:e}),e.enabled===!1&&u.push("disabled"),e.classes&&(u=u.concat(e.classes.split(/\s+/))),e.tooltip&&(d=e.tooltip)),u=a.isFunction(a.uniqueSort)?a.uniqueSort(u):a.unique(u),v.push('<td class="'+u.join(" ")+'"'+(d?' title="'+d+'"':"")+">"+p.getUTCDate()+"</td>"),d=null,p.getUTCDay()===this.o.weekEnd&&v.push("</tr>"),p.setUTCDate(p.getUTCDate()+1)}this.picker.find(".datepicker-days tbody").empty().append(v.join(""));var A=q[this.o.language].monthsTitle||q.en.monthsTitle||"Months",B=this.picker.find(".datepicker-months").find(".datepicker-switch").text(this.o.maxViewMode<2?A:g).end().find("span").removeClass("active");if(a.each(this.dates,function(a,b){b.getUTCFullYear()===g&&B.eq(b.getUTCMonth()).addClass("active")}),(i>g||g>k)&&B.addClass("disabled"),g===i&&B.slice(0,j).addClass("disabled"),g===k&&B.slice(l+1).addClass("disabled"),this.o.beforeShowMonth!==a.noop){var C=this;a.each(B,function(c,d){var e=new Date(g,c,1),f=C.o.beforeShowMonth(e);f===b?f={}:"boolean"==typeof f?f={enabled:f}:"string"==typeof f&&(f={classes:f}),f.enabled!==!1||a(d).hasClass("disabled")||a(d).addClass("disabled"),f.classes&&a(d).addClass(f.classes),f.tooltip&&a(d).prop("title",f.tooltip)})}this._fill_yearsView(".datepicker-years","year",10,1,g,i,k,this.o.beforeShowYear),this._fill_yearsView(".datepicker-decades","decade",100,10,g,i,k,this.o.beforeShowDecade),this._fill_yearsView(".datepicker-centuries","century",1e3,100,g,i,k,this.o.beforeShowCentury)}},updateNavArrows:function(){if(this._allow_update){var a=new Date(this.viewDate),b=a.getUTCFullYear(),c=a.getUTCMonth();switch(this.viewMode){case 0:this.o.startDate!==-(1/0)&&b<=this.o.startDate.getUTCFullYear()&&c<=this.o.startDate.getUTCMonth()?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"}),this.o.endDate!==1/0&&b>=this.o.endDate.getUTCFullYear()&&c>=this.o.endDate.getUTCMonth()?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"});break;case 1:case 2:case 3:case 4:this.o.startDate!==-(1/0)&&b<=this.o.startDate.getUTCFullYear()||this.o.maxViewMode<2?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"}),this.o.endDate!==1/0&&b>=this.o.endDate.getUTCFullYear()||this.o.maxViewMode<2?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"})}}},click:function(b){b.preventDefault(),b.stopPropagation();var e,f,g,h,i,j,k;e=a(b.target),e.hasClass("datepicker-switch")&&this.showMode(1);var l=e.closest(".prev, .next");l.length>0&&(f=r.modes[this.viewMode].navStep*(l.hasClass("prev")?-1:1),0===this.viewMode?(this.viewDate=this.moveMonth(this.viewDate,f),this._trigger("changeMonth",this.viewDate)):(this.viewDate=this.moveYear(this.viewDate,f),1===this.viewMode&&this._trigger("changeYear",this.viewDate)),this.fill()),e.hasClass("today")&&!e.hasClass("day")&&(this.showMode(-2),this._setDate(d(),"linked"===this.o.todayBtn?null:"view")),e.hasClass("clear")&&this.clearDates(),e.hasClass("disabled")||(e.hasClass("day")&&(g=parseInt(e.text(),10)||1,h=this.viewDate.getUTCFullYear(),i=this.viewDate.getUTCMonth(),e.hasClass("old")&&(0===i?(i=11,h-=1,j=!0,k=!0):(i-=1,j=!0)),e.hasClass("new")&&(11===i?(i=0,h+=1,j=!0,k=!0):(i+=1,j=!0)),this._setDate(c(h,i,g)),k&&this._trigger("changeYear",this.viewDate),j&&this._trigger("changeMonth",this.viewDate)),e.hasClass("month")&&(this.viewDate.setUTCDate(1),g=1,i=e.parent().find("span").index(e),h=this.viewDate.getUTCFullYear(),this.viewDate.setUTCMonth(i),this._trigger("changeMonth",this.viewDate),1===this.o.minViewMode?(this._setDate(c(h,i,g)),this.showMode()):this.showMode(-1),this.fill()),(e.hasClass("year")||e.hasClass("decade")||e.hasClass("century"))&&(this.viewDate.setUTCDate(1),g=1,i=0,h=parseInt(e.text(),10)||0,this.viewDate.setUTCFullYear(h),e.hasClass("year")&&(this._trigger("changeYear",this.viewDate),2===this.o.minViewMode&&this._setDate(c(h,i,g))),e.hasClass("decade")&&(this._trigger("changeDecade",this.viewDate),3===this.o.minViewMode&&this._setDate(c(h,i,g))),e.hasClass("century")&&(this._trigger("changeCentury",this.viewDate),4===this.o.minViewMode&&this._setDate(c(h,i,g))),this.showMode(-1),this.fill())),this.picker.is(":visible")&&this._focused_from&&a(this._focused_from).focus(),delete this._focused_from},_toggle_multidate:function(a){var b=this.dates.contains(a);if(a||this.dates.clear(),-1!==b?(this.o.multidate===!0||this.o.multidate>1||this.o.toggleActive)&&this.dates.remove(b):this.o.multidate===!1?(this.dates.clear(),this.dates.push(a)):this.dates.push(a),"number"==typeof this.o.multidate)for(;this.dates.length>this.o.multidate;)this.dates.remove(0)},_setDate:function(a,b){b&&"date"!==b||this._toggle_multidate(a&&new Date(a)),b&&"view"!==b||(this.viewDate=a&&new Date(a)),this.fill(),this.setValue(),b&&"view"===b||this._trigger("changeDate"),this.inputField&&this.inputField.change(),!this.o.autoclose||b&&"date"!==b||this.hide()},moveDay:function(a,b){var c=new Date(a);return c.setUTCDate(a.getUTCDate()+b),c},moveWeek:function(a,b){return this.moveDay(a,7*b)},moveMonth:function(a,b){if(!g(a))return this.o.defaultViewDate;if(!b)return a;var c,d,e=new Date(a.valueOf()),f=e.getUTCDate(),h=e.getUTCMonth(),i=Math.abs(b);if(b=b>0?1:-1,1===i)d=-1===b?function(){return e.getUTCMonth()===h}:function(){return e.getUTCMonth()!==c},c=h+b,e.setUTCMonth(c),(0>c||c>11)&&(c=(c+12)%12);else{for(var j=0;i>j;j++)e=this.moveMonth(e,b);c=e.getUTCMonth(),e.setUTCDate(f),d=function(){return c!==e.getUTCMonth()}}for(;d();)e.setUTCDate(--f),e.setUTCMonth(c);return e},moveYear:function(a,b){return this.moveMonth(a,12*b)},moveAvailableDate:function(a,b,c){do{if(a=this[c](a,b),!this.dateWithinRange(a))return!1;c="moveDay"}while(this.dateIsDisabled(a));return a},weekOfDateIsDisabled:function(b){return-1!==a.inArray(b.getUTCDay(),this.o.daysOfWeekDisabled)},dateIsDisabled:function(b){return this.weekOfDateIsDisabled(b)||a.grep(this.o.datesDisabled,function(a){return e(b,a)}).length>0},dateWithinRange:function(a){return a>=this.o.startDate&&a<=this.o.endDate},keydown:function(a){if(!this.picker.is(":visible"))return void((40===a.keyCode||27===a.keyCode)&&(this.show(),a.stopPropagation()));var b,c,d=!1,e=this.focusDate||this.viewDate;switch(a.keyCode){case 27:this.focusDate?(this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.fill()):this.hide(),a.preventDefault(),a.stopPropagation();break;case 37:case 38:case 39:case 40:if(!this.o.keyboardNavigation||7===this.o.daysOfWeekDisabled.length)break;b=37===a.keyCode||38===a.keyCode?-1:1,0===this.viewMode?a.ctrlKey?(c=this.moveAvailableDate(e,b,"moveYear"),c&&this._trigger("changeYear",this.viewDate)):a.shiftKey?(c=this.moveAvailableDate(e,b,"moveMonth"),c&&this._trigger("changeMonth",this.viewDate)):37===a.keyCode||39===a.keyCode?c=this.moveAvailableDate(e,b,"moveDay"):this.weekOfDateIsDisabled(e)||(c=this.moveAvailableDate(e,b,"moveWeek")):1===this.viewMode?((38===a.keyCode||40===a.keyCode)&&(b=4*b),c=this.moveAvailableDate(e,b,"moveMonth")):2===this.viewMode&&((38===a.keyCode||40===a.keyCode)&&(b=4*b),c=this.moveAvailableDate(e,b,"moveYear")),c&&(this.focusDate=this.viewDate=c,this.setValue(),this.fill(),a.preventDefault());break;case 13:if(!this.o.forceParse)break;e=this.focusDate||this.dates.get(-1)||this.viewDate,this.o.keyboardNavigation&&(this._toggle_multidate(e),d=!0),this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.setValue(),this.fill(),this.picker.is(":visible")&&(a.preventDefault(),a.stopPropagation(),this.o.autoclose&&this.hide());break;case 9:this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.fill(),this.hide()}d&&(this.dates.length?this._trigger("changeDate"):this._trigger("clearDate"),this.inputField&&this.inputField.change())},showMode:function(a){a&&(this.viewMode=Math.max(this.o.minViewMode,Math.min(this.o.maxViewMode,this.viewMode+a))),this.picker.children("div").hide().filter(".datepicker-"+r.modes[this.viewMode].clsName).show(),this.updateNavArrows()}};var l=function(b,c){a(b).data("datepicker",this),this.element=a(b),this.inputs=a.map(c.inputs,function(a){return a.jquery?a[0]:a}),delete c.inputs,n.call(a(this.inputs),c).on("changeDate",a.proxy(this.dateUpdated,this)),this.pickers=a.map(this.inputs,function(b){return a(b).data("datepicker")}),this.updateDates()};l.prototype={updateDates:function(){this.dates=a.map(this.pickers,function(a){return a.getUTCDate()}),this.updateRanges()},updateRanges:function(){var b=a.map(this.dates,function(a){return a.valueOf()});a.each(this.pickers,function(a,c){c.setRange(b)})},dateUpdated:function(b){if(!this.updating){this.updating=!0;var c=a(b.target).data("datepicker");if("undefined"!=typeof c){var d=c.getUTCDate(),e=a.inArray(b.target,this.inputs),f=e-1,g=e+1,h=this.inputs.length;if(-1!==e){if(a.each(this.pickers,function(a,b){b.getUTCDate()||b.setUTCDate(d)}),d<this.dates[f])for(;f>=0&&d<this.dates[f];)this.pickers[f--].setUTCDate(d);else if(d>this.dates[g])for(;h>g&&d>this.dates[g];)this.pickers[g++].setUTCDate(d);this.updateDates(),delete this.updating}}}},remove:function(){a.map(this.pickers,function(a){a.remove()}),delete this.element.data().datepicker}};var m=a.fn.datepicker,n=function(c){var d=Array.apply(null,arguments);d.shift();var e;if(this.each(function(){var b=a(this),f=b.data("datepicker"),g="object"==typeof c&&c;if(!f){var j=h(this,"date"),m=a.extend({},o,j,g),n=i(m.language),p=a.extend({},o,n,j,g);b.hasClass("input-daterange")||p.inputs?(a.extend(p,{inputs:p.inputs||b.find("input").toArray()}),f=new l(this,p)):f=new k(this,p),b.data("datepicker",f)}"string"==typeof c&&"function"==typeof f[c]&&(e=f[c].apply(f,d))}),e===b||e instanceof k||e instanceof l)return this;if(this.length>1)throw new Error("Using only allowed for the collection of a single element ("+c+" function)");return e};a.fn.datepicker=n;var o=a.fn.datepicker.defaults={assumeNearbyYear:!1,autoclose:!1,beforeShowDay:a.noop,beforeShowMonth:a.noop,beforeShowYear:a.noop,beforeShowDecade:a.noop,beforeShowCentury:a.noop,calendarWeeks:!1,clearBtn:!1,toggleActive:!1,daysOfWeekDisabled:[],daysOfWeekHighlighted:[],datesDisabled:[],endDate:1/0,forceParse:!0,format:"mm/dd/yyyy",keyboardNavigation:!0,language:"en",minViewMode:0,maxViewMode:4,multidate:!1,multidateSeparator:",",orientation:"auto",rtl:!1,startDate:-(1/0),startView:0,todayBtn:!1,todayHighlight:!1,weekStart:0,disableTouchKeyboard:!1,enableOnReadonly:!0,showOnFocus:!0,zIndexOffset:10,container:"body",immediateUpdates:!1,title:"",templates:{leftArrow:"&laquo;",rightArrow:"&raquo;"}},p=a.fn.datepicker.locale_opts=["format","rtl","weekStart"];a.fn.datepicker.Constructor=k;var q=a.fn.datepicker.dates={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear",titleFormat:"MM yyyy"}},r={modes:[{clsName:"days",navFnc:"Month",navStep:1},{clsName:"months",navFnc:"FullYear",navStep:1},{clsName:"years",navFnc:"FullYear",navStep:10},{clsName:"decades",navFnc:"FullDecade",navStep:100},{clsName:"centuries",navFnc:"FullCentury",navStep:1e3}],isLeapYear:function(a){return a%4===0&&a%100!==0||a%400===0},getDaysInMonth:function(a,b){return[31,r.isLeapYear(a)?29:28,31,30,31,30,31,31,30,31,30,31][b]},validParts:/dd?|DD?|mm?|MM?|yy(?:yy)?/g,nonpunctuation:/[^ -\/:-@\u5e74\u6708\u65e5\[-`{-~\t\n\r]+/g,parseFormat:function(a){if("function"==typeof a.toValue&&"function"==typeof a.toDisplay)return a;var b=a.replace(this.validParts,"\x00").split("\x00"),c=a.match(this.validParts);if(!b||!b.length||!c||0===c.length)throw new Error("Invalid date format.");return{separators:b,parts:c}},parseDate:function(e,f,g,h){function i(a,b){return b===!0&&(b=10),100>a&&(a+=2e3,a>(new Date).getFullYear()+b&&(a-=100)),a}function j(){var a=this.slice(0,s[n].length),b=s[n].slice(0,a.length);return a.toLowerCase()===b.toLowerCase()}if(!e)return b;if(e instanceof Date)return e;if("string"==typeof f&&(f=r.parseFormat(f)),f.toValue)return f.toValue(e,f,g);var l,m,n,o,p=/([\-+]\d+)([dmwy])/,s=e.match(/([\-+]\d+)([dmwy])/g),t={d:"moveDay",m:"moveMonth",w:"moveWeek",y:"moveYear"},u={yesterday:"-1d",today:"+0d",tomorrow:"+1d"};if(/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(e)){for(e=new Date,n=0;n<s.length;n++)l=p.exec(s[n]),m=parseInt(l[1]),o=t[l[2]],e=k.prototype[o](e,m);return c(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate())}if("undefined"!=typeof u[e]&&(e=u[e],s=e.match(/([\-+]\d+)([dmwy])/g),/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(e))){for(e=new Date,n=0;n<s.length;n++)l=p.exec(s[n]),m=parseInt(l[1]),o=t[l[2]],e=k.prototype[o](e,m);return c(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate())}s=e&&e.match(this.nonpunctuation)||[],e=new Date;var v,w,x={},y=["yyyy","yy","M","MM","m","mm","d","dd"],z={yyyy:function(a,b){return a.setUTCFullYear(h?i(b,h):b)},yy:function(a,b){return a.setUTCFullYear(h?i(b,h):b)},m:function(a,b){if(isNaN(a))return a;for(b-=1;0>b;)b+=12;for(b%=12,a.setUTCMonth(b);a.getUTCMonth()!==b;)a.setUTCDate(a.getUTCDate()-1);return a},d:function(a,b){return a.setUTCDate(b)}};z.M=z.MM=z.mm=z.m,z.dd=z.d,e=d();var A=f.parts.slice();if(s.length!==A.length&&(A=a(A).filter(function(b,c){return-1!==a.inArray(c,y)}).toArray()),s.length===A.length){var B;for(n=0,B=A.length;B>n;n++){if(v=parseInt(s[n],10),l=A[n],isNaN(v))switch(l){case"MM":w=a(q[g].months).filter(j),v=a.inArray(w[0],q[g].months)+1;break;case"M":w=a(q[g].monthsShort).filter(j),v=a.inArray(w[0],q[g].monthsShort)+1}x[l]=v}var C,D;for(n=0;n<y.length;n++)D=y[n],D in x&&!isNaN(x[D])&&(C=new Date(e),z[D](C,x[D]),isNaN(C)||(e=C))}return e},formatDate:function(b,c,d){if(!b)return"";if("string"==typeof c&&(c=r.parseFormat(c)),
c.toDisplay)return c.toDisplay(b,c,d);var e={d:b.getUTCDate(),D:q[d].daysShort[b.getUTCDay()],DD:q[d].days[b.getUTCDay()],m:b.getUTCMonth()+1,M:q[d].monthsShort[b.getUTCMonth()],MM:q[d].months[b.getUTCMonth()],yy:b.getUTCFullYear().toString().substring(2),yyyy:b.getUTCFullYear()};e.dd=(e.d<10?"0":"")+e.d,e.mm=(e.m<10?"0":"")+e.m,b=[];for(var f=a.extend([],c.separators),g=0,h=c.parts.length;h>=g;g++)f.length&&b.push(f.shift()),b.push(e[c.parts[g]]);return b.join("")},headTemplate:'<thead><tr><th colspan="7" class="datepicker-title"></th></tr><tr><th class="prev">&laquo;</th><th colspan="5" class="datepicker-switch"></th><th class="next">&raquo;</th></tr></thead>',contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>',footTemplate:'<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'};r.template='<div class="datepicker"><div class="datepicker-days"><table class="table-condensed">'+r.headTemplate+"<tbody></tbody>"+r.footTemplate+'</table></div><div class="datepicker-months"><table class="table-condensed">'+r.headTemplate+r.contTemplate+r.footTemplate+'</table></div><div class="datepicker-years"><table class="table-condensed">'+r.headTemplate+r.contTemplate+r.footTemplate+'</table></div><div class="datepicker-decades"><table class="table-condensed">'+r.headTemplate+r.contTemplate+r.footTemplate+'</table></div><div class="datepicker-centuries"><table class="table-condensed">'+r.headTemplate+r.contTemplate+r.footTemplate+"</table></div></div>",a.fn.datepicker.DPGlobal=r,a.fn.datepicker.noConflict=function(){return a.fn.datepicker=m,this},a.fn.datepicker.version="1.6.4",a(document).on("focus.datepicker.data-api click.datepicker.data-api",'[data-provide="datepicker"]',function(b){var c=a(this);c.data("datepicker")||(b.preventDefault(),n.call(c,"show"))}),a(function(){n.call(a('[data-provide="datepicker-inline"]'))})});
;
!function (c) { function f() { return new Date(Date.UTC.apply(Date, arguments)) } function a() { var g = new Date(); return f(g.getUTCFullYear(), g.getUTCMonth(), g.getUTCDate(), g.getUTCHours(), g.getUTCMinutes(), g.getUTCSeconds(), 0) } var e = function (h, g) { var i = this; this.element = c(h); this.container = g.container || "body"; this.language = g.language || this.element.data("date-language") || "en"; this.language = this.language in d ? this.language : "en"; this.isRTL = d[this.language].rtl || false; this.formatType = g.formatType || this.element.data("format-type") || "standard"; this.format = b.parseFormat(g.format || this.element.data("date-format") || d[this.language].format || b.getDefaultFormat(this.formatType, "input"), this.formatType); this.isInline = false; this.isVisible = false; this.isInput = this.element.is("input"); this.bootcssVer = this.isInput ? (this.element.is(".form-control") ? 3 : 2) : (this.bootcssVer = this.element.is(".input-group") ? 3 : 2); this.component = this.element.is(".date") ? (this.bootcssVer == 3 ? this.element.find(".input-group-addon .glyphicon-th, .input-group-addon .glyphicon-time, .input-group-addon .glyphicon-calendar").parent() : this.element.find(".add-on .icon-th, .add-on .icon-time, .add-on .icon-calendar").parent()) : false; this.componentReset = this.element.is(".date") ? (this.bootcssVer == 3 ? this.element.find(".input-group-addon .glyphicon-remove").parent() : this.element.find(".add-on .icon-remove").parent()) : false; this.hasInput = this.component && this.element.find("input").length; if (this.component && this.component.length === 0) { this.component = false } this.linkField = g.linkField || this.element.data("link-field") || false; this.linkFormat = b.parseFormat(g.linkFormat || this.element.data("link-format") || b.getDefaultFormat(this.formatType, "link"), this.formatType); this.minuteStep = g.minuteStep || this.element.data("minute-step") || 5; this.pickerPosition = g.pickerPosition || this.element.data("picker-position") || "bottom-right"; this.showMeridian = g.showMeridian || this.element.data("show-meridian") || false; this.initialDate = g.initialDate || new Date(); this._attachEvents(); this.formatViewType = "datetime"; if ("formatViewType" in g) { this.formatViewType = g.formatViewType } else { if ("formatViewType" in this.element.data()) { this.formatViewType = this.element.data("formatViewType") } } this.minView = 0; if ("minView" in g) { this.minView = g.minView } else { if ("minView" in this.element.data()) { this.minView = this.element.data("min-view") } } this.minView = b.convertViewMode(this.minView); this.maxView = b.modes.length - 1; if ("maxView" in g) { this.maxView = g.maxView } else { if ("maxView" in this.element.data()) { this.maxView = this.element.data("max-view") } } this.maxView = b.convertViewMode(this.maxView); this.wheelViewModeNavigation = false; if ("wheelViewModeNavigation" in g) { this.wheelViewModeNavigation = g.wheelViewModeNavigation } else { if ("wheelViewModeNavigation" in this.element.data()) { this.wheelViewModeNavigation = this.element.data("view-mode-wheel-navigation") } } this.wheelViewModeNavigationInverseDirection = false; if ("wheelViewModeNavigationInverseDirection" in g) { this.wheelViewModeNavigationInverseDirection = g.wheelViewModeNavigationInverseDirection } else { if ("wheelViewModeNavigationInverseDirection" in this.element.data()) { this.wheelViewModeNavigationInverseDirection = this.element.data("view-mode-wheel-navigation-inverse-dir") } } this.wheelViewModeNavigationDelay = 100; if ("wheelViewModeNavigationDelay" in g) { this.wheelViewModeNavigationDelay = g.wheelViewModeNavigationDelay } else { if ("wheelViewModeNavigationDelay" in this.element.data()) { this.wheelViewModeNavigationDelay = this.element.data("view-mode-wheel-navigation-delay") } } this.startViewMode = 2; if ("startView" in g) { this.startViewMode = g.startView } else { if ("startView" in this.element.data()) { this.startViewMode = this.element.data("start-view") } } this.startViewMode = b.convertViewMode(this.startViewMode); this.viewMode = this.startViewMode; this.viewSelect = this.minView; if ("viewSelect" in g) { this.viewSelect = g.viewSelect } else { if ("viewSelect" in this.element.data()) { this.viewSelect = this.element.data("view-select") } } this.viewSelect = b.convertViewMode(this.viewSelect); this.forceParse = true; if ("forceParse" in g) { this.forceParse = g.forceParse } else { if ("dateForceParse" in this.element.data()) { this.forceParse = this.element.data("date-force-parse") } } this.picker = c((this.bootcssVer == 3) ? b.templateV3 : b.template).appendTo(this.isInline ? this.element : this.container).on({ click: c.proxy(this.click, this), mousedown: c.proxy(this.mousedown, this) }); if (this.wheelViewModeNavigation) { if (c.fn.mousewheel) { this.picker.on({ mousewheel: c.proxy(this.mousewheel, this) }) } else { console.log("Mouse Wheel event is not supported. Please include the jQuery Mouse Wheel plugin before enabling this option") } } if (this.isInline) { this.picker.addClass("datetimepicker-inline") } else { this.picker.addClass("datetimepicker-dropdown-" + this.pickerPosition + " dropdown-menu") } if (this.isRTL) { this.picker.addClass("datetimepicker-rtl"); if (this.bootcssVer == 3) { this.picker.find(".prev span, .next span").toggleClass("glyphicon-arrow-left glyphicon-arrow-right") } else { this.picker.find(".prev i, .next i").toggleClass("icon-arrow-left icon-arrow-right") } } c(document).on("mousedown", function (j) { if (c(j.target).closest(".datetimepicker").length === 0) { i.hide() } }); this.autoclose = false; if ("autoclose" in g) { this.autoclose = g.autoclose } else { if ("dateAutoclose" in this.element.data()) { this.autoclose = this.element.data("date-autoclose") } } this.keyboardNavigation = true; if ("keyboardNavigation" in g) { this.keyboardNavigation = g.keyboardNavigation } else { if ("dateKeyboardNavigation" in this.element.data()) { this.keyboardNavigation = this.element.data("date-keyboard-navigation") } } this.todayBtn = (g.todayBtn || this.element.data("date-today-btn") || false); this.todayHighlight = (g.todayHighlight || this.element.data("date-today-highlight") || false); this.weekStart = ((g.weekStart || this.element.data("date-weekstart") || d[this.language].weekStart || 0) % 7); this.weekEnd = ((this.weekStart + 6) % 7); this.startDate = -Infinity; this.endDate = Infinity; this.daysOfWeekDisabled = []; this.setStartDate(g.startDate || this.element.data("date-startdate")); this.setEndDate(g.endDate || this.element.data("date-enddate")); this.setDaysOfWeekDisabled(g.daysOfWeekDisabled || this.element.data("date-days-of-week-disabled")); this.fillDow(); this.fillMonths(); this.update(); this.showMode(); if (this.isInline) { this.show() } }; e.prototype = { constructor: e, _events: [], _attachEvents: function () { this._detachEvents(); if (this.isInput) { this._events = [[this.element, { focus: c.proxy(this.show, this), keyup: c.proxy(this.update, this), keydown: c.proxy(this.keydown, this) }]] } else { if (this.component && this.hasInput) { this._events = [[this.element.find("input"), { focus: c.proxy(this.show, this), keyup: c.proxy(this.update, this), keydown: c.proxy(this.keydown, this) }], [this.component, { click: c.proxy(this.show, this) }]]; if (this.componentReset) { this._events.push([this.componentReset, { click: c.proxy(this.reset, this) }]) } } else { if (this.element.is("div")) { this.isInline = true } else { this._events = [[this.element, { click: c.proxy(this.show, this) }]] } } } for (var g = 0, h, j; g < this._events.length; g++) { h = this._events[g][0]; j = this._events[g][1]; h.on(j) } }, _detachEvents: function () { for (var g = 0, h, j; g < this._events.length; g++) { h = this._events[g][0]; j = this._events[g][1]; h.off(j) } this._events = [] }, show: function (g) { this.picker.show(); this.height = this.component ? this.component.outerHeight() : this.element.outerHeight(); if (this.forceParse) { this.update() } this.place(); c(window).on("resize", c.proxy(this.place, this)); if (g) { g.stopPropagation(); g.preventDefault() } this.isVisible = true; this.element.trigger({ type: "show", date: this.date }) }, hide: function (g) { if (!this.isVisible) { return } if (this.isInline) { return } this.picker.hide(); c(window).off("resize", this.place); this.viewMode = this.startViewMode; this.showMode(); if (!this.isInput) { c(document).off("mousedown", this.hide) } if (this.forceParse && (this.isInput && this.element.val() || this.hasInput && this.element.find("input").val())) { this.setValue() } this.isVisible = false; this.element.trigger({ type: "hide", date: this.date }) }, remove: function () { this._detachEvents(); this.picker.remove(); delete this.picker; delete this.element.data().datetimepicker }, getDate: function () { var g = this.getUTCDate(); return new Date(g.getTime() + (g.getTimezoneOffset() * 60000)) }, getUTCDate: function () { return this.date }, setDate: function (g) { this.setUTCDate(new Date(g.getTime() - (g.getTimezoneOffset() * 60000))) }, setUTCDate: function (g) { if (g >= this.startDate && g <= this.endDate) { this.date = g; this.setValue(); this.viewDate = this.date; this.fill() } else { this.element.trigger({ type: "outOfRange", date: g, startDate: this.startDate, endDate: this.endDate }) } }, setFormat: function (h) { this.format = b.parseFormat(h, this.formatType); var g; if (this.isInput) { g = this.element } else { if (this.component) { g = this.element.find("input") } } if (g && g.val()) { this.setValue() } }, setValue: function () { var g = this.getFormattedDate(); if (!this.isInput) { if (this.component) { this.element.find("input").val(g) } this.element.data("date", g) } else { this.element.val(g) } if (this.linkField) { c("#" + this.linkField).val(this.getFormattedDate(this.linkFormat)) } }, getFormattedDate: function (g) { if (g == undefined) { g = this.format } return b.formatDate(this.date, g, this.language, this.formatType) }, setStartDate: function (g) { this.startDate = g || -Infinity; if (this.startDate !== -Infinity) { this.startDate = b.parseDate(this.startDate, this.format, this.language, this.formatType) } this.update(); this.updateNavArrows() }, setEndDate: function (g) { this.endDate = g || Infinity; if (this.endDate !== Infinity) { this.endDate = b.parseDate(this.endDate, this.format, this.language, this.formatType) } this.update(); this.updateNavArrows() }, setDaysOfWeekDisabled: function (g) { this.daysOfWeekDisabled = g || []; if (!c.isArray(this.daysOfWeekDisabled)) { this.daysOfWeekDisabled = this.daysOfWeekDisabled.split(/,\s*/) } this.daysOfWeekDisabled = c.map(this.daysOfWeekDisabled, function (h) { return parseInt(h, 10) }); this.update(); this.updateNavArrows() }, place: function () { if (this.isInline) { return } var g = 0; c("div").each(function () { var m = parseInt(c(this).css("zIndex"), 10); if (m > g) { g = m } }); var l = g + 10; var k, j, i, h; if (this.container instanceof c) { h = this.container.offset() } else { h = c(this.container).offset() } if (this.component) { k = this.component.offset(); i = k.left; if (this.pickerPosition == "bottom-left" || this.pickerPosition == "top-left") { i += this.component.outerWidth() - this.picker.outerWidth() } } else { k = this.element.offset(); i = k.left } if (i + 220 > document.body.clientWidth) { i = document.body.clientWidth - 220 } if (this.pickerPosition == "top-left" || this.pickerPosition == "top-right") { j = k.top - this.picker.outerHeight() } else { j = k.top + this.height } j = j - h.top; i = i - h.left; this.picker.css({ top: j, left: i, zIndex: l }) }, update: function () { var g, h = false; if (arguments && arguments.length && (typeof arguments[0] === "string" || arguments[0] instanceof Date)) { g = arguments[0]; h = true } else { g = (this.isInput ? this.element.val() : this.element.find("input").val()) || this.element.data("date") || this.initialDate; if (typeof g == "string" || g instanceof String) { g = g.replace(/^\s+|\s+$/g, "") } } if (!g) { g = new Date(); h = false } this.date = b.parseDate(g, this.format, this.language, this.formatType); if (h) { this.setValue() } if (this.date < this.startDate) { this.viewDate = new Date(this.startDate) } else { if (this.date > this.endDate) { this.viewDate = new Date(this.endDate) } else { this.viewDate = new Date(this.date) } } this.fill() }, fillDow: function () { var g = this.weekStart, h = "<tr>"; while (g < this.weekStart + 7) { h += '<th class="dow">' + d[this.language].daysMin[(g++) % 7] + "</th>" } h += "</tr>"; this.picker.find(".datetimepicker-days thead").append(h) }, fillMonths: function () { var h = "", g = 0; while (g < 12) { h += '<span class="month">' + d[this.language].monthsShort[g++] + "</span>" } this.picker.find(".datetimepicker-months td").html(h) }, fill: function () { if (this.date == null || this.viewDate == null) { return } var E = new Date(this.viewDate), q = E.getUTCFullYear(), F = E.getUTCMonth(), j = E.getUTCDate(), z = E.getUTCHours(), u = E.getUTCMinutes(), v = this.startDate !== -Infinity ? this.startDate.getUTCFullYear() : -Infinity, A = this.startDate !== -Infinity ? this.startDate.getUTCMonth() : -Infinity, l = this.endDate !== Infinity ? this.endDate.getUTCFullYear() : Infinity, w = this.endDate !== Infinity ? this.endDate.getUTCMonth() : Infinity, n = (new f(this.date.getUTCFullYear(), this.date.getUTCMonth(), this.date.getUTCDate())).valueOf(), D = new Date(); this.picker.find(".datetimepicker-days thead th:eq(1)").text(d[this.language].months[F] + " " + q); if (this.formatViewType == "time") { var B = z % 12 ? z % 12 : 12; var h = (B < 10 ? "0" : "") + B; var m = (u < 10 ? "0" : "") + u; var H = d[this.language].meridiem[z < 12 ? 0 : 1]; this.picker.find(".datetimepicker-hours thead th:eq(1)").text(h + ":" + m + " " + (H ? H.toUpperCase() : "")); this.picker.find(".datetimepicker-minutes thead th:eq(1)").text(h + ":" + m + " " + (H ? H.toUpperCase() : "")) } else { this.picker.find(".datetimepicker-hours thead th:eq(1)").text(j + " " + d[this.language].months[F] + " " + q); this.picker.find(".datetimepicker-minutes thead th:eq(1)").text(j + " " + d[this.language].months[F] + " " + q) } this.picker.find("tfoot th.today").text(d[this.language].today).toggle(this.todayBtn !== false); this.updateNavArrows(); this.fillMonths(); var I = f(q, F - 1, 28, 0, 0, 0, 0), y = b.getDaysInMonth(I.getUTCFullYear(), I.getUTCMonth()); I.setUTCDate(y); I.setUTCDate(y - (I.getUTCDay() - this.weekStart + 7) % 7); var g = new Date(I); g.setUTCDate(g.getUTCDate() + 42); g = g.valueOf(); var o = []; var r; while (I.valueOf() < g) { if (I.getUTCDay() == this.weekStart) { o.push("<tr>") } r = ""; if (I.getUTCFullYear() < q || (I.getUTCFullYear() == q && I.getUTCMonth() < F)) { r += " old" } else { if (I.getUTCFullYear() > q || (I.getUTCFullYear() == q && I.getUTCMonth() > F)) { r += " new" } } if (this.todayHighlight && I.getUTCFullYear() == D.getFullYear() && I.getUTCMonth() == D.getMonth() && I.getUTCDate() == D.getDate()) { r += " today" } if (I.valueOf() == n) { r += " active" } if ((I.valueOf() + 86400000) <= this.startDate || I.valueOf() > this.endDate || c.inArray(I.getUTCDay(), this.daysOfWeekDisabled) !== -1) { r += " disabled" } o.push('<td class="day' + r + '">' + I.getUTCDate() + "</td>"); if (I.getUTCDay() == this.weekEnd) { o.push("</tr>") } I.setUTCDate(I.getUTCDate() + 1) } this.picker.find(".datetimepicker-days tbody").empty().append(o.join("")); o = []; var s = "", C = "", p = ""; for (var x = 0; x < 24; x++) { var t = f(q, F, j, x); r = ""; if ((t.valueOf() + 3600000) <= this.startDate || t.valueOf() > this.endDate) { r += " disabled" } else { if (z == x) { r += " active" } } if (this.showMeridian && d[this.language].meridiem.length == 2) { C = (x < 12 ? d[this.language].meridiem[0] : d[this.language].meridiem[1]); if (C != p) { if (p != "") { o.push("</fieldset>") } o.push('<fieldset class="hour"><legend>' + C.toUpperCase() + "</legend>") } p = C; s = (x % 12 ? x % 12 : 12); o.push('<span class="hour' + r + " hour_" + (x < 12 ? "am" : "pm") + '">' + s + "</span>"); if (x == 23) { o.push("</fieldset>") } } else { s = x + ":00"; o.push('<span class="hour' + r + '">' + s + "</span>") } } this.picker.find(".datetimepicker-hours td").html(o.join("")); o = []; s = "", C = "", p = ""; for (var x = 0; x < 60; x += this.minuteStep) { var t = f(q, F, j, z, x, 0); r = ""; if (t.valueOf() < this.startDate || t.valueOf() > this.endDate) { r += " disabled" } else { if (Math.floor(u / this.minuteStep) == Math.floor(x / this.minuteStep)) { r += " active" } } if (this.showMeridian && d[this.language].meridiem.length == 2) { C = (z < 12 ? d[this.language].meridiem[0] : d[this.language].meridiem[1]); if (C != p) { if (p != "") { o.push("</fieldset>") } o.push('<fieldset class="minute"><legend>' + C.toUpperCase() + "</legend>") } p = C; s = (z % 12 ? z % 12 : 12); o.push('<span class="minute' + r + '">' + s + ":" + (x < 10 ? "0" + x : x) + "</span>"); if (x == 59) { o.push("</fieldset>") } } else { s = x + ":00"; o.push('<span class="minute' + r + '">' + z + ":" + (x < 10 ? "0" + x : x) + "</span>") } } this.picker.find(".datetimepicker-minutes td").html(o.join("")); var J = this.date.getUTCFullYear(); var k = this.picker.find(".datetimepicker-months").find("th:eq(1)").text(q).end().find("span").removeClass("active"); if (J == q) { k.eq(this.date.getUTCMonth()).addClass("active") } if (q < v || q > l) { k.addClass("disabled") } if (q == v) { k.slice(0, A).addClass("disabled") } if (q == l) { k.slice(w + 1).addClass("disabled") } o = ""; q = parseInt(q / 10, 10) * 10; var G = this.picker.find(".datetimepicker-years").find("th:eq(1)").text(q + "-" + (q + 9)).end().find("td"); q -= 1; for (var x = -1; x < 11; x++) { o += '<span class="year' + (x == -1 || x == 10 ? " old" : "") + (J == q ? " active" : "") + (q < v || q > l ? " disabled" : "") + '">' + q + "</span>"; q += 1 } G.html(o); this.place() }, updateNavArrows: function () { var k = new Date(this.viewDate), i = k.getUTCFullYear(), j = k.getUTCMonth(), h = k.getUTCDate(), g = k.getUTCHours(); switch (this.viewMode) { case 0: if (this.startDate !== -Infinity && i <= this.startDate.getUTCFullYear() && j <= this.startDate.getUTCMonth() && h <= this.startDate.getUTCDate() && g <= this.startDate.getUTCHours()) { this.picker.find(".prev").css({ visibility: "hidden" }) } else { this.picker.find(".prev").css({ visibility: "visible" }) } if (this.endDate !== Infinity && i >= this.endDate.getUTCFullYear() && j >= this.endDate.getUTCMonth() && h >= this.endDate.getUTCDate() && g >= this.endDate.getUTCHours()) { this.picker.find(".next").css({ visibility: "hidden" }) } else { this.picker.find(".next").css({ visibility: "visible" }) } break; case 1: if (this.startDate !== -Infinity && i <= this.startDate.getUTCFullYear() && j <= this.startDate.getUTCMonth() && h <= this.startDate.getUTCDate()) { this.picker.find(".prev").css({ visibility: "hidden" }) } else { this.picker.find(".prev").css({ visibility: "visible" }) } if (this.endDate !== Infinity && i >= this.endDate.getUTCFullYear() && j >= this.endDate.getUTCMonth() && h >= this.endDate.getUTCDate()) { this.picker.find(".next").css({ visibility: "hidden" }) } else { this.picker.find(".next").css({ visibility: "visible" }) } break; case 2: if (this.startDate !== -Infinity && i <= this.startDate.getUTCFullYear() && j <= this.startDate.getUTCMonth()) { this.picker.find(".prev").css({ visibility: "hidden" }) } else { this.picker.find(".prev").css({ visibility: "visible" }) } if (this.endDate !== Infinity && i >= this.endDate.getUTCFullYear() && j >= this.endDate.getUTCMonth()) { this.picker.find(".next").css({ visibility: "hidden" }) } else { this.picker.find(".next").css({ visibility: "visible" }) } break; case 3: case 4: if (this.startDate !== -Infinity && i <= this.startDate.getUTCFullYear()) { this.picker.find(".prev").css({ visibility: "hidden" }) } else { this.picker.find(".prev").css({ visibility: "visible" }) } if (this.endDate !== Infinity && i >= this.endDate.getUTCFullYear()) { this.picker.find(".next").css({ visibility: "hidden" }) } else { this.picker.find(".next").css({ visibility: "visible" }) } break } }, mousewheel: function (h) { h.preventDefault(); h.stopPropagation(); if (this.wheelPause) { return } this.wheelPause = true; var g = h.originalEvent; var j = g.wheelDelta; var i = j > 0 ? 1 : (j === 0) ? 0 : -1; if (this.wheelViewModeNavigationInverseDirection) { i = -i } this.showMode(i); setTimeout(c.proxy(function () { this.wheelPause = false }, this), this.wheelViewModeNavigationDelay) }, click: function (k) { k.stopPropagation(); k.preventDefault(); var l = c(k.target).closest("span, td, th, legend"); if (l.length == 1) { if (l.is(".disabled")) { this.element.trigger({ type: "outOfRange", date: this.viewDate, startDate: this.startDate, endDate: this.endDate }); return } switch (l[0].nodeName.toLowerCase()) { case "th": switch (l[0].className) { case "switch": this.showMode(1); break; case "prev": case "next": var g = b.modes[this.viewMode].navStep * (l[0].className == "prev" ? -1 : 1); switch (this.viewMode) { case 0: this.viewDate = this.moveHour(this.viewDate, g); break; case 1: this.viewDate = this.moveDate(this.viewDate, g); break; case 2: this.viewDate = this.moveMonth(this.viewDate, g); break; case 3: case 4: this.viewDate = this.moveYear(this.viewDate, g); break }this.fill(); this.element.trigger({ type: l[0].className + ":" + this.convertViewModeText(this.viewMode), date: this.viewDate, startDate: this.startDate, endDate: this.endDate }); break; case "today": var h = new Date(); h = f(h.getFullYear(), h.getMonth(), h.getDate(), h.getHours(), h.getMinutes(), h.getSeconds(), 0); if (h < this.startDate) { h = this.startDate } else { if (h > this.endDate) { h = this.endDate } } this.viewMode = this.startViewMode; this.showMode(0); this._setDate(h); this.fill(); if (this.autoclose) { this.hide() } break }break; case "span": if (!l.is(".disabled")) { var n = this.viewDate.getUTCFullYear(), m = this.viewDate.getUTCMonth(), o = this.viewDate.getUTCDate(), p = this.viewDate.getUTCHours(), i = this.viewDate.getUTCMinutes(), q = this.viewDate.getUTCSeconds(); if (l.is(".month")) { this.viewDate.setUTCDate(1); m = l.parent().find("span").index(l); o = this.viewDate.getUTCDate(); this.viewDate.setUTCMonth(m); this.element.trigger({ type: "changeMonth", date: this.viewDate }); if (this.viewSelect >= 3) { this._setDate(f(n, m, o, p, i, q, 0)) } } else { if (l.is(".year")) { this.viewDate.setUTCDate(1); n = parseInt(l.text(), 10) || 0; this.viewDate.setUTCFullYear(n); this.element.trigger({ type: "changeYear", date: this.viewDate }); if (this.viewSelect >= 4) { this._setDate(f(n, m, o, p, i, q, 0)) } } else { if (l.is(".hour")) { p = parseInt(l.text(), 10) || 0; if (l.hasClass("hour_am") || l.hasClass("hour_pm")) { if (p == 12 && l.hasClass("hour_am")) { p = 0 } else { if (p != 12 && l.hasClass("hour_pm")) { p += 12 } } } this.viewDate.setUTCHours(p); this.element.trigger({ type: "changeHour", date: this.viewDate }); if (this.viewSelect >= 1) { this._setDate(f(n, m, o, p, i, q, 0)) } } else { if (l.is(".minute")) { i = parseInt(l.text().substr(l.text().indexOf(":") + 1), 10) || 0; this.viewDate.setUTCMinutes(i); this.element.trigger({ type: "changeMinute", date: this.viewDate }); if (this.viewSelect >= 0) { this._setDate(f(n, m, o, p, i, q, 0)) } } } } } if (this.viewMode != 0) { var j = this.viewMode; this.showMode(-1); this.fill(); if (j == this.viewMode && this.autoclose) { this.hide() } } else { this.fill(); if (this.autoclose) { this.hide() } } } break; case "td": if (l.is(".day") && !l.is(".disabled")) { var o = parseInt(l.text(), 10) || 1; var n = this.viewDate.getUTCFullYear(), m = this.viewDate.getUTCMonth(), p = this.viewDate.getUTCHours(), i = this.viewDate.getUTCMinutes(), q = this.viewDate.getUTCSeconds(); if (l.is(".old")) { if (m === 0) { m = 11; n -= 1 } else { m -= 1 } } else { if (l.is(".new")) { if (m == 11) { m = 0; n += 1 } else { m += 1 } } } this.viewDate.setUTCFullYear(n); this.viewDate.setUTCMonth(m, o); this.element.trigger({ type: "changeDay", date: this.viewDate }); if (this.viewSelect >= 2) { this._setDate(f(n, m, o, p, i, q, 0)) } } var j = this.viewMode; this.showMode(-1); this.fill(); if (j == this.viewMode && this.autoclose) { this.hide() } break } } }, _setDate: function (g, i) { if (!i || i == "date") { this.date = g } if (!i || i == "view") { this.viewDate = g } this.fill(); this.setValue(); var h; if (this.isInput) { h = this.element } else { if (this.component) { h = this.element.find("input") } } if (h) { h.change(); if (this.autoclose && (!i || i == "date")) { } } this.element.trigger({ type: "changeDate", date: this.date }) }, moveMinute: function (h, g) { if (!g) { return h } var i = new Date(h.valueOf()); i.setUTCMinutes(i.getUTCMinutes() + (g * this.minuteStep)); return i }, moveHour: function (h, g) { if (!g) { return h } var i = new Date(h.valueOf()); i.setUTCHours(i.getUTCHours() + g); return i }, moveDate: function (h, g) { if (!g) { return h } var i = new Date(h.valueOf()); i.setUTCDate(i.getUTCDate() + g); return i }, moveMonth: function (g, h) { if (!h) { return g } var l = new Date(g.valueOf()), p = l.getUTCDate(), m = l.getUTCMonth(), k = Math.abs(h), o, n; h = h > 0 ? 1 : -1; if (k == 1) { n = h == -1 ? function () { return l.getUTCMonth() == m } : function () { return l.getUTCMonth() != o }; o = m + h; l.setUTCMonth(o); if (o < 0 || o > 11) { o = (o + 12) % 12 } } else { for (var j = 0; j < k; j++) { l = this.moveMonth(l, h) } o = l.getUTCMonth(); l.setUTCDate(p); n = function () { return o != l.getUTCMonth() } } while (n()) { l.setUTCDate(--p); l.setUTCMonth(o) } return l }, moveYear: function (h, g) { return this.moveMonth(h, g * 12) }, dateWithinRange: function (g) { return g >= this.startDate && g <= this.endDate }, keydown: function (k) { if (this.picker.is(":not(:visible)")) { if (k.keyCode == 27) { this.show() } return } var m = false, h, n, l, o, g; switch (k.keyCode) { case 27: this.hide(); k.preventDefault(); break; case 37: case 39: if (!this.keyboardNavigation) { break } h = k.keyCode == 37 ? -1 : 1; viewMode = this.viewMode; if (k.ctrlKey) { viewMode += 2 } else { if (k.shiftKey) { viewMode += 1 } } if (viewMode == 4) { o = this.moveYear(this.date, h); g = this.moveYear(this.viewDate, h) } else { if (viewMode == 3) { o = this.moveMonth(this.date, h); g = this.moveMonth(this.viewDate, h) } else { if (viewMode == 2) { o = this.moveDate(this.date, h); g = this.moveDate(this.viewDate, h) } else { if (viewMode == 1) { o = this.moveHour(this.date, h); g = this.moveHour(this.viewDate, h) } else { if (viewMode == 0) { o = this.moveMinute(this.date, h); g = this.moveMinute(this.viewDate, h) } } } } } if (this.dateWithinRange(o)) { this.date = o; this.viewDate = g; this.setValue(); this.update(); k.preventDefault(); m = true } break; case 38: case 40: if (!this.keyboardNavigation) { break } h = k.keyCode == 38 ? -1 : 1; viewMode = this.viewMode; if (k.ctrlKey) { viewMode += 2 } else { if (k.shiftKey) { viewMode += 1 } } if (viewMode == 4) { o = this.moveYear(this.date, h); g = this.moveYear(this.viewDate, h) } else { if (viewMode == 3) { o = this.moveMonth(this.date, h); g = this.moveMonth(this.viewDate, h) } else { if (viewMode == 2) { o = this.moveDate(this.date, h * 7); g = this.moveDate(this.viewDate, h * 7) } else { if (viewMode == 1) { if (this.showMeridian) { o = this.moveHour(this.date, h * 6); g = this.moveHour(this.viewDate, h * 6) } else { o = this.moveHour(this.date, h * 4); g = this.moveHour(this.viewDate, h * 4) } } else { if (viewMode == 0) { o = this.moveMinute(this.date, h * 4); g = this.moveMinute(this.viewDate, h * 4) } } } } } if (this.dateWithinRange(o)) { this.date = o; this.viewDate = g; this.setValue(); this.update(); k.preventDefault(); m = true } break; case 13: if (this.viewMode != 0) { var j = this.viewMode; this.showMode(-1); this.fill(); if (j == this.viewMode && this.autoclose) { this.hide() } } else { this.fill(); if (this.autoclose) { this.hide() } } k.preventDefault(); break; case 9: this.hide(); break }if (m) { var i; if (this.isInput) { i = this.element } else { if (this.component) { i = this.element.find("input") } } if (i) { i.change() } this.element.trigger({ type: "changeDate", date: this.date }) } }, showMode: function (g) { if (g) { var h = Math.max(0, Math.min(b.modes.length - 1, this.viewMode + g)); if (h >= this.minView && h <= this.maxView) { this.element.trigger({ type: "changeMode", date: this.viewDate, oldViewMode: this.viewMode, newViewMode: h }); this.viewMode = h } } this.picker.find(">div").hide().filter(".datetimepicker-" + b.modes[this.viewMode].clsName).css("display", "block"); this.updateNavArrows() }, reset: function (g) { this._setDate(null, "date") }, convertViewModeText: function (g) { switch (g) { case 4: return "decade"; case 3: return "year"; case 2: return "month"; case 1: return "day"; case 0: return "hour" } } }; c.fn.datetimepicker = function (i) { var g = Array.apply(null, arguments); g.shift(); var h; this.each(function () { var l = c(this), k = l.data("datetimepicker"), j = typeof i == "object" && i; if (!k) { l.data("datetimepicker", (k = new e(this, c.extend({}, c.fn.datetimepicker.defaults, j)))) } if (typeof i == "string" && typeof k[i] == "function") { h = k[i].apply(k, g); if (h !== undefined) { return false } } }); if (h !== undefined) { return h } else { return this } }; c.fn.datetimepicker.defaults = {}; c.fn.datetimepicker.Constructor = e; var d = c.fn.datetimepicker.dates = { en: { days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"], months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], meridiem: ["am", "pm"], suffix: ["st", "nd", "rd", "th"], today: "Today" } }; var b = { modes: [{ clsName: "minutes", navFnc: "Hours", navStep: 1 }, { clsName: "hours", navFnc: "Date", navStep: 1 }, { clsName: "days", navFnc: "Month", navStep: 1 }, { clsName: "months", navFnc: "FullYear", navStep: 1 }, { clsName: "years", navFnc: "FullYear", navStep: 10 }], isLeapYear: function (g) { return (((g % 4 === 0) && (g % 100 !== 0)) || (g % 400 === 0)) }, getDaysInMonth: function (g, h) { return [31, (b.isLeapYear(g) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][h] }, getDefaultFormat: function (g, h) { if (g == "standard") { if (h == "input") { return "yyyy-mm-dd hh:ii" } else { return "yyyy-mm-dd hh:ii:ss" } } else { if (g == "php") { if (h == "input") { return "Y-m-d H:i" } else { return "Y-m-d H:i:s" } } else { throw new Error("Invalid format type.") } } }, validParts: function (g) { if (g == "standard") { return /hh?|HH?|p|P|ii?|ss?|dd?|DD?|mm?|MM?|yy(?:yy)?/g } else { if (g == "php") { return /[dDjlNwzFmMnStyYaABgGhHis]/g } else { throw new Error("Invalid format type.") } } }, nonpunctuation: /[^ -\/:-@\[-`{-~\t\n\rTZ]+/g, parseFormat: function (j, h) { var g = j.replace(this.validParts(h), "\0").split("\0"), i = j.match(this.validParts(h)); if (!g || !g.length || !i || i.length == 0) { throw new Error("Invalid date format.") } return { separators: g, parts: i } }, parseDate: function (l, u, o, r) { if (l instanceof Date) { var w = new Date(l.valueOf() - l.getTimezoneOffset() * 60000); w.setMilliseconds(0); return w } if (/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(l)) { u = this.parseFormat("yyyy-mm-dd", r) } if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}$/.test(l)) { u = this.parseFormat("yyyy-mm-dd hh:ii", r) } if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}\:\d{1,2}[Z]{0,1}$/.test(l)) { u = this.parseFormat("yyyy-mm-dd hh:ii:ss", r) } if (/^[-+]\d+[dmwy]([\s,]+[-+]\d+[dmwy])*$/.test(l)) { var x = /([-+]\d+)([dmwy])/, m = l.match(/([-+]\d+)([dmwy])/g), g, k; l = new Date(); for (var n = 0; n < m.length; n++) { g = x.exec(m[n]); k = parseInt(g[1]); switch (g[2]) { case "d": l.setUTCDate(l.getUTCDate() + k); break; case "m": l = e.prototype.moveMonth.call(e.prototype, l, k); break; case "w": l.setUTCDate(l.getUTCDate() + k * 7); break; case "y": l = e.prototype.moveYear.call(e.prototype, l, k); break } } return f(l.getUTCFullYear(), l.getUTCMonth(), l.getUTCDate(), l.getUTCHours(), l.getUTCMinutes(), l.getUTCSeconds(), 0) } var m = l && l.match(this.nonpunctuation) || [], l = new Date(0, 0, 0, 0, 0, 0, 0), q = {}, t = ["hh", "h", "ii", "i", "ss", "s", "yyyy", "yy", "M", "MM", "m", "mm", "D", "DD", "d", "dd", "H", "HH", "p", "P"], v = { hh: function (s, i) { return s.setUTCHours(i) }, h: function (s, i) { return s.setUTCHours(i) }, HH: function (s, i) { return s.setUTCHours(i == 12 ? 0 : i) }, H: function (s, i) { return s.setUTCHours(i == 12 ? 0 : i) }, ii: function (s, i) { return s.setUTCMinutes(i) }, i: function (s, i) { return s.setUTCMinutes(i) }, ss: function (s, i) { return s.setUTCSeconds(i) }, s: function (s, i) { return s.setUTCSeconds(i) }, yyyy: function (s, i) { return s.setUTCFullYear(i) }, yy: function (s, i) { return s.setUTCFullYear(2000 + i) }, m: function (s, i) { i -= 1; while (i < 0) { i += 12 } i %= 12; s.setUTCMonth(i); while (s.getUTCMonth() != i) { if (isNaN(s.getUTCMonth())) { return s } else { s.setUTCDate(s.getUTCDate() - 1) } } return s }, d: function (s, i) { return s.setUTCDate(i) }, p: function (s, i) { return s.setUTCHours(i == 1 ? s.getUTCHours() + 12 : s.getUTCHours()) } }, j, p, g; v.M = v.MM = v.mm = v.m; v.dd = v.d; v.P = v.p; l = f(l.getFullYear(), l.getMonth(), l.getDate(), l.getHours(), l.getMinutes(), l.getSeconds()); if (m.length == u.parts.length) { for (var n = 0, h = u.parts.length; n < h; n++) { j = parseInt(m[n], 10); g = u.parts[n]; if (isNaN(j)) { switch (g) { case "MM": p = c(d[o].months).filter(function () { var i = this.slice(0, m[n].length), s = m[n].slice(0, i.length); return i == s }); j = c.inArray(p[0], d[o].months) + 1; break; case "M": p = c(d[o].monthsShort).filter(function () { var i = this.slice(0, m[n].length), s = m[n].slice(0, i.length); return i.toLowerCase() == s.toLowerCase() }); j = c.inArray(p[0], d[o].monthsShort) + 1; break; case "p": case "P": j = c.inArray(m[n].toLowerCase(), d[o].meridiem); break } } q[g] = j } for (var n = 0, y; n < t.length; n++) { y = t[n]; if (y in q && !isNaN(q[y])) { v[y](l, q[y]) } } } return l }, formatDate: function (g, m, o, k) { if (g == null) { return "" } var n; if (k == "standard") { n = { yy: g.getUTCFullYear().toString().substring(2), yyyy: g.getUTCFullYear(), m: g.getUTCMonth() + 1, M: d[o].monthsShort[g.getUTCMonth()], MM: d[o].months[g.getUTCMonth()], d: g.getUTCDate(), D: d[o].daysShort[g.getUTCDay()], DD: d[o].days[g.getUTCDay()], p: (d[o].meridiem.length == 2 ? d[o].meridiem[g.getUTCHours() < 12 ? 0 : 1] : ""), h: g.getUTCHours(), i: g.getUTCMinutes(), s: g.getUTCSeconds() }; if (d[o].meridiem.length == 2) { n.H = (n.h % 12 == 0 ? 12 : n.h % 12) } else { n.H = n.h } n.HH = (n.H < 10 ? "0" : "") + n.H; n.P = n.p.toUpperCase(); n.hh = (n.h < 10 ? "0" : "") + n.h; n.ii = (n.i < 10 ? "0" : "") + n.i; n.ss = (n.s < 10 ? "0" : "") + n.s; n.dd = (n.d < 10 ? "0" : "") + n.d; n.mm = (n.m < 10 ? "0" : "") + n.m } else { if (k == "php") { n = { y: g.getUTCFullYear().toString().substring(2), Y: g.getUTCFullYear(), F: d[o].months[g.getUTCMonth()], M: d[o].monthsShort[g.getUTCMonth()], n: g.getUTCMonth() + 1, t: b.getDaysInMonth(g.getUTCFullYear(), g.getUTCMonth()), j: g.getUTCDate(), l: d[o].days[g.getUTCDay()], D: d[o].daysShort[g.getUTCDay()], w: g.getUTCDay(), N: (g.getUTCDay() == 0 ? 7 : g.getUTCDay()), S: (g.getUTCDate() % 10 <= d[o].suffix.length ? d[o].suffix[g.getUTCDate() % 10 - 1] : ""), a: (d[o].meridiem.length == 2 ? d[o].meridiem[g.getUTCHours() < 12 ? 0 : 1] : ""), g: (g.getUTCHours() % 12 == 0 ? 12 : g.getUTCHours() % 12), G: g.getUTCHours(), i: g.getUTCMinutes(), s: g.getUTCSeconds() }; n.m = (n.n < 10 ? "0" : "") + n.n; n.d = (n.j < 10 ? "0" : "") + n.j; n.A = n.a.toString().toUpperCase(); n.h = (n.g < 10 ? "0" : "") + n.g; n.H = (n.G < 10 ? "0" : "") + n.G; n.i = (n.i < 10 ? "0" : "") + n.i; n.s = (n.s < 10 ? "0" : "") + n.s } else { throw new Error("Invalid format type.") } } var g = [], l = c.extend([], m.separators); for (var j = 0, h = m.parts.length; j < h; j++) { if (l.length) { g.push(l.shift()) } g.push(n[m.parts[j]]) } if (l.length) { g.push(l.shift()) } return g.join("") }, convertViewMode: function (g) { switch (g) { case 4: case "decade": g = 4; break; case 3: case "year": g = 3; break; case 2: case "month": g = 2; break; case 1: case "day": g = 1; break; case 0: case "hour": g = 0; break }return g }, headTemplate: '<thead><tr><th class="prev"><i class="icon-arrow-left"/></th><th colspan="5" class="switch"></th><th class="next"><i class="icon-arrow-right"/></th></tr></thead>', headTemplateV3: '<thead><tr><th class="prev"><span class="glyphicon glyphicon-arrow-left"></span> </th><th colspan="5" class="switch"></th><th class="next"><span class="glyphicon glyphicon-arrow-right"></span> </th></tr></thead>', contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>', footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr></tfoot>' }; b.template = '<div class="datetimepicker"><div class="datetimepicker-minutes"><table class=" table-condensed">' + b.headTemplate + b.contTemplate + b.footTemplate + '</table></div><div class="datetimepicker-hours"><table class=" table-condensed">' + b.headTemplate + b.contTemplate + b.footTemplate + '</table></div><div class="datetimepicker-days"><table class=" table-condensed">' + b.headTemplate + "<tbody></tbody>" + b.footTemplate + '</table></div><div class="datetimepicker-months"><table class="table-condensed">' + b.headTemplate + b.contTemplate + b.footTemplate + '</table></div><div class="datetimepicker-years"><table class="table-condensed">' + b.headTemplate + b.contTemplate + b.footTemplate + "</table></div></div>"; b.templateV3 = '<div class="datetimepicker"><div class="datetimepicker-minutes"><table class=" table-condensed">' + b.headTemplateV3 + b.contTemplate + b.footTemplate + '</table></div><div class="datetimepicker-hours"><table class=" table-condensed">' + b.headTemplateV3 + b.contTemplate + b.footTemplate + '</table></div><div class="datetimepicker-days"><table class=" table-condensed">' + b.headTemplateV3 + "<tbody></tbody>" + b.footTemplate + '</table></div><div class="datetimepicker-months"><table class="table-condensed">' + b.headTemplateV3 + b.contTemplate + b.footTemplate + '</table></div><div class="datetimepicker-years"><table class="table-condensed">' + b.headTemplateV3 + b.contTemplate + b.footTemplate + "</table></div></div>"; c.fn.datetimepicker.DPGlobal = b; c.fn.datetimepicker.noConflict = function () { c.fn.datetimepicker = old; return this }; c(document).on("focus.datetimepicker.data-api click.datetimepicker.data-api", '[data-provide="datetimepicker"]', function (h) { var g = c(this); if (g.data("datetimepicker")) { return } h.preventDefault(); g.datetimepicker("show") }); c(function () { c('[data-provide="datetimepicker-inline"]').datetimepicker() }) }(window.jQuery);

;
(function ($, window, document, undefined) { 'use strict'; var Timepicker = function (element, options) { this.widget = ''; this.$element = $(element); this.defaultTime = options.defaultTime; this.disableFocus = options.disableFocus; this.disableMousewheel = options.disableMousewheel; this.isOpen = options.isOpen; this.minuteStep = options.minuteStep; this.modalBackdrop = options.modalBackdrop; this.orientation = options.orientation; this.secondStep = options.secondStep; this.showInputs = options.showInputs; this.showMeridian = options.showMeridian; this.showSeconds = options.showSeconds; this.template = options.template; this.appendWidgetTo = options.appendWidgetTo; this.showWidgetOnAddonClick = options.showWidgetOnAddonClick; this._init() }; Timepicker.prototype = { constructor: Timepicker, _init: function () { var self = this; if (this.showWidgetOnAddonClick && (this.$element.parent().hasClass('input-append') || this.$element.parent().hasClass('input-prepend'))) { this.$element.parent('.input-append, .input-prepend').find('.add-on').on({ 'click.timepicker': $.proxy(this.showWidget, this) }); this.$element.on({ 'focus.timepicker': $.proxy(this.highlightUnit, this), 'click.timepicker': $.proxy(this.highlightUnit, this), 'keydown.timepicker': $.proxy(this.elementKeydown, this), 'blur.timepicker': $.proxy(this.blurElement, this), 'mousewheel.timepicker DOMMouseScroll.timepicker': $.proxy(this.mousewheel, this) }) } else { if (this.template) { this.$element.on({ 'focus.timepicker': $.proxy(this.showWidget, this), 'click.timepicker': $.proxy(this.showWidget, this), 'blur.timepicker': $.proxy(this.blurElement, this), 'mousewheel.timepicker DOMMouseScroll.timepicker': $.proxy(this.mousewheel, this) }) } else { this.$element.on({ 'focus.timepicker': $.proxy(this.highlightUnit, this), 'click.timepicker': $.proxy(this.highlightUnit, this), 'keydown.timepicker': $.proxy(this.elementKeydown, this), 'blur.timepicker': $.proxy(this.blurElement, this), 'mousewheel.timepicker DOMMouseScroll.timepicker': $.proxy(this.mousewheel, this) }) } } if (this.template !== false) { this.$widget = $(this.getTemplate()).on('click', $.proxy(this.widgetClick, this)) } else { this.$widget = false } if (this.showInputs && this.$widget !== false) { this.$widget.find('input').each(function () { $(this).on({ 'click.timepicker': function () { $(this).select() }, 'keydown.timepicker': $.proxy(self.widgetKeydown, self), 'keyup.timepicker': $.proxy(self.widgetKeyup, self) }) }) } this.setDefaultTime(this.defaultTime) }, blurElement: function () { this.highlightedUnit = null; this.updateFromElementVal() }, clear: function () { this.hour = ''; this.minute = ''; this.second = ''; this.meridian = ''; this.$element.val('') }, decrementHour: function () { if (this.hour == '' && this.minute == '' && this.second == '') { this.setDefaultTime(this.defaultTime) } if (this.showMeridian) { if (this.hour === 1) { this.hour = 12 } else if (this.hour === 12) { this.hour--; return this.toggleMeridian() } else if (this.hour === 0) { this.hour = 11; return this.toggleMeridian() } else { this.hour-- } } else { if (this.hour <= 0) { this.hour = 23 } else { this.hour-- } } }, decrementMinute: function (step) { var newVal; if (step) { newVal = this.minute - step } else { newVal = this.minute - this.minuteStep } if (newVal < 0) { this.decrementHour(); this.minute = newVal + 60 } else { this.minute = newVal } }, decrementSecond: function () { var newVal = this.second - this.secondStep; if (newVal < 0) { this.decrementMinute(true); this.second = newVal + 60 } else { this.second = newVal } }, elementKeydown: function (e) { switch (e.keyCode) { case 9: if (e.shiftKey) { if (this.highlightedUnit === 'hour') { this.hideWidget(); break } this.highlightPrevUnit() } else if ((this.showMeridian && this.highlightedUnit === 'meridian') || (this.showSeconds && this.highlightedUnit === 'second') || (!this.showMeridian && !this.showSeconds && this.highlightedUnit === 'minute')) { this.hideWidget(); break } else { this.highlightNextUnit() } e.preventDefault(); this.updateFromElementVal(); break; case 27: this.updateFromElementVal(); break; case 37: e.preventDefault(); this.highlightPrevUnit(); this.updateFromElementVal(); break; case 38: e.preventDefault(); switch (this.highlightedUnit) { case 'hour': this.incrementHour(); this.highlightHour(); break; case 'minute': this.incrementMinute(); this.highlightMinute(); break; case 'second': this.incrementSecond(); this.highlightSecond(); break; case 'meridian': this.toggleMeridian(); this.highlightMeridian(); break } this.update(); break; case 39: e.preventDefault(); this.highlightNextUnit(); this.updateFromElementVal(); break; case 40: e.preventDefault(); switch (this.highlightedUnit) { case 'hour': this.decrementHour(); this.highlightHour(); break; case 'minute': this.decrementMinute(); this.highlightMinute(); break; case 'second': this.decrementSecond(); this.highlightSecond(); break; case 'meridian': this.toggleMeridian(); this.highlightMeridian(); break } this.update(); break } }, getCursorPosition: function () { var input = this.$element.get(0); if ('selectionStart' in input) { return input.selectionStart } else if (document.selection) { input.focus(); var sel = document.selection.createRange(), selLen = document.selection.createRange().text.length; sel.moveStart('character', -input.value.length); return sel.text.length - selLen } }, getTemplate: function () { var template, hourTemplate, minuteTemplate, secondTemplate, meridianTemplate, templateContent; if (this.showInputs) { hourTemplate = '<input type="text" class="bootstrap-timepicker-hour" maxlength="2"/>'; minuteTemplate = '<input type="text" class="bootstrap-timepicker-minute" maxlength="2"/>'; secondTemplate = '<input type="text" class="bootstrap-timepicker-second" maxlength="2"/>'; meridianTemplate = '<input type="text" class="bootstrap-timepicker-meridian" maxlength="2"/>' } else { hourTemplate = '<span class="bootstrap-timepicker-hour"></span>'; minuteTemplate = '<span class="bootstrap-timepicker-minute"></span>'; secondTemplate = '<span class="bootstrap-timepicker-second"></span>'; meridianTemplate = '<span class="bootstrap-timepicker-meridian"></span>' } templateContent = '<table>' + '<tr>' + '<td><a href="#" class="btn btn-sm btn-default" data-action="incrementHour"><i class="fa fa-chevron-up"></i></a></td>' + '<td class="separator">&nbsp;</td>' + '<td><a href="#" class="btn btn-sm btn-default" data-action="incrementMinute"><i class="fa fa-chevron-up"></i></a></td>' + (this.showSeconds ? '<td class="separator">&nbsp;</td>' + '<td><a href="#" class="btn btn-sm btn-default" data-action="incrementSecond"><i class="fa fa-chevron-up"></i></a></td>' : '') + (this.showMeridian ? '<td class="separator">&nbsp;</td>' + '<td class="meridian-column"><a href="#" class="btn btn-sm btn-default" data-action="toggleMeridian"><i class="fa fa-chevron-up"></i></a></td>' : '') + '</tr>' + '<tr>' + '<td>' + hourTemplate + '</td> ' + '<td class="separator">:</td>' + '<td>' + minuteTemplate + '</td> ' + (this.showSeconds ? '<td class="separator">:</td>' + '<td>' + secondTemplate + '</td>' : '') + (this.showMeridian ? '<td class="separator">&nbsp;</td>' + '<td>' + meridianTemplate + '</td>' : '') + '</tr>' + '<tr>' + '<td><a href="#" class="btn btn-sm btn-default" data-action="decrementHour"><i class="fa fa-chevron-down"></i></a></td>' + '<td class="separator"></td>' + '<td><a href="#" class="btn btn-sm btn-default" data-action="decrementMinute"><i class="fa fa-chevron-down"></i></a></td>' + (this.showSeconds ? '<td class="separator">&nbsp;</td>' + '<td><a href="#" class="btn btn-sm btn-default" data-action="decrementSecond"><i class="fa fa-chevron-down"></i></a></td>' : '') + (this.showMeridian ? '<td class="separator">&nbsp;</td>' + '<td><a href="#" class="btn btn-sm btn-default" data-action="toggleMeridian"><i class="fa fa-chevron-down"></i></a></td>' : '') + '</tr>' + '</table>'; switch (this.template) { case 'modal': template = '<div class="bootstrap-timepicker-widget modal hide fade in" data-backdrop="' + (this.modalBackdrop ? 'true' : 'false') + '">' + '<div class="modal-header">' + '<a href="#" class="close" data-dismiss="modal">×</a>' + '<h3>Pick a Time</h3>' + '</div>' + '<div class="modal-content">' + templateContent + '</div>' + '<div class="modal-footer">' + '<a href="#" class="btn btn-primary" data-dismiss="modal">OK</a>' + '</div>' + '</div>'; break; case 'dropdown': template = '<div class="bootstrap-timepicker-widget dropdown-menu">' + templateContent + '</div>'; break } return template }, getTime: function () { if (this.hour === '') { return '' } return this.hour + ':' + (this.minute.toString().length === 1 ? '0' + this.minute : this.minute) + (this.showSeconds ? ':' + (this.second.toString().length === 1 ? '0' + this.second : this.second) : '') + (this.showMeridian ? ' ' + this.meridian : '') }, hideWidget: function () { if (this.isOpen === false) { return } this.$element.trigger({ 'type': 'hide.timepicker', 'time': { 'value': this.getTime(), 'hours': this.hour, 'minutes': this.minute, 'seconds': this.second, 'meridian': this.meridian } }); if (this.template === 'modal' && this.$widget.modal) { this.$widget.modal('hide') } else { this.$widget.removeClass('open') } $(document).off('mousedown.timepicker, touchend.timepicker'); this.isOpen = false; this.$widget.detach() }, highlightUnit: function () { this.position = this.getCursorPosition(); if (this.position >= 0 && this.position <= 2) { this.highlightHour() } else if (this.position >= 3 && this.position <= 5) { this.highlightMinute() } else if (this.position >= 6 && this.position <= 8) { if (this.showSeconds) { this.highlightSecond() } else { this.highlightMeridian() } } else if (this.position >= 9 && this.position <= 11) { this.highlightMeridian() } }, highlightNextUnit: function () { switch (this.highlightedUnit) { case 'hour': this.highlightMinute(); break; case 'minute': if (this.showSeconds) { this.highlightSecond() } else if (this.showMeridian) { this.highlightMeridian() } else { this.highlightHour() } break; case 'second': if (this.showMeridian) { this.highlightMeridian() } else { this.highlightHour() } break; case 'meridian': this.highlightHour(); break } }, highlightPrevUnit: function () { switch (this.highlightedUnit) { case 'hour': if (this.showMeridian) { this.highlightMeridian() } else if (this.showSeconds) { this.highlightSecond() } else { this.highlightMinute() } break; case 'minute': this.highlightHour(); break; case 'second': this.highlightMinute(); break; case 'meridian': if (this.showSeconds) { this.highlightSecond() } else { this.highlightMinute() } break } }, highlightHour: function () { var $element = this.$element.get(0), self = this; this.highlightedUnit = 'hour'; if ($element.setSelectionRange) { setTimeout(function () { if (self.hour < 10) { $element.setSelectionRange(0, 1) } else { $element.setSelectionRange(0, 2) } }, 0) } }, highlightMinute: function () { var $element = this.$element.get(0), self = this; this.highlightedUnit = 'minute'; if ($element.setSelectionRange) { setTimeout(function () { if (self.hour < 10) { $element.setSelectionRange(2, 4) } else { $element.setSelectionRange(3, 5) } }, 0) } }, highlightSecond: function () { var $element = this.$element.get(0), self = this; this.highlightedUnit = 'second'; if ($element.setSelectionRange) { setTimeout(function () { if (self.hour < 10) { $element.setSelectionRange(5, 7) } else { $element.setSelectionRange(6, 8) } }, 0) } }, highlightMeridian: function () { var $element = this.$element.get(0), self = this; this.highlightedUnit = 'meridian'; if ($element.setSelectionRange) { if (this.showSeconds) { setTimeout(function () { if (self.hour < 10) { $element.setSelectionRange(8, 10) } else { $element.setSelectionRange(9, 11) } }, 0) } else { setTimeout(function () { if (self.hour < 10) { $element.setSelectionRange(5, 7) } else { $element.setSelectionRange(6, 8) } }, 0) } } }, incrementHour: function () { if (this.hour == '' && this.minute == '' && this.second == '') { this.setDefaultTime(this.defaultTime) } if (this.showMeridian) { if (this.hour === 11) { this.hour++; return this.toggleMeridian() } else if (this.hour === 12) { this.hour = 0 } } if (this.hour === 23) { this.hour = 0; return } this.hour++ }, incrementMinute: function (step) { var newVal; if (step) { newVal = this.minute + step } else { newVal = this.minute + this.minuteStep - (this.minute % this.minuteStep) } if (newVal > 59) { this.incrementHour(); this.minute = newVal - 60 } else { this.minute = newVal } }, incrementSecond: function () { var newVal = this.second + this.secondStep - (this.second % this.secondStep); if (newVal > 59) { this.incrementMinute(true); this.second = newVal - 60 } else { this.second = newVal } }, mousewheel: function (e) { if (this.disableMousewheel) { return } e.preventDefault(); e.stopPropagation(); var delta = e.originalEvent.wheelDelta || -e.originalEvent.detail, scrollTo = null; if (e.type === 'mousewheel') { scrollTo = (e.originalEvent.wheelDelta * -1) } else if (e.type === 'DOMMouseScroll') { scrollTo = 40 * e.originalEvent.detail } if (scrollTo) { e.preventDefault(); $(this).scrollTop(scrollTo + $(this).scrollTop()) } switch (this.highlightedUnit) { case 'minute': if (delta > 0) { this.incrementMinute() } else { this.decrementMinute() } this.highlightMinute(); break; case 'second': if (delta > 0) { this.incrementSecond() } else { this.decrementSecond() } this.highlightSecond(); break; case 'meridian': this.toggleMeridian(); this.highlightMeridian(); break; default: if (delta > 0) { this.incrementHour() } else { this.decrementHour() } this.highlightHour(); break } return false }, place: function () { if (this.isInline) { return } var widgetWidth = this.$widget.outerWidth(), widgetHeight = this.$widget.outerHeight(), visualPadding = 10, windowWidth = $(window).width(), windowHeight = $(window).height(), scrollTop = $(window).scrollTop(); var zIndex = parseInt(this.$element.parents().filter(function () { }).first().css('z-index'), 10) + 10; var offset = this.component ? this.component.parent().offset() : this.$element.offset(); var height = this.component ? this.component.outerHeight(true) : this.$element.outerHeight(false); var width = this.component ? this.component.outerWidth(true) : this.$element.outerWidth(false); var left = offset.left, top = offset.top; this.$widget.removeClass('timepicker-orient-top timepicker-orient-bottom timepicker-orient-right timepicker-orient-left'); if (this.orientation.x !== 'auto') { this.picker.addClass('datepicker-orient-' + this.orientation.x); if (this.orientation.x === 'right') { left -= widgetWidth - width } } else { this.$widget.addClass('timepicker-orient-left'); if (offset.left < 0) { left -= offset.left - visualPadding } else if (offset.left + widgetWidth > windowWidth) { left = windowWidth - widgetWidth - visualPadding } } var yorient = this.orientation.y, topOverflow, bottomOverflow; if (yorient === 'auto') { topOverflow = -scrollTop + offset.top - widgetHeight; bottomOverflow = scrollTop + windowHeight - (offset.top + height + widgetHeight); if (Math.max(topOverflow, bottomOverflow) === bottomOverflow) { yorient = 'top' } else { yorient = 'bottom' } } this.$widget.addClass('timepicker-orient-' + yorient); if (yorient === 'top') { top += height } else { top -= widgetHeight + parseInt(this.$widget.css('padding-top'), 10) } this.$widget.css({ top: top, left: left, zIndex: zIndex }) }, remove: function () { $('document').off('.timepicker'); if (this.$widget) { this.$widget.remove() } delete this.$element.data().timepicker }, setDefaultTime: function (defaultTime) { if (!this.$element.val()) { if (defaultTime === 'current') { var dTime = new Date(), hours = dTime.getHours(), minutes = dTime.getMinutes(), seconds = dTime.getSeconds(), meridian = 'AM'; if (seconds !== 0) { seconds = Math.ceil(dTime.getSeconds() / this.secondStep) * this.secondStep; if (seconds === 60) { minutes += 1; seconds = 0 } } if (minutes !== 0) { minutes = Math.ceil(dTime.getMinutes() / this.minuteStep) * this.minuteStep; if (minutes === 60) { hours += 1; minutes = 0 } } if (this.showMeridian) { if (hours === 0) { hours = 12 } else if (hours >= 12) { if (hours > 12) { hours = hours - 12 } meridian = 'PM' } else { meridian = 'AM' } } this.hour = hours; this.minute = minutes; this.second = seconds; this.meridian = meridian; this.update() } else if (defaultTime === false) { this.hour = 0; this.minute = 0; this.second = 0; this.meridian = 'AM' } else { this.setTime(defaultTime) } } else { this.updateFromElementVal() } }, setTime: function (time, ignoreWidget) { if (!time) { this.clear(); return } var timeArray, hour, minute, second, meridian; if (typeof time === 'object' && time.getMonth) { hour = time.getHours(); minute = time.getMinutes(); second = time.getSeconds(); if (this.showMeridian) { meridian = 'AM'; if (hour > 12) { meridian = 'PM'; hour = hour % 12 } if (hour === 12) { meridian = 'PM' } } } else { if (time.match(/p/i) !== null) { meridian = 'PM' } else { meridian = 'AM' } time = time.replace(/[^0-9\:]/g, ''); timeArray = time.split(':'); hour = timeArray[0] ? timeArray[0].toString() : timeArray.toString(); minute = timeArray[1] ? timeArray[1].toString() : ''; second = timeArray[2] ? timeArray[2].toString() : ''; if (hour.length > 4) { second = hour.substr(4, 2) } if (hour.length > 2) { minute = hour.substr(2, 2); hour = hour.substr(0, 2) } if (minute.length > 2) { second = minute.substr(2, 2); minute = minute.substr(0, 2) } if (second.length > 2) { second = second.substr(2, 2) } hour = parseInt(hour, 10); minute = parseInt(minute, 10); second = parseInt(second, 10); if (isNaN(hour)) { hour = 0 } if (isNaN(minute)) { minute = 0 } if (isNaN(second)) { second = 0 } if (this.showMeridian) { if (hour < 1) { hour = 1 } else if (hour > 12) { hour = 12 } } else { if (hour >= 24) { hour = 23 } else if (hour < 0) { hour = 0 } if (hour < 13 && meridian === 'PM') { hour = hour + 12 } } if (minute < 0) { minute = 0 } else if (minute >= 60) { minute = 59 } if (this.showSeconds) { if (isNaN(second)) { second = 0 } else if (second < 0) { second = 0 } else if (second >= 60) { second = 59 } } } this.hour = hour; this.minute = minute; this.second = second; this.meridian = meridian; this.update(ignoreWidget) }, showWidget: function () { if (this.isOpen) { return } if (this.$element.is(':disabled')) { return } this.$widget.appendTo(this.appendWidgetTo); var self = this; $(document).on('mousedown.timepicker, touchend.timepicker', function (e) { if (!(self.$element.parent().find(e.target).length || self.$widget.is(e.target) || self.$widget.find(e.target).length)) { self.hideWidget() } }); this.$element.trigger({ 'type': 'show.timepicker', 'time': { 'value': this.getTime(), 'hours': this.hour, 'minutes': this.minute, 'seconds': this.second, 'meridian': this.meridian } }); this.place(); if (this.disableFocus) { this.$element.blur() } if (this.hour === '') { if (this.defaultTime) { this.setDefaultTime(this.defaultTime) } else { this.setTime('0:0:0') } } if (this.template === 'modal' && this.$widget.modal) { this.$widget.modal('show').on('hidden', $.proxy(this.hideWidget, this)) } else { if (this.isOpen === false) { this.$widget.addClass('open') } } this.isOpen = true }, toggleMeridian: function () { this.meridian = this.meridian === 'AM' ? 'PM' : 'AM' }, update: function (ignoreWidget) { this.updateElement(); if (!ignoreWidget) { this.updateWidget() } this.$element.trigger({ 'type': 'changeTime.timepicker', 'time': { 'value': this.getTime(), 'hours': this.hour, 'minutes': this.minute, 'seconds': this.second, 'meridian': this.meridian } }) }, updateElement: function () { this.$element.val(this.getTime()).change() }, updateFromElementVal: function () { this.setTime(this.$element.val()) }, updateWidget: function () { if (this.$widget === false) { return } var hour = this.hour, minute = this.minute.toString().length === 1 ? '0' + this.minute : this.minute, second = this.second.toString().length === 1 ? '0' + this.second : this.second; if (this.showInputs) { this.$widget.find('input.bootstrap-timepicker-hour').val(hour); this.$widget.find('input.bootstrap-timepicker-minute').val(minute); if (this.showSeconds) { this.$widget.find('input.bootstrap-timepicker-second').val(second) } if (this.showMeridian) { this.$widget.find('input.bootstrap-timepicker-meridian').val(this.meridian) } } else { this.$widget.find('span.bootstrap-timepicker-hour').text(hour); this.$widget.find('span.bootstrap-timepicker-minute').text(minute); if (this.showSeconds) { this.$widget.find('span.bootstrap-timepicker-second').text(second) } if (this.showMeridian) { this.$widget.find('span.bootstrap-timepicker-meridian').text(this.meridian) } } }, updateFromWidgetInputs: function () { if (this.$widget === false) { return } var t = this.$widget.find('input.bootstrap-timepicker-hour').val() + ':' + this.$widget.find('input.bootstrap-timepicker-minute').val() + (this.showSeconds ? ':' + this.$widget.find('input.bootstrap-timepicker-second').val() : '') + (this.showMeridian ? this.$widget.find('input.bootstrap-timepicker-meridian').val() : ''); this.setTime(t, true) }, widgetClick: function (e) { e.stopPropagation(); e.preventDefault(); var $input = $(e.target), action = $input.closest('a').data('action'); if (action) { this[action]() } this.update(); if ($input.is('input')) { $input.get(0).setSelectionRange(0, 2) } }, widgetKeydown: function (e) { var $input = $(e.target), name = $input.attr('class').replace('bootstrap-timepicker-', ''); switch (e.keyCode) { case 9: if (e.shiftKey) { if (name === 'hour') { return this.hideWidget() } } else if ((this.showMeridian && name === 'meridian') || (!this.showMeridian && this.showSeconds && name === 'second') || (!this.showMeridian && !this.showSeconds && name === 'minute')) { return this.hideWidget() } break; case 27: this.hideWidget(); break; case 38: e.preventDefault(); switch (name) { case 'hour': this.incrementHour(); break; case 'minute': this.incrementMinute(); break; case 'second': this.incrementSecond(); break; case 'meridian': this.toggleMeridian(); break } this.setTime(this.getTime()); $input.get(0).setSelectionRange(0, 2); break; case 40: e.preventDefault(); switch (name) { case 'hour': this.decrementHour(); break; case 'minute': this.decrementMinute(); break; case 'second': this.decrementSecond(); break; case 'meridian': this.toggleMeridian(); break } this.setTime(this.getTime()); $input.get(0).setSelectionRange(0, 2); break } }, widgetKeyup: function (e) { if ((e.which === 65) || (e.which === 77) || (e.which === 80) || (e.which === 46) || (e.which === 8) || (e.which >= 48 && e.which <= 57) || (e.which >= 96 && e.which <= 105)) { this.updateFromWidgetInputs() } } }; $.fn.timepicker = function (option) { var args = Array.apply(null, arguments); args.shift(); return this.each(function () { var $this = $(this), data = $this.data('timepicker'), options = typeof option === 'object' && option; if (!data) { $this.data('timepicker', (data = new Timepicker(this, $.extend({}, $.fn.timepicker.defaults, options, $(this).data())))) } if (typeof option === 'string') { data[option].apply(data, args) } }) }; $.fn.timepicker.defaults = { defaultTime: 'current', disableFocus: false, disableMousewheel: false, isOpen: false, minuteStep: 15, modalBackdrop: false, orientation: { x: 'auto', y: 'auto' }, secondStep: 15, showSeconds: false, showInputs: true, showMeridian: true, template: 'dropdown', appendWidgetTo: 'body', showWidgetOnAddonClick: true }; $.fn.timepicker.Constructor = Timepicker })(jQuery, window, document);
;
function morf(_settings) {
    var that = this;   
    that.isLoading = true;
    that.settings = $.extend({
        id: null,
        apidata: null,
        api: null,
        data: {},
        tabs: [],
        customtabs: [],///this is needed to serialized custom data to save in new table
        tabdata: {},
        isupdatecontact: false,
        isDatabase: null,
        formtype: null,
        create: false,
        languageObject: [],
        tablocalizationdata: [],
        v5profile: false,
        usestepwizard: false,
        userlang:'en', // this is we use as default lang of user if not pass it from page
    }, _settings);
    if (that.settings.tab !== undefined) {
        that.settings.tabs.push("info");
        that.settings.tabdata["info"] = that.settings.tab;
    }
    that.dom = {};
    that.columns = [];
    that.dom.container = $("#" + that.settings.id);
    that.dom.container.empty();
    that.init();
    that.isLoading = false;
    tablocalizationdata = that.settings.tablocalizationdata;
    that.initgroupsettings();
}

var isfieldvisible = false;
if (hideBooleanCheckboxLabelForMorf === undefined)
    var hideBooleanCheckboxLabelForMorf = false;//To make hide placeholder 'enable' configurable at compamy level#73658
if (enableLoc === undefined)
    var enableLoc = "Enable";
morf.prototype.init = function () {
    var that = this;
    var usestepwizard = that.settings.usestepwizard;
    that.dom.tabHeader = $("<ul class='nav nav-tabs bordered'></ul>");

    if (that.settings.tabs.length > 1)
        that.dom.tabHeader.appendTo(that.dom.container);

    that.dom.tabContainer = $("<div class='tab-content addwidth padding-20'>").appendTo(that.dom.container);

    that.dom.tabs = {};
    for (var i = 0; i < that.settings.tabs.length; i++) {
        var tab = that.settings.tabs[i];
        var tabdata = that.settings.tabdata[tab];
        if (tabdata !== undefined) {
            var tabid = getUniqueTime();

            var $tab = $("<li></li>");
            if (tabdata.class !== undefined)
                $tab.addClass(tabdata.class);

            var tablidom = $tab.appendTo(that.dom.tabHeader);
            if (i == 0)
                tablidom.addClass("active");

            tablidom.append("<a href='#" + tabid + "' data-toggle='tab'>" + tabdata.name + "</li>");
            var tabcdom = $("<div class='tab-pane fade' id='" + tabid + "'></div>").appendTo(that.dom.tabContainer);
            if (that.settings.v5profile) { tabcdom.addClass(tabdata.class); }
            if (i == 0)
                tabcdom.addClass("active").addClass("in");

            var columns = 12;
            var $row = $("<div class='row'></div>").appendTo(tabcdom);

            // Storing all groupparsername in one array, It is used to get count how many fields are there in group and base
            // later it is used to decide col-12 or col-6         
            var fieldsundergroup = [];
            var groupsundergroup = [];
            tabdata.columns.forEach((x) => {
                if (!x.isfieldgroup) {
                    fieldsundergroup.push(x.groupparsername);
                }
                else {
                    groupsundergroup.push(x.groupparsername);
                }
            });
            for (var c = 0; c < tabdata.columns.length; c++) {
                var column = tabdata.columns[c];
                var isCustomMadeTabs = (that.settings.customtabs.includes(tab) ? true : false) // To check tab is custom tab or not 
                if (column.isfieldgroup == true) { // to check it a group or not
                    var field = column; // if it is group then assign group data(field) to field variable
                    var settingField = that.settings.fields[column.name.replace("chkpush_", "").replace("chkpull_", "")];
                    if (settingField != undefined) {
                        field.showtooltip = settingField.showtooltip;
                        field.tooltipicon = settingField.tooltipicon;
                        field.tooltip = settingField.tooltip;
                    }
                }
                else {
                    var field = that.settings.fields[column.name.replace("chkpush_", "").replace("chkpull_", "")]; // else assign field data
                }
                if (column.placeholdertext != undefined && column.placeholdertext != "")
                    field.placeholdertext = column.placeholdertext;

                var formFor = that.settings.formfor;
                
                if (field === undefined) {
                    //console.debug("Missing: " + column.name);
                } else {
                    var def = {
                        id: null,
                        displayname: null,
                        table: null,
                        field: null,
                        customfield: null,
                        fieldedittype: 0,
                        allownull: false,
                        required: false,
                        unique: false,                       
                        masked: false,
                        regex: null,
                        regexmask: null,
                        format: null,
                        minimum: null,
                        maximum: null,
                        usehtmleditor: false,
                        dictionary: null,
                        dictionaryjson: null,
                        isduplicate: false,
                        ignoreval:false,
                        type: "text",
                        icon: field!=false && field?.type != undefined ? that.getDefaultIcon(field.type) : "", 
                        warnonempty: false,
                        mask: null,
                        maskfill: "X",
                        value: that.settings.data[column.name],
                        size: 12,
                        iconprefix: "fa"
                    };

                    if (def.value === undefined)
                        def.value = null;

                    field = $.extend(def, field);
                    field = $.extend(field, column);

                    if (isCustomMadeTabs && column.groupparsername != undefined && !field.fixedsize)
                        field.size = ((fieldsundergroup.filter(x => x === column.groupparsername).length == 1) ? 12 : 6);

                    var $target = $("<div></div>");
                    field.container = $target;
                    $target.data('formfield', field)
                    if (field.isfieldgroup) { // To check it is a group
                        if (groupsundergroup.includes(field.parser)) // To check group have inner groups
                            that.checkfieldsvisibilityundergroup(field.parser, tabdata.columns); // calling recusive function to check inner groups have field or not 
                        else if (fieldsundergroup.includes(field.parser)) //  To check group have fields
                            isfieldvisible = true; // if group have fields then isfieldvisible = true
                        if (isfieldvisible) //check isfieldvisible == true
                            field.control = that.initGroup($target, field); //if group have fields or inner group + fields then render Ui
                        isfieldvisible = false; //then after group render set isfieldvisible = false
                    }
                    else if (!field.type || field.type === "text" && !field.isfieldgroup)
                        field.control = that.initText($target, field);
                    else if (field.type === "email")
                        field.control = that.initText($target, field);
                    else if (field.type === "phone")
                        field.control = that.initText($target, field);
                    else if (field.type === "datetime") {
                        if (field.dataformat != "" && field.dataformat!= "null" && field.dataformat!= null && field.dataformat != "undefined") {
                            var Dataformat = JSON.parse(field.dataformat);
                            if (Dataformat != null) {
                                if (Dataformat.type == "datetime")
                                    field.control = that.initDateTime($target, field);
                                else if (Dataformat.type == "date")
                                    field.control = that.initDate($target, field);
                                else if (Dataformat.type == "time")
                                    field.control = that.initTime($target, field);
                            }
                        }
                        else
                            field.control = that.initDateTime($target, field);
                    }
                    else if (field.type === "date")
                        field.control = that.initDate($target, field);
                    else if (field.type === "time")
                        field.control = that.initTime($target, field);
                    else if (field.type === "check" || field.type === "checkbox")
                        field.control = that.initCheck($target, field);
                    else if (field.type === "switch")
                        field.control = that.initSwitchonoff($target, field, formFor);
                    else if (field.type === "dropdown")
                        field.control = that.initDropdown($target, field);
                    else if (field.type === "textarea")
                        field.control = that.initTextArea($target, field);
                    else if (field.type == "image") {
                        if (that.settings.v5profile)
                            field.control = that.initImagev5($target, field);
                        else
                            field.control = that.initImage($target, field);
                    }
                    else if (field.type == "document") {
                        if (that.settings.v5profile)
                            field.control = that.initDocumentv5($target, field);
                        else
                            field.control = that.initDocument($target, field);
                    }
                    else if (field.type == "button")
                        field.control = that.initButton($target, field);
                    else if (field.type === "password")
                        field.control = that.initText($target, field);
                    else if (field.type === "textdropdown")
                        field.control = that.initTextDropdown($target, field);
                    else if (field.type === "differentiator")
                        field.control = that.initDifferentiator($target, field);
                    else {
                        field.control = that.initText($target, field);
                        //console.debug(field.type);
                    }

                    field = $target.data('formfield');
                    if (field.type === "differentiator") {
                        $target.html(field.control);
                    }

                    columns -= field.size;

                    if (usestepwizard) {
                        $row.append($target);
                        columns = 12;
                    }
                    else if (isCustomMadeTabs && field.groupparsername != null && field.groupparsername != "") {
                        $('[vparser="' + field.groupparsername + '"].groupInnerDiv').append($target);
                        columns = 12;
                    }
                    else {
                        if (field.isfieldgroup) {
                            if (columns < 2) { // contactcompany size is 5 so rather comparing with 0 it would be 1 so put < 2 as condition
                                $row.append($target);
                                columns = 12;
                                $row = $("<div class='row'></div>").appendTo(tabcdom);
                            }
                            else if (columns > 0) {
                                $row.append($target);
                            }
                            else if (columns < 0) {
                                //columns += 12
                                //$row = $("<div class='row'></div>").appendTo(tabcdom);
                                $row.append($target);
                            }
                        }
                        else {
                            if (columns == 0) {
                                //if (field.type == "check")
                                //    $row.addClass("smart-form").css("margin-left","-13px");
                                $row.append($target);
                                $row = $("<div class='row'></div>").appendTo(tabcdom);
                            }
                            else if (columns > 0) {
                                //if (field.type == "check")
                                //    $row.addClass("smart-form").css("margin-left","-13px");;
                                $row.append($target);
                            }
                            else if (columns < 0) {
                                columns += 12
                                $row = $("<div class='row'></div>").appendTo(tabcdom);
                                $row.append($target);
                            }
                        }
                    }
                    if (field.separator == "both") {
                        $row.children().first().attr("style", "margin-bottom:20px;")
                        $row.prepend("<hr style='margin-top: 0; clear:both; border-color:#cccccc;'>");
                        $row.append("<hr style='margin-bottom:0; clear:both; border-color:#cccccc;'>");
                    }
                }
                that.settings.fields[column.name] = field;                          

                

            }
        }
    }
};

//function to check inner group have group + fields
morf.prototype.checkfieldsvisibilityundergroup = function (groupparsername, allfields) { 
    var that = this;
    allfields.forEach((x) => {
        if (x.groupparsername == groupparsername && !x.isfieldgroup) { 
            isfieldvisible = true; // if group have fields then set isfieldvisible = true
        }
        else if(x.groupparsername == groupparsername && x.isfieldgroup) {
            that.checkfieldsvisibilityundergroup(x.parser, allfields); // if group have another inner group then call function itself to child inner group
        }
    })
    return;
}

morf.prototype.initContainer = function ($target, data) {
    $target.addClass("form-group");
    $target.addClass("col");
    $target.addClass("col-sm-" + data.size);
}

morf.prototype.initLabel = function ($target, data) {
    //label
    var $label = $("<label></label>");
	if (data.type != 'button') {
       if (this.settings.isupdatecontact) {
			//var $chkb = $('<label><input type="checkbox" class="checkbox style-2"><span>' + data.displayname + '</span></label>');
           var $chkb = $('<span name="' + data.name + '">' + data.displayname + '</span><span class="onoffswitch"><input type="checkbox" name="start_interval" class="onoffswitch-checkbox" id="chk_' + data.name + '"><label class="onoffswitch-label" for="chk_' + data.name + '"> <div class="onoffswitch-inner" data-swchon-text="ON" data-swchoff-text="OFF"></div> <div class="onoffswitch-switch"></div> </label> </span>')
			$label.append($chkb);
		}
       else
           $label.html(data.displayname);

		if (data.required)
			$label.append("&nbsp;<span class='text-danger'>*</span>");
        if (data.showtooltip) {
            if (data.tooltipicon) {
                if ($target.hasClass("smart-form") && (data.type == 'check' || data.type == 'checkbox'))
                    $target.removeClass("smart-form");
                var $icon = $("<i class='fa fa-lg fa-info-circle' style='color: #bbb; margin-left: 5px;'></i>");
                $label.attr("rel", "tooltip").attr("data-placement", "right").attr("data-original-title", data.tooltip);
                $icon.attr("rel", "tooltip").attr("data-placement", "top").attr("data-original-title", data.tooltip);
                $target.append($label);
                $target.append($icon);
            } else {
                if ($target.hasClass("smart-form") && (data.type == 'check' || data.type == 'checkbox'))
                    $target.removeClass("smart-form");
                $label.attr("rel", "tooltip").attr("data-placement", "right").attr("data-original-title", data.tooltip);
                $target.append($label);
            }
        } else {
            $target.append($label);
        }
	}
	else {
		if (data.label != null)
			$target.append($label);
	}
}

morf.prototype.initSwitchonoff = function ($target, data, formfor) {
    var that = this;
    //setup defaults
    data = $.extend({
        displayname: '',
        name: '',
        icon: null,
        info: null,
        fieldedittype: 0,
        warnonempty: false,
        placeholder: data.placeholder,
        min: null,
        max: null,
        mask: null,
        maskfill: "",
        value: false,
        size: 12,
        class: null,
        showtooltip: false,
        tooltip: "",
        tooltipicon: false
    }, data);

    //mark that the data hasn't changed
    $target.addClass(data.class);
    if (data.type == "switch" && data.displayname.toLowerCase() == "pull")
        $target.addClass("pulldiv");

    that.initContainer($target, data);
    that.initLabel($target, data);
    that.initInfo($target, data);
    that.initVisualize($target, data);
    var id = "";
    if (formfor == "lead")
        id = "lead_";
    else if (formfor == "organization")
        id = "organization_";
    else if (formfor == "partner")
        id = "partner_";
    else if (formfor == "case")
        id = "case_";
    else if (formfor == "customer")
        id = "customer_";
    else if (formfor == "certification")
        id = "certification_";
    else if (formfor == "partnerAccount")
        id = "partneraccount_";

    var divid = id + data.name;
    var $div = $('<div class="social-cat-temp" id="' + divid + '"></div>');
    var $onbtn = $('<div class="btn btn-default btn-on" onclick="onOffTrigger(this)" disabled="true">On</div>');
    var $offbtn = $('<div class="btn btn-default btn-off" onclick="onOffTrigger(this)" disabled="true">Off</div>');
    
    if (data.value) {
        $onbtn.addClass('active');
    }
    else
        $offbtn.addClass('active');

    $div.append($onbtn);
    $div.append($offbtn);

    $target.append($div);  
    
    //update data
    $target.data("formfield", data);
    data.val(data.value);

    return $div;
}

morf.prototype.initVisualize = function ($target, data) {
    //Visualization
        var focusBlurSetup = false;
        $target.hover(function () {
            if (!focusBlurSetup) {
                $target.find('input').focus(function () {
                    $target.find('label').addClass("form-label-hover");
                }).blur(function () {
                    $target.find('label').removeClass("form-label-hover");
                });
                focusBlurSetup = true;
            }
            $target.find('label').addClass("form-label-hover");
        }, function () {
            var $input = $target.find("input");
            if ($input.is(":focus"))
                return;

            $target.find('label').removeClass("form-label-hover");
        });
}

morf.prototype.initInfo = function ($target, data) {
    //info
    if (data.type != "datetime" && data.type != "image" && data.type != "document" && !data.isfieldgroup) {
        if (data.info === null) {
            if (data.maximum !== null && data.maximum > 0) {
                var min = 0;
                if (data.minimum !== undefined && data.minimum !== null)
                    min = data.minimum;
                var fieldname ="";
                if (data.field != null)
                    fieldname = data.field.toLowerCase();
                if ((data.mask == "(999) 999-9999" || data.mask == "(999)-9999999") && (fieldname == "telephone" || fieldname == "mobile" || fieldname == "worknumber" || fieldname == "homenumber" || fieldname == "mobilenumber" || fieldname == "fax" || fieldname == "directnumber" || fieldname == "alternatenumber"))
                    data.info = "0-10 characters";
                else if (data.type == "number")
                    data.info = 'between ' + min + '-' + data.maximum;
                else 
                    data.info = min + '-' + data.maximum + ' ' + charLoc;
            }
        }
    }
    //// this is nothing but to add tooltip is dropdown has any specific value
    //formtype added temporary and will be removed after proper dropdown issue fixed
    if (this.settings.formtype == "mdf" && data.type == "dropdown") {
        var dict = data.dictionaryjson;
        if (dict != null) {
            if (dict.entries != null && dict.entries != undefined && dict.entries.length > 0 && dict.type == 'custom' && data.fieldedittype == 14 && data.table.indexOf("_") >= 0) {
                //var tooltip = dict.entries.filter(function (obj) {
                //    var defaultname = data.value; // this will handle defaultvalye set for dropdown and also for null data.
                //    return obj.name == defaultname;
                //})[0];
                var tooltipvalue = data.value;
                var $info = $("<i class='fa fa-lg fa-info-circle' data-toggle='popover' data-trigger='hover' data-html='true'></i>");

                $('[data-toggle="popover"]').popover({
                    container: 'body',
                    placement: get_popover_placement
                });
                if (tooltipvalue != undefined && data.value !== '' && data.value !== null) {
                    $info.attr("data-content", tooltipvalue);
                } else {
                    $info.attr("data-content", '');
                    $info.css('display', 'none');
                }

                data.info = $info[0].outerHTML;
            }
        }
    }

    if (data.info) {
        if (data.type != "check") {
            var $p = $("<p class='note'></p>").appendTo($target);
            if (data.maximum <= 65536 || data.type.toLowerCase() == "number")
                $p.html(data.info);
            var focusBlurSetup = false;
            $target.hover(function () {
                if (!focusBlurSetup) {
                    $target.find('input').focus(function () {
                        $p.stop().animate({ "opacity": "1" }, 400);
                    }).blur(function () {
                        $p.stop().animate({ "opacity": "0.0" }, 400);
                    });
                    focusBlurSetup = true;
                }
                $p.stop().animate({ "opacity": "1" }, 400);
            }, function () {
                var $input = $target.find("input");
                if ($input.is(":focus"))
                    return;

                $p.stop().animate({ "opacity": "0.0" }, 400);
            });
        }
    }
}

morf.prototype.initControl = function ($target, $control, data) {
    //icon    
    if (data.type != "button" && !data.isfieldgroup) {
        var $span = $("<span></span>");

        $span.addClass("input-group-addon");
        $span.append("<i class='" + data.iconprefix + " fa-" + data.icon + "'></i>");

    }

    var $group = $("<div></div>");
    $group.addClass("input-group");
    $group.append($control);
    if(data.type != "textdropdown")
        $group.append($span);

    //add to target
    $target.append($group);
}

function changeArrow(element) {
    if ($(element).find('.fa-chevron-up').length == 1) {
        $(element).find('.fa-chevron-up').addClass('fa-chevron-down').removeClass('fa-chevron-up');
        $(element).attr("data-original-title", "Click to show the form");
    } else {
        $(element).find('.fa-chevron-down').addClass('fa-chevron-up').removeClass('fa-chevron-down');
        $(element).attr("data-original-title", "Click to hide the form");
    }
}

morf.prototype.initGroup = function ($target, data) {
    var that = this;
    //setup defaults
    data = $.extend({
        displayname: '',
        name: '',
        info: null,
        icon: null,
        fieldedittype: 0,
        warnonempty: false,
        min: null,
        placeholder: data.type.toUpperCase(),
        max: null,
        mask: null,
        maskfill: "X",
        value: '',
        size: 12,
        required: false,
        regexformat: null,
        field: null,
        maximum: null,
        minimum: null,
        class: null,
        readonly: false,
        showtooltip: false,
        tooltip: "",
        tooltipicon: false,
        iconprefix: "fa"
    }, data);

    //mark that the data hasn't changed
    //data.newValue = data.originalValue;
    if (data.value === null)
        data.value = "";

    var $input = $("<div id='group' class='group''></div>") // init basic div for group 
    $input.attr('id', data.parser);
    $input.attr('vname', data.name);
    $input.attr('vdisplay', data.displayname);
    $input.attr('vparser', data.parser);
    $input.attr('fieldid', data.name);
    $input.css({ "border-radius": "5px" });
    $input.append('<h4><label style="padding: 10px; font-size: 14px; font-weight: bold;">' + data.displayname + '</label>' +
        '<div class="group-div-collapse" onclick="changeArrow(this);" data-toggle="collapse" href="#' + data.name + '" rel="tooltip" data-original-title="Click to hide the form"><i class="fa fa-chevron-up"></i></div></h4> <div id="' + data.name + '" vparser="' + data.parser + '" class="groupInnerDiv panel-collapse collapse in"></div>');

    var parentGroupPraserName = data.groupparsername // To get Parent GroupPraserName of group
    parentGroupPraserName = ((parentGroupPraserName == "" || parentGroupPraserName == undefined) ? "" : parentGroupPraserName); // if parentGroupPraserName will be undefined when group is not exists so then that is base

    $input.attr("vparentprasername", parentGroupPraserName);

    if (data.type != null && data.type.toLowerCase() == "text") {
        $input.attr('formtype', "group");
        $input.attr('vformtype', "group");
    }

    let groupLevel = 0;
    if (parentGroupPraserName == "") {
        groupLevel = 0;
        $input.attr('groupLevel', groupLevel);
    }
    else { 
        groupLevel = parseInt($('[vparser="' + parentGroupPraserName + '"]').attr('groupLevel'))+1; // to get the group level of parent group
        $input.attr('groupLevel', groupLevel);
    }

    if (groupLevel == 0 || groupLevel == 2) {
        $input.addClass('gf-level-white');
    }
    else {
        $input.addClass('gf-level-dark');
    }

    $target.addClass(data.class);

    data.size = 12;

    that.initContainer($target, data);
    that.initInfo($target, data);
    that.initControl($target, $input, data);

    var $label = $input.find('label');
    var $h4 = $input.find('h4');
    if (data.showtooltip && data.displayname != "") {
        if (data.tooltipicon) {
            var $icon = $("<i class='fa fa-sm fa-info-circle' style='color: #bbb; margin-left: 0px;'></i>");
            $label.attr("rel", "tooltip").attr("data-placement", "right").attr("data-original-title", data.tooltip);
            $icon.attr("rel", "tooltip").attr("data-placement", "top").attr("data-original-title", data.tooltip);
            $h4.append($icon);
            //$label.parent().append("&nbsp;<i class='fa fa-lg fa-info-circle' rel='tooltip' data-placement='top' style='color: #bbb; margin-left: 5px;' data-original-title='" + data.tooltip + "'></i>");
        }
        else
            $label.attr("rel", "tooltip").attr("data-placement", $label.text().length < 120 ? "right" : "bottom").attr("data-original-title", data.tooltip);
    }

    $target.data("formfield", data);

    return $input;
}

morf.prototype.initText = function ($target, data) {
    var that = this;
    //setup defaults
    data = $.extend({
        displayname: '',
        name: '',
        info: null,
        icon: null,
        fieldedittype: 0,
        warnonempty: false,
        min: null,
        placeholder: data.format != null ? (data.format.length != 0) ? data.format.toUpperCase() : data.type.toUpperCase() : data.type.toUpperCase(),
        max: null,
        mask: null,
        maskfill: "X",
        value: '',
        size: 12,
        required: false,
        regexformat: null,
        field: null,
        maximum: null,
        minimum: null,
        class: null,
        readonly: false,
        showtooltip: false,
        tooltip: "",
        tooltipicon: false,
        iconprefix: "fa"
    }, data);

    //mark that the data hasn't changed
    //data.newValue = data.originalValue;
    if (data.value === null)
        data.value = "";
    var $input = data.type.toLowerCase() == "password" ? $("<input type='password' autocomplete='off'/>") : $("<input type='text'/>");
    $input.addClass("form-control");
    $input.val(data.originalValue);
    if (data.placeholdertext != undefined && data.placeholdertext != "")
        $input.attr('placeholder', "<" + data.placeholdertext + ">");
    else if (data.placeholder != "") { 
        $input.attr('placeholder', "<" + getTypeName(data.placeholder).toUpperCase() + ">");
    }
    //  $input.attr('maximum', data.maximum);
    if (that.settings.isupdatecontact)
        $input.attr('disabled', true);
    if (data.readonly)
        $input.attr('disabled', true);
    var fieldname = "";
    if (data.field != null)
        fieldname = data.field.toLowerCase();
    if ((data.mask == "(999) 999-9999" || data.mask == "(999)-9999999") && (fieldname == "telephone" || fieldname == "mobile" || fieldname == "worknumber" || fieldname == "homenumber" || fieldname == "mobilenumber" || fieldname == "fax" || fieldname == "directnumber" || fieldname == "alternatenumber"))
        $input.attr('maximum', 14);
    else {
        if (data.maximum == -1)
            data.maximum = null;
        $input.attr('maximum', data.maximum);
        $input.attr('minimum', data.minimum);
    }
    if (data.field !== null && data.field !== undefined && data.field !== '') {
        $input.attr('id', data.field.toLowerCase());
        $input.attr('name', data.field.toLowerCase());
    }
    $input.on("update", function () { that.update($target, $input); });
    $input.blur(function () { $input.trigger("update"); });
    $input.keyup(function () { if ($target.hasClass('has-error')) $input.trigger("update"); });
    $target.addClass(data.class);
    if (data.required == true) {
        $input.attr("required", data.required);
    }
    if (data.regexformat != null) {
        $input.attr('regexformat', data.regexformat);
    }
    else if (data.type != null) {
        if (data.type.toLowerCase() == "zipcode")
            $input.attr('regexformat', "zip");
        if (data.type.toLowerCase() == "url")
            $input.attr('regexformat', "url");
        if (data.type.toLowerCase() == "email")
            $input.attr('regexformat', "email");
        if (data.type.toLowerCase() == "currency")
            $input.attr('regexformat', "currency");
        if (data.type.toLowerCase() == "number")
            $input.attr('regexformat', "number");
        if (data.type.toLowerCase() == "datetime")
            $input.attr('regexformat', "datetime");
        if (data.type.toLowerCase() == "alphanumeric")
            $input.attr('regexformat', "alphanumeric");
        if (data.type.toLowerCase() == "alphanumericwithoutspace")
            $input.attr('regexformat', "alphanumericwithoutspace");
    }
    if (data.mask) {
        $input.mask(data.mask, { placeholder: data.maskfill });
    }
    that.initContainer($target, data);
    that.initLabel($target, data);
    that.initInfo($target, data);
    that.initControl($target, $input, data);
    that.initVisualize($target, data);
    //helper to get data
    data.val = function (val) {
        //setter
        if (val !== undefined) {
            if (val === null)
                val = '';

            if (data.mask) {
                $input.unmask();
                $input.val(val);
                $input.mask(data.mask, { placeholder: data.maskfill });
            }
            else {
                $input.val(val);
            }
            if (data.type.toLowerCase() == "number") {
                if (val < data.minimum)
                    $input.val("");
            }
            $input.trigger("update");
        }

        //getter
        if (data.mask)
            return $input.mask().trim();

        return $input.val().trim();
    }

    data.check = function () {
        var regexUrlPattern = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
        var val = data.val();

        if (data.required && val == '')
            return "*Required";

        //if (data.type == "url" && !regexUrlPattern.test(val)) {
        //    return "Invalid Format";
        //}
        return false;
    }

    //update data
    $target.data("formfield", data);

    data.val(data.value);

    return $input;
}

morf.prototype.initDifferentiator = function ($target, data) {
    var that = this;
    //setup defaults
    data = $.extend({
        displayname: '',
        class: '',
        style:''
    }, data);
    return `<div class="col col-sm-12" id="defferentiator"><div class="form-group"><h3 class="defferentiator-title">${data.displayname}</h3><hr style="margin-top:3px;margin-bottom: 18px; border: 0;border-top: 1px solid #D9DCE1;"/></div></div>`;
    
    }

   

morf.prototype.initCheck = function ($target, data) {
    var that = this;

    //setup defaults
    data = $.extend({
        displayname: '',
        name: '',
        icon: null,
        info: null,
        fieldedittype: 0,
        warnonempty: false,
        placeholder: enableLoc,
        min: null,
        max: null,
        mask: null,
        maskfill: "",
        value: false,
        size: 12,
        class: null,
        showtooltip: false,
        tooltip: "",
        tooltipicon: false
    }, data);

    //mark that the data hasn't changed
    //data.newValue = data.originalValue;
    if (hideBooleanCheckboxLabelForMorf && data.placeholder == enableLoc)//To hide enable based on company settings
        data.placeholder = '';
    if (!that.settings.v5profile) {
        $target.addClass("smart-form");
    }
    $target.addClass(data.class);

    that.initContainer($target, data);
    that.initLabel($target, data);
    that.initInfo($target, data);
    that.initVisualize($target, data);
    var $input = $("<input type='checkbox' />");
    if (data.field !== null && data.field !== undefined && data.field !== '') {
        $input.attr('id', data.field.toLowerCase());
        $input.attr('name', data.field.toLowerCase());
    }
    $input.addClass("");
    $input.on("update", function () { that.update($target, $input); });
    $input.change(function () { $input.trigger("update"); });

    var $group = $("<label style='margin-top:7px'></label>").appendTo($target);
    $group.addClass("checkbox");

    $group.append($input);

    $group.append("<i></i> " + data.placeholder);
    if (that.settings.isupdatecontact) {
        $input.attr('disabled', true);
        $group.addClass('state-disabled');
    }
    if (data.readonly)
        $input.attr('disabled', true);
    //helper to get data
    data.val = function (val) {
        //setter
        if (val !== undefined && !that.settings.isupdatecontact) {
            if (val !== true)
                val = false;

            $input.prop("checked", val);
            $input.trigger("update");
        }

        //getter
        return $input.is(":checked");
    }

    data.check = function () {
        return false;
    }

    //update data
    $target.data("formfield", data);

    data.val(data.value);

    return $input;
}

morf.prototype.initDropdown = function ($target, data) {
    var that = this;
    //setup defaults
    data = $.extend({
        displayname: '',
        name: '',
        info: '',
        icon: null,
        fieldedittype: 0,
        warnonempty: false,
        required: false,
        min: null,
        max: null,
        mask: null,
        maskfill: "X",
        value: '',
        size: 12,
        class: null,
        multiselect: false,
        showtooltip: false,
        tooltip: "",
        tooltipicon: false,
        iconprefix: "fa"
    }, data);

    that.initContainer($target, data);
    that.initLabel($target, data);
    that.initInfo($target, data);
    that.initVisualize($target, data);
    $target.addClass(data.class);
    //var id = getUniqueTime();
    var id = data.name;
    var dropdownlist = [];
    var dropdownlistvalue = [];
    var $select = $("<select type='dropdown' style='width:99.9%;' class='select2' id='" + id + "'>").appendTo($target);
    if (data.multiselect)
        $select.attr("multiple", "multiple");
    if (data.required === true)
        $select.attr("required", data.required);
    var dict = that.settings.fields[data.name].dictionaryjson;
    if (dict !== undefined && dict !== null) {
        if (dict.length === undefined) {
            if (dict.allowempty !== undefined) {
                if (dict.allowempty === "true")
                    $select.append("<option selected disabled hidden style='display: none' value=''></option>");
            }
        }
        else if (dict[0] !== undefined) {
            if (dict[0].allowempty !== undefined) {
                if (dict[0].allowempty === "true")
                    $select.append("<option selected disabled hidden style='display: none' value=''></option>");
            }
        }

        if (dict.entries !== undefined && dict.entries.length > 0) {
            for (var i = 0; i < dict.entries.length; i++) {
                dropdownlist.push(dict.entries[i].name);
                dropdownlistvalue.push(dict.entries[i].value);
                if (dict.entries[i].deleted === "0") {
                    var $option = $("<option></option>").appendTo($select);
                    $option.attr("value", dropdownlistvalue[i]);
                    $option.attr("selected", dict.entries[i].selected);
                    if (dict.entries[i].localization == undefined)
                        $option.text(dropdownlist[i]); // this is done to show values having special characters <|>
                    else
                        $option.text(GetLocalizationData(dropdownlist[i], dict.entries[i].localization, this.settings.userlang)); // this is done to show values having special characters <|>
                }
            }
        }
        else if (dict[0]!== undefined && dict[0].entries !== undefined && dict[0].entries.length > 0) {
            for (var i = 0; i < dict[0].entries.length; i++) {
                var $option = $("<option></option>").appendTo($select);
                $option.attr("value", dict[0].entries[i].value);//used htmldecode() to show selected special character values in edit data
                $option.attr("selected", dict[0].entries[i].selected);//used htmldecode() to show selected special character values in edit data
                $option.text(dict[0].entries[i].name); // this is done to show values having special characters <|> 
            }
        }
    }
    if (data.readonly)
        $select.attr('disabled', true);
    $select.select2({width: '99.9%', placeholder: data.placeholder});
    $select.on("select2-blur", function (e) { that.update($target, $select); });
    $select.on("change", function (e) {
        that.update($target, $select);
        if (dict !== undefined && dict !== null) {
            var _dict = dict[0] != undefined ? dict[0] : dict;
            if (_dict.allowempty != undefined) {
                if (_dict.allowempty == "true" && ($select.val() != null && $select.val() != ""))
                    $($target).find(".select2-container .resetvalue").show();
            }
        }
    });

    $select.val(data.originalValue);
    $select.on("update", function () { that.update($target, $select); });
    if (that.settings.isupdatecontact)
        $select.attr('disabled', true);

    //helper to get data
    data.val = function (val,isduplicate,id) {
        //setter
        if (val !== undefined) {
            if (val === null)
                val = '';
            if (val != 0) {
                if (val.length > 1)
                    $select.select2("val", val);
                else
                    $select.select2("val", unescape(val));
            }
            else
                $select.select2("val", val);
            $select.trigger("update");
        }

        if (isduplicate)
            $select = $('#'+id).find('#' + $select.attr('id'));
        return $select.select2("val");
    };

    data.check = function () {
        return false;
    };

    //update data
    $target.data("formfield", data);

    data.val(data.value);
    if (dict !== undefined && dict !== null) {
        var _dict = dict[0] !== undefined ? dict[0] : dict;
        if (_dict.allowempty !== undefined) {
            if (_dict.allowempty === "true") {
                $($target).find(".select2-container").append('<span class="resetvalue cursor-pointer" style="position: absolute;top: 6px;right: 42px;" onclick="reset(this);" rel="tooltip" data-placement="top" data-original-title="Click to set field value as blank"><i class="far fa-xg fa-times-circle"></i></span>');
                if (data.value === "" || data.value === undefined)
                    $($target).find(".resetvalue").hide();
            }
        }
    }
    if (this.settings.formtype == "mdf") {
        if (data.value !== '' && data.value !== null && dict.type == 'custom' && data.table.indexOf("_") >= 0) {
            $($target).find('[data-toggle="popover"]').popover({
                container: 'body',
                placement: get_popover_placement
            });
        }
        else
            $($target).find('i').css('display', 'none');
    }
};
function get_popover_placement(pop, dom_el) {
    var width = window.innerWidth;
    var left_pos = $(dom_el).offset().left;

    if (width < 500) return 'bottom';
    if (width - left_pos > 450) return 'right';
    return 'left';
}
function reset(that) {
    $(that).hide();
    $("#" + $(that).parent().attr("id")).select2("val", "");
    $("#" + $(that).parent().parent().find("select").attr("id")).trigger("change");
}
function htmlDecode(input) {
    var e = document.createElement('div');
    e.innerHTML = input;
    return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
}
morf.prototype.initTextArea = function ($target, data) {
    var that = this;

    //setup defaults
    data = $.extend({
        displayname: '',
        name: '',
        icon: null,
        info: null,
        fieldedittype: 0,
        warnonempty: false,
        placeholder: data.type.toUpperCase(),
        min: null,
        max: null,
        usehtmleditor: false,
        mask: null,
        maskfill: "X",
        value: '',
        size: 12,
        required: false,
        maximum: null,
        minimum: null,
        class: null,
        showtooltip: false,
        tooltip: "",
        tooltipicon: false,
        iconprefix: "fa"
    }, data);

    if (data.value === null)
        data.value = "";
    //mark that the data hasn't changed
    //data.newValue = data.originalValue;

    var $input = $("<textarea rows='3'/>");
    $input.addClass("form-control");
    $input.val(data.originalValue);
    if (data.placeholdertext != undefined && data.placeholdertext != "")
        $input.attr('placeholder', "<" + data.placeholdertext + ">");
    else if (data.placeholder !== "")
        $input.attr('placeholder', "<" + data.placeholder.toUpperCase() + ">");
    $input.attr('minimum', data.minimum);
    $input.attr('maximum', data.maximum);
    if (that.settings.isupdatecontact)
        $input.attr('disabled', true);
    if (data.required === true) {
        $input.attr("required", data.required);
    }
    if (data.readonly)
        $input.attr('readonly', 'readonly');

    if (data.field !== null && data.field !== undefined && data.field !== '') {
        $input.attr('id', data.field.toLowerCase());
        $input.attr('name', data.field.toLowerCase());
    } 
    if (data.readonly)
        $input.attr('readonly', 'readonly');

    if (data.usehtmleditor) {
        $input.attr('usehtmleditor', data.usehtmleditor);
    }
    $target.addClass(data.class);
    that.initContainer($target, data);
    that.initLabel($target, data);
    that.initInfo($target, data);
    that.initControl($target, $input, data);
    that.initVisualize($target, data);

    $input.on("update", function () { that.update($target, $input); });
    if (data.usehtmleditor) {
        //var $settings = JSON.parse(columns[j].fieldsetting);
        $(document).on('click', '.note-toolbar [data-event="codeview"], .note-popover [data-event="codeview"]', function (event) {
            var welBtn = $(event.target).closest('[data-event]');
            if (welBtn.length > 0) {
                var sEvent = welBtn.attr('data-event'),
                    sValue = welBtn.attr('data-value');
                if (sEvent === 'codeview') {
                    var $editor = $(this).closest('.note-editor');
                    if ($editor && $editor.length) {
                        var userInput = $editor.find(".note-editable").html();
                        var sanitizedInput = userInput.replace(/<(form|input|button|iframe|script|style|object|embed)[\s>][\s\S]*?<\/\1?>/gi, '');
                        sanitizedInput = sanitizedInput.replace(/(style\s*=\s*["'][^"']*)position\s*:\s*fixed\s*;?([^"']*["'])/gi, '$1$2');
                        $editor.find(".note-editable").html(sanitizedInput);
                    }
                }
            }
        });
        $input.summernote({
            focus: true, height: 100,
            fontNames: ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New','Noto Sans', 'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande', 'Tahoma', 'Times New Roman', 'Verdana'],
            onblur: function (e) {
                $input.trigger("update");
            },
            onkeyup: function (e) {
                if ($target.hasClass('has-error'))
                    $input.trigger("update");
                showhidegroup($input, that, "10");
            },
            callbacks: {
                onKeyup: function (e) {
                    var value = $input.code();
                    var maxCount = data.maximum;

                    if (value != undefined && value.length > maxCount) {
                        $input.trigger("update");
                    } else {
                        if ($target.hasClass('has-error')) $input.trigger("update");
                    }
                }
            }
        });
    } else {
        $input.keyup(function () { if ($target.hasClass('has-error')) $input.trigger("update"); });
        $input.blur(function () { $input.trigger("update"); });
    }
    if (this.settings.create && data.value != "")
        $input.hidetoolbar();
    //helper to get data
    data.val = function (val) {
        //setter
        if (val !== undefined) {
            if (val === null)
                val = '';

            if (data.usehtmleditor)
                $input.code(val);
            else
                $input.val(val);

            $input.trigger("update");
        }

        //getter
        if (data.usehtmleditor)
            return $input.code();

        return $input.val().trim();
    }

    data.check = function () {
        var regexUrlPattern = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
        var val = data.val();

        if (data.required && val === '')
            return "*Required";

        //if (data.type == "url" && !regexUrlPattern.test(val)) {
        //    return "Invalid Format";
        //}
        return false;
    }

    //update data
    $target.data("formfield", data);

    data.val(data.value);

    return $input;
}

morf.prototype.initDateTime = function ($target, data) {
    var that = this;
    //setup defaults
    data = $.extend({
        displayname: '',
        name: '',
        info: null,
        icon: null,
        fieldedittype: 0,
        warnonempty: false,
        min: null,
        placeholder: data.type.toUpperCase(),
        max: null,
        mask: null,
        maskfill: "X",
        value: '',
        size: 12,
        required: false,
        regexformat: null,
        field: null,
        class: null,
        showtooltip: false,
        tooltip: "",
        tooltipicon: false,
        iconprefix: "fa",
        isbottomdtpicker: false
    }, data);

    //mark that the data hasn't changed
    //data.newValue = data.originalValue;
    if (data.value === null)
        data.value = "";

    var $input = $("<input type='text'/>");
    $input.addClass("form-control dtpicker");
    $input.val(data.originalValue);
    if (data.placeholdertext != undefined && data.placeholdertext != "")
        $input.attr('placeholder', "<" + data.placeholdertext + ">");
    else if (data.placeholder !== "") {
        $input.attr('placeholder', "<" + data.placeholder.toUpperCase() + ">");
    }
    $input.attr('regexformat', "datetime");
    $input.attr('pageModal', "true");
    $input.attr('id', data.field.toLowerCase());
    if (that.settings.isupdatecontact)
        $input.attr('disabled', true);
    if (data.readonly)
        $input.attr('disabled', true);

    if (that.settings.v5profile) {
        $input.on('show.bs.modal', function (event) {
            // prevent datepicker from firing bootstrap modal "show.bs.modal"
            event.stopPropagation();
        });
    }
    $input.on("update", function () { that.update($target, $input); });
    $input.blur(function () { $input.trigger("update"); });
    $input.keyup(function () { if ($target.hasClass('has-error')) $input.trigger("update"); });
    if (data.readonly)
        $input.attr('disabled', true);
    $target.addClass(data.class);
    if (data.required === true) {
        $input.attr("required", data.required);
    }
    if (data.mask) {
        $input.mask(data.mask, { placeholder: data.maskfill });
    }
    var dtposition = data.isbottomdtpicker ? "bottom-left" : "top-left"; //Set Date-Time-Picker bottom align
    $input.datetimepicker({
        format: "mm/dd/yyyy HH:ii:ss P",
        showMeridian: true,
        startDate: "2010-01-01 10:00:00",
        autoclose: true,
        todayBtn: true,
        pickerPosition: dtposition //49559
    });
    that.initContainer($target, data);
    that.initLabel($target, data);
    that.initInfo($target, data);
    that.initControl($target, $input, data);
    that.initVisualize($target, data);

    //helper to get data
    data.val = function (val) {
        //setter
        if (val !== undefined) {
            if (val === null)
                val = '';

            if (data.mask) {
                $input.unmask();
                $input.val(val);
                $input.mask(data.mask, { placeholder: data.maskfill });
            }
            else {
                $input.val(val);
            }
            $input.trigger("update");
        }

        //getter
        if (data.mask)
            return $input.mask().trim();

        return $input.val().trim();
    }
    if (data.class?.includes("datetimedropdown")) {
        $inputBtnDiv = $("<div class='input-group-btn'></div>");
        $inputBtnDiv.attr('id', "dropdown_" + data.field.toLowerCase());
        $defaultBtn = $("<button type='button' tabindex='- 1'></button>").appendTo($inputBtnDiv);
        $defaultBtn.addClass("btn btn-default");

        $toggleBtn = $("<button type='button' tabindex='-1'></button>").appendTo($inputBtnDiv);
        $toggleBtn.addClass("btn btn-default dropdown-toggle");
        if (data.disableDropdown)
            $toggleBtn.addClass("disabled");
        $toggleBtn.attr('data-toggle', 'dropdown');

        $span = $("<span class='caret'></span>");
        $toggleBtn.append($span);

        $ul = $("<ul role='menu' style='max-height:180px;overflow: auto;'></ul>").appendTo($inputBtnDiv);
        $ul.addClass("dropdown-menu pull-right");

        var dict = that.settings.fields[data.name].dictionaryjson;
        if (dict !== undefined && dict !== null) {
            if (dict.entries != undefined && dict.entries.length > 0) {
                for (var i = 0; i < dict.entries.length; i++) {
                    dropdownlist.push(dict.entries[i].name);
                    dropdownlistvalue.push(dict.entries[i].value);
                }
                for (var i = 0; i < dict.entries.length; i++) {
                    if (dict.entries[i].deleted === "0") {
                        var $li = $("<li></li>").appendTo($ul);
                        $a = $("<a href='javascript:void(0);' data-action-item=" + dropdownlistvalue[i] + "></a>").appendTo($li);
                        $a.html(dropdownlist[i]);
                    }
                }

            }
            else if (dict[0] != undefined && dict[0].entries != undefined && dict[0].entries.length > 0) {
                for (var i = 0; i < dict[0].entries.length; i++) {

                    $defaultBtn.text(dict[0].entries[i].name);
                    var $li = $("<li></li>").appendTo($ul);
                    $a = $("<a href='javascript:void(0);' data-action-item=" + dict[0].entries[i].value + "></a>").appendTo($li);
                    $a.text(dict[0].entries[i].name);
                }

                if (data.dropdownVal != undefined)
                    $defaultBtn.text(data.dropdownVal);
                else
                    $defaultBtn.text(dict[0].entries[0].name);
            }
        }
        $inputBtnDiv.appendTo($target.find(".input-group"));

        data.dropVal = function (val) {
            return data.dropdownVal.trim();
        }

        $(document.body).on('click', '#dropdown_' + data.field.toLowerCase() + ' .dropdown-menu li', function (event) {
            var $target = $(event.currentTarget);
            $target.closest('ul').find('li').removeClass('active');
            $target.addClass('active');
            $target.closest('.input-group-btn')
                .find('.btn:first').text($target.text())
                .end()
                .children('.dropdown-toggle').dropdown('toggle');
            data.dropdownVal = $target.text();
            if (data.onValchange != null)
                data.onValchange(data.dropdownVal);
        });

    }
    data.check = function () {
        var val = data.val();
        if (data.required && val == '')
            return "*Required";

        return false;
    }

    //update data
    $target.data("formfield", data);
   
    if (data.value != "") {   
        var date = new Date(data.value);        
        date = date.format("mm/dd/yyyy hh:MM:ss TT");        
        data.val(date.toLocaleString());
    }
    else
        data.val(data.value);
    return $input;
}

morf.prototype.initTime = function ($target, data) {
    var that = this;
    //setup defaults
    data = $.extend({
        displayname: '',
        name: '',
        info: null,
        icon: null,
        fieldedittype: 0,
        warnonempty: false,
        min: null,
        placeholder: data.type.toUpperCase(),
        max: null,
        mask: null,
        maskfill: "X",
        value: '',
        size: 12,
        required: false,
        regexformat: null,
        field: null,
        class: null,
        showtooltip: false,
        tooltip: "",
        tooltipicon: false,
        iconprefix: "fa"
    }, data);

    //mark that the data hasn't changed
    //data.newValue = data.originalValue;
    if (data.value === null)
        data.value = "";

    var $input = $("<input type='text'/>");
    $input.addClass("form-control dtpicker");
    $input.val(data.originalValue);
    if (data.placeholdertext != undefined && data.placeholdertext != "")
        $input.attr('placeholder', "<" + data.placeholdertext + ">");
    else if (data.placeholder != "")
        $input.attr('placeholder', "<" + data.placeholder.toUpperCase() + ">");
    $input.attr('regexformat', "time");
    $input.attr('pageModal', "true");
    $input.attr('id', data.field.toLowerCase());
    if (that.settings.isupdatecontact)
        $input.attr('disabled', true);
    if (data.readonly)
        $input.attr('disabled', true);
    $input.on("update", function () { that.update($target, $input); });
    $input.blur(function () { $input.trigger("update"); });
    $input.keyup(function () { if ($target.hasClass('has-error')) $input.trigger("update"); });
    if (data.readonly)
        $input.attr('disabled', true);
    $target.addClass(data.class);
    if (data.required == true) {
        $input.attr("required", data.required);
    }
    if (that.settings.v5profile) {
        $input.on('show.bs.modal', function (event) {
            // prevent timepicker from firing bootstrap modal "show.bs.modal"
            event.stopPropagation();
        });
    }
    if (data.mask) {
        $input.mask(data.mask, { placeholder: data.maskfill });
    }
    $.fn.timepicker.Constructor.prototype.updateElement = function (e) {
        this.$element.val(this.getTime() != "" ? this.getTime() : this.setDefaultTime(this.defaultTime)).change();
    }
    $input.timepicker({
        showSeconds: true
    });
    that.initContainer($target, data);
    that.initLabel($target, data);
    that.initInfo($target, data);
    that.initControl($target, $input, data);
    that.initVisualize($target, data);

    //helper to get data
    data.val = function (val) {
        //setter
        if (val !== undefined) {
            if (val === null)
                val = '';

            if (data.mask) {
                $input.unmask();
                $input.val(val);
                $input.mask(data.mask, { placeholder: data.maskfill });
            }
            else {
                $input.val(val);
            }
            $input.trigger("update");
        }

        //getter
        if (data.mask)
            return $input.mask().trim();

        return $input.val().trim();
    }

    data.check = function () {
        var val = data.val();
        if (data.required && val == '')
            return "*Required";

        return false;
    }

    //update data
    $target.data("formfield", data);

    if (data.value != "") {
        data.val(new Date(data.value).format("h:MM:ss TT"));
    }
    else
        data.val(data.value);
    return $input;
}

morf.prototype.initDate = function ($target, data) {
    var that = this;
    //setup defaults
    data = $.extend({
        displayname: '',
        name: '',
        info: null,
        icon: null,
        fieldedittype: 0,
        warnonempty: false,
        min: null,
        placeholder: data.type.toUpperCase(),
        max: null,
        mask: null,
        maskfill: "X",
        value: '',
        size: 12,
        required: false,
        regexformat: null,
        field: null,
        class: null,
        mode: null,
        showtooltip: false,
        tooltip: "",
        tooltipicon: false,
        iconprefix: "fa",
        orientation: "top left"
    }, data);

    //mark that the data hasn't changed
    //data.newValue = data.originalValue;
    if (data.value === null)
        data.value = "";

    var $input = $("<input type='text'/>");
    $input.addClass("form-control dtpicker");
    $input.val(data.originalValue);
    if (data.placeholdertext != undefined && data.placeholdertext != "")
        $input.attr('placeholder', "<" + data.placeholdertext + ">");
    else if (data.placeholder != "")
        $input.attr('placeholder', "<" + data.placeholder.toUpperCase() + ">");
    $input.attr('pageModal', "true");
    $input.attr('regexformat', "date");
    $input.attr('id', data.field.toLowerCase());
    if (that.settings.isupdatecontact)
        $input.attr('disabled', true);
    $input.on("update", function () { that.update($target, $input); });
    $input.blur(function () { $input.trigger("update"); });
    $input.keyup(function () { if ($target.hasClass('has-error')) $input.trigger("update"); });
    $target.addClass(data.class);
    if (data.required == true) {
        $input.attr("required", data.required);
    }
    if (data.mask) {
        $input.mask(data.mask, { placeholder: data.maskfill });
    }
    if (data.mode == "monthMode"){
        $input.datepicker({
            viewMode: 2,
            minViewMode: 1,
            Default: false,
            format: "MM-yyyy",
            autoclose: true,
            orientation: data.orientation //49559
        }).on('show.bs.modal', function (event) { event.stopPropagation(); });
    }
    else if (data.min != undefined) { //61501
        $input.datepicker({ autoclose: true, orientation: data.orientation, startDate: data.min }); 
        if (data.value != '' && data.value != null)
            $input.datepicker("setDate", new Date(data.value));
    }
    else {
        $input.datepicker({ autoclose: true, orientation: data.orientation }); //49559
        if (data.value != '' && data.value != null)
            $input.datepicker("setDate", new Date(data.value));
    }
    if (data.readonly)
        $input.attr('disabled', true);
    if (that.settings.v5profile) {
        $input.on('show.bs.modal', function (event) {
            // prevent datepicker from firing bootstrap modal "show.bs.modal"
            event.stopPropagation();
        });
    }

    that.initContainer($target, data);
    that.initLabel($target, data);
    that.initInfo($target, data);
    that.initControl($target, $input, data);
    that.initVisualize($target, data);

    //helper to get data
    data.val = function (val) {
        //setter
        if (val !== undefined) {
            if (val === null)
                val = '';

            if (data.mask) {
                $input.unmask();
                $input.val(val);
                $input.mask(data.mask, { placeholder: data.maskfill });
            }
            else {
                $input.val(val);
            }
            $input.trigger("update");
        }

        //getter
        if (data.mask)
            return $input.mask().trim();

        return $input.val().trim();
    }

    data.check = function () {
        var val = data.val();
        if (data.required && val == '')
            return "*Required";

        return false;
    }

    //update data
    $target.data("formfield", data);

    if (data.value != "") {
        if (data.mode != "monthMode")
            data.val(new Date(data.value).format("mm/dd/yyyy"));
        else
            data.val(new Date(data.value).format("mmmm-yyyy"));
    }
    else
        data.val(data.value);
    return $input;
}

morf.prototype.initImage = function ($target, data) {
    var that = this;
    //setup defaults
    data = $.extend({
        displayname: '',
        name: '',
        info: null,
        icon: null,
        fieldedittype: 0,
        warnonempty: false,
        min: null,
        placeholder: data.type.toUpperCase(),
        max: null,
        mask: null,
        maskfill: "X",
        value: '',
        size: 12,
        required: false,
        regexformat: null,
        field: null,
        maximum: null,
        minimum: null,
        class: null,
        showtooltip: false,
        tooltip: "",
        tooltipicon: false,
        iconprefix: "fa"
    }, data);

    //mark that the data hasn't changed
    //data.newValue = data.originalValue;
    //if (data.value === null)
    //    data.value = "";
    $target.on("update", function () { that.update($target, $target); });

    var $div = $("<div/>");
    $div.addClass("form-control profile-img-holder");
    $div.hide();

    var $img = $("<img />").appendTo($div);
    var $ph = $("<input type='text'/>");
    if (data.placeholdertext != undefined && data.placeholdertext != "")
        $ph.attr('placeholder', "<" + data.placeholdertext + ">");
    else if (data.placeholder != "")
     $ph.attr("placeholder", "<" + data.placeholder.toUpperCase() + ">");
    $ph.addClass("form-control");
    $ph.css("cursor", 'default');
    if (that.settings.isupdatecontact)
        $ph.attr('disabled', true);
    $ph.hide();

    $target.addClass(data.class);
    if (data.field !== null && data.field !== undefined && data.field !== '') {
        $ph.attr('id', data.field.toLowerCase());
        $ph.attr('name', data.field.toLowerCase());
    }
    if (data.required == true) {
        $ph.attr("required", data.required);
    }
    that.initContainer($target, data);
    that.initLabel($target, data);
    that.initVisualize($target, data);

    var $p = $("<p class='note'></p>").appendTo($target);

    var $preview = $("<i class='fa fa-lg fa-eye'> </i> ").appendTo($p);
    $preview.attr("rel", "tooltip").attr("data-placement", "left").attr("data-original-title", "Click to View Image");
    var originalurl = null;
    var $search = $("<i class='fa fa-lg fa-upload'> </i> ").appendTo($p).click(function () { 
        if (typeof (that.settings.isDatabase) != "function") {
            var options = [];
            options["singleselect"] = true;
            options["isselectbanneraction"] = true;
            modal.showImageV5(function (action, item) {
                data.val(item[0]);
                originalurl = item[0].original;
            },options);
        }
        else {
            var ids = that.settings.isDatabase().split(',');
            modal.showDatabaseSelectImage(ids[0], ids[1], function (action, item) {
                data.val(item[0]);
                originalurl = item[0].original;
            });
        }
    });
    $search.attr("rel", "tooltip").attr("data-placement", "left").attr("data-original-title", "Click to Upload Image");
    $preview.click(function () {
        if (originalurl != null)
            window.open(originalurl, '_blank');
        else
            window.open(data.value["original"], '_blank');
    });

    var $remove = $("<i class='fal fa-lg fa-trash-alt'> </i> ").appendTo($p).click(function () {
        $.OpenSmartMessageBox2({ title: 'Remove', content: 'Are you sure you want to remove this image?', buttons: "[No][Yes]" },
            function (result) {
                if (result === 'Yes') {
                    data.val(null);
                    $p.parent().find('img').trigger("load");
                }
                $.CloseSmartMessageBox2();
            }
        );
    });
    $remove.attr("rel", "tooltip").attr("data-placement", "left").attr("data-original-title", "Click to Delete Image");
    $target.hover(function () {
        if (!that.settings.isupdatecontact)
        $p.stop().animate({ "opacity": "1" }, 400);
    }, function () {
        $p.stop().animate({ "opacity": "0.0" }, 400);
    });

    that.initInfo($target, data);
    that.initControl($target, $div, data);

    $ph.insertBefore($div);
    $ph.focus(function () {
        $ph.blur();
        $search.click();
    });

    $img.click(function () {
        if (typeof (that.settings.isDatabase) != "function") {
            var options = [];//added for single select image
            options["singleselect"] = true;
            options["isselectbanneraction"] = true;
            modal.showImageV5(function (action, item) {
                data.val(item[0]);
            },options);
        }
        else {
            var ids = that.settings.isDatabase().split(',');
            //added for single select image in routing xml file
            modal.showDatabaseSelectImage(ids[0], ids[1], function (action, item) {
                data.val(item[0]);
            });
        }
    });

    //helper to get data
    data.val = function (val) {
        //setter
        if (val !== undefined) {
            if (val === null || val.thumbnail == undefined) {
                $ph.show();
                $img.attr("src", "");
                $ph.attr("required", data.required);
                $div.hide();
                $remove.hide();
                $preview.hide();
                $target.data("fileInfo", null);
            }
            else {
                $ph.removeAttr("required");
                $ph.hide();
                $div.show();
                $remove.show();
                $preview.show();
                $img.attr("src", val.thumbnail);
                //$img.click(function () {
                //    modal.showSelectImage(function (action, item) {
                //        data.val(item);
                //    });
                //});

                if (that.settings.useStepProcess) {
                    $('[id="' + data.field.toLowerCase() + '"]').each(function () {
                        $(this).parent().find('img').attr("src", val.thumbnail);
                        $(this).parent().parent().data("fileInfo", val);
                        $(this).parent().parent().addClass("has-success");
                        $(this).css('display', 'none');
                        $(this).removeAttr("required");
                        $(this).next().show();
                    });
                }

                $target.data("fileInfo", val);
            }

            $target.trigger("update");
        }

        //getter
        return $target.data("fileInfo");
    }

    data.check = function () {
        return false;
    }

    //update data
    $target.data("formfield", data);

    data.val(data.value);

    return $target;
}

morf.prototype.initImagev5 = function ($target, data) {
    var that = this;
    data = $.extend({
        displayname: '',
        name: '',
        info: null,
        icon: null,
        fieldedittype: 0,
        warnonempty: false,
        min: null,
        placeholder: data.type,
        max: null,
        mask: null,
        maskfill: "X",
        value: '',
        size: 12,
        required: false,
        regexformat: null,
        field: null,
        maximum: null,
        minimum: null,
        class: null,
        showtooltip: false,
        tooltip: "",
        tooltipicon: false,
        iconprefix: "fa",
        profileimage: '',
        defaultimage: '',
        iscustomimage: true,
    }, data);

    $target.on("update", function () { that.update($target, $target); });

    var $div = $("<div/>");
    var $img;
    var $docwithfilename;
    var $span;
    if (data.iscustomimage == false) {
        $div.addClass("form-control profile-img-holder");
        $img = $("<img />").appendTo($div);
    }
    else {
        $div.addClass("form-control profile-doc-holder");
        $docwithfilename = $("<div/>").addClass("doc-file-with-name");
        $docwithfilename.appendTo($div);
        $span = $("<span />").addClass("user-profile-img-holder");
        $span.appendTo($docwithfilename);
        $img = $("<img/>").appendTo($span);
    }



    $target.addClass(data.class);
    if (data.field !== null && data.field !== undefined && data.field !== '') {
        $img.attr('id', data.field.toLowerCase());
        $img.attr('name', data.field.toLowerCase());
    }
    if (data.required == true) {
        $div.attr("required", data.required);
    }

    that.initContainer($target, data);
    that.initLabel($target, data);
    that.initVisualize($target, data);
    that.initInfo($target, data);
    that.initControl($target, $div, data);
    var $search;
    if (data.profileimage != null && data.profileimage != "")
        $search = $('<span  class="add addlogo">' + data.profileimage + '</span>').appendTo($target);
    else if (data.name == "photoid" && data.table == "Users")
        $search = $('<span  class="add addlogo">' + 'Add Profile Image' + '</span>').appendTo($target);
    else 
        $search = $('<span  class="add addlogo">' + 'Add logo' + '</span>').appendTo($target);
    var $remove = $('<span  class="remove addlogo">' + 'Remove' + '</span>').appendTo($target);;
    var $preview = $('<span  class="view addlogo">' + 'View' + '</span>').appendTo($target);;
    var compImgPlaceholder;
    if (data.defaultimage != null && data.defaultimage != "")
        compImgPlaceholder = data.defaultimage;
    else
        compImgPlaceholder = "https://partner-marketing.bitdefender.com/v4u/img/placeholder/img.svg";
    var originalurl = null;
    $search.click(function () {
        if (typeof (that.settings.isDatabase) != "function") {
            var options = [];
            options["singleselect"] = true;
            options["isselectbanneraction"] = true;
            modal.showImageV5(function (action, item) {
                data.val(item[0]);
                originalurl = item[0].original;
            }, options);
        }
        else {
            var ids = that.settings.isDatabase().split(',');
            modal.showDatabaseSelectImage(ids[0], ids[1], function (action, item) {
                data.val(item[0]);
                originalurl = item[0].original;
            });
        }
    });
    $remove.click(function () {
        var contentMessage = data.isPartnerLogo == 'true' ? 'Are you sure you want to remove this partner logo ?' : 'Are you sure you want to remove this image?';
        $.OpenSmartMessageBox2({ title: 'Remove', content: contentMessage, buttons: "[No][Yes]" },
            function (result) {
                if (result === 'Yes') {
                    data.val(null);
                    if (data.isPartnerLogo)
                        $target.addClass("hidden");
                    $("#AddNewLogo").show();
                }
                $.CloseSmartMessageBox2();
            }
        );
    });
    $preview.click(function () {
        if (originalurl != null)
            window.open(originalurl, '_blank');
        else
            window.open(data.value["original"], '_blank');
    });
    $img.click(function () {
        if (typeof (that.settings.isDatabase) != "function") {
            var options = [];
            options["singleselect"] = true;
            modal.showImageSelect(function (action, item) {
                data.val(item[0]);
            }, options);
        }
        else {
            var ids = that.settings.isDatabase().split(',');
            modal.showDatabaseSelectImage(ids[0], ids[1], function (action, item) {
                data.val(item[0]);
            });
        }
    });
    data.val = function (val) {
        if (val !== undefined) {
            if (val === null || val.thumbnail == undefined) {
                $remove.hide();
                $preview.hide();
                if (data.iscustomimage == false) {
                    $img.attr("src", compImgPlaceholder);

                    if (data.profileimage != null && data.profileimage != "")
                        $search.text(data.profileimage);
                    else if (data.name == "photoid" && data.table == "Users")
                        $search.text("Add Profile Image");
                    else
                        $search.text("Add logo");
                    $target.data("fileInfo", null);
                }
                else {
                    $div.removeClass("profile-doc-holder");
                    $img.remove();
                    $search.text("Add logo");
                    $target.data("fileInfo", null);
                    $span.hide();
                }

            }
            else {

                $remove.show();
                $preview.show();
                $search.text("Change");
                if (data.iscustomimage == false) {
                    $img.attr("src", val.thumbnail);
                    $img.click(function () {
                        modal.showSelectImage(function (action, item) {
                            data.val(item);
                        });
                    });
                }
                else {
                    $div.addClass("profile-doc-holder");
                    $img.appendTo($span);
                    $img.attr("src", val.thumbnail);
                    $span.show();
                }

                $target.data("fileInfo", val);
            }
            $target.trigger("update");
        }
        return $target.data("fileInfo");
    }
    data.check = function () {
        return false;
    }
    //update data
    $target.data("formfield", data);
    data.val(data.value);
    return $target;
}

morf.prototype.initDocument = function ($target, data) {
    var that = this;
    //setup defaults
    data = $.extend({
        displayname: '',
        name: '',
        info: null,
        icon: null,
        fieldedittype: 0,
        warnonempty: false,
        min: null,
        placeholder: data.type.toUpperCase(),
        max: null,
        mask: null,
        value: '',
        size: 12,
        required: false,
        regexformat: null,
        field: null,
        maximum: null,
        minimum: null,
        class: null,
        showtooltip: false,
        tooltip: "",
        tooltipicon: false,
        iconprefix: "fa",
    }, data);
    $target.on("update", function () { that.update($target, $target); });

    var $div = $("<div/>");
    $div.addClass("form-control profile-doc-holder");
    $div.hide();

    var $span = $("<span/>");
    var $img = $("<img />");
    var $i = $("<i style='font-size:75px;'/>").appendTo($span);
    if (data.value != null) {
        if (data.value.filetype != 'PDF')
            $span.addClass("img-center-box").appendTo($div);
        else
            $img.appendTo($div);
    }
    var $divname = $("<div />").addClass("doc-caption-box");
    var $ph = $("<input type='text'/>");
    //$ph.append($div);
    if (data.placeholdertext != undefined && data.placeholdertext != "")
        $ph.attr('placeholder', "<" + data.placeholdertext + ">");
    else if (data.placeholder != "")
        $ph.attr("placeholder", "<" + data.placeholder.toUpperCase() + ">");
    if (data.field !== null && data.field !== undefined && data.field !== '') {
        $ph.attr('id', data.field.toLowerCase());
        $ph.attr('name', data.field.toLowerCase());
    }
    if (that.settings.isupdatecontact)
        $ph.attr('disabled', true);
    $ph.addClass("form-control");
    $ph.css("cursor", 'default');
    $ph.hide();
    if (data.required == true) {
        $ph.attr("required", data.required);
    }
    $target.addClass(data.class);


    //$div.val(data.originalValue);

    that.initContainer($target, data);
    that.initLabel($target, data);
    that.initVisualize($target, data);

    var $p = $("<p class='note'></p>").appendTo($target);

    var $download = $("<i class='fa fa-lg fa-download'> </i> ").appendTo($p);
    $download.attr("rel", "tooltip").attr("data-placement", "top").attr("data-original-title", "Click to Download Document");
    var originalurl = null;
    var $search = $("<i class='fa fa-lg fa-upload'> </i> ").appendTo($p).click(function () {        
        if (typeof (that.settings.isDatabase) != "function") {//single document select
            var options = [];
            options["singleselect"] = true;
            modal.showDocumentv5(function (action, item) {
                data.val(item[0]);
                originalurl = item[0].original;
                $p.parent().find(".profile-doc-holder").trigger("change");
            }, options);//upto here
        }
        else {
            var ids = that.settings.isDatabase().split(',');
            modal.showDatabaseSelectDocument(ids[0], ids[1], function (action, item) {
                data.val(item[0]);//single document select
                originalurl = item[0].original;
                $p.parent().find(".profile-doc-holder").trigger("change");
            });
        }
    });
    $search.attr("rel", "tooltip").attr("data-placement", "left").attr("data-original-title", "Click to Upload Document");
    $download.click(function () {
        $.OpenSmartMessageBox2({ title: 'Download', content: 'Are you sure you want to download this document?', buttons: "[No][Yes]" },
            function (result) {
                if (result === 'Yes') {
                    if (originalurl == null)
                        window.open(data.value["original"], '_blank');
                    else
                        window.open(originalurl, '_blank');
                }
                $.CloseSmartMessageBox2();
            }
        );
    });

    var $remove = $("<i class='fal fa-lg fa-trash-alt'> </i> ").appendTo($p).click(function () {
        $.OpenSmartMessageBox2({ title: 'Are you sure you want to remove this document?', buttons: '[No][Yes]' },
            function (result) {
                if (result === 'Yes') {
                    data.val(null);
                    $p.parent().find(".profile-doc-holder").trigger("change");
                }
                $.CloseSmartMessageBox2();
            }
        );
    });
    $remove.attr("rel", "tooltip").attr("data-placement", "top").attr("data-original-title", "Click to Delete Document");
    $target.hover(function () {
        $p.stop().animate({ "opacity": "1" }, 400);
    }, function () {
        $p.stop().animate({ "opacity": "0.0" }, 400);
    });

    that.initInfo($target, data);
    that.initControl($target, $div, data);

    $ph.insertBefore($div);
    $ph.focus(function () {
        $ph.blur();
        $search.click();
    });

    //helper to get data
    data.val = function (val) {
        //setter
        if (val !== undefined) {
            if (val === null || val.thumbnail == undefined) {
                $ph.show();
                $img.attr("src", "");
                $ph.attr("required", data.required);
                $div.hide();
                $remove.hide();
                $download.hide();
                $target.data("fileInfo", null);
            }
            else {
                $ph.removeAttr("required");
                $ph.hide();
                $div.show();
                $remove.show();
                $download.show();
                if (val != null) {
                    if (val.filetype != 'PDF') {
                        $span.appendTo($div);
                        $divname.appendTo($div);
                        $img.remove();
                        $i.removeClass();
                        $i.addClass(val.fonticon);
                    }
                    else {
                        $img.appendTo($div);
                        $divname.appendTo($div);
                        $span.remove();
                        $img.attr("src", val.thumbnail);
                    }
                }
                if (val.filename != undefined)
                    $divname.html(val.filename + " (" + getFileSize(val.filesize) + ")");
                    /*$divname.html(val.filename.length > 60 ? val.filename.substring(0, 60) + "..." : val.filename + " (" + getFileSize(val.filesize) + ")");*/
                if (that.settings.useStepProcess) {
                    $('[id="' + data.field.toLowerCase() + '"]').each(function () {
                        $valparent = $(this).next();
                        if (val.filetype != 'PDF') {
                            if ($valparent.find('span').length == 0)
                                $span.clone().appendTo($valparent);
                            $valparent.find('img').remove();
                        }
                        else {
                            if ($valparent.find('img').length == 0)
                                $img.clone().appendTo($valparent);
                            $valparent.find('span').remove();
                            $valparent.find('img').attr("src", val.thumbnail);
                        }
                        if ($valparent.find('.doc-caption-box').length < 1) {
                            $docname = $divname.clone();
                            $docname.html(val.filename + " (" + getFileSize(val.filesize) + ")");
                            $docname.appendTo($valparent);
                        }
                        else {
                            $valparent.find('.doc-caption-box').html(val.filename + " (" + getFileSize(val.filesize) + ")");
                        }
                        $(this).parent().parent().data("fileInfo", val);
                        $(this).parent().parent().addClass("has-success");
                        $(this).css('display', 'none');
                        $(this).removeAttr("required");
                        $(this).next().show();
                        $(this).next().click(function () {
                            if (typeof (that.settings.isDatabase) != "function") {
                                var options = {};
                                options.singleselect = "1";
                                modal.showSelectDocument(function (action, item) {
                                    data.val(item[0]);
                                }, null, options);
                            }
                            else {
                                var ids = that.settings.isDatabase().split(',');
                                modal.showDatabaseSelectDocument(ids[0], ids[1], function (action, item) {
                                    data.val(item[0]);
                                });
                            }
                        });
                    });
                }
                $div.click(function () {
                    if (typeof (that.settings.isDatabase) != "function") {
                        var options = [];
                        options["singleselect"] = true;
                        options["isPlaybook"] = false;
                        modal.showDocumentv5(function (action, item) {
                            data.val(item[0]);
                        },options, null);
                    }
                    else {
                        var ids = that.settings.isDatabase().split(',');
                        modal.showDatabaseSelectDocument(ids[0], ids[1], function (action, item) {
                            data.val(item[0]);
                        });
                    }
                });
                $target.data("fileInfo", val);
            }

            $target.trigger("update");
        }

        //getter
        return $target.data("fileInfo");
    }

    data.check = function () {
        return false;
    }

    //update data
    $target.data("formfield", data);

    data.val(data.value);

    return $target;
}

morf.prototype.initDocumentv5 = function ($target, data) {
    var that = this;
    //setup defaults
    data = $.extend({
        displayname: '',
        name: '',
        info: null,
        icon: null,
        fieldedittype: 0,
        warnonempty: false,
        min: null,
        placeholder: data.type,
        max: null,
        mask: null,
        value: '',
        size: 12,
        required: false,
        regexformat: null,
        field: null,
        maximum: null,
        minimum: null,
        class: null,
        showtooltip: false,
        tooltip: "",
        tooltipicon: false,
        iconprefix: "fa"
    }, data);
    $target.on("update", function () { that.update($target, $target); });

    var $div = $("<div/>");
    $div.addClass("form-control profile-doc-holder");
    var $spanname = $("<span />").addClass("doc-file-name");


    var $docwithfilename = $("<div/>").addClass("doc-file-with-name");
    var $span = $("<span />").addClass("doc-img-holder");
    $span.appendTo($docwithfilename);
    var $img = $("<img style='max-height:100%'/>").addClass("img-responsive");
    var $i = $("<i style='font-size:70px;'/>").appendTo($span);
    //if (data.value != null) {
    //    if (data.value.filetype != 'PDF')
    //        $docwithfilename.appendTo($div);
    //    else
    //        $img.appendTo($span);
    //}

    that.initContainer($target, data);
    that.initLabel($target, data);
    that.initVisualize($target, data);
    that.initInfo($target, data);
    that.initControl($target, $div, data);
    $target.find('.input-group').attr('id', data.field.toLowerCase());
    var $search = $('<span  class="add addlogo">' + 'Add Document' + '</span>').appendTo($target);
    var $remove = $('<span  class="remove addlogo">' + 'Remove' + '</span>').appendTo($target);
    var $download = $('<span  class="view addlogo">' + 'Download' + '</span>').appendTo($target);
    var originalurl = null;
    var compImgPlaceholder = "https://partner-marketing.bitdefender.com/v4u/img/placeholder/img.svg";
    $search.click(function () {
        var $this = $(this);
        if (typeof (that.settings.isDatabase) != "function") {//single document select
            var options = [];
            options["singleselect"] = "1";
            modal.showDocumentSelect(function (action, item) {
                data.val(item[0]);
                originalurl = item[0].original;
                $this.parent().find(".profile-doc-holder").trigger("change");
            }, options);//upto here
        }
        else {
            var ids = that.settings.isDatabase().split(',');
            modal.showDatabaseSelectDocument(ids[0], ids[1], function (action, item) {
                data.val(item[0]);//single document select
                originalurl = item[0].original;
                $this.parent().find(".profile-doc-holder").trigger("change");
            });
        }
    });

    $download.click(function () {
        $.OpenSmartMessageBox2({ title: 'Download', content: 'Are you sure you want to download this document?', buttons: "[No][Yes]" },
            function (result) {
                if (result === 'Yes') {
                    if (originalurl == null)
                        window.open(data.value["original"], '_blank');
                    else
                        window.open(originalurl, '_blank');
                }
                $.CloseSmartMessageBox2();
            }
        );
    });

    $remove.click(function () {
        var $this = $(this);
        $.OpenSmartMessageBox2({ title: 'Are you sure you want to remove this document?', buttons: '[No][Yes]' },
            function (result) {
                if (result === 'Yes') {
                    data.val(null);
                    $this.parent().find(".profile-doc-holder").trigger("change");
                }
                $.CloseSmartMessageBox2();
            }
        );
    });

    //helper to get data
    data.val = function (val) {
        //setter
        if (val !== undefined) {
            if (val === null || val.thumbnail == undefined) {
                $remove.hide();
                $download.hide();
                $search.text("Add Document");
                $target.data("fileInfo", null);
                $div.removeClass("profile-doc-holder");
                $docwithfilename.remove();
            }
            else {
                $div.addClass("profile-doc-holder");
                $download.show();
                $remove.show();
                $search.text("Change");
                if (val != null) {
                    if (val.filetype != 'PDF') {
                        $docwithfilename.appendTo($div);
                        $spanname.appendTo($docwithfilename);
                        $img.remove();
                        $i.show();
                        $i.removeClass();
                        $i.addClass(val.fonticon);
                        $search.text("Change");
                    }
                    else {
                        $i.hide();
                        $docwithfilename.appendTo($div);
                        $img.appendTo($span);
                        $spanname.appendTo($docwithfilename);
                        $img.attr("src", val.thumbnail);
                    }
                }
                if (val.filename != undefined)
                    $spanname.html(val.filename.length > 60 ? val.filename.substring(0, 60) + "..." : val.filename + "<span class='doc-file-size'>" + getFileSize(val.filesize) + "</span>");
                $div.click(function () {
                    if (typeof (that.settings.isDatabase) != "function") {
                        var options = {};
                        options.singleselect = "1";
                        modal.showSelectDocument(function (action, item) {
                            data.val(item[0]);
                        }, null, options);
                    }
                    else {
                        var ids = that.settings.isDatabase().split(',');
                        modal.showDatabaseSelectDocument(ids[0], ids[1], function (action, item) {
                            data.val(item[0]);
                        });
                    }
                });
                $target.data("fileInfo", val);
            }

            $target.trigger("update");
        }

        //getter
        return $target.data("fileInfo");
    }

    data.check = function () {
        return false;
    }

    //update data
    $target.data("formfield", data);

    data.val(data.value);

    return $target;
}

morf.prototype.initButton = function ($target, data) {
    var that = this;
    //setup defaults
    data = $.extend({
        displayname: '',
        name: '',
        info: null,
        style: null,
        icon: null,
        fieldedittype: 0,
        warnonempty: false,
        min: null,
        placeholder: '',
        label: null,
        max: null,
        mask: null,
        value: '',
        size: 12,
        field: null,
        class: null,
        showtooltip: false,
        tooltip: "",
        tooltipicon: false,
        iconprefix: "fa",
        callback:null
    }, data);
    $target.on("update", function () { that.update($target, $target); });
    var $div = $("<div/>");
    //$div.addClass("form-control");

    var $ph = $("<button class='btn btn-primary btn-mrof'></button>");
    $ph.append($div);
    
    

    var btntext = data.displayname;
    if (data.icon != null && btntext != '')
        btntext = "<i class='" + data.iconprefix + " fa-" + data.icon + "'></i> " + btntext;
    else if (data.icon != null)
        btntext = "<i class='" + data.iconprefix + " fa-" + data.icon + "'></i> ";
    if (data.style != null)
        if (typeof (data.style) == 'object')
            $ph.css(data.style);
        else
            $ph.attr('style', data.style);

    if (data.placeholder != "")
        $ph.text(data.placeholder);

    $ph.html(btntext);

    if (data.tooltip != '') {
        $ph.attr("rel", "tooltip").attr("data-placement", "bottom").attr("data-original-title", data.tooltip);
    }

    if (data.field !== null && data.field !== undefined && data.field !== '') {
        $ph.attr('id', data.field.toLowerCase());
        $ph.attr('name', data.field.toLowerCase());
    }
    $target.addClass(data.class);

    that.initContainer($target, data);
    that.initLabel($target, data);
    
    if (data.callback != null && (typeof (data.callback) == 'function' || typeof (data.callback) == 'string')) {
        $ph.click(function () {
            typeof (data.callback) == 'function' ? data.callback() : eval(data.callback);
        });
    }

    that.initControl($target, $div, data);

    $ph.insertBefore($div);   

    $target.data("formfield", data);
    return $target;
}

morf.prototype.initTextDropdown = function ($target, data) {
    var that = this;
    //setup defaults
    data = $.extend({
        displayname: '',
        name: '',
        info: null,
        icon: null,
        fieldedittype: 0,
        warnonempty: false,
        min: null,
        placeholder: data.type.toUpperCase(),
        max: null,
        mask: null,
        maskfill: "X",
        value: '',
        size: 12,
        required: false,
        regexformat: null,
        field: null,
        maximum: null,
        minimum: null,
        class: null,
        readonly: false,
        dropdownVal: "",
        disableDropdown: false,
        onValchange: null,
        iconprefix: "fa"
    }, data);

    //mark that the data hasn't changed
    //data.newValue = data.originalValue;
    if (data.value === null)
        data.value = "";
    var $input = data.type.toLowerCase() == "password" ? $("<input type='password' autocomplete='off'/>") : $("<input type='text'/>");
    $input.addClass("form-control");
    $input.val(data.originalValue);
    if (data.placeholder != "")
        $input.attr('placeholder', "<" + data.placeholder.toUpperCase() + ">");
    //  $input.attr('maximum', data.maximum);
    if (that.settings.isupdatecontact)
        $input.attr('disabled', true);
    if (data.readonly)
        $input.attr('disabled', true);
    var fieldname = "";
    if (data.field != null)
        fieldname = data.field.toLowerCase();
    if ((data.mask == "(999) 999-9999" || data.mask == "(999)-9999999") && (fieldname == "telephone" || fieldname == "mobile" || fieldname == "worknumber" || fieldname == "homenumber" || fieldname == "mobilenumber" || fieldname == "fax" || fieldname == "directnumber" || fieldname == "alternatenumber"))
        $input.attr('maximum', 14);
    else {
        $input.attr('maximum', data.maximum);
        $input.attr('minimum', data.minimum);
    }
    if (data.field !== null && data.field !== undefined && data.field !== '') {
        $input.attr('id', data.field.toLowerCase());
        $input.attr('name', data.field.toLowerCase());
    }
    $input.on("update", function () { that.update($target, $input); });
    $input.blur(function () { $input.trigger("update"); });
    $input.keyup(function () { if ($target.hasClass('has-error')) $input.trigger("update"); });

    $inputBtnDiv = $("<div class='input-group-btn'></div>");
    $inputBtnDiv.attr('id', "dropdown_" + data.field.toLowerCase());
    $defaultBtn = $("<button type='button' tabindex='- 1'></button>").appendTo($inputBtnDiv);
    $defaultBtn.addClass("btn btn-default");

    $toggleBtn = $("<button type='button' tabindex='-1'></button>").appendTo($inputBtnDiv);
    $toggleBtn.addClass("btn btn-default dropdown-toggle");
    if (data.disableDropdown)
        $toggleBtn.addClass("disabled");
    $toggleBtn.attr('data-toggle', 'dropdown');

    $span = $("<span class='caret'></span>");
    $toggleBtn.append($span);

    $ul = $("<ul role='menu' style='max-height:180px;overflow: auto;'></ul>").appendTo($inputBtnDiv);
    $ul.addClass("dropdown-menu pull-right");

    var dict = that.settings.fields[data.name].dictionaryjson;
    if (dict !== undefined && dict !== null) {
        if (dict.entries != undefined && dict.entries.length > 0) {
            for (var i = 0; i < dict.entries.length; i++) {
                dropdownlist.push(dict.entries[i].name);
                dropdownlistvalue.push(dict.entries[i].value);
            }
            for (var i = 0; i < dict.entries.length; i++) {
                if (dict.entries[i].deleted === "0") {
                    var $li = $("<li></li>").appendTo($ul);
                    $a = $("<a href='javascript:void(0);' data-action-item=" + dropdownlistvalue[i] + "></a>").appendTo($li);
                    $a.html(dropdownlist[i]);
                }
            }

        }
        else if (dict[0] != undefined && dict[0].entries != undefined && dict[0].entries.length > 0) {
            for (var i = 0; i < dict[0].entries.length; i++) {
                
                    $defaultBtn.text(dict[0].entries[i].name);
                var $li = $("<li></li>").appendTo($ul);
                $a = $("<a href='javascript:void(0);' data-action-item=" + dict[0].entries[i].value + "></a>").appendTo($li);
                $a.text(dict[0].entries[i].name);
            }
            
            if (data.dropdownVal != undefined)
                $defaultBtn.text(data.dropdownVal);
            else
                $defaultBtn.text(dict[0].entries[0].name);
        }
    }


    $target.addClass(data.class);
    if (data.required == true) {
        $input.attr("required", data.required);
    }
    if (data.regexformat != null) {
        $input.attr('regexformat', data.regexformat);
    }
    
    if (data.mask) {
        $input.mask(data.mask, { placeholder: data.maskfill });
    }

    that.initContainer($target, data);
    that.initLabel($target, data);
    that.initInfo($target, data);
    that.initControl($target, $input, data);    
    $inputBtnDiv.appendTo($target.find(".input-group"));
    that.initVisualize($target, data);
    //helper to get data
    data.val = function (val) {
        //setter
        if (val !== undefined) {
            if (val === null)
                val = '';

            if (data.mask) {
                $input.unmask();
                $input.val(val);
                $input.mask(data.mask, { placeholder: data.maskfill });
            }
            else {
                $input.val(val);
            }
            $input.trigger("update");
        }

        //getter
        if (data.mask)
            return $input.mask().trim();

        return $input.val().trim();
    }
    data.dropVal = function (val) {
        return data.dropdownVal.trim();
    }

    $(document.body).on('click', '#dropdown_' + data.field.toLowerCase() + ' .dropdown-menu li', function (event) {
        var $target = $(event.currentTarget);
        $target.closest('ul').find('li').removeClass('active');
        $target.addClass('active');
        $target.closest('.input-group-btn')
            .find('.btn:first').text($target.text())
            .end()
            .children('.dropdown-toggle').dropdown('toggle');
        data.dropdownVal = $target.text();
        if (data.onValchange != null)
            data.onValchange(data.dropdownVal);
    });

    data.check = function () {
        var regexUrlPattern = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
        var val = data.val();

        if (data.required && val == '')
            return "*Required";

        return false;
    }

    //update data
    $target.data("formfield", data);

    data.val(data.value);

    return $input;
}

morf.prototype.update = function ($parent, $control) {
    var that = this;
    var data = $parent.data("formfield"); 
    var value = data.val();
    var isempty = value === '';
    /* RESET CSS */
    $parent.removeClass("has-error");
    $parent.removeClass("has-warning");
    $parent.removeClass("has-success");
    $parent.find("span.help-block").remove();
    if (data.type == "datetime") {
        var basedate = new Date('12/31/1899');
        var setdate = new Date(value);
        if (basedate.getYear() == setdate.getYear()) {
            var currentdatetime = new Date();
            data.value = currentdatetime.format("mm/dd/yyyy hh:mm:ss TT").toLocaleString();            
            $control.val(data.value);
        }
    }

    if (data.type === "dropdown") {
        value = value === null ? "" : value;
        data.value = value;
        if (this.settings.formtype == "mdf") {
            var dict = data.dictionaryjson;
            if (dict != null) {
                if (dict.entries != null && dict.entries != undefined && dict.entries.length > 0 && dict.type == 'custom' && data.fieldedittype == 14) {
                    //var tooltip = dict.entries.filter(function (obj) { return obj.name == $control.val(); })[0];
                    var tooltip = $control.val();
                    var tooltipvalue = '';
                    ///if (tooltip != null && tooltip != undefined && tooltip.value != '' && tooltip.value != undefined)
                        tooltipvalue = tooltip;

                    $($parent).find('i').show().attr('data-content', tooltipvalue);
                    $('[data-toggle="popover"]').popover({
                        container: 'body',
                        placement: get_popover_placement
                    });
                }
            }
        }
    }

    var err_code = validateFieldResult2($control);

    var valueToValidate = data.value;

    if (data.type == "datetime") {
        if (data.value != "") {
            var date = new Date(data.value);
            date = date.format("mm/dd/yyyy hh:MM:ss TT");
            valueToValidate = date.toLocaleString();

            if (data.dataformat != "" && data.dataformat != "null" && data.dataformat != null && data.dataformat != "undefined") {
                var Dataformat = JSON.parse(data.dataformat);
                if (Dataformat != null) {
                    if (Dataformat.type == "date") {
                        if (data.mode != "monthMode")
                            valueToValidate = new Date(data.value).format("mm/dd/yyyy");
                        else
                            valueToValidate = new Date(data.value).format("mmmm-yyyy");
                    }
                    else if (Dataformat.type == "time") {
                        valueToValidate = new Date(data.value).format("h:MM:ss TT");
                    }
                }
            }
        }
    }

    if (valueToValidate != value && err_code !== 0) {
        $parent.toggleClass("has-warning", data.warnonempty && isempty);

        var error = data.check();
        $parent.toggleClass("has-error", err_code !== 0);
        $parent.find("span.help-block").remove();
        $parent.append("<span class='help-block note'>" + validateGetError(err_code) + "</span>");
    } else {
        var checkDisabled = $parent.find("#charmax").is(":disabled"); //checking  field  is disabled then prevent to add success class
        if (!checkDisabled)
            $parent.toggleClass("has-success", (value != '' && value != null) && valueToValidate != value);
        if (data.type == "document") {
            $parent.addClass("profile-doc-group");
        }
    }

    if (data.onchange !== undefined && !that.isLoading)
        data.onchange(data);
}
morf.prototype.serialize = function () {
    return this.serialize(false);
}

morf.prototype.serialize = function (serializingCustomTab) {
    return this.serialize(serializingCustomTab, false);
}

morf.prototype.serialize = function (serializingCustomTab, serializingCustomField) {
    ////serializingCustomTab == true if entity has some custom tab/fields
    if (serializingCustomTab == null || serializingCustomTab === undefined)
        serializingCustomTab = false;

    if (serializingCustomField == null || serializingCustomField === undefined)
        serializingCustomField = false;

    var that = this;
    var result = {};
    var tabs = that.settings.tabs;
    if (serializingCustomTab)
        tabs = that.settings.customtabs;

    for (var i = 0; i < tabs.length; i++) {
        var tab = tabs[i];
        var tabdata = that.settings.tabdata[tab];
        if (tabdata !== undefined) {
            for (var c = 0; c < tabdata.columns.length; c++) {
                var column = tabdata.columns[c];
                
                var field = that.settings.fields[column.name];
                if (field !== undefined && field.type != 'button' && !field.isfieldgroup) {
                    if ((!serializingCustomField && (field.custom == false || field.custom == null || field.custom == undefined)) || (serializingCustomField && field.custom == true)) {
                        var val = null;
                        if (field.type == "image" || field.type == "document") {
                            val = field.val();
                            if (val != null)
                                val = val.id;
                        }
                        else if (field.type == "datetime" || field.type == "date") {
                            var data_format = field.dataformat;
                            if (data_format != "" && data_format != "null" && data_format != null && data_format != "undefined") {
                                data_format = JSON.parse(data_format).type;
                            }
                            val = VGetUTCDate(field.val(), data_format);
                        }
                        else if (field.type == 'dropdown') {
                            val = field.value;
                            if (val == "" || val == null)//added to fix issue when same field exists in more than one tab
                                val = field.val();
                        }
                        else if (field.type == 'differentiator') {
                            val = null;
                        }
                        else {
                            val = field.val();
                        }

                        if (val === "" && field.allownull)
                            val = null;

                        result[column.name] = val;
                    }

                    that.settings.fields[column.name] = field;
                }
            }
        }
    }

    return result;
}

morf.prototype.post = function (getdata, callback, fail) {
    var that = this;
    var data = getdata(that.serialize());
    //if (validateFields()) {//If Validated then only process
    api.call(that.settings.api, data, function (r) {
        var val = validateHandleResponse(r.result);

        if (val)
            callback();
        else
            if (typeof(fail) == "function")
                fail();
    });
    //}
}

morf.prototype.val = function (field, val) {
    var that = this;
    
    var field = that.settings.fields[field];
    
    if (field !== undefined && !field.isfieldgroup) {
        var isduplicate = false;
        if (field.isduplicate !== undefined)
            isduplicate = field.isduplicate;
        var id = that.settings.id;
        if (field.ignoreval !== undefined && !field.ignoreval)
            return field.val(val, isduplicate, id);
        else
            return null;
    }

    return undefined;
}

morf.prototype.getFieldByName = function (fieldName) {
    var that = this;
    return that.settings.fields[fieldName];
}

morf.prototype.dropVal = function (field)
{
    var field = this.settings.fields[field];
    return field.dropdownVal;
}

morf.prototype.keyup = function (field, func) {
    var that = this;
    var field = that.settings.fields[field].container.find('input');

    if (field !== undefined) {field.on("keyup", func);}

    return undefined;
}

morf.prototype.change = function (field, func) {
    var that = this;
    var field = that.settings.fields[field];

    if (field !== undefined) {
        field.onchange = func;
    }

    return undefined;
}

morf.prototype.show = function (field) {
    var that = this;
    var field = that.settings.fields[field];

    if (field !== undefined) {
        field.container.show();
    }

    return undefined;
}

morf.prototype.hide = function (field) {
    var that = this;
    var field = that.settings.fields[field];

    if (field !== undefined) {
        field.container.hide();
    }

    return undefined;
}

morf.prototype.hasError = function () {
    var that = this;
    return that.dom.tabContainer.find(".has-error").length > 0;
}

morf.prototype.hasWarning = function () {
    var that = this;
    return that.dom.tabContainer.find(".has-warning").length > 0;
}

morf.prototype.hasSuccess = function () {
    var that = this;
    return that.dom.tabContainer.find(".has-success").length > 0;
}

morf.prototype.getDefaultIcon = function (type) {
    if (type == "email")
        return "envelope";
    else if (type == "currency")
        return "money-bill-alt";
    else if (type == "number")
        return "asterisk";
    else if (type == "phone")
        return "phone-alt";
    else if (type == "url")
        return "external-link";
    else if (type == "zip")
        return "map-marker";
    else if (type == "date" || type == "datetime" || type == "time")
        return "calendar";
    else if (type == "image")
        return "file-image";
    else if (type == "document")
        return "file-alt";
    else if (type == "password")
        return "lock";
    else if (type == "video")
        return "video";
    else if (type == "button" || type == "differentiator")
        return "";

    return "text-width";
}
morf.prototype.initgroupsettings = function () {
    var that = this;
    initilizefieldsetting(that);
}

function onOffTrigger(that) {
    if ($(that).hasClass("btn-on")) {
        if (!($(that).hasClass("active"))) {
            $("#" + $(that).parent().attr('id') + " .btn-on").addClass("active");
            $("#" + $(that).parent().attr('id') + " .btn-off").removeClass("active");
        }
    }
    else if ($(that).hasClass("btn-off")) {
        if (!($(that).hasClass("active"))) {
            $("#" + $(that).parent().attr('id') + " .btn-off").addClass("active");
            $("#" + $(that).parent().attr('id') + " .btn-on").removeClass("active");
        }
    }
};

function onOffTrigger(that) {
    if ($(that).hasClass("btn-on")) {
        if (!($(that).hasClass("active"))) {
            $("#" + $(that).parent().attr('id') + " .btn-on").addClass("active");
            $("#" + $(that).parent().attr('id') + " .btn-off").removeClass("active");
        }
    }
    else if ($(that).hasClass("btn-off")) {
        if (!($(that).hasClass("active"))) {
            $("#" + $(that).parent().attr('id') + " .btn-off").addClass("active");
            $("#" + $(that).parent().attr('id') + " .btn-on").removeClass("active");
        }
    }
};

function VGetUTCDate(data , data_format) {
    var utcDateString = data;
    if (data_format == "time") {
        if (data != "") {
            var d = new Date().format("mm/dd/yyyy");
            var newDate = d + " " + data;
            utcDateString = new Date(newDate).toUTCString();
        }
    }
    else {
        if (isNaN(Date.parse(data)) === true)
            return null;

        var d = new Date(Date.parse(data));
        utcDateString = d.toUTCString();
    }
    return utcDateString;

}

var _formtab;
var editingTabIndex = null;
var assetTypeTabIndex = 1;
var assetTypeFieldIndex = 1;
var isEdit = true;
var checkTabList = [];
var checkEditTab = false;
var currentValue = "";
var curretLang = "";
var ChecklocalizationList = [];
var EditTabId = "";
function addAssetNewTab(name, language, currentlanguage, edit, tablist, localizationList, tabid, aimmenabled, isBridgeAi = false) {
    currentValue = name;
    checkTabList = tablist;
    checkEditTab = edit;
    EditTabId = tabid;
    ChecklocalizationList = localizationList;
    isEdit = true;
    curretLang = currentlanguage;
    if (name == "" && language == "")
        isEdit = false;


    if (isEdit) 
        language = JSON.parse(stringtojson(language));

    var fieldData = {}; var tabData = { id: 0, name: "" };
    fieldData["name"] = { field: "name", warnonempty: true, type: "name", displayname: 'Folder Name', placeholder: 'Enter valid name', required: true, value: name };
    var tabid = getUniqueTime();
    var tabDataColumns = [];
        var languagedata = {};
        languagedata["name"] = name;
    tabDataColumns.push({ name: 'name', size: 12, minimum: '2', maximum: '50' });
    if(!isBridgeAi)
         tabDataColumns.push({ name: 'isaimm', type:"check" });
    
    if (languageObject.entries.length > 0) {
        $(languageObject.entries).each(function () {
            var name = this.name.toLowerCase();
            fieldData[name] = { field: name, fieldedittype: 0, displayname: this.name, placeholder: this.name };
            if (isEdit)
            languagedata[name] = language[this.flag];
            tabDataColumns.push({ name: name, size: 6, minimum: 2, maximum: 50 });
        });
    }
    var formnew_tab = {
        id: "_tabForm",
        tabs: ['info'],
        tabdata: {
            'info': {
                name: 'Info', icon: null, columns: tabDataColumns
            }
        },
        fields: fieldData,
        data: languagedata
    };
    _formtab = new morf(formnew_tab);
    if (tablocalizationdata != null && tablocalizationdata.length > 0) {
        var val = _formtab.val("name");
        var jsonData = JSON.parse(tablocalizationdata);
        var data = jsonData[val];
        if (data != undefined) {
            $(languageObject.entries).each(function () {
                var name = this.name.toLowerCase();
                if (data[0][this.flag] != undefined && data[0][this.flag] != "")
                    _formtab.val(name, data[0][this.flag].toString());
            })
        }
    }
    previousLocalizedName = $("#english").val();
    $("#_assetnewtab").modal({ backdrop: 'static', show: true });
}
function tabAssetaddHide() {
    $("#__newtab").modal("hide");
    var index = $("#tab_data li").first().attr("index");
    _tabAssetselect(index);
} 
function _tabAssetselect(index, isSetupDashboard = false) {
    $("#tab_data li").removeClass("active");
    $("#tabcontent div").removeClass("active");
    $("#tab_data li").addClass("active");
    $("#tabcontent div[index=" + index + "]").addClass("active");

    selectedTabIndex = index;
    if (isSetupDashboard == false) {
        if ($('#_assetnewtab').hasClass('in')) {
            isDivModal = true;
            $("#_assetnewtab").modal("hide");
        }
    }
    else {
        if ($("#" + $requestID + "_assetnewtab").hasClass('in')) {
            isDivModal = true;
            $("#" + $requestID + "_assetnewtab").modal("hide");
        }
    }
}

function saveAssetNewTab() {
    var DefaultTabs = ['Info'.toLowerCase(), 'Address'.toLowerCase(), 'Preferences'.toLowerCase()];
    var UsersDefaultTabs = ['Info'.toLowerCase(), 'Contact Info'.toLowerCase(), 'Personal Info'.toLowerCase(), 'Setting'.toLowerCase(), 'Social'.toLowerCase(), 'My Location'.toLowerCase()];
    var showVAlue = "";
    var addedValue = [];
    if (validateFields("_tabForm")) {
        var val = removeSpecialChars( _formtab.val("name"));
        var result = checkAssetTabName(val, checkTabList, checkEditTab);
       
        if (result == true) {
            showAlert('A folder with same name already exists.', 'Failed');
            return;
        }        
        
        if (val.indexOf(">") > -1 || val.indexOf("<") > -1) {
            showAlert('Please do not use double(\") quote and (< and >) while creating tab.');
            return;
        }

        var data = _formtab.serialize();
        var assetTabName = data.name;
        var tabLocalizationObj = {};
        if (languageObject.entries.length > 0) {
            var isValid = false;
            $(languageObject.entries).each(function () {
                var name = this.name.toLowerCase();
                var tabLangFields = escapeSpecialChars(removeSpecialChars(data[name]));
                if (tabLangFields != undefined && tabLangFields != "") {
                    if (tabLangFields.indexOf(">") > -1 || tabLangFields.indexOf("<") > -1)
                        isValid = true;
                    else
                        tabLocalizationObj[this.flag.toString()] = tabLangFields.toString();
                    showVAlue = tabLocalizationObj[curretLang];
                }
            });
            if (isValid) {
                showAlert('Please do not use double(\") quote and (< and >) while creating tab.');
                return;
            }
            else {
                var json = [];
                json.push(tabLocalizationObj);
                if (tablocalizationdata != "" && tablocalizationdata != null) {
                    var obj = JSON.parse(tablocalizationdata);
                    obj[val] = json;
                    tablocalizationdata = JSON.stringify(obj).replace(/[\\]/g, '');
                }
                else {
                    var addTabData = {};
                    addTabData[val] = json;
                    tablocalizationdata = JSON.stringify(addTabData).replace(/[\\]/g, '');
                }
            }

            if (isJSON(tablocalizationdata)) {
                var $changeTabLocData = JSON.parse(tablocalizationdata);
                var $tabLangData = $changeTabLocData[val];
                if ($tabLangData != undefined) {
                    $tabLangData[0] = tabLocalizationObj;
                    tablocalizationdata = JSON.stringify($changeTabLocData).replace(/[\\]/g, '');
                }
            }
        }       
        if (showVAlue == "" || showVAlue == undefined) { }
        else if (checkEditTab == true) { }
        else
            result = checkAssetTabName(unescape(showVAlue), checkTabList, checkEditTab);
        if (result == false) {
            result = checkAssetLanguageTabName(unescape(showVAlue), ChecklocalizationList, checkEditTab);
        }
               
        if (addedValue.length >= 1)
            result = checkAssetNewTabName(val, addedValue, checkEditTab);
      
        if (result == false)
            result = checkAssetNewTabName(showVAlue, addedValue, checkEditTab);

        if (result == true) {
            showAlert('A folder with same name already exists.', 'Failed');
            return;
        }
        if (currentValue == "") {
            addedValue.push(val);
            addedValue.push(showVAlue);
        }
        if (tabLocalizationObj != null || tabLocalizationObj != '') {
            var isValid = false;
            $(languageObject.entries).each(function () {
                var name = this.name.toLowerCase();
                var tabLangFields = escapeSpecialChars(removeSpecialChars(data[name]));
                result = checkAssetLanguageTabName(unescape(tabLangFields), ChecklocalizationList, checkEditTab);
                if (result == true) {
                    isValid = true;
                }
            });
            
        }
        if (isValid) {
            showAlert('A folder with same name already exists.', 'Failed');
            return;
        }
        if (editingTabIndex === null) {
            $("#tab_data li.active").show();
            if (showVAlue == "" || showVAlue==undefined)
                $("#tab_data li.active").html(`<span contenteditable="false">` + assetTabName + `</span><span style="display:none;">` + JSON.stringify(json[0]) + `</span><span style="display:none;">` + assetTabName + `</span><a href="javascript:void(0)"><i class="fa fa-edit fa-lg tab-edit"></i></a><a href="javascript:void(0)" rel="tooltip" data-original-title = Tab Move><i class="fa fa-arrows tabmove ui-sortable"></i></a><a href="javascript:void(0)"><i class="far fa-trash fa-lg tabdelete"></i></a><a href="javascript:void(0)" title="Show in Cases disabled, click to display"><i class="fa fa-briefcase fa-lg tabcases" case="false" style="color:#bbb;margin-left:10px;"></i></a><a href="javascript:void(0)"><i class="far fa-eye fa-lg permissionTab"></i></a>`)
            else
                $("#tab_data li.active").html(`<span contenteditable="false">` + unescape(showVAlue) + `</span><span style="display:none;">` + JSON.stringify(json[0]) + `</span><span style="display:none;">` + assetTabName + `</span><a href="javascript:void(0)"><i class="fa fa-edit fa-lg tab-edit"></i></a><a href="javascript:void(0)" rel="tooltip" data-original-title = Tab Move><i class="fa fa-arrows tabmove ui-sortable"></i></a><a href="javascript:void(0)"><i class="far fa-trash fa-lg tabdelete"></i></a><a href="javascript:void(0)" title="Show in Cases disabled, click to display"><i class="fa fa-briefcase fa-lg tabcases" case="false" style="color:#bbb;margin-left:10px;"></i></a><a href="javascript:void(0)"><i class="far fa-eye fa-lg permissionTab"></i></a>`)
            _tabAssetselect(index);
        } 
    }
    //showOrHideArrows();
}

function saveAssetNewTabV5() {
    var DefaultTabs = ['Info'.toLowerCase(), 'Address'.toLowerCase(), 'Preferences'.toLowerCase()];
    var UsersDefaultTabs = ['Info'.toLowerCase(), 'Contact Info'.toLowerCase(), 'Personal Info'.toLowerCase(), 'Setting'.toLowerCase(), 'Social'.toLowerCase(), 'My Location'.toLowerCase()];
    var showVAlue = "";
    var addedValue = [];
    if (validateFields("_tabForm")) {
        var val = removeSpecialChars(_formtab.val("name"));
        var result = checkAssetTabName(val, checkTabList, checkEditTab);

        if (result == true) {
            showAlert('A folder with same name already exists.', 'Failed');
            return;
        }

        if (val.indexOf(">") > -1 || val.indexOf("<") > -1) {
            showAlert('Please do not use double(\") quote and (< and >) while creating tab.', 'Alert !');
            return;
        }

        var data = _formtab.serialize();
        var assetTabName = data.name;
        var tabLocalizationObj = {};
        if (languageObject.entries.length > 0) {
            var isValid = false;
            $(languageObject.entries).each(function () {
                var name = this.name.toLowerCase();
                var tabLangFields = escapeSpecialChars(removeSpecialChars(data[name]));
                if (tabLangFields != undefined && tabLangFields != "") {
                    if (tabLangFields.indexOf(">") > -1 || tabLangFields.indexOf("<") > -1)
                        isValid = true;
                    else
                        tabLocalizationObj[this.flag.toString()] = tabLangFields.toString();
                    showVAlue = tabLocalizationObj[curretLang];
                }
            });
            if (isValid) {
                showAlert('Please do not use double(\") quote and (< and >) while creating tab.');
                return;
            }
            else {
                var json = [];
                json.push(tabLocalizationObj);
                if (tablocalizationdata != "" && tablocalizationdata != null) {
                    var obj = JSON.parse(tablocalizationdata);
                    obj[val] = json;
                    tablocalizationdata = JSON.stringify(obj).replace(/[\\]/g, '');
                }
                else {
                    var addTabData = {};
                    addTabData[val] = json;
                    tablocalizationdata = JSON.stringify(addTabData).replace(/[\\]/g, '');
                }
            }

            if (isJSON(tablocalizationdata)) {
                var $changeTabLocData = JSON.parse(tablocalizationdata);
                var $tabLangData = $changeTabLocData[val];
                if ($tabLangData != undefined) {
                    $tabLangData[0] = tabLocalizationObj;
                    tablocalizationdata = JSON.stringify($changeTabLocData).replace(/[\\]/g, '');
                }
            }
        }
        if (showVAlue == "" || showVAlue == undefined) { }
        else if (checkEditTab == true)
            result = checkAssetTabName(unescape(showVAlue), checkTabList, checkEditTab);
        else
            result = checkAssetTabName(unescape(showVAlue), checkTabList, checkEditTab);
        if (result == false) {
            result = checkAssetLanguageTabName(unescape(showVAlue), ChecklocalizationList, checkEditTab);
        }

        if (addedValue.length >= 1)
            result = checkAssetNewTabName(val, addedValue, checkEditTab);

        if (result == false)
            result = checkAssetNewTabName(showVAlue, addedValue, checkEditTab);

        if (result == true) {
            showAlert('A folder with same name already exists.', 'Failed');
            return;
        }

        if (currentValue == "") {
            addedValue.push(val);
            addedValue.push(showVAlue);
        }
        if (tabLocalizationObj != null || tabLocalizationObj != '') {
            var isValid = false;
            $(languageObject.entries).each(function () {
                var name = this.name.toLowerCase();
                var tabLangFields = escapeSpecialChars(removeSpecialChars(data[name]));
                result = checkAssetLanguageTabName(unescape(tabLangFields), ChecklocalizationList, checkEditTab);
                if (result == true) {
                    isValid = true;
                }
            });

        }
        if (isValid) {
            showAlert('A folder with same name already exists.', 'Failed');
            return;
        }
        if (editingTabIndex === null) {
            var activeTabLi = $("#tab_data li.activetab").find('div.left-box').find("ul.action-btn-list li:first");
            var activeLabel = $("#tab_data li.activetab").find('h3.text-trim');
            $(activeTabLi).show();
            if (showVAlue == "" || showVAlue == undefined) {
                $(activeLabel).text(assetTabName);
                $(activeLabel).attr("data-original-title",assetTabName);
                $(activeTabLi).before(`<span style="display:none;" class="localizedname">` + JSON.stringify(json[0]) + `</span><span style="display:none;">` + assetTabName + `</span>`);
                $(".activetab").find(".localization").text(JSON.stringify(json[0]));
            }
            else {
                $(activeLabel).text(unescape(showVAlue));
                $(activeLabel).attr("data-original-title", showVAlue);
                $(activeTabLi).before(`<span style="display:none;" class="localizedname">` + JSON.stringify(json[0]) + `</span><span style="display:none;">` + assetTabName + `</span>`);
                $(".activetab").find(".localization").text(JSON.stringify(json[0]));
            }
                if ($(".activetab").find(".localization").text() == '{}')
                    $(".activetab").find(".localization").text("");
            _tabAssetselect(index);
            currentLocalization = json[0];
            addNewLocalization = JSON.stringify(json[0]);
        }
    $(".activeaside").find("#foldername").val(assetTabName);
    }
    //showOrHideArrows();
}
//// tabselect on add /edit  //
function _tabAssetselect(index, isSetupDashboard = false) {
   // $("#tab_data li").removeClass("active");
    $("#tabcontent div").removeClass("active");
    $("#tab_data li[index=" + index + "]").addClass("active");
    $("#tabcontent div[index=" + index + "]").addClass("active");

    selectedTabIndex = index;
    if (isSetupDashboard == false) {
        if ($('#_assetnewtab').hasClass('in')) {
            isDivModal = true;
            $("#_assetnewtab").modal("hide");
        }
    }
    else {
        if ($("#" + $requestID + "_assetnewtab").hasClass('in')) {
            isDivModal = true;
            $("#" + $requestID + "_assetnewtab").modal("hide");
        }
        persona.hidemoveColumn();
    }
}

function stringtojson(lang) {
    let res = [];
    let lang1 = [];
    res = lang.split(',');
    for (let i = 0; i < res.length; i++) {
        if (res.length == 1)
            lang1[0] = "{" + "\"" + res[i].split(":")[0] + "\"" + ":" + "\"" + res[i].split(":")[1] + "\""
        else
            if (i == 0)
                lang1[0] = "{" + "\"" + res[i].split(":")[0] + "\"" + ":" + "\"" + res[i].split(":")[1] + "\""
            else {
                lang1[0] = lang1[0] + "," + "\"" + res[i].split(":")[0] + "\"" + ":" + "\"" + res[i].split(":")[1] + "\"" 
            }

    };
    lang1 = lang1[0].replace(/\\/g, '') + "}";
    return lang1;
}

function checkAssetTabName(value, arr, checkEditTab) {
    var result = false;
    for (var i = 0; i < arr.length; i++) {
        var name = unescape(arr[i].textContent).toLowerCase();
        if (name == value.toLowerCase() && checkEditTab == true) {
            if (value.toLowerCase() == currentValue.toLowerCase()) { }
            else
                result = true;
            break;
        }
        if (name == value.toLowerCase() && checkEditTab == false) {
            result = true;
            break;
        }

    }
    if (result == false) {
        result = checkAssetLanguageTabName(unescape(value), ChecklocalizationList, checkEditTab);
    }

    return result;
}
function checkAssetNewTabName(value, arr, checkEditTab) {
    var result = false;
    for (var i = 0; i < arr.length; i++) {
        var name = unescape(arr[i]).toLowerCase();
        if (name == value.toLowerCase() && checkEditTab==false) {
            result = true;
            break;
        }
        if (name == value.toLowerCase() && checkEditTab == true) {
            if (value.toLowerCase() == currentValue.toLowerCase()) { }
            else
                result = true;
            break;
        }
    }
    return result;
}
function checkAssetLanguageTabName(value, arr, checkEditTab) {
    if (value == 'undefined' || value == '' || value == null)
        return;
    var result = false;
    for (var i = 0; i < arr.length; i++)
    {
        if (EditTabId == "tb" + (i + 1) && checkEditTab == true) {
            var myIndex = arr.indexOf(i + 1);
            if (myIndex !== -1) {
                arr.splice(myIndex, 1);
            }
        }
        else{
            var splittedArr = arr[i].split(",");
            for (var j = 0; j < splittedArr.length; j++) {
                if (splittedArr[j].split(":")[0] == curretLang) {
                    var name = unescape(splittedArr[j].split(":")[1]);
                    if (name.toLowerCase() == value.toLowerCase() && checkEditTab == true) {
                        if (value.toLowerCase() == currentValue.toLowerCase())
                            result = true;
                        if (value.toLowerCase() == name.toLowerCase())
                            result = true;
                        break;
                    }
                    if (name.toLowerCase() == value.toLowerCase() && checkEditTab == false) {
                        result = true;
                        break;
                    }
                }
                else {
                    var namecheck = unescape(Object.values(splittedArr)[j].split(":")[1]);
                    if (namecheck.toLowerCase() == value.toLowerCase() && checkEditTab == true) {
                        if (value.toLowerCase() == currentValue.toLowerCase())
                            result = true;
                        if (value.toLowerCase() == namecheck.toLowerCase())
                            result = true;
                        break;
                    }
                    if (namecheck.toLowerCase() == value.toLowerCase() && checkEditTab == false) {
                        result = true;
                        break;
                    }
                }
        }
        }
    }
    return result;
}

var tabContainer = "";
var ulContainer = "";
var ChecklocalizationListWidget = "";
var checkDashboardTabList = [];
var itHasRequired = true;
function addWidgetsNewTab(name, language, currentlanguage, edit, tabid, thisContainer, localizationListForWidget, tablist, displayName, isNotRequired = true) {
    currentValue = thisContainer.closest('li').find(' a:first').text();
    tabContainer = thisContainer.parent().parent().parent().find('.tab-content');
    ulContainer = thisContainer;
    checkDashboardTabList = tablist;
    checkEditTab = edit;
    EditTabId = tabid;
    ChecklocalizationListWidget = localizationListForWidget;
    isEdit = true;
    itHasRequired = isNotRequired;
    curretLang = currentlanguage;
    if (name == "" && language == "")
        isEdit = false;


    if (isEdit) {
        language = JSON.parse(stringtojson(language));
    }

    var fieldData = {}; var tabData = { id: 0, name: "" };
    if (isNotRequired) {
        fieldData["displayName"] = { field: "displayName", warnonempty: true, type: "name", displayname: 'Display Name', placeholder: 'Enter display name', required: true, value: name, showtooltip: false, tooltipicon: false };
        $("#_tab-edit-msg").hide();
    }
    else {
        fieldData["displayName"] = { field: "displayName", warnonempty: true, type: "name", displayname: 'Display Name', placeholder: 'Enter display name', required: false, value: name, showtooltip: true, tooltipicon: true };
        $("#_tab-edit-msg").show();
    }
    var tabid = getUniqueTime();
    var tabDataColumns = [];
    var languagedata = {};
    languagedata["name"] = name;
    languagedata["displayName"] = name;
    tabDataColumns.push({ name: 'name', size: 12, minimum: '2', maximum: '50', regexformat: '', tooltip: 'Tab Name' });
    tabDataColumns.push({ name: 'displayName', size: 12, minimum: '2', maximum: '50', regexformat: '', tooltip: 'Keep it blank if you do not want to display the tab name' });

    if (languageObject.entries.length > 0) {
        $(languageObject.entries).each(function () {
            var name = this.name.toLowerCase();
            fieldData[name] = { field: name, fieldedittype: 0, displayname: this.name, placeholder: this.name, regexformat: '', showtooltip:true };
            if (isEdit)
                languagedata[name] = language[this.flag];
            tabDataColumns.push({ name: name, size: 6, minimum: 2, maximum: 50, tooltip: this.name });
        });
    }
    var formnew_tab = {
        id: "_tabForm",
        tabs: ['info'],
        tabdata: {
            'info': {
                name: 'Info', icon: null, columns: tabDataColumns
            }
        },
        fields: fieldData,
        data: languagedata
    };
    _formtab = new morf(formnew_tab);
    if (tablocalizationdata != null && tablocalizationdata.length > 0) {
        var val = _formtab.val("name");
        var jsonData = JSON.parse(tablocalizationdata);
        var data = jsonData[val];
        if (data != undefined) {
            $(languageObject.entries).each(function () {
                var name = this.name.toLowerCase();
                if (data[0][this.flag] != undefined && data[0][this.flag] != "")
                    _formtab.val(name, data[0][this.flag].toString());
            })
        }
    }
    $("#" + $requestID + "_assetnewtab").modal({ backdrop: 'static', show: true });
    if (!isNotRequired) {
        $("#" + $requestID + "_assetnewtab").find('input.form-control').not("#displayname").attr('disabled', true);
        $("#" + $requestID + "_assetnewtab").find('input.form-control').closest('.goto').find('input').attr('disabled', false);
        enableDisableLocalization();
    }
}

function enableDisableLocalization() {
    $("#" + $requestID + "_assetnewtab").find('#displayname').keyup(function () {
        onLoadLocalization();
    })
    function onLoadLocalization() {
        var tabNameValues = $("#" + $requestID + "_assetnewtab").find('#displayname').val().replace(/\s+/g, " ").trim() != "";
        if (!tabNameValues) {
            $("#" + $requestID + "_assetnewtab").find('input.form-control').not("#displayname").attr('disabled', true);
            $("#" + $requestID + "_assetnewtab").find('input.form-control').not("#displayname").val('');
        }
        else {
            $("#" + $requestID + "_assetnewtab").find('input.form-control').not("#displayname").attr('disabled', false);
        }
    }
    onLoadLocalization();
}

function tabWidgetAddHide() {
    tabContainer.parent().find("li:hidden").remove();
    $("#__newtab").modal("hide");
    var index = $("#tab_data li").first().attr("index");
    _tabAssetselect(index);
} 

function checkDashboardTabName(value, arr, checkEditTab) {
    var result = false;
    for (var i = 0; i < arr.length; i++) {
        var name = unescape(arr[i]).toLowerCase();
        if (!itHasRequired && value.toLowerCase() == "") {
            result = false;
            break;
        }
        if (name == value.toLowerCase() && checkEditTab == true) {
            if (value.toLowerCase() == currentValue.replace(/\s+/g, " ").trim().toLowerCase()) { }
            else
                result = true;
            break;
        }
        if (name == value.toLowerCase() && checkEditTab == false) {
            result = true;
            break;
        }

    }
    if (result == false && itHasRequired) {
        result = checkAssetLanguageTabName(unescape(value), ChecklocalizationList, checkEditTab);
    }

    return result;
}

function showAlertMsg(msg, title) {
    $.OpenSmartMessageBox2({ title: title, content: msg, buttons: "[Ok]" },
        function (result) {
            if (result === 'Ok') {
                $.CloseAllSmartMessageBox2();
            }
        }
    );
}

function saveWidgetsNewTab($requestID, currentlanguage, idTabNumber, idRowNumber) {
    var showVAlue = "";
    var val;
    var displayValue;
    var displayName;
    var addedValue = [];
    var isBlankTab = false;
    if (validateFields("_tabForm")) {
        val = (_formtab.val("name"));
        displayValue = val;
        displayName = (_formtab.val("displayName"));
        displayName = extractTextFromName(displayName);
        var data = _formtab.serialize();
        var tabLocalizationObj = {};
        if (languageObject.entries.length > 0) {
            var isValid = false;
            $(languageObject.entries).each(function () {
                var name = this.name.toLowerCase();
                var tabLangFields;
                if (languageObject.entries[6] || languageObject.entries[8] || languageObject.entries[10])
                    tabLangFields = data[name];
                else
                    tabLangFields = removeSpecialCharacters(data[name]);
                if (tabLangFields != undefined && tabLangFields != "") {
                    tabLangFields = extractTextFromName(tabLangFields);
                    if (tabLangFields.indexOf(">") > -1 || tabLangFields.indexOf("<") > -1)
                        isValid = true;
                    else
                        tabLocalizationObj[this.flag.toString()] = escapeSpecialChars(tabLangFields.toString());
                    showVAlue = tabLocalizationObj[curretLang];
                    if (showVAlue == undefined) {
                        showVAlue = displayName;
                    }
                }
            });
            if (isValid) {
                showAlert('Please do not use double(\") quote and (< and >) while creating tab.');
                return;
            }
            else {
                var json = [];
                json.push(tabLocalizationObj);
                if (tablocalizationdata != "" && tablocalizationdata != null) {
                    var obj = JSON.parse(tablocalizationdata);
                    obj[val] = json;
                    tablocalizationdata = JSON.stringify(obj).replace(/[\\]/g, '');
                }
                else {
                    var addTabData = {};
                    addTabData[val] = json;
                    tablocalizationdata = JSON.stringify(addTabData).replace(/[\\]/g, '');
                }
            }

            if (isJSON(tablocalizationdata)) {
                var $changeTabLocData = JSON.parse(tablocalizationdata);
                var $tabLangData = $changeTabLocData[val];
                if ($tabLangData != undefined) {
                    $tabLangData[0] = tabLocalizationObj;
                    tablocalizationdata = JSON.stringify($changeTabLocData).replace(/[\\]/g, '');
                }
            }
        }
        var checkTabName = displayName;
        if (showVAlue != '') {
            checkTabName = showVAlue;
        }
        checkTabName = extractTextFromName(checkTabName);
        var result = checkDashboardTabName(checkTabName, checkDashboardTabList, checkEditTab, checkTabName);
        if (displayName != "") {
            val = displayName;
            val = extractTextFromName(val);
        }

        if (result == true) {
            showAlertMsg('<b>' + checkTabName + '</b>' + ' tab is already exists with same tab name ', 'Failed');
            return;
        }
        if (result == false && !itHasRequired && displayName == "") {
            isBlankTab = true;
        }

        if (val != undefined) {
            if (val.indexOf(">") > -1 || val.indexOf("<") > -1) {
                showAlert('Please do not use double(\") quote and (< and >) while creating tab.');
                return;
            }
        }

        
        if (showVAlue == "" || showVAlue == undefined) { }
        else if (checkEditTab == true) { }
        else
            result = checkAssetTabName(unescape(showVAlue), checkTabList, checkEditTab);
        if (result == false) {
            result = checkAssetLanguageTabName(unescape(showVAlue), ChecklocalizationListWidget, checkEditTab);
        }

        if (addedValue.length >= 1)
            result = checkAssetNewTabName(val, addedValue, checkEditTab);

        if (result == false)
            result = checkAssetNewTabName(showVAlue, addedValue, checkEditTab);

        if (result == true) {
            showAlertMsg(showVAlue + ' tab is already exists with same tab name ', 'Failed');
            return;
        }

        if (currentValue == "") {
            addedValue.push(val);
            addedValue.push(showVAlue);
        }
        if (tabLocalizationObj != null || tabLocalizationObj != '') {
            var isValid = false;
            $(languageObject.entries).each(function () {
                var name = this.name.toLowerCase();
                var tabLangFields = escapeSpecialChars(removeSpecialChars(data[name]));
                result = checkAssetLanguageTabName(unescape(tabLangFields), ChecklocalizationListWidget, checkEditTab);
                if (result == true) {
                    isValid = true;
                }
            });

        }
        if (isValid) {
            showAlertMsg(showVAlue + ' tab is already exists with same tab name ', 'Failed');
            return;
        }
        var trimval = 'row' + idRowNumber + 'tab' + idTabNumber;
        var lis = ulContainer.closest('ul').find('li');
        lis.each(function () {
            var $this = $(this);
            var tabID = $this.find('a:nth-child(1)').attr('tabid');
            if (tabID == trimval) 
                trimval = 'row' + idRowNumber + 'tab' + idTabNumber + $requestID + '_ul';
        })
        if (editingTabIndex === null) {
            $(".custom-tab li.active").show();
            var currentActiveTab;
            if (!checkEditTab) {
                var $li = $("<li>").attr({ "role": "presentation" });
                var $a2 = $("<a>").attr("href", "javascript:void(0)").html('<i class="far fa-check-circle fa-lg"></i>').appendTo($li);
                var $a3 = $("<a>").attr("href", "javascript:void(0)").html('<i class="far fa-times-circle fa-lg tabdelete" style="font-size:1.3333em;"></i>').appendTo($li);
                obj = $li.insertBefore(ulContainer.closest('.addTab'));
                $(obj).addClass("active newTab");
                currentActiveTab = ulContainer.parent().parent().find("li.newTab");
            } else {
                currentActiveTab = ulContainer.parent().parent().parent().find("li.active");
            }
            var tabStructure;
            if (displayName == '') {
                tabStructure = displayValue;
            }
            else {
                tabStructure = displayName;
            }
            
            if (tabStructure != undefined)
                tabStructure = extractTextFromName(tabStructure);
            if ((showVAlue == "" || showVAlue == undefined) && displayName != '')
                currentActiveTab.html(`<a href='#` + trimval + $requestID + `' rel = tooltip '` + `' data-original-title = '` + tabStructure + `' aria-controls='` + trimval + $requestID + `'  tabid='` + trimval + `' role='tab' data-toggle='tab'>` + tabStructure + `</a><span style="display:none;">` + JSON.stringify(json[0]) + `</span></span><span style="display:none;">` + displayName + `</span></span><span style="display:none;">` + displayName + `</span><a href="javascript:void(0)" rel = 'tooltip' data-original-title = 'Edit Tab Name'><i class="fa fa-edit fa-lg tab-edit"></i></a><a href="javascript:void(0)" style = 'cursor:pointer' rel = 'tooltip', data-original-title = 'Delete Tab'><i class="far fa-trash fa-lg tabdelete"></i></a><a href="javascript:void(0)" rel="tooltip" data-original-title = 'Tab Move'><i class="fa fa-arrows-alt tabmove"></i></a>`);
            else if (displayName == '') {
                tabStructure = '(No Name)';
                displayName = '(No Name)';
                currentActiveTab.html(`<a href='#` + trimval + $requestID + `' rel = tooltip '` + `' data-original-title = '` + tabStructure + `' aria-controls='` + trimval + $requestID + `'  tabid='` + trimval + `' role='tab' data-toggle='tab'> <i>` + tabStructure + `</i> </a><span style="display:none;">` + JSON.stringify(json[0]) + `</span></span><span style="display:none;">` + displayName + `</span></span><span style="display:none;">` + displayName + `</span><a href="javascript:void(0)" rel = 'tooltip' data-original-title = 'Edit Tab Name'><i class="fa fa-edit fa-lg tab-edit"></i></a><a href="javascript:void(0)" style = 'cursor:pointer' rel = 'tooltip', data-original-title = 'Delete Tab'><i class="far fa-trash fa-lg tabdelete"></i></a><a href="javascript:void(0)" rel="tooltip" data-original-title = 'Tab Move'><i class="fa fa-arrows-alt tabmove"></i></a>`);
            }
            else
                currentActiveTab.html(`<a href='#` + trimval + $requestID + `' rel = tooltip '` + `' data-original-title = '` + unescape(showVAlue) + `' aria-controls='` + trimval + $requestID + `'  tabid='` + trimval + `' role='tab' data-toggle='tab'>` + unescape(showVAlue) + `</a><span style="display:none;">` + JSON.stringify(json[0]) + `</span></span><span style="display:none;">` + unescape(showVAlue) + `</span></span><span style="display:none;">` + displayName + `</span><a href="javascript:void(0)" rel = 'tooltip', data-original-title = 'Edit Tab Name'><i class="fa fa-edit fa-lg tab-edit"></i></a><a href="javascript:void(0)" style = 'cursor:pointer' rel = 'tooltip' data-original-title = 'Delete Tab'><i class="far fa-trash fa-lg tabdelete"></i></a><a href="javascript:void(0)" rel="tooltip" data-original-title = 'Tab Move'><i class="fa fa-arrows-alt tabmove"></i></a>`)
            _tabAssetselect(index, true);
        }
        if (checkEditTab) {
            currentActiveTab.parent().parent().parent().find(".tab-pane.active").attr("id", trimval + $requestID);
            if (currentActiveTab.closest('div').hasClass('blank-tab')) {
                if (!isBlankTab) {
                    currentActiveTab.closest('div').removeClass('blank-tab');
                }
                currentActiveTab.closest('div').addClass('imaginary-tab');
                var button = currentActiveTab.closest('.nav-tabs').find('.add-tab-button');
                if (currentActiveTab.closest('.row.ui-sortable').find('.swap-del-wrap').length == 0) {
                    if (itHasRequired)
                        button.parent().show();
                    button.prop("disabled", true);
                }
                else {
                    var $blankTab = button.closest(".blank-tab");
                    $blankTab.removeClass("blank-tab");
                    if (itHasRequired) {
                        button.parent().show();
                        var $widgetObj = button.closest(".custom-tab").find(".row-type-change").closest('a');
                        $widgetObj.hide();
                    }
                    button.prop("disabled", false);
                }
                if (currentActiveTab.closest('.custom-tab').find('.row-type-change:visible').length == 0)
                    currentActiveTab.closest('div').removeClass('single-tab');

            }
            if (isBlankTab) {
                currentActiveTab.closest('div').addClass('blank-tab');
            }
        }

        if (!checkEditTab) {
            currentActiveTab.closest('.row').find('.tab-content:not(.widget-body)').find('.tab-pane.active:not(.fade)').removeClass("active");
            currentActiveTab.closest('ul').find('.active:not(.newTab)').removeClass('active');
            currentActiveTab.closest('ul').find('.newTab').removeClass('newTab');            
            var widgetContainer = $("<div>").attr({
                "role": "tabpanel",
                "class": "tab-pane active",
                "id": trimval + $requestID
            });

            var rowSortable = $("<div>").attr({
                "class": "row ui-sortable"
            }).appendTo(widgetContainer);

           


            var $settingDiv = $("<div>").attr({
                "class": "col-xs-12 col-sm-12 col-md-12 col-lg-12 new-row btn-addwidget",
                "style": "margin-bottom: 10px;"
            }).appendTo(rowSortable);

            var $settingInnerDiv = $("<div>").attr({
                "class": "widget",
            }).appendTo($settingDiv);

            var $widgetWrapDiv = $("<div>").attr({
                "class": "add-new-widget-wrap new-widget"
            }).appendTo($settingInnerDiv);

            var $addWidgetAnchor = $("<a>").attr({
                "id": "addWidget",
                "href": "javascript:void(0)",
                "data-action": "addremovewidget",
                "rel": "tooltip",
                "data-placement": "bottom",
                "data-original-title": 'Add widget(s) to the tab',
                "class": "btn btn-primary inbox-create-mini custombtn"
            }).appendTo($widgetWrapDiv);

            var strongTag = $("<strong>").html('<i class="fa fa-plus fa-lg"></i> Add widget(s) to the tab').appendTo($addWidgetAnchor);
            
            var $newTab = $(widgetContainer).appendTo(currentActiveTab.closest('.row').find('.tab-content:not(.widget-body)'));
            var totalRow = currentActiveTab.closest('.row').find(".row.ui-sortable");
            var button = currentActiveTab.closest('.row').parent().find(".add-tab-button")
            button.prop("disabled", true);
            totalRow.each(function () {
                if ($(this).find(".row.ui-sortable").length <= 2) {
                    button.prop("disabled", true);
                }
            });
            if (tabContainer.children('.draggablecolumn').length > 0) {
                tabContainer.find('.new-row').remove();
                tabContainer.find('.draggablecolumn, .btn-addwidget').appendTo(tabContainer.children('.tab-pane').find('.ui-sortable'))
            }
            if (tabContainer.children('.btn-addwidget').length > 0)
                tabContainer.children('.btn-addwidget').remove();
            if (tabContainer.closest('.row').find('.blank-tab').attr('class') == 'col-md-12 dr-tabs custom-tab w-tabs blank-tab') {
                tabContainer.find('.btn-addwidget').remove();
                if (tabContainer.closest('.draggablecolumn').nextAll().length >= 2) {
                    tabContainer.closest('.draggablecolumn').nextAll().appendTo(tabContainer.find('.ui-sortable'));
                }
                else {
                    tabContainer.closest('.draggablecolumn').next().find('.draggablecolumn, .btn-addwidget').appendTo(tabContainer.find('.ui-sortable'));
                    tabContainer.closest('.draggablecolumn').next().remove();
                    tabContainer.prev().removeClass('blank-tab');
                }
            }
            if (tabContainer.find('.tab-pane.active').find('.swap-del-wrap').length > 0) {
                var addTabButton = tabContainer.closest('.row').find('.add-tab-button')
                addTabButton.prop("disabled", false);
            }
            if (currentActiveTab.closest('.row').find('.tab-content:not(.widget-body)').closest('.draggablecolumn').next().length > 0) {
                if (currentActiveTab.closest('.row').find('.tab-content:not(.widget-body)').closest('.draggablecolumn').next().hasClass('btn-addwidget')) {
                    currentActiveTab.closest('.row').find('.tab-content:not(.widget-body)').closest('.draggablecolumn').next().remove();
                }
            }
            if (currentActiveTab.closest('.row').find('.tab-content').children('.draggablecolumn').length != 0) {
                if (currentActiveTab.closest('.row').find('.tab-pane').find('.btn-addwidget').length > 0) {
                    currentActiveTab.closest('.row').find('.tab-pane').find('.btn-addwidget').remove();
                    button.prop("disabled", false);
                }
            }
        }
    }
}

function unescape_html(safe) {
    return safe.replace(/&amp;/g, '&')
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&quot;/g, '"')
        .replace(/&#039;/g, "'")
        .replace(/&apos;/g, "'");
}
function getTypeName(typename) {
    switch (typename) {
        case "NUMBER":
            typename = "Number";
            break;
        case "TEXT":
            typename = "Text";
            break;
    }
    return typename;
}
function _info_tip_popover($req) {
    $req.find('[data-toggle="popover-click"]').popover({
        html: true,
        trigger: 'focus',
        placement: 'bottom',
    }).click(function (e) {
        $req.find(".inbox-search-info-tips").addClass("active");
    }).on('hidden.bs.popover', function () {
        $req.find(".inbox-search-info-tips").removeClass("active");
    });
}
function GetCustomizedDateWidget(selectorId) {

    $("#" + selectorId).find("input[regexformat='datetime']").ready(function () {

        $("#" + selectorId).find("input[regexformat='datetime']").each(function (index, value) {
            //$(this).datetimepicker("remove");
            if (($(this).offset().top - 260) < window.pageYOffset) {
                $(this).data("datetimepicker").pickerPosition = 'bottom-left';
            }
            else {
                $(this).data("datetimepicker").pickerPosition = 'top-left';
            }
        });
    });

    $("#" + selectorId).find("input[regexformat='date']").ready(function () {

        $("#" + selectorId).find("input[regexformat='date']").each(function (index, value) {
            //$(this).datepicker("destroy");
            if (($(this).offset().top - 250) < window.pageYOffset) {
                $(this).data("datepicker").o.orientation.y = 'bottom';
            }
            else {
                $(this).data("datepicker").o.orientation.y = 'top';
            }
        });
    });
}
function intilizepopover($req, placement) {
    $req.find('[data-toggle="popover-click"]').popover({
        html: true,
        trigger: 'focus',
        placement: placement == undefined || placement == null ? 'bottom' : placement,
        container: $req
    }).click(function (e) {
        $req.find(".inbox-search-info-tips").addClass("active");
    }).on('hidden.bs.popover', function () {
        $req.find(".inbox-search-info-tips").removeClass("active");
    });
}
function initilizefieldsetting($this) {
    var $req = $this.dom.container;
    for (var i = 0; i < $this.settings.tabs.length; i++) {
        var tab = $this.settings.tabs[i];
        if ($this.settings.tabdata[tab] != undefined) {
            var columns = $this.settings.tabdata[tab].columns;
            for (var j = 0; j < columns.length; j++) {
                if (columns[j].fieldsetting != "" && columns[j].fieldsetting != undefined) {
                    var $settings = JSON.parse(columns[j].fieldsetting);
                    var field = getfieldid(columns, $settings.vselectfield);
                    if (field != "") {
                        var $control = $req.find("#" + field.name);
                        if ($settings.vselectfieldtype == "8")
                            $control = $control.parent().find("img");
                        else if ($settings.vselectfieldtype == "9") {
                            if ($control.parent().find(".profile-doc-holder").length <= 0)
                                $control = $control.parent().find(".profile-img-holder");
                            else
                                $control = $control.parent().find(".profile-doc-holder");
                        }
                        var groupsarray = $control.data("groups");
                        if (groupsarray == undefined)
                            groupsarray = [];
                        
                        groupsarray.push(columns[j].parser);

                        $control.data("groups", groupsarray)
                        if ($control.length >= 1) {
                            bindevents($control, $settings.vselectfieldtype, $this);
                            if ($settings.vselectfieldtype == "8")
                                $control.trigger('load');
                            else
                                $control.trigger('change');
                        }
                    }
                }
            }
        }
    }
}
function getfieldid(columns, parsername) {
    var fielddata = "";
    $.each(columns, function (i, v) {
        if (v.parser !=undefined)
            if (v.parser.toLowerCase() == parsername.toLowerCase()) 
                fielddata = v;
    });
    return fielddata;
}
function bindevents($control, controltype, $that) {
        if (controltype == "8") {
            $control.on('load', function () {
                showhidegroup($(this), $that, controltype)
            });
        }
        else {
            $control.change(function () {
                showhidegroup($(this), $that, controltype)
            });
        }
}
function showhidegroup($this, $that, controltype) {
    var error = 0;
    var $reqestID = $that.dom.container;
    if (controltype == "8" || controltype == "9")
        error = 0;
    else 
        error = validateFieldResult2($this);
    if (error==0 || error==2) {
        var groups = $this.data("groups");
        var controlvalue = $this.val();
        if (controltype == "7")
            controlvalue = $this.prop('checked');
        else if (controltype == "8") {
            controlvalue = $this.attr("src");
            if (controlvalue.indexOf("placeholder/img.svg") != -1)
                controlvalue = "";
        }
        else if (controltype == "9") {
            if (!$that.settings.v5profile) {
                if ($this.css("display") != "none")
                    controlvalue = "true";
                else
                    controlvalue = "";
            }
            else {
                controlvalue = $this.html();
            }
        }
        else if (controltype == "10") {
            controlvalue = $this.siblings(".note-editor").find(".note-editable").html();
        }
        $.each(groups, function (key, value) {
            for (var i = 0; i < $that.settings.tabs.length; i++) {
                var tab = $that.settings.tabs[i];
                if ($that.settings.tabdata[tab] != undefined) {
                var columns = $that.settings.tabdata[tab].columns;
                var field = getfieldid(columns, value);
                if (field != "") {

                    if (field.fieldsetting != undefined && field.fieldsetting!="") {
                        var $setting = JSON.parse(field.fieldsetting);
                        var $group = $reqestID.find("#" + field.name);
                        var $groupparent = $group.parent().parent();
                        if (controltype == "7") {
                            if ($setting.vhideshow == "hide") {
                                if ($setting.vshowcondtion == "0") {
                                    if (controlvalue == false)
                                        $groupparent.hide();
                                    else
                                        $groupparent.show();
                                }
                                else if ($setting.vshowcondtion == "1") {
                                    if (controlvalue)
                                        $groupparent.hide();
                                    else
                                        $groupparent.show();
                                }

                            }
                            else if ($setting.vhideshow == "show") {
                                if ($setting.vshowcondtion == "0") {
                                    if (controlvalue == false)
                                        $groupparent.show();
                                    else
                                        $groupparent.hide();
                                }
                                else if ($setting.vshowcondtion == "1") {
                                    if (controlvalue)
                                        $groupparent.show();
                                    else
                                        $groupparent.hide();
                                }
                            }
                        }
                        else if (controltype == "5") {
                            if ($setting.vshowdropdownval == "Empty")
                                $setting.vshowdropdownval = null;
                            if ($setting.vhideshow == "hide") {
                                if ($setting.vshowcondtion == "equalto") {
                                    if (controlvalue == $setting.vshowdropdownval)
                                        $groupparent.hide();
                                    else
                                        $groupparent.show();
                                }
                                else if ($setting.vshowcondtion == "notequalto") {
                                    if (controlvalue != $setting.vshowdropdownval)
                                        $groupparent.hide();
                                    else
                                        $groupparent.show();
                                }

                            }
                            else if ($setting.vhideshow == "show") {
                                if ($setting.vshowcondtion == "equalto") {
                                    if (controlvalue == $setting.vshowdropdownval)
                                        $groupparent.show();
                                    else
                                        $groupparent.hide();
                                }
                                else if ($setting.vshowcondtion == "notequalto") {
                                    if (controlvalue != $setting.vshowdropdownval)
                                        $groupparent.show();
                                    else
                                        $groupparent.hide();
                                }
                            }
                        }
                        else {
                            if ($setting.vhideshow == "hide") {
                                if ($setting.vshowcondtion == "isempty") {
                                    if (controlvalue == "")
                                        $groupparent.hide();
                                    else
                                        $groupparent.show();
                                }
                                else if ($setting.vshowcondtion == "hasvalue") {
                                    if (controlvalue != "")
                                        $groupparent.hide();
                                    else
                                        $groupparent.show();
                                }

                            }
                            else if ($setting.vhideshow == "show") {
                                if ($setting.vshowcondtion == "isempty") {
                                    if (controlvalue == "")
                                        $groupparent.show();
                                    else
                                        $groupparent.hide();
                                }
                                else if ($setting.vshowcondtion == "hasvalue") {
                                    if (controlvalue != "")
                                        $groupparent.show();
                                    else
                                        $groupparent.hide();
                                }
                            }
                        }
                    }
                    }
                }

            }
        });
    }
}
function GetLocalizationData(defaultValue, localizeValues, userLang) {
    localizeValues = JSON.parse(localizeValues);
    $.each(localizeValues, function (key, val) {
        if (key.toLowerCase() == userLang)
            defaultValue = val;
    }); 
    return defaultValue;
}

;
/* Validation start */
var VALIDATION_UNKNOWN = -1,
    VALIDATION_VALID = 0,
    VALIDATION_REGEX_MISMATCH = 1,
    VALIDATION_REQUIRED = 2,
    VALIDATION_TOO_SHORT = 4,
    VALIDATION_TOO_LONG = 5,
    VALIDATION_NOT_UNIQUE = 6,
    VALIDATION_BAD_DATE = 7,
    VALIDATION_OLD_DATE = 8,
    VALIDATION_BAD_NUM = 9,
    VALIDATION_BAD_DATE = 10,
    VALIDATION_BAD_TIME = 11,
    VALIDATION_BAD_DATETIME = 12,
    VALIDATION_FIRSTCHAR = 13,
    VALIDATION_BAD_CUR = 14,
    VALIDATION_BAD_ALPHANUMERIC = 15,
    VALIDATION_BAD_ALPHANUMERICWITHDOT = 16,
    VALIDATION_BAD_NAME = 17,
    VALIDATION_BAD_POSITIVE_NUM = 18;//Added by Lalita to validate numbers greater than 0 in certification
    VALIDATION_SHORT_NUMBER = 19;
    VALIDATION_LARGE_NUMBER = 20;
    VALIDATION_BAD_SPECIALCHARACTERS = 21;
    VALIDATION_WEBSITEURL = 22;
    VALIDATION_COULD_BE_STRONGER = 23;
    VALIDATION_STRONG_PASSWORD = 24;
    VALIDATION_DOMAIN_RESTRICTED = 25;
    VALIDATION_USER_RESTRICTED = 26;
    VALIDATION_BAD_ALPHANUMBER = 27;
    VALIDATION_BAD_LIMITED_SPECIALCHARACTER = 28;
    VALIDATION_HTMLEDITOR_TOO_LONG = 29;
    VALIDATION_OUT_OF_RANGE = 30;

var regexEmailPattern = /^((([a-zA-Z0-9]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))$/;
var regexZipPattern = /(^\d{5}$)|(^\d{5}-\d{4}$)/;
var regexUrlPattern = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
var regexWebsiteUrlPattern = /https:(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https:\/\/[a-zA-Z0-9]+\.[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,} /;
var regexAlphanumericPattern = /^[a-zA-Z0-9\s-_]+$/;;
var regexAlphanumericPatternWithDot = /^[a-zA-Z0-9\s.]+$/;
var regexAlphanumericPatternWithoutspace = /^[a-zA-Z0-9]*$/;
var regexNamePattern = /["&<.>'\\]/;
var regexTimePattern = /^(0[1-9]|[1-9])[0-9]*$/;//Added by Lalita to validate numbers greater than 0 in certification
var regexDomainPattern = /^(?!www\.)[a-zA-Z0-9-]{1,61}[a-zA-Z0-9-]{0,61}[a-zA-Z0-9-](?:\.[a-zA-Z-]{2,})+$/;
var regexCrmDomainPattern = /^.+\.my\.salesforce\.com$/;
var regexEscalationPattern = /^\d+(?= (days\b))+$/;
var regexCurrencyPattern = /^[+]?([0-9]{0,12}(?:[\.][0-9]{0,2})?|\.[0-9]{0,2})$/;
var regexNumberPattern = /^[+]?([0-9]{0,15})$/;
var regexPurlPattern = /[^a-zA-Z0-9_\-]/g;
var regexSpecialCharactersPattern = /^[a-zA-Z0-9\s!@#$&()\\-`.+,!\/"'*]*$/;
var regexPassword = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\w\s]).{8,20}$/;
var regexImageTypesPattern = /(gif|jpe?g|tiff?|png|webp|bmp)$/gi;
var regexLimitedSpecialCharacters = /[`!@#$%^*()+\=\[\]{};:"\\|,.<>\/?~]/;
var CheckFornoSpecialCharacters = /^[0-9@  `!@#$%^&*()_+\-=\[\]{};':""\\|,.<>\/?~]+$/;
function validateClearErrors(el) {
    if (el === undefined || el === null)
        el = document.body;

    el = $(el);
    el.find("span.help-block").remove();
}
//$.fn.digits = function(cur) {
//    return this.each(function () {
//        $(this).text(Math.round($(this).text()));
//        if (cur != "")
//            $(this).text($(this).text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") + " (" + cur + ")");
//        else
//            $(this).text($(this).text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,"));
//    })
//}
function validateFields(el) {  
    if (el === undefined || el === null)
        el = $(document.body);
    else
        el = $("#" + el);

    validateClearErrors(el);
    var errors = false;
    var names = new Array();
    el.find(".form-control").each(function () { names.push($(this)); });
    el.find("select").each(function () { names.push($(this)); });
    var tab = null;
    for (index in names) {
        var data = names[index];
        if (typeof(data) === "function") // vishal
            continue;
        

        var val = data.val();
        var isHtmlField = data.attr("usehtmleditor") === "true" ? true : false;
        if (isHtmlField)
            val = data.code();////getting value from htmlfield to validate

        //getting value from custom image Field to validate (profile-v5)
        if (data.find('img').length == 1)
            val = data.find('img').attr("src") != undefined ? (data.find('img').attr("src") == 'https://partner-marketing.bitdefender.com/v4u/img/placeholder/img.svg' ? "" : data.find('img').attr("src")) : "";

        if (val !== "" || data.attr("required") === "required") {
            var result = validateFieldResult2(data);
            if (result !== 0) {
                errors = true;
                if (data.attr("type") === "dropdown") {
                    data.parent().toggleClass("has-warning", !errors);
                    data.parent().toggleClass("has-success", !errors);
                    data.parent().toggleClass("has-error", errors);
                    data.after("<span class='help-block note'>" + validateGetError(result) + "</span>");
                }
                else {
                    data.parent().parent().toggleClass("has-warning", !errors);
                    data.parent().parent().toggleClass("has-success", !errors);
                    data.parent().parent().toggleClass("has-error", errors);
                    data.parent().after("<span class='help-block note'>" + validateGetError(result) + "</span>");
                }

                if (tab === null)
                    tab = data.closest('.tab-pane');
            }
        }
    }
    if (tab != null) {
        var parenttab = tab.parent();
        parenttab.find('.tab-pane').removeClass("active in");
        el.find("ul").not(".steps").find("li").removeClass("active");
        var li = el.find("li a[href='#" + tab.attr("id") + "']").parent("li");
        li.addClass("active");
        tab.addClass("active in");
    }
    return !errors;
}

function validateFieldResult2(data) {

    var val = data.val();
    var min = data.attr("minimum");
    var max = data.attr("maximum");
    var fieldtype = data.attr("type");
    var regextype = data.attr("regexformat");
    var required = data.attr("required");
    var isHtmlField = data.attr("usehtmleditor") === "true" ? true : false;
    if (isHtmlField)
        val = data.code();

    //getting value from custom image Field to validate (profile-v5)
    if (data.find('img').length == 1)
        val = data.find('img').attr("src") != undefined ? (data.find('img').attr("src") == 'https://partner-marketing.bitdefender.com/v4u/img/placeholder/img.svg' ? "" : data.find('img').attr("src")) : "";

    var isEmpty = false;
    var tooSmall = false;

    if (val !== null && required === "required") {

        if (Array.isArray(val)) {
            isEmpty = val.length === 0;
        } else if (typeof val === 'string') {
            isEmpty = val.trim() === '';
        }


        if (typeof val === 'string') {
            if (val.trim().length < min) {
                tooSmall = true;
            }
        } else if (Array.isArray(val)) {
            if (val.length < min) {
                tooSmall = true;
            }
        }

    }
    // val === "-1" added for fixed Microsoft Edge,Safari dropdown issue
    if (fieldtype === "dropdown" && (val === null || val === "-1" || val.length === 0) && required === "required") 
       return VALIDATION_REQUIRED;
    

    if ((val !== null && val === "" && val.length === 0 && required === "required") || isEmpty)
        return VALIDATION_REQUIRED;
    if (regextype == "number") {
        if (val != null && val.length > 0) {
            if (validateNumber(data) == VALIDATION_VALID) {
                if (parseInt(val) < parseInt(min))
                    return VALIDATION_SHORT_NUMBER;
                else if (parseInt(val) > parseInt(max))
                    return VALIDATION_LARGE_NUMBER;
                else
                    return VALIDATION_VALID;
            }
            else
                return VALIDATION_BAD_NUM;
        }
    }
    else {
        if ((val !== null && val.length > 0 && val.length < min && regextype !== "currency") || tooSmall)
            return VALIDATION_TOO_SHORT;

        //if (val !== null && max !== "" && val.length > max && (regextype !== "currency" && regextype !== "number")) //This has been commented because range validation was not working for field type"number". It is handled in back end for custom fields to set default max length=18
        if (val !== null && max !== "" && val.length > max) {
            if (isHtmlField)
                return VALIDATION_HTMLEDITOR_TOO_LONG;
            else
                return VALIDATION_TOO_LONG;    
        }
            
    }
    if (regextype !== null && val !== '') {
        switch (regextype) {
            case "email": return validateEmail(data);
            case "address": return validateAddress(data);            
            case "zip": return validateZipCode(data);
            case "phone": return validatePhone(data);
            case "url": return validateUrl(data);
            case "embedurl": return validateEmbedUrl(data);
            case "websiteurl": return validateWebsiteUrl(data);
            case "datetime": return validateDate(data);
            case "number": return validateNumber(data);
            case "currency": return validateCurrency(data);
            case "alphanumeric": return validateAlphanumeric(data);
            case "alphanumericwithoutspace": return validateAlphanumericspaceformat(data);
            case "alphanumericwithdot": return validateAlphanumericWithDot(data);
            case "name": return validateName(data);
            case "numbergreaterthanzero": return validateNumGreaterthanZero(data);//Added by Lalita to validate numbers greater than 0 in certification
            case "numberBetween15And720": return validateNumBetween15And720(data);//To validate minutes of a virtual event
            case "specialcharacters": return validateSpecialCharacters(data);
            case "limitedspecialcharacters": return validateLimitedSpecialCharacters(data);
        }
    }
    return VALIDATION_VALID;
}

function validateEmail(data) {
    if (regexEmailPattern.test(data.val().toLowerCase()))
        return VALIDATION_VALID;
    return VALIDATION_REGEX_MISMATCH;
}

function validateAddress(data) {
    return VALIDATION_VALID;
}

function validateZip(data) {
    if (regexZipPattern.test(data.val()))
        return VALIDATION_VALID;
    return VALIDATION_REGEX_MISMATCH;
}

function validatePhone(data) {
    return VALIDATION_VALID;
}

function validateUrl(data) {
    if (regexUrlPattern.test(data.val()))
        return VALIDATION_VALID;
    return VALIDATION_REGEX_MISMATCH;
}

function validateEmbedUrl(data) {
    var isValidLink = false;
    try {
        const regex = /[\w-]+\.[\w-]{2,4}$/;
        var parsedUrl = new URL(data.val());
        var domain = parsedUrl.hostname;
        const match = domain.match(regex);
        if (match) {
            var isHttps = parsedUrl.protocol == "https:";
            var isQueryString = parsedUrl.search.length > 0;
            var isRouteParameter = parsedUrl.pathname.length > 1;
            if (isHttps && (isRouteParameter || isQueryString))
                isValidLink = embedLinks.includes(domain.toLowerCase());
        }
        else
            isValidLink = false;
    }catch (er) {
        isValidLink = false;
    }

    if (regexUrlPattern.test(data.val()) && isValidLink)
        return VALIDATION_VALID;
    return VALIDATION_REGEX_MISMATCH;
}

function validateWebsiteUrl(data) {
    if (data.val().indexOf(",") < 0) {
        var regexMatch = data.val().toLowerCase().match(regexWebsiteUrlPattern);
        if (regexMatch != null && regexMatch[0] === regexMatch.input && regexMatch.index === 0)
            return VALIDATION_VALID;
        return VALIDATION_WEBSITEURL;
    }
    else {
        return VALIDATION_WEBSITEURL;
    }
}

function validateAlphanumeric(data) {
    if (regexAlphanumericPattern.test(data.val()))
        return VALIDATION_VALID;
    return VALIDATION_BAD_ALPHANUMERIC;
}
function validateAlphanumericWithDot(data) {
    if (regexAlphanumericPatternWithDot.test(data.val()))
        return VALIDATION_VALID;
    return VALIDATION_BAD_ALPHANUMERICWITHDOT;
}

function validateAlphanumericspaceformat(data) {
    if (regexAlphanumericPatternWithoutspace.test(data.val()))
        return VALIDATION_VALID;
    return VALIDATION_BAD_ALPHANUMBER;
}
function validateDate(data) {
    if (isNaN(Date.parse(data.val())))
        return VALIDATION_BAD_DATE;
    return VALIDATION_VALID;
}

function validateNumber(data) {
    if (data.val().length > 0 && !regexNumberPattern.test(data.val()))
        return VALIDATION_BAD_NUM;
    return VALIDATION_VALID;
}

//Added by Lalita, for time validation in Questionnaire
function validateNumGreaterthanZero(data) {   
    if (data.val().length > 0 && parseInt(data.val()) != data.val())
        return VALIDATION_BAD_NUM;
    else if (regexTimePattern.test(data.val()))
        return VALIDATION_VALID;
    return VALIDATION_BAD_POSITIVE_NUM;
}
//Upto here

function validateNumBetween15And720(data) {    
    const regexNum15to720 = /^(15|1[6-9]|[2-9][0-9]|[1-6][0-9]{2}|7[01][0-9]|720)$/;

    if (data.val().length > 0 && parseInt(data.val()) != data.val())
        return VALIDATION_BAD_NUM;
    else if (regexNum15to720.test(data.val()))
        return VALIDATION_VALID;

    return VALIDATION_OUT_OF_RANGE;
}

function validateCurrency(data) {
    if (data.val().length > 0 && !regexCurrencyPattern.test(data.val()))
        return VALIDATION_BAD_CUR;
    return VALIDATION_VALID;
}

function validateName(data) {
    if (regexNamePattern.test(data.val())) {
        return VALIDATION_BAD_NAME;
    }
    return VALIDATION_VALID;
}

function validateSpecialCharacters(data) {
    if (regexSpecialCharactersPattern.test(data.val())) {
        return VALIDATION_VALID;
    }       
    return VALIDATION_BAD_SPECIALCHARACTERS;
}

function validateLimitedSpecialCharacters(data) {
    if (regexLimitedSpecialCharacters.test(data.val())) {
        return VALIDATION_BAD_LIMITED_SPECIALCHARACTER;
    }
    return VALIDATION_VALID;
}

function validateCheckFornoSpecialCharacters(data) {
    if (CheckFornoSpecialCharacters.test(data)) {
        return true;
    }
    return false;
}


function validateGetError(error) {
    switch (error) {
        case VALIDATION_NOT_UNIQUE: return "Not unique";
        case VALIDATION_REQUIRED: return "Required";
        case VALIDATION_TOO_SHORT: return "Too short";
        case VALIDATION_TOO_LONG: return "Too long";
        case VALIDATION_REGEX_MISMATCH: return "Invalid format";
        case VALIDATION_BAD_DATE: return "Invalid Date";
        case VALIDATION_BAD_NUM: return "Invalid Number";
        case VALIDATION_BAD_CUR: return "Invalid Currency";
        case VALIDATION_FIRSTCHAR: return "1st char should be alphabet";
        case VALIDATION_BAD_ALPHANUMERIC: return "'@',' % ',' ! ',' # ',' $ ',' ^ ',' & ',' * ',' () ',' + ',' / ', '=', ':', ';', '{}', '[]', '<>' and '?' is not allowed";
        case VALIDATION_BAD_ALPHANUMERICWITHDOT: return "Must be A-Z a-z 0-9 .";
        case VALIDATION_BAD_ALPHANUMBER: return "Invalid format";
        case VALIDATION_BAD_NAME: return "' \" ' , '&' , '<' , '.' , '\'' , '\\' and '>' is not allowed ";
        case VALIDATION_BAD_POSITIVE_NUM: return "Should be greater than 0";//Added by Lalita to validate numbers greater than 0 in certification
        case VALIDATION_OUT_OF_RANGE: return "Please enter minute value in range 15-720";
        case VALIDATION_LARGE_NUMBER: return "Out Of Range";
        case VALIDATION_SHORT_NUMBER: return "Out Of Range";
        case VALIDATION_BAD_SPECIALCHARACTERS: return "' % ' , '-' , '=' , ':' , ';' , '{}' , '[]' , '<>' and '?' is not allowed";
        case VALIDATION_WEBSITEURL: return "Invalid format. Please use https://www.website.com";
        case VALIDATION_COULD_BE_STRONGER: return "Could be stronger";
        case VALIDATION_STRONG_PASSWORD: return "Strong password";
        case VALIDATION_DOMAIN_RESTRICTED: return "(restricted domain)";
        case VALIDATION_USER_RESTRICTED: return "(restricted email)";
        case VALIDATION_BAD_LIMITED_SPECIALCHARACTER: return "' & ', '-', '_', are allowed";
        case VALIDATION_HTMLEDITOR_TOO_LONG: return "This message exceeds the character count limit.<br>Note: The character count is based on the total number of characters in the code. Go to the code view to adjust accordingly and save to proceed.";
    }
    return error;
}

function validateHandleResponse(msg) {
    if (typeof (msg) == "boolean")
        return msg;

    if (typeof (msg.status) == "boolean")
        return msg.status;

    if (msg == null || msg.indexOf("err=") !== -1) {
        return null;
    } else {
        var data = $.xml2json(msg)
        if (data.errors == "false")
            return true;
        else
            handleBackendErrors(data);
    }
    return false;
}

function validateHandleResponseJson(msg) {
    if (msg.status !== 0) {
        return null;
    }

    if (typeof (msg.result) == "boolean")
        return msg.result;
    else {
        var data = msg.result;
        if (data.errors == false)
            return true;
        else
            handleBackendErrors(data);
    }
    return false;
}
/* Validation end */

function handleBackendErrors(data) {
    for (key in data.item) {
        var result = 0;

        if (data.item[key] == "not_unique") {
            result = VALIDATION_NOT_UNIQUE;
        }
        else if (data.item[key] == "too_short") {
            result = VALIDATION_TOO_SHORT;
        }
        else if (data.item[key] == "too_long") {
            result = VALIDATION_TOO_LONG;
        }
        else if (data.item[key] == "required") {
            result = VALIDATION_REQUIRED;
        }
        else if (data.item[key] == "regex_mismatch") {
            result = VALIDATION_REGEX_MISMATCH;
        }
        else if (data.item[key] == "not_number" || data.item[key] == "not_currency") {
            result = VALIDATION_BAD_NUM;
        }
        else if (data.item[key] == "not_date") {
            result = VALIDATION_BAD_DATE;
        }
        else if (data.item[key] == "not_time") {
            result = VALIDATION_BAD_TIME;
        }
        else if (data.item[key] == "not_datetime") {
            result = VALIDATION_BAD_DATETIME;
        }
        else if (data.item[key] == "domain_restricted") {
            result = VALIDATION_DOMAIN_RESTRICTED;
        }
        else if (data.item[key] == "user_restricted") {
            result = VALIDATION_USER_RESTRICTED;
        }
        else if (data.item[key] == "valid") {
            result = VALIDATION_VALID;
        }
        else {
            result = VALIDATION_UNKNOWN;
        }

        if (result > 0) {
            validateShowError(key.toLowerCase(), result);
            moveTab(key.toLowerCase());
        }
    }
}

function validateShowError(field, error) {
    var el = $("#" + field);
    /* RESET CSS */
    el.parent().parent().removeClass("has-error");
    el.parent().parent().removeClass("has-warning");
    el.parent().parent().removeClass("has-success");
    el.parent().parent().find("span.help-block").remove();

    el.parent().parent().toggleClass("has-error", error);
    el.parent().parent().find("span.help-block").remove();
    el.parent().parent().append("<span class='help-block note'>" + validateGetError(error) + "</span>");
}

function moveTab(field) {
    var el = $("#" + field);
    var tab = el.closest('.tab-pane');

    if (tab != null) {
        var parenttab = tab.parent();
        parenttab.find('.tab-pane').removeClass("active in");
        $(document.body).find(".modal-body").find("li").removeClass("active");
        var li = $(document.body).find("li a[href='#" + tab.attr("id") + "']").parent("li");
        li.addClass("active");
        tab.addClass("active in");
    }
}

function validateStaticField(fieldid) {
    var $parent = $(fieldid).parent().parent();
    var $control = $(fieldid);
    var that = this;

    var isempty = '', value = '';
    /* RESET CSS */
    $parent.removeClass("has-error");
    $parent.removeClass("has-warning");
    $parent.removeClass("has-success");
    $parent.find("span.help-block").remove();

    var err_code = validateFieldResult2($control);
    if (err_code !== 0) {
        $parent.toggleClass("has-warning", isempty);

        $parent.toggleClass("has-error", err_code !== 0);
        $parent.find("span.help-block").remove();
        $parent.append("<span class='help-block note'>" + validateGetError(err_code) + "</span>");
        return false;
    } else {
        $parent.toggleClass("has-success", (value != '' && value != null) && data.value != value);
    }
    return true;
}

//To validate zipcode according to countryname 
//Note : It will work for country drop down which has class as 'country' and zipcode input box has regexformat property as 'zip'
function validateZipCode(data) {
    var zipCodeRegex = /\d{5}$|^\d{5}-\d{4}/g;
    var $country = $(".country");
    var countryName = $country.find(".select2-container span.select2-chosen").text().toLowerCase();   
    zipCodeRegex = getZipCodeRegex(countryName);     
    if (zipCodeRegex.test(data.val()))
        return VALIDATION_VALID;
    return VALIDATION_REGEX_MISMATCH;
}

// To use in import if the field is unmapped
function validateIsRequired(el) {
    if (el === undefined || el === null)
        el = $(document.body);
    else
        el = $("#" + el);
    validateClearErrors(el);
    var ctrls = [];
    var tab = null;
    el.find("select").each(function () { ctrls.push($(this)); });
    var isValid = true;
    for (index in ctrls) {
        var data = ctrls[index];
        var val = data.val();
        if (data.attr("required") === "required") {
            if (val == -1 || val == null) {
                errors = true;
                if (data.attr("type") === "dropdown") {
                    data.parent().toggleClass("has-warning", !errors);
                    data.parent().toggleClass("has-success", !errors);
                    data.parent().toggleClass("has-error", errors);
                    data.after("<span class='help-block note'>" + validateGetError(VALIDATION_REQUIRED) + "</span>");                    
                    isValid = false;

                    if (tab === null)
                        tab = data.closest('.tab-pane');
                }
            }
        }
    }
    if (tab != null) {
        var parentTab = tab.parent();
        parentTab.find('.tab-pane').removeClass("active in");
        el.find("ul").not(".steps").find("li").removeClass("active");
        var li = el.find("li a[href='#" + tab.attr("id") + "']").parent("li");
        li.addClass("active");
        tab.addClass("active in");
    }
    return isValid;
}

function validateStrongPassword(val) {
    var pwdRegexCode = validateRegexPassword(regexPassword, val);
    if (pwdRegexCode !== 0)
        return VALIDATION_COULD_BE_STRONGER;
    else
        return VALIDATION_STRONG_PASSWORD;
}

function validateRegexPassword(regex, data) {
    var testString = "" + data;
    if (testString.match(regex))
        return VALIDATION_VALID;
    return VALIDATION_REGEX_MISMATCH;
}

//Regular expression to match and replace line breaks, nulls, undefined values, and image tags those src atrribute value is null with HTML <br> tags.
// (?:\r\n|\r|\n|null|undefined) matches any line break, null, or undefined value in the input string
// (?:<img\s[^>]*?(?:(?<=\ssrc=['"])null(?=['"])|(?<=\ssrc=[''])\s*(?=['"]))[^>]*?>) matches certain image tags with 'null' in the src attribute

function replaceEmptyImgTagAndNullvalues(str) {

    var regex = /(?:\r\n|\r|\n|null|undefined)|(<img\s[^>]*?(?:\ssrc=['"](null|\s*)['"])[^>]*?>)/gi;
    return str.replace(regex, "<br/>");
}

;
///***** JSON containg all country details with its name , country code and Regex for its zipcode ****//

var jsonCountry = [{
    "Country": "Afghanistan",
    "ISO": "AF",    
    "Regex": "^\\d{4}$"
}, {    
    "Country": "Åland Islands",
    "ISO": "AX",    
    "Regex": "^22\\d{3}$"
}, {    
    "Country": "Albania",
    "ISO": "AL",   
    "Regex": "^\\d{4}$"
}, {   
    "Country": "Algeria",
    "ISO": "DZ",    
    "Regex": "^\\d{5}$"
}, {  
    "Country": "American Samoa",
    "ISO": "AS",   
    "Regex": "96799"
}, {   
    "Country": "Andorra",
    "ISO": "AD",    
    "Regex": "^[Aa][Dd]\\d{3}$"
}, {    
    "Country": "Angola",
    "ISO": "AO",   
    "Regex": ""
}, {    
    "Country": "Anguilla",
    "ISO": "AI",    
    "Regex": "^[Aa][I][-][2][6][4][0]$"
}, {
    "Country": "Antigua and Barbuda",
    "ISO": "AG",
    "Regex": ""
}, {
    "Country": "Argentina",
    "ISO": "AR",
    "Regex": "^\\d{4}|[A-Za-z]\\d{4}[a-zA-Z]{3}$"
}, {
    "Country": "Armenia",
    "ISO": "AM",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Aruba",
    "ISO": "AW",
    "Regex": ""
}, {
    "Country": "Ascension island",
    "ISO": "AC",
    "Regex": "^[Aa][Ss][Cc][Nn]\\s{0,1}[1][Zz][Zz]$"
}, {
    "Country": "Australia",
    "ISO": "AU",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Austria",
    "ISO": "AT",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Azerbaijan",
    "ISO": "AZ",
    "Regex": "^[Aa][Zz]\\d{4}$"
}, {
    "Country": "Bahamas",
    "ISO": "BS",
    "Regex": ""
}, {
    "Country": "Bahrain",
    "ISO": "BH",
    "Regex": "^\\d{3,4}$"
}, {
    "Country": "Bangladesh",
    "ISO": "BD",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Barbados",
    "ISO": "BB",
    "Regex": "^[Aa][Zz]\\d{5}$"
}, {
    "Country": "Belarus",
    "ISO": "BY",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Belgium",
    "ISO": "BE",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Belize",
    "ISO": "BZ",
    "Regex": ""
}, {
    "Country": "Benin",
    "ISO": "BJ",
    "Regex": ""
}, {
    "Country": "Bermuda",
    "ISO": "BM",
    "Regex": "^[A-Za-z]{2}\\s([A-Za-z]{2}|\\d{2})$"
}, {
    "Country": "Bhutan",
    "ISO": "BT",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Bolivia",
    "ISO": "BO",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Bonaire, Sint Eustatius and Saba",
    "ISO": "BQ",
    "Regex": ""
}, {
    "Country": "Bosnia and Herzegovina",
    "ISO": "BA",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Botswana",
    "ISO": "BW",
    "Regex": ""
}, {
    "Country": "Brazil",
    "ISO": "BR",
    "Regex": "^\\d{5}-\\d{3}$"
}, {
    "Country": "British Antarctic Territory",
    "ISO": "",
    "Regex": "^[Bb][Ii][Qq]{2}\\s{0,1}[1][Zz]{2}$"
}, {
    "Country": "British Indian Ocean Territory",
    "ISO": "IO",
    "Regex": "^[Bb]{2}[Nn][Dd]\\s{0,1}[1][Zz]{2}$"
}, {
    "Country": "Virgin Islands, British",
    "ISO": "VG",
    "Regex": "^[Vv][Gg]\\d{4}$"
}, {
    "Country": "Brunei Darussalam",
    "ISO": "BN",
    "Regex": "^[A-Za-z]{2}\\d{4}$"
}, {
    "Country": "Bulgaria",
    "ISO": "BG",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Burkina Faso",
    "ISO": "BF",
    "Regex": ""
}, {
    "Country": "Burundi",
    "ISO": "BI",
    "Regex": ""
}, {
    "Country": "Cambodia",
    "ISO": "KH",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Cameroon",
    "ISO": "CM",
    "Regex": ""
}, {
    "Country": "Canada",
    "ISO": "CA",
    "Regex": "^(?=[^DdFfIiOoQqUu\\d\\s])[A-Za-z]\\d(?=[^DdFfIiOoQqUu\\d\\s])[A-Za-z]\\s{0,1}\\d(?=[^DdFfIiOoQqUu\\d\\s])[A-Za-z]\\d$"
}, {
    "Country": "Cape Verde",
    "ISO": "CV",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Cayman Islands",
    "ISO": "KY",
    "Regex": "^[Kk][Yy]\\d[-\\s]{0,1}\\d{4}$"
}, {
    "Country": "Central African Republic",
    "ISO": "CF",
    "Regex": ""
}, {
    "Country": "Chad",
    "ISO": "TD",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Chile",
    "ISO": "CL",
    "Regex": "^\\d{7}\\s\\(\\d{3}-\\d{4}\\)$"
}, {
    "Country": "China",
    "ISO": "CN",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Christmas Island",
    "ISO": "CX",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Cocos (Keeling) Islands",
    "ISO": "CC",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Colombia",
    "ISO": "CO",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Comoros",
    "ISO": "KM",
    "Regex": ""
}, {
    "Country": "Congo",
    "ISO": "CG",
    "Regex": ""
}, {
    "Country": "Congo, Democratic Republic",
    "ISO": "CD",
    "Regex": "^[Cc][Dd]$"
}, {
    "Country": "Cook Islands",
    "ISO": "CK",
    "Regex": ""
}, {
    "Country": "Costa Rica",
    "ISO": "CR",
    "Regex": "^\\d{4,5}$"
}, {
    "Note": "",
    "Country": "Côte D'ivoire",
    "ISO": "CI",
    "Format": "- no codes -",
    "Regex": ""
}, {
    "Country": "Croatia",
    "ISO": "HR",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Cuba",
    "ISO": "CU",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Curaçao",
    "ISO": "CW",
    "Regex": ""
}, {
    "Country": "Cyprus",
    "ISO": "CY",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Czech Republic",
    "ISO": "CZ",
    "Regex": "^\\d{3}\\s\\d{2}-\\d{3}\\s\\d{2}\\)$"
}, {
    "Country": "Denmark",
    "ISO": "DK",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Djibouti",
    "ISO": "DJ",
    "Regex": ""
}, {
    "Note": "",
    "Country": "Dominica",
    "ISO": "DM",
    "Format": "- no codes -",
    "Regex": ""
}, {
    "Country": "Dominican Republic",
    "ISO": "DO",
    "Regex": "^\\d{5}$"
}, {
    "Country": "East Timor",
    "ISO": "TL",
    "Regex": ""
}, {
    "Country": "Ecuador",
    "ISO": "EC",
    "Regex": "^\\d{6}$"
}, {
    "Country": "El Salvador",
    "ISO": "SV",
    "Regex": "^1101$"
}, {
    "Country": "Egypt",
    "ISO": "EG",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Equatorial Guinea",
    "ISO": "GQ",
    "Regex": ""
}, {
    "Country": "Eritrea",
    "ISO": "ER",
    "Regex": ""
}, {
    "Country": "Estonia",
    "ISO": "EE",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Ethiopia",
    "ISO": "ET",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Falkland Islands (Malvinas)",
    "ISO": "FK",
    "Regex": "^[Ff][Ii][Qq]{2}\\s{0,1}[1][Zz]{2}$"
}, {
    "Country": "Faroe Islands",
    "ISO": "FO",
    "Regex": "^\\d{3}$"
}, {
    "Country": "Fiji",
    "ISO": "FJ",
    "Regex": ""
}, {
    "Country": "Finland",
    "ISO": "FI",
    "Regex": "^\\d{5}$"
}, {
    "Country": "France",
    "ISO": "FR",
    "Regex": "^\\d{5}$"
}, {
    "Country": "French Guiana",
    "ISO": "GF",
    "Regex": "^973\\d{2}$"
}, {
    "Country": "French Polynesia",
    "ISO": "PF",
    "Regex": "^987\\d{2}$"
}, {
    "Country": "French Southern Territories",
    "ISO": "TF",
    "Regex": ""
}, {
    "Country": "Gabon",
    "ISO": "GA",
    "Regex": "^\\d{2}\\s[a-zA-Z-_ ]\\s\\d{2}$"
}, {
    "Note": "",
    "Country": "Gambia",
    "ISO": "GM",
    "Format": "- no codes -",
    "Regex": ""
}, {
    "Country": "Georgia",
    "ISO": "GE",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Germany",
    "ISO": "DE",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Ghana",
    "ISO": "GH",
    "Regex": ""
}, {
    "Country": "Gibraltar",
    "ISO": "GI",
    "Regex": "^[Gg][Xx][1]{2}\\s{0,1}[1][Aa]{2}$"
}, {
    "Country": "Greece",
    "ISO": "GR",
    "Regex": "^\\d{3}\\s{0,1}\\d{2}$"
}, {
    "Country": "Greenland",
    "ISO": "GL",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Grenada",
    "ISO": "GD",
    "Regex": ""
}, {
    "Country": "Guadeloupe",
    "ISO": "GP",
    "Regex": "^971\\d{2}$"
}, {
    "Country": "Guam",
    "ISO": "GU",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Guatemala",
    "ISO": "GT",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Guernsey",
    "ISO": "GG",
    "Regex": "^[A-Za-z]{2}\\d\\s{0,1}\\d[A-Za-z]{2}$"
}, {
    "Country": "Guinea",
    "ISO": "GN",
    "Regex": ""
}, {
    "Country": "Guinea-Bissau",
    "ISO": "GW",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Guyana",
    "ISO": "GY",
    "Regex": ""
}, {
    "Country": "Haiti",
    "ISO": "HT",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Heard and McDonald Islands",
    "ISO": "HM",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Honduras",
    "ISO": "HN",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Hong Kong",
    "ISO": "HK",
    "Regex": ""
}, {
    "Country": "Hungary",
    "ISO": "HU",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Iceland",
    "ISO": "IS",
    "Regex": "^\\d{3}$"
}, {
    "Country": "India",
    "ISO": "IN",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Indonesia",
    "ISO": "ID",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Iran",
    "ISO": "IR",
    "Regex": "^\\d{5}-\\d{5}$"
}, {
    "Country": "Iraq",
    "ISO": "IQ",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Ireland",
    "ISO": "IE",
    "Regex": ""
}, {
    "Country": "Isle of Man",
    "ISO": "IM",
    "Regex": "^[Ii[Mm]\\d{1,2}\\s\\d\\[A-Z]{2}$"
}, {
    "Country": "Israel",
    "ISO": "IL",
    "Regex": "^\\d{7}$"
}, {
    "Country": "Italy",
    "ISO": "IT",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Jamaica",
    "ISO": "JM",
    "Regex": "^\\d{2}$"
}, {
    "Country": "Japan",
    "ISO": "JP",
    "Regex": "^\\d{3}-?\\d{4}$"
}, {
    "Country": "Jersey",
    "ISO": "JE",
    "Regex": "^[Jj][Ee]\\d\\s{0,1}\\d[A-Za-z]{2}$"
}, {
    "Country": "Jordan",
    "ISO": "JO",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Kazakhstan",
    "ISO": "KZ",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Kenya",
    "ISO": "KE",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Kiribati",
    "ISO": "KI",
    "Regex": ""
}, {
    "Country": "Korea, Democratic People's Republic Of",
    "ISO": "KP",
    "Regex": ""
}, {
    "Country": "Korea, Republic Of",
    "ISO": "KR",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Kosovo",
    "ISO": "XK",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Kuwait",
    "ISO": "KW",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Kyrgyzstan",
    "ISO": "KG",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Latvia",
    "ISO": "LV",
    "Regex": "^[Ll][Vv][- ]{0,1}\\d{4}$"
}, {
    "Country": "Laos",
    "ISO": "LA",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Lebanon",
    "ISO": "LB",
    "Regex": "^\\d{4}\\s{0,1}\\d{4}$"
}, {
    "Country": "Lesotho",
    "ISO": "LS",
    "Regex": "^\\d{3}$"
}, {
    "Country": "Liberia",
    "ISO": "LR",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Libyan Arab Jamahiriya",
    "ISO": "LY",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Liechtenstein",
    "ISO": "LI",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Lithuania",
    "ISO": "LT",
    "Regex": "^[Ll][Tt][- ]{0,1}\\d{5}$"
}, {
    "Country": "Luxembourg",
    "ISO": "LU",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Macau",
    "ISO": "MO",
    "Regex": ""
}, {
    "Country": "Macedonia",
    "ISO": "MK",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Madagascar",
    "ISO": "MG",
    "Regex": "^\\d{3}$"
}, {
    "Country": "Malawi",
    "ISO": "MW",
    "Regex": ""
}, {
    "Country": "Maldives",
    "ISO": "MV",
    "Regex": "^\\d{4,5}$"
}, {
    "Country": "Malaysia",
    "ISO": "MY",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Mali",
    "ISO": "ML",
    "Regex": ""
}, {
    "Country": "Malta",
    "ISO": "MT",
    "Regex": "^[A-Za-z]{3}\\s{0,1}\\d{4}$"
}, {
    "Country": "Marshall Islands",
    "ISO": "MH",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Mauritania",
    "ISO": "MR",
    "Regex": ""
}, {
    "Country": "Mauritius",
    "ISO": "MU",
    "Regex": "(\d{3}[A-Z]{2}\d{3})?"
}, {
    "Country": "Martinique",
    "ISO": "MQ",
    "Regex": "^972\\d{2}$"
}, {
    "Country": "Mayotte",
    "ISO": "YT",
    "Regex": "^976\\d{2}$"
}, {
    "Country": "Mexico",
    "ISO": "MX",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Micronesia, Federated States Of",
    "ISO": "FM",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Moldova, Republic Of",
    "ISO": "MD",
    "Regex": "^[Mm][Dd][- ]{0,1}\\d{4}$"
}, {
    "Country": "Monaco",
    "ISO": "MC",
    "Regex": "^980\\d{2}$"
}, {
    "Country": "Mongolia",
    "ISO": "MN",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Montenegro",
    "ISO": "ME",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Montserrat",
    "ISO": "MS",
    "Regex": "^[Mm][Ss][Rr]\\s{0,1}\\d{4}$"
}, {
    "Country": "Morocco",
    "ISO": "MA",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Mozambique",
    "ISO": "MZ",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Myanmar",
    "ISO": "MM",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Namibia",
    "ISO": "NA",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Nauru",
    "ISO": "NR",
    "Regex": ""
}, {
    "Country": "Nepal",
    "ISO": "NP",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Netherlands",
    "ISO": "NL",
    "Regex": "^\\d{4}\\s{0,1}[A-Za-z]{2}$"
}, {
    "Country": "New Caledonia",
    "ISO": "NC",
    "Regex": "^988\\d{2}$"
}, {
    "Country": "New Zealand",
    "ISO": "NZ",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Nicaragua",
    "ISO": "NI",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Niger",
    "ISO": "NE",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Nigeria",
    "ISO": "NG",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Niue",
    "ISO": "NU",
    "Regex": ""
}, {
    "Country": "Norfolk Island",
    "ISO": "NF",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Northern Mariana Islands",
    "ISO": "MP",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Norway",
    "ISO": "NO",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Oman",
    "ISO": "OM",
    "Regex": "^\\d{3}$"
}, {
    "Country": "Pakistan",
    "ISO": "PK",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Palau",
    "ISO": "PW",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Panama",
    "ISO": "PA",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Papua New Guinea",
    "ISO": "PG",
    "Regex": "^\\d{3}$"
}, {
    "Country": "Paraguay",
    "ISO": "PY",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Peru",
    "ISO": "PE",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Philippines",
    "ISO": "PH",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Pitcairn",
    "ISO": "PN",
    "Regex": "^[Pp][Cc][Rr][Nn]\\s{0,1}[1][Zz]{2}$"
}, {
    "Country": "Poland",
    "ISO": "PL",
    "Regex": "^\\d{2}[- ]{0,1}\\d{3}$"
}, {
    "Country": "Portugal",
    "ISO": "PT",
    "Regex": "^\\d{4}[- ]{0,1}\\d{3}$"
}, {
    "Country": "Puerto Rico",
    "ISO": "PR",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Qatar",
    "ISO": "QA",
    "Regex": ""
}, {
    "Country": "Réunion",
    "ISO": "RE",
    "Regex": "^974\\d{2}$"
}, {
    "Country": "Romania",
    "ISO": "RO",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Russian Federation",
    "ISO": "RU",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Saint Barthélemy",
    "ISO": "BL",
    "Regex": "^97133$"
}, {
    "Country": "Saint Helena",
    "ISO": "SH",
    "Regex": "^[Ss][Tt][Hh][Ll]\\s{0,1}[1][Zz]{2}$"
}, {
    "Country": "Saint Kitts and Nevis",
    "ISO": "KN",
    "Regex": ""
}, {
    "Country": "Saint Lucia",
    "ISO": "LC",
    "Regex": ""
}, {
    "Country": "Saint Martin",
    "ISO": "MF",
    "Regex": "^97150$"
}, {
    "Country": "Saint Pierre and Miquelon",
    "ISO": "PM",
    "Regex": "^97500$"
}, {
    "Country": "Saint Vincent and the Grenadines",
    "ISO": "VC",
    "Regex": "^[Vv][Cc]\\d{4}$"
}, {
    "Country": "San Marino",
    "ISO": "SM",
    "Regex": "^4789\\d$"
}, {
    "Country": "Sao Tome and Principe",
    "ISO": "ST",
    "Regex": ""
}, {
    "Country": "Saudi Arabia",
    "ISO": "SA",
    "Regex": "^\\d{5}(-{1}\\d{4})?$"
}, {
    "Country": "Senegal",
    "ISO": "SN",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Serbia",
    "ISO": "RS",
    "Regex": "^\\d{5}$"
}, {
    "Note": "",
    "Country": "Serbia",
    "ISO": "RS",
    "Format": "NNNNN",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Seychelles",
    "ISO": "SC",
    "Regex": ""
}, {
    "Country": "Sint Maarten",
    "ISO": "SX",
    "Regex": ""
}, {
    "Country": "Sierra Leone",
    "ISO": "SL",
    "Regex": ""
}, {
    "Country": "Singapore",
    "ISO": "SG",
    "Regex": "^\\d{2}$"
}, {
    "Country": "Singapore",
    "ISO": "SG",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Singapore",
    "ISO": "SG",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Slovakia",
    "ISO": "SK",
    "Regex": "^\\d{5}\\s\\(\\d{3}\\s\\d{2}\\)$"
}, {
    "Country": "Slovenia",
    "ISO": "SI",
    "Regex": "^([Ss][Ii][- ]{0,1}){0,1}\\d{4}$"
}, {
    "Country": "Solomon Islands",
    "ISO": "SB",
    "Regex": ""
}, {
    "Country": "Somalia",
    "ISO": "SO",
    "Regex": "\d{5}"
}, {
    "Country": "South Africa",
    "ISO": "ZA",
    "Regex": "^\\d{4}$"
}, {
    "Country": "South Georgia and the South Sandwich Islands",
    "ISO": "GS",
    "Regex": "^[Ss][Ii][Qq]{2}\\s{0,1}[1][Zz]{2}$"
}, {
    "Country": "South Korea",
    "ISO": "KR",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Spain",
    "ISO": "ES",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Sri Lanka",
    "ISO": "LK",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Sudan",
    "ISO": "SD",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Suriname",
    "ISO": "SR",
    "Regex": ""
}, {
    "Country": "Swaziland",
    "ISO": "SZ",
    "Regex": "^[A-Za-z]\\d{3}$"
}, {
    "Country": "Sweden",
    "ISO": "SE",
    "Regex": "^(s-|S-){0,1}[0-9]{3}\s?[0-9]{2}$"
}, {
    "Country": "Switzerland",
    "ISO": "CH",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Svalbard and Jan Mayen",
    "ISO": "SJ",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Syrian Arab Republic",
    "ISO": "SY",
    "Regex": ""
}, {
    "Country": "Taiwan, Province Of China",
    "ISO": "TW",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Tajikistan",
    "ISO": "TJ",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Tanzania, United Republic Of",
    "ISO": "TZ",
    "Regex": ""
}, {
    "Country": "Thailand",
    "ISO": "TH",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Togo",
    "ISO": "TG",
    "Regex": ""
}, {
    "Country": "Tokelau",
    "ISO": "TK",
    "Regex": ""
}, {
    "Country": "Tonga",
    "ISO": "TO",
    "Regex": ""
}, {
    "Country": "Trinidad and Tobago",
    "ISO": "TT",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Tristan da Cunha",
    "ISO": "SH",
    "Regex": "^[Tt][Dd][Cc][Uu]\\s{0,1}[1][Zz]{2}$"
}, {
    "Country": "Tunisia",
    "ISO": "TN",
    "Regex": "^\\d{4}$"
}, {
    "Country": "Turkey",
    "ISO": "TR",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Turkmenistan",
    "ISO": "TM",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Turks and Caicos Islands",
    "ISO": "TC",
    "Regex": "^[Tt][Kk][Cc][Aa]\\s{0,1}[1][Zz]{2}$"
}, {
    "Country": "Tuvalu",
    "ISO": "TV",
    "Regex": ""
}, {
    "Country": "Uganda",
    "ISO": "UG",
    "Regex": ""
}, {
    "Country": "Ukraine",
    "ISO": "UA",
    "Regex": "^\\d{5}$"
}, {
    "Country": "United Arab Emirates",
    "ISO": "AE",
    "Regex": ""
}, {
    "Country": "United Kingdom",
    "ISO": "GB",
     "Regex": "[A-Z]{1,2}[0-9R][0-9A-Z]? (?:(?![CIKMOV])[0-9][a-zA-Z]{2})"
}, {
    "Country": "United States",
    "ISO": "US",
    "Regex": "^\\b\\d{5}\\b(?:[- ]{1}\\d{4})?$"
}, {
    "Country": "Uruguay",
    "ISO": "UY",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Virgin Islands, U.S.",
    "ISO": "VI",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Uzbekistan",
    "ISO": "UZ",
    "Regex": "^\\d{3} \\d{3}$"
}, {
    "Country": "Vanuatu",
    "ISO": "VU",
    "Regex": ""
}, {
    "Country": "Vatican",
    "ISO": "VA",
    "Regex": "^120$"
}, {
    "Country": "Venezuela",
    "ISO": "VE",
    "Regex": "^\\d{4}(\\s[a-zA-Z]{1})?$"
}, {
    "Country": "Viet Nam",
    "ISO": "VN",
    "Regex": "^\\d{6}$"
}, {
    "Country": "Wallis and Futuna",
    "ISO": "WF",
    "Regex": "^986\\d{2}$"
}, {
    "Country": "Yemen",
    "ISO": "YE",
    "Regex": ""
}, {
    "Country": "Zambia",
    "ISO": "ZM",
    "Regex": "^\\d{5}$"
}, {
    "Country": "Zimbabwe",
    "ISO": "ZW",
    "Regex": ""
}]
;

///*** It is used to get Regex for zipcode based on countryname using above 
function getZipCodeRegex(countryName) {  
    var zipCodeRegex = /\d{5}$|^\d{5}-\d{4}/g;
    if (jsonCountry != null) {
        if (countryName != "") {
            $.each(jsonCountry, function (inx, data) {
                if (data["Country"].toLowerCase() == countryName) {
                    zipCodeRegex = new RegExp(data["Regex"], "g");
                }
            });
        }
    }
    return zipCodeRegex;
}

;


function ShowFeedbackRating(spanid, ids, type, playbookID) {
    //ids  -- record ids 
    //type -- record type means templates/file
  
    api.call("GetFeedbackRatingGraphData", { itemids: ids, type: type, playbookid: playbookID}, function (data) {
        // start star in grid
        for (var r = 0; r < data.result.length ; r++) {
            var containerid = data.result[r].itemid;
            var ratecontent_html = generateRatingGraph(data.result[r].starrating.rating, data.result[r].itemid, data.result[r].starrating.isuserrating);

            var $objrating = $("#" + spanid + data.result[r].itemid);
            $objrating.html(ratecontent_html);

            var ratecontent_title = 'Your Rating :  ';
            for (var i = 1; i <= 5; i++) {
                if (i <= data.result[r].starrating.rating) {
                    if (data.result[r].starrating.isuserrating)
                        ratecontent_title += "<i class='fas rating-star-yellow fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                    else
                        ratecontent_title += "<i class='far fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                }
                else
                    ratecontent_title += "<i class='far fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
            }

            $objrating.attr("data-original-title", ratecontent_title);

            // end star in grid
            // start hover in grid upon star
            var ratecontent = "";
            if (data.result[r].feedback != null) {
                ratecontent += ("<div class='show-stats'>");
                ratecontent += "<div class='rating-fix'>" + data.result[r].avgrating + " out of 5 stars</div>";
                for (var i = 0; i < data.result[r].feedback.length; i++) {
                    ratecontent += "<div class='row'><div class='col-xs-4 col-sm-3 col-md-3 col-lg-3 rating-star-blue'>" + data.result[r].feedback[i].ratingnumber + " star </div><div class='col-xs-7 col-sm-7 col-md-7 col-lg-7'>";
                    ratecontent += "<div class='progress'><div class='progress-bar progress-back-color' style='width:" + data.result[r].feedback[i].percentage + "%;'></div>";
                    ratecontent += "</div></div><div style='text-align:left' class='col-xs-2 col-sm-2 col-md-2 col-lg-2'>" + data.result[r].feedback[i].total + "</div></div>";
                }
                ratecontent += "</div>";
            }

            $objrating.attr("data-content", ratecontent);
        }
        // start hover in grid upon star
    });
}


function ShowFeedbackRatingV05(spanid, ids, type, view) {
    //ids  -- record ids 
    //type -- record type means templates/file

    api.call("GetFeedbackRatingGraphData", { itemids: ids, type: type }, function (data) {
        if (data.status == 0) {
            for (var r = 0; r < data.result.length; r++) {
                var $objrating = $("#" + spanid + data.result[r].itemid);
                if (view == 'List' || view == "List") {
                    var ratecontent_html = generateRatingGraph(data.result[r].starrating.rating, data.result[r].itemid, data.result[r].starrating.isuserrating);
                    $objrating.html(ratecontent_html);
                }

                // start hover in grid upon star
                var ratecontent = "";
                var averagerating = 0;
                if (data.result[r].avgrating % 1 == 0)
                    averagerating = data.result[r].avgrating;
                else
                    averagerating = parseFloat(data.result[r].avgrating).toFixed(1);
                if (data.result[r].feedback != null) {

                    ratecontent += "<div class='rating-action-btns-and-status-cont-v05'>";
                    ratecontent += '<label class="lbl-box-title">Your Rating </label>';
                    ratecontent += "<div class='rating-star-btn-holder'>";
                    for (var i = 1; i <= 5; i++) {
                        if (i <= data.result[r].starrating.rating) {
                            if (data.result[r].starrating.isuserrating)
                                ratecontent += "<i class='fa rating-star-yellow fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                            else
                                ratecontent += "<i class='fa fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                        }
                        else
                            ratecontent += "<i class='fa fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                    }
                    ratecontent += "<span class='rating-value-holder'>" + averagerating + " out of 5 stars</span>";
                    ratecontent += "</div>";
                    ratecontent += "<div class='rating-stats-cont'>";
                    ratecontent += '<div class="rating-fix">' + data.result[r].totalrating + ' others ratings</div>';
                    for (var i = 0; i < data.result[r].feedback.length; i++) {                           
                        ratecontent += "<div class='each-rating-level'><div class='rating-star-label'>" + data.result[r].feedback[i].name + "</div><div class='rating-proress-bar-holder'>";
                        ratecontent += "<div class='progress'><div class='progress-bar' style='width:" + data.result[r].feedback[i].percentage + "%;'></div></div>";
                        ratecontent += "</div > <div style='text-align:left' class='rating-value-label'>" + data.result[r].feedback[i].total + "</div></div > ";
                    }
                    ratecontent += "</div>";
                    ratecontent += "</div>";

                }

                $objrating.attr("data-content", ratecontent);
            }
        }
        // start hover in grid upon star
    });
}



function ShowVideoFeedbackRating(spanid, ids, type, fromeditor) {
    //ids  -- record ids 
    //type -- record type means templates/file
    api.call("GetFeedbackRatingGraphData", { itemids: ids, type: type }, function (data) {
        // start star in grid
        for (var r = 0; r < data.result.length ; r++) {
            var containerid = data.result[r].itemid;
            var ratecontent_html = generateRatingGraph(data.result[r].starrating.rating, data.result[r].itemid, data.result[r].starrating.isuserrating);
            if (fromeditor == true) {
                $(".recordPlay").attr('data-original-title', '');
                $(".recordPlay").find('span').css('cursor', 'default');
            }
            var $objrating = $("#" + spanid + data.result[r].itemid);
            $objrating.html(ratecontent_html);

            var ratecontent_title = 'Your Rating :  ';
            for (var i = 1; i <= 5; i++) {
                if (i <= data.result[r].starrating.rating) {
                    if (data.result[r].starrating.isuserrating)
                        ratecontent_title += "<i class='fas rating-star-yellow fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                    else
                        ratecontent_title += "<i class='far fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                }
                else
                    ratecontent_title += "<i class='far fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
            }

            $objrating.attr("data-original-title", ratecontent_title);

            // end star in grid
            // start hover in grid upon star
            var ratecontent = "";
            if (data.result[r].feedback != null) {
                ratecontent += "<div class='show-stats'>";
                ratecontent += "<div class='rating-fix'>" + data.result[r].avgrating + " out of 5 stars</div>";
                for (var i = 0; i < data.result[r].feedback.length; i++) {
                    ratecontent += "<div class='row'><div class='col-xs-4 col-sm-3 col-md-3 col-lg-3 rating-star-blue'>" + data.result[r].feedback[i].ratingnumber + " star </div><div class='col-xs-7 col-sm-7 col-md-7 col-lg-7'>";
                    ratecontent += "<div class='progress'><div class='progress-bar' style='width:" + data.result[r].feedback[i].percentage + "%;background-color: #3276b1'></div>";
                    ratecontent += "</div></div><div style='text-align:left' class='col-xs-2 col-sm-2 col-md-2 col-lg-2'>" + data.result[r].feedback[i].total + "</div></div>";
                }
                ratecontent += "</div>";
            }

            $objrating.attr("data-content", ratecontent);
        }
        // start hover in grid upon star
    });
}

function ShowVideoFeedbackRatingV05(spanid, ids, type, fromeditor, view) {
    //ids  -- record ids 
    //type -- record type means templates/file
    api.call("GetFeedbackRatingGraphData", { itemids: ids, type: type }, function (data) {
        // start star in grid
        for (var r = 0; r < data.result.length; r++) {
            if (fromeditor == true) {
                $(".recordPlay").attr('data-original-title', '');
                $(".recordPlay").find('span').css('cursor', 'default');
            }
            var $objrating = $("#" + spanid + data.result[r].itemid);
            if (view == 'List' || view == "List") {
                var ratecontent_html = generateRatingGraph(data.result[r].starrating.rating, data.result[r].itemid, data.result[r].starrating.isuserrating);
                $objrating.html(ratecontent_html);
            }
            var ratecontent = "";
            var averagerating = 0;
            if (data.result[r].avgrating % 1 == 0)
                averagerating = data.result[r].avgrating;
            else
                averagerating = parseFloat(data.result[r].avgrating).toFixed(1);
            if (data.result[r].feedback != null) {

                ratecontent += "<div class='rating-action-btns-and-status-cont-v05'>";
                ratecontent += '<label class="lbl-box-title">Your Rating</label>';
                ratecontent += "<div class='rating-star-btn-holder'>";
                for (var i = 1; i <= 5; i++) {
                    if (i <= data.result[r].starrating.rating) {
                        if (data.result[r].starrating.isuserrating)
                            ratecontent += "<i class='fa rating-star-yellow fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                        else
                            ratecontent += "<i class='fa fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                    }
                    else
                        ratecontent += "<i class='fa fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                }
                ratecontent += '<span class="rating-value-holder">' + averagerating + ' out of 5 stars</span>';
                ratecontent += "</div>";
                ratecontent += "<div class='rating-stats-cont'>";
                ratecontent += '<div class="rating-fix">' + data.result[r].totalrating + ' others ratings</div>';
                for (var i = 0; i < data.result[r].feedback.length; i++) {
                    ratecontent += "<div class='each-rating-level'><div class='rating-star-label'>" + data.result[r].feedback[i].name + "</div><div class='rating-proress-bar-holder'>";
                    ratecontent += "<div class='progress'><div class='progress-bar' style='width:" + data.result[r].feedback[i].percentage + "%;'></div></div>";
                    ratecontent += "</div > <div style='text-align:left' class='rating-value-label'>" + data.result[r].feedback[i].total + "</div></div > ";
                }
                ratecontent += "</div>";
                ratecontent += "</div>";

            }

            $objrating.attr("data-content", ratecontent);
        }
        // start hover in grid upon star
    });
}

function ShowImageFeedbackRating(pageid,spanid, ids, type) {
    //ids  -- record ids 
    //type -- record type means templates/file
    api.call("GetFeedbackRatingGraphData", { itemids: ids, type: type }, function (data) {
        // start star in grid
        for (var r = 0; r < data.result.length ; r++) {
            var containerid = data.result[r].itemid;
            var ratecontent_html = generateRatingGraph(data.result[r].starrating.rating, data.result[r].itemid, data.result[r].starrating.isuserrating);
            
            var $objrating = $("#" + spanid + data.result[r].itemid);
            var $superbox = $('.superbox').find("#" + data.result[r].itemid);

            $("#" + pageid + "_image").find("#" + data.result[r].itemid).attr("isuserrating", data.result[r].starrating.isuserrating);
            $objrating.html(ratecontent_html);

            var ratecontent_title = 'Your Rating :  ';
            for (var i = 1; i <= 5; i++) {
                if (i <= data.result[r].starrating.rating) {
                    if (data.result[r].starrating.isuserrating)
                        ratecontent_title += "<i class='fas rating-star-yellow fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                    else
                        ratecontent_title += "<i class='far fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                }
                else
                    ratecontent_title += "<i class='far fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
            }
            $superbox.attr("data-original-title", ratecontent_title);
            $objrating.attr("data-original-title", ratecontent_title);

            // end star in grid
            // start hover in grid upon star
            var ratecontent = "";
            var averagerating = 0;
            if (data.result[r].avgrating % 1 == 0)
                averagerating = data.result[r].avgrating;
            else
                averagerating = parseFloat(data.result[r].avgrating).toFixed(1);
            if (data.result[r].feedback != null) {
                ratecontent += "<div class='show-stats'>";
                ratecontent += "<div class='rating-fix'>" + averagerating + " out of 5 stars</div>";
                for (var i = 0; i < data.result[r].feedback.length; i++) {
                    ratecontent += "<div class='row'><div class='col-xs-4 col-sm-3 col-md-3 col-lg-3 rating-star-blue'>" + data.result[r].feedback[i].name + " </div><div class='col-xs-7 col-sm-7 col-md-7 col-lg-7'>";          
                    ratecontent += "<div class='progress'><div class='progress-bar progress-back-color' style='width:" + data.result[r].feedback[i].percentage + "%;'></div>";
                    ratecontent += "</div></div><div style='text-align:left' class='col-xs-2 col-sm-2 col-md-2 col-lg-2'>" + data.result[r].feedback[i].total + "</div></div>";
                }
                ratecontent += "</div>";
            }

            $superbox.attr("data-content", ratecontent);
            $objrating.attr("data-content", ratecontent);
        }
        // start hover in grid upon star
    });
}

function ShowSolutionFeedbackRatingV05(solutiontypeid, solutionids, spanid, view,bookmarkdivid,requestID, isBookmark = false) {
    //solutionids  -- solutionid ids
    api.call("GetSolutionRatingGraphData", { solutiontypeid: solutiontypeid, solutionids: solutionids  }, function (data) {
        if (data.status == 0) {
            for (var r = 0; r < data.result.length; r++) {
                var $objrating = $("#" + spanid + data.result[r].itemid + "_" + data.result[r].solutiontypeid);
                if (view == 'List' || view == "List") {
                    var ratecontent_html = generateRatingGraph(data.result[r].starrating.rating, data.result[r].itemid, data.result[r].starrating.isuserrating);
                    $objrating.html(ratecontent_html);
                }

                if (!isBookmark)
                {
                    var $bookmarkdiv = $("#" + bookmarkdivid + data.result[r].itemid + "_" + data.result[r].solutiontypeid);
                    if ($bookmarkdiv != undefined && $bookmarkdiv != null) {
                        if (data.result[r].solutiontstacked == true) {
                            $bookmarkdiv.html('<i  class="fa fa-bookmark"></i>');
                            $bookmarkdiv.attr("data-action-item", true);
                            $bookmarkdiv.attr("data-original-title", 'Remove From My Solutions');

                        }
                        else {
                            $bookmarkdiv.html('<i class="far fa-bookmark"></i>');
                            $bookmarkdiv.attr("data-action-item", false);
                            $bookmarkdiv.attr("data-original-title", 'Add To My Solutions');
                        }
                    }
                }
                // start hover in grid upon star
                var ratecontent = "";
                if (data.result[r].feedback != null) {

                    ratecontent += "<div class='rating-action-btns-and-status-cont-v05'>";
                    ratecontent += '<label class="lbl-box-title">Your Rating</label>';
                    ratecontent += "<div class='rating-star-btn-holder'>";
                    for (var i = 1; i <= 5; i++) {
                        if (i <= data.result[r].starrating.rating) {
                            if (data.result[r].starrating.isuserrating)
                                ratecontent += "<i class='fa rating-star-yellow fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                            else
                                ratecontent += "<i class='fa fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                        }
                        else
                            ratecontent += "<i class='fa fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                    }
                    ratecontent += "<span class='rating-value-holder'>" + data.result[r].starrating.isuserrating ? data.result[r].starrating.rating:0 + " out of 5 stars</span>";
                    ratecontent += "</div>";
                    ratecontent += "<div class='rating-stats-cont'>";
                    ratecontent += '<div class="rating-fix">' + data.result[r].totalrating + ' total rating</div>';
                    for (var i = 0; i < data.result[r].feedback.length; i++) {
                        ratecontent += "<div class='each-rating-level'><div class='rating-star-label'>" + data.result[r].feedback[i].name +' star' + "</div><div class='rating-proress-bar-holder'>";
                        ratecontent += "<div class='progress'><div class='progress-bar' style='width:" + data.result[r].feedback[i].percentage + "%;'></div></div>";
                        ratecontent += "</div > <div style='text-align:left' class='rating-value-label'>" + data.result[r].feedback[i].total + "</div></div > ";
                    }
                    ratecontent += "</div>";
                    ratecontent += "</div>";

                }
                if (requestID != undefined) {
                    var $relatedsolution = $("#" + requestID + "_relatedsolution_" + data.result[r].itemid + "_" + data.result[r].solutiontypeid);
                    if ($relatedsolution != undefined) {
                        if (data.result[r].relatedsolution) {
                            $relatedsolution.removeClass("hide");
                            $relatedsolution.attr("data-original-title", 'Click View to see Related Solutions: ' + data.result[r].relatedsolution);
                            }
                    }
                }
                $objrating.attr("data-content", ratecontent);
            }
        }
        // start hover in grid upon star
    });
}

function ShowSolutionFeedbackRating(solutiontypeid,solutionids,pageid, spanid) {
    //solutionids  -- solutionids
    
    api.call("GetSolutionRatingGraphData", { solutiontypeid: solutiontypeid,solutionids: solutionids}, function (data) {
        // start star in grid
        for (var r = 0; r < data.result.length; r++) {
            var containerid = data.result[r].itemid;
            var ratecontent_html = generateRatingGraph(data.result[r].starrating.rating, data.result[r].itemid, data.result[r].starrating.isuserrating);

            var $objrating = $("#" + spanid + data.result[r].itemid);
            var $superbox = $('.superbox').find("#" + data.result[r].itemid);

            $("#" + pageid + "_image").find("#" + data.result[r].itemid).attr("isuserrating", data.result[r].starrating.isuserrating);
            $objrating.html(ratecontent_html);

            var ratecontent_title = 'Your Rating :  ';
            for (var i = 1; i <= 5; i++) {
                if (i <= data.result[r].starrating.rating) {
                    if (data.result[r].starrating.isuserrating)
                        ratecontent_title += "<i class='fas rating-star-yellow fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                    else
                        ratecontent_title += "<i class='far fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                }
                else
                    ratecontent_title += "<i class='far fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
            }
            $superbox.attr("data-original-title", ratecontent_title);
            $objrating.attr("data-original-title", ratecontent_title);

            // end star in grid
            // start hover in grid upon star
            var ratecontent = "";
            if (data.result[r].feedback != null) {
                ratecontent += "<div class='show-stats'>";
                ratecontent += "<div class='rating-fix'>" + data.result[r].avgrating + " out of 5 stars</div>";
                for (var i = 0; i < data.result[r].feedback.length; i++) {
                    ratecontent += "<div class='row'><div class='col-xs-4 col-sm-3 col-md-3 col-lg-3 rating-star-blue'>" + data.result[r].feedback[i].name + " </div><div class='col-xs-7 col-sm-7 col-md-7 col-lg-7'>";
                    ratecontent += "<div class='progress'><div class='progress-bar progress-back-color' style='width:" + data.result[r].feedback[i].percentage + "%;'></div>";
                    ratecontent += "</div></div><div style='text-align:left' class='col-xs-2 col-sm-2 col-md-2 col-lg-2'>" + data.result[r].feedback[i].total + "</div></div>";
                }
                ratecontent += "</div>";
            }

            $superbox.attr("data-content", ratecontent);
            $objrating.attr("data-content", ratecontent);
        }
        // start hover in grid upon star
    });
}

function generateRatingGraph(number, itemid, isuserrating, typeid) {
    var ratecontent = "";
    typeid = typeid == undefined ? "" : typeid;
    for (var i = 1; i <= 5; i++) {
        if (i <= number) {
            if (isuserrating)
                ratecontent += "<i class='fas rating-star-yellow fa-star' typeid='" + typeid + "' itemid='" + itemid + "' value='" + i + "' /*style='cursor:pointer;'*/>&nbsp;</i>";
            else
                ratecontent += "<i class='fas rating-star-blue fa-star' typeid='" + typeid + "' itemid='" + itemid + "' value='" + i + "' style='cursor:pointer;'>&nbsp;</i>";
        }
        else
            ratecontent += "<i class='far fa-star' typeid='" + typeid + "' itemid='" + itemid + "' value='" + i + "' /*style='cursor:pointer;'*/>&nbsp;</i>";
    }
    return ratecontent;
}


function loadDropDown($list, text, apiFunc, defaultVal) {
    var parameters = { loading: false, moredata: true, pagesloaded: 0 };
    var page = parameters.pagesloaded;
    if (!parameters.loading && parameters.moredata) {
        if (page != 0) {
            $list.find("option[value='LoadMoreRecords']").remove();
            $list.find("option[value='-1']").prop("selected", true);
            $list.select2();
        }
        else
            $list.html("<option value='-1'>"+ text +"</option>");
        parameters.loading = true;
        api.call(apiFunc, { "page": page, "pageSize": 100, "ascending": true, "sort": "name" }, function (result) {
            parameters.loading = false;
            if (result.result.item.length == 100)
                parameters.moredata = true;
            else
                parameters.moredata = false;
            reloadSuccess(result, $list); //append data to dropdown
            parameters.pagesloaded++; //set next page to load
            if (defaultVal != "null" && defaultVal != "undefined")
                $list.val(defaultVal).select2();
            if (parameters.moredata) {
                $list.find("option:last").after("<option value='LoadMoreRecords'>***LoadMoreRecords***</option>");// appends more options                
            }
        });
    }
}
reloadSuccess = function (msg, $list) {
    var results = msg.result;
    $(results.item).each(function () {
        $list.append('<option value="' + this.id + '">' + this.name + '</option>');
    });
}

function updateRating(elem, feedbackType, alertMsg) {
    var $this = $(elem);
    var itemId = $this.attr('itemid');
    var value = $this.attr('value');
    
    //if ($this.hasClass('fas') && ($this.is(':last-child') || $this.next().hasClass('far'))) {
    //    $this.parent().find('.fas').removeClass('rating-star-yellow rating-star-blue fas').addClass('far');
    //    value = 0;
    //}
    //else {
        $this.prevAll().addBack().removeClass('far').addClass('rating-star-yellow fas');
        $this.nextAll().not('.fa-comments').removeClass('rating-star-yellow rating-star-blue fas').addClass('far');
   /* }*/

    api.call("updaterating", { itemid: parseInt(itemId, 10), value: parseInt(value, 10), type: parseInt(feedbackType, 10) }, function (r) {
        if (r.result) {
            if (typeof alertMsg != "undefined")
                showAlert(alertMsg.title, alertMsg.content);
        }
    });
}
function updateSolutionRating(elem, feedbackType, solutiontypeid, solutionid, alertMsg) {
    var $this = $(elem);
    var itemId = $this.attr('itemid');
    var value = $this.attr('value');
    $this.prevAll().addBack().removeClass('far').addClass('rating-star-yellow fas');
    $this.nextAll().not('.fa-comments').removeClass('rating-star-yellow rating-star-blue fas').addClass('far');
    api.call("UpdateSolutionRating", { solutiontypeid: parseInt(solutiontypeid), solutionid: parseInt(solutionid), value: parseInt(value, 10) }, function (r) {
        if (r.result) {
            if (typeof alertMsg != "undefined")
                showAlert(alertMsg.title, alertMsg.content);
        }
    });
}
function ShowSolutionDashboardFeedbackRatingV05(solutiontypeid, solutionids, spanid, view, bookmarkdivid, updaterating) {
    //solutionids  -- solutionid ids
    api.call("GetSolutionRatingGraphData", { solutiontypeid: solutiontypeid, solutionids: solutionids }, function (data) {
        if (data.status == 0) {
            for (var r = 0; r < data.result.length; r++) {
                var $objrating = $("#" + spanid + data.result[r].itemid + "_" + data.result[r].solutiontypeid);
                var ratecontent_html = generateRatingGraph(data.result[r].avgrating, data.result[r].itemid, data.result[r].starrating.isuserrating, data.result[r].solutiontypeid);
                $objrating.html(ratecontent_html);
                var $bookmarkdiv = $("#" + bookmarkdivid + data.result[r].itemid + "_" + data.result[r].solutiontypeid);
                if ($bookmarkdiv != undefined && $bookmarkdiv != null) {
                    if (data.result[r].solutiontstacked == true) {
                        $bookmarkdiv.html('<i  class="fa fa-bookmark"></i>');
                        $bookmarkdiv.attr("data-action-item", true);
                        $bookmarkdiv.attr("data-original-title", 'Remove From My Solutions');
                    }
                    else {
                        $bookmarkdiv.html('<i class="far fa-bookmark"></i>');
                        $bookmarkdiv.attr("data-action-item", false);
                        $bookmarkdiv.attr("data-original-title", 'Add To My Solutions');
                    }
                }
               
                var ratecontent = "";
                if (data.result[r].feedback != null) {
                    ratecontent += "<div class='show-stats'>";
                    ratecontent += "<div class='rating-fix'>" + data.result[r].avgrating + " out of 5 stars</div>";
                    for (var i = 0; i < data.result[r].feedback.length; i++) {
                        ratecontent += "<div class='row'><div class='col-xs-4 col-sm-3 col-md-3 col-lg-3 rating-star-blue'>" + data.result[r].feedback[i].ratingnumber + " star </div><div class='col-xs-7 col-sm-7 col-md-7 col-lg-7'>";
                        ratecontent += "<div class='progress'><div class='progress-bar' style='width:" + data.result[r].feedback[i].percentage + "%;background-color: #3276b1'></div>";
                        ratecontent += "</div></div><div style='text-align:left' class='col-xs-2 col-sm-2 col-md-2 col-lg-2'>" + data.result[r].feedback[i].total + "</div></div>";
                    }
                    ratecontent += "</div>";
                }
                if (updaterating != undefined) {
                    var $relatedsolution = $("#" + updaterating + "_relatedsolution_" + data.result[r].itemid + "_" + data.result[r].solutiontypeid);
                    if ($relatedsolution != undefined) {
                        if (data.result[r].relatedsolution) {
                            $relatedsolution.removeClass("hide");
                            $relatedsolution.attr("data-original-title", 'Click View to see Related Solutions: ' + data.result[r].relatedsolution);
                            }
                    }
                }
                $objrating.attr("data-content", ratecontent);
                if (view == 'List' || view == "List") {
                    if (updaterating) {
                        $objrating.find(".fa-star").click(function () {
                            var $this = $(this);
                            var value = $(this).attr('value');
                            var solutionid = parseInt($this.attr('itemid'));
                            var solutiontypeid = parseInt($this.attr('typeid'));
                            $this.prevAll().addBack().removeClass('fa-star').addClass('fas rating-star-yellow fa-star');
                            $this.nextAll().not('.fa-comments').removeClass('fas rating-star-yellow rating-star-blue fa-star').addClass('far fa-star');
                            api.call("UpdateSolutionRating", { solutiontypeid: solutiontypeid, solutionid: solutionid, value: parseInt(value, 10) }, function (r) {
                                if (r.result) { }
                            });
                        })
                    }
                }
            }
        }
        // start hover in grid upon star
    });
}

function ShowProductFeedbackRatingV05(producttypeid, productids, spanid, view, bookmarkdivid, updaterating) {
    api.call("GetProductRatingGraphData", { producttypeid: producttypeid, productids: productids }, function (data) {
        if (data.status == 0) {
            var ratingdata = data.result[0].ratingdata;
            for (var i = 0; i < ratingdata.length; i++) {
                if (ratingdata[i].avgrating == null)
                    ratingdata[i].avgrating = 0;
                var rating = ratingdata[i].userrating == null ? ratingdata[i].avgrating : ratingdata[i].userrating;
                var isuserrating = ratingdata[i].userrating == null ? false: true;
                var itemid = ratingdata[i].itemid;
                var stars = [ratingdata[i].rating5,ratingdata[i].rating4,ratingdata[i].rating3,ratingdata[i].rating2,ratingdata[i].rating1];
                var totalrating = ratingdata[i].rating1 + ratingdata[i].rating2 + ratingdata[i].rating3 + ratingdata[i].rating4 + ratingdata[i].rating5;
                var ratecontent = "";
                var $bookmarkdiv = $("#" + bookmarkdivid + itemid + "_" + producttypeid);
                if ($bookmarkdiv != undefined && $bookmarkdiv != null) {
                    if (ratingdata[i].bookmarked != null) {
                        $bookmarkdiv.html('<i  class="fa fa-bookmark"></i>');
                        $bookmarkdiv.attr("bookmarked", true);
                        $bookmarkdiv.attr("data-original-title", 'Remove From My Products');
                
                    }
                    else {
                        $bookmarkdiv.html('<i class="far fa-bookmark"></i>');
                        $bookmarkdiv.attr("bookmarked", false);
                        $bookmarkdiv.attr("data-original-title", 'Add To My Products');
                    }
                }
                var $objrating = $("#" + spanid + itemid + "_" + producttypeid);
                ratecontent += "<div class='rating-action-btns-and-status-cont-v05'>";
                ratecontent += '<label class="lbl-box-title">Your Rating</label>';
                ratecontent += "<div class='rating-star-btn-holder'>";
                var ratecontent1 = "";
                for (var k = 1; k <= 5; k++) {
                    if (k <= rating) {
                        if (isuserrating) {
                            ratecontent += "<i class='fa rating-star-yellow fa-star' itemid='" + itemid + "' value='" + k + "'>&nbsp;</i>";
                            ratecontent1 += "<i class='fas rating-star-yellow fa-star' itemid='" + itemid + "' value='" + k + "' style='cursor:pointer;'>&nbsp;</i>";
                        }
                        else {
                            ratecontent += "<i class='fa fa-star' itemid='" + itemid + "' value='" + k + "'>&nbsp;</i>";
                            ratecontent1 += "<i class='fas rating-star-blue fa-star' itemid='" + itemid + "' value='" + k + "' style='cursor:pointer;'>&nbsp;</i>";
                        }
                    }
                    else {
                        ratecontent += "<i class='fa fa-star' itemid='" + itemid + "' value='" + k + "'>&nbsp;</i>";
                        ratecontent1 += "<i class='far fa-star' itemid='" + itemid + "' value='" + k + "' style='cursor:pointer;'>&nbsp;</i>";
                    }
                }
                if (view == 'List' || view == "List") {
                    $objrating.html(ratecontent1);
                    if (updaterating) {
                        $objrating.find(".fa-star").click(function () {
                            var $this = $(this);
                            var value = $(this).attr('value');
                            $this.prevAll().addBack().removeClass('fa-star').addClass('fas rating-star-yellow fa-star');
                            $this.nextAll().not('.fa-comments').removeClass('fas rating-star-yellow rating-star-blue fa-star').addClass('far fa-star');
                            api.call("UpdateProductRating", { producttypeid: producttypeid, id: productids[0], value: parseInt(value, 10) }, function (r) {
                               if (r.result) { }
                           });
                       })
                    }
                }
                ratecontent += "<span class='rating-value-holder'>" + ratingdata[i].avgrating + " out of 5 stars</span>";
                ratecontent += "</div>";
                ratecontent += "<div class='rating-stats-cont'>";
                ratecontent += '<div class="rating-fix">' + totalrating + ' others ratings</div>';
                for (k = 0; k < 5; k++) {
                    ratecontent += "<div class='each-rating-level'><div class='rating-star-label'>" + (5 - parseInt(k)) + " star</div><div class='rating-proress-bar-holder'>";
                    var per = stars[k] == 0 ? 0 : ((parseFloat(stars[k]) / parseFloat(totalrating)) * 100).toFixed(0);
                    ratecontent += "<div class='progress'><div class='progress-bar' style='width:" + per  + "%;'></div></div>";
                    ratecontent += "</div > <div style='text-align:left' class='rating-value-label'>" + stars[k] + "</div></div > ";
                }
                ratecontent += "</div>";
                ratecontent += "</div>";
                $objrating.find(".rating-count").html(ratingdata[i].avgrating + "/5");
                $objrating.attr("data-content", ratecontent);
            }
        }
    });
}
function ShowProductFeedbackRating(producttypeid, productids, pageid, spanid) {
    //solutionids  -- solutionids

    api.call("GetProductRatingGraphData", { producttypeid: producttypeid, productids: productids }, function (data) {
        // start star in grid
        for (var r = 0; r < data.result.length; r++) {
            var containerid = data.result[r].itemid;
            var ratecontent_html = generateRatingGraph(data.result[r].starrating.rating, data.result[r].itemid, data.result[r].starrating.isuserrating);

            var $objrating = $("#" + spanid + data.result[r].itemid);
            var $superbox = $('.superbox').find("#" + data.result[r].itemid);

            $("#" + pageid + "_image").find("#" + data.result[r].itemid).attr("isuserrating", data.result[r].starrating.isuserrating);
            $objrating.html(ratecontent_html);

            var ratecontent_title = 'Your Rating :  ';
            for (var i = 1; i <= 5; i++) {
                if (i <= data.result[r].starrating.rating) {
                    if (data.result[r].starrating.isuserrating)
                        ratecontent_title += "<i class='fas rating-star-yellow fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                    else
                        ratecontent_title += "<i class='far fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
                }
                else
                    ratecontent_title += "<i class='far fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "'>&nbsp;</i>";
            }
            $superbox.attr("data-original-title", ratecontent_title);
            $objrating.attr("data-original-title", ratecontent_title);

            // end star in grid
            // start hover in grid upon star
            var ratecontent = "";
            if (data.result[r].feedback != null) {
                ratecontent += "<div class='show-stats'>";
                ratecontent += "<div class='rating-fix'>" + data.result[r].avgrating + " out of 5 stars</div>";
                for (var i = 0; i < data.result[r].feedback.length; i++) {
                    ratecontent += "<div class='row'><div class='col-xs-4 col-sm-3 col-md-3 col-lg-3 rating-star-blue'>" + data.result[r].feedback[i].name + " </div><div class='col-xs-7 col-sm-7 col-md-7 col-lg-7'>";
                    ratecontent += "<div class='progress'><div class='progress-bar progress-back-color' style='width:" + data.result[r].feedback[i].percentage + "%;'></div>";
                    ratecontent += "</div></div><div style='text-align:left' class='col-xs-2 col-sm-2 col-md-2 col-lg-2'>" + data.result[r].feedback[i].total + "</div></div>";
                }
                ratecontent += "</div>";
            }
            
            $superbox.attr("data-content", ratecontent);
            $objrating.attr("data-content", ratecontent);
            $objrating.find(".rating-count").html(data.result[r].avgrating+"/5");
        }
        // start hover in grid upon star
    });
}

;
Encoder = {

    // When encoding do we convert characters into html or numerical entities
    EncodeType: "entity",  // entity OR numerical

    isEmpty: function (val) {
        if (val) {
            return ((val === null) || val.length == 0 || /^\s+$/.test(val));
        } else {
            return true;
        }
    },

    // arrays for conversion from HTML Entities to Numerical values
    arr1: ['&nbsp;', '&iexcl;', '&cent;', '&pound;', '&curren;', '&yen;', '&brvbar;', '&sect;', '&uml;', '&copy;', '&ordf;', '&laquo;', '&not;', '&shy;', '&reg;', '&macr;', '&deg;', '&plusmn;', '&sup2;', '&sup3;', '&acute;', '&micro;', '&para;', '&middot;', '&cedil;', '&sup1;', '&ordm;', '&raquo;', '&frac14;', '&frac12;', '&frac34;', '&iquest;', '&Agrave;', '&Aacute;', '&Acirc;', '&Atilde;', '&Auml;', '&Aring;', '&AElig;', '&Ccedil;', '&Egrave;', '&Eacute;', '&Ecirc;', '&Euml;', '&Igrave;', '&Iacute;', '&Icirc;', '&Iuml;', '&ETH;', '&Ntilde;', '&Ograve;', '&Oacute;', '&Ocirc;', '&Otilde;', '&Ouml;', '&times;', '&Oslash;', '&Ugrave;', '&Uacute;', '&Ucirc;', '&Uuml;', '&Yacute;', '&THORN;', '&szlig;', '&agrave;', '&aacute;', '&acirc;', '&atilde;', '&auml;', '&aring;', '&aelig;', '&ccedil;', '&egrave;', '&eacute;', '&ecirc;', '&euml;', '&igrave;', '&iacute;', '&icirc;', '&iuml;', '&eth;', '&ntilde;', '&ograve;', '&oacute;', '&ocirc;', '&otilde;', '&ouml;', '&divide;', '&oslash;', '&ugrave;', '&uacute;', '&ucirc;', '&uuml;', '&yacute;', '&thorn;', '&yuml;', '&quot;', '&amp;', '&lt;', '&gt;', '&OElig;', '&oelig;', '&Scaron;', '&scaron;', '&Yuml;', '&circ;', '&tilde;', '&ensp;', '&emsp;', '&thinsp;', '&zwnj;', '&zwj;', '&lrm;', '&rlm;', '&ndash;', '&mdash;', '&lsquo;', '&rsquo;', '&sbquo;', '&ldquo;', '&rdquo;', '&bdquo;', '&dagger;', '&Dagger;', '&percnt;', '&lsaquo;', '&rsaquo;', '&euro;', '&fnof;', '&Alpha;', '&Beta;', '&Gamma;', '&Delta;', '&Epsilon;', '&Zeta;', '&Eta;', '&Theta;', '&Iota;', '&Kappa;', '&Lambda;', '&Mu;', '&Nu;', '&Xi;', '&Omicron;', '&Pi;', '&Rho;', '&Sigma;', '&Tau;', '&Upsilon;', '&Phi;', '&Chi;', '&Psi;', '&Omega;', '&alpha;', '&beta;', '&gamma;', '&delta;', '&epsilon;', '&zeta;', '&eta;', '&theta;', '&iota;', '&kappa;', '&lambda;', '&mu;', '&nu;', '&xi;', '&omicron;', '&pi;', '&rho;', '&sigmaf;', '&sigma;', '&tau;', '&upsilon;', '&phi;', '&chi;', '&psi;', '&omega;', '&thetasym;', '&upsih;', '&piv;', '&bull;', '&hellip;', '&prime;', '&Prime;', '&oline;', '&frasl;', '&weierp;', '&image;', '&real;', '&trade;', '&alefsym;', '&larr;', '&uarr;', '&rarr;', '&darr;', '&harr;', '&crarr;', '&lArr;', '&uArr;', '&rArr;', '&dArr;', '&hArr;', '&forall;', '&part;', '&exist;', '&empty;', '&nabla;', '&isin;', '&notin;', '&ni;', '&prod;', '&sum;', '&minus;', '&lowast;', '&radic;', '&prop;', '&infin;', '&ang;', '&and;', '&or;', '&cap;', '&cup;', '&int;', '&there4;', '&sim;', '&cong;', '&asymp;', '&ne;', '&equiv;', '&le;', '&ge;', '&sub;', '&sup;', '&nsub;', '&sube;', '&supe;', '&oplus;', '&otimes;', '&perp;', '&sdot;', '&lceil;', '&rceil;', '&lfloor;', '&rfloor;', '&lang;', '&rang;', '&loz;', '&spades;', '&clubs;', '&hearts;', '&diams;'],
    arr2: ['&#160;', '&#161;', '&#162;', '&#163;', '&#164;', '&#165;', '&#166;', '&#167;', '&#168;', '&#169;', '&#170;', '&#171;', '&#172;', '&#173;', '&#174;', '&#175;', '&#176;', '&#177;', '&#178;', '&#179;', '&#180;', '&#181;', '&#182;', '&#183;', '&#184;', '&#185;', '&#186;', '&#187;', '&#188;', '&#189;', '&#190;', '&#191;', '&#192;', '&#193;', '&#194;', '&#195;', '&#196;', '&#197;', '&#198;', '&#199;', '&#200;', '&#201;', '&#202;', '&#203;', '&#204;', '&#205;', '&#206;', '&#207;', '&#208;', '&#209;', '&#210;', '&#211;', '&#212;', '&#213;', '&#214;', '&#215;', '&#216;', '&#217;', '&#218;', '&#219;', '&#220;', '&#221;', '&#222;', '&#223;', '&#224;', '&#225;', '&#226;', '&#227;', '&#228;', '&#229;', '&#230;', '&#231;', '&#232;', '&#233;', '&#234;', '&#235;', '&#236;', '&#237;', '&#238;', '&#239;', '&#240;', '&#241;', '&#242;', '&#243;', '&#244;', '&#245;', '&#246;', '&#247;', '&#248;', '&#249;', '&#250;', '&#251;', '&#252;', '&#253;', '&#254;', '&#255;', '&#34;', '&#38;', '&#60;', '&#62;', '&#338;', '&#339;', '&#352;', '&#353;', '&#376;', '&#710;', '&#732;', '&#8194;', '&#8195;', '&#8201;', '&#8204;', '&#8205;', '&#8206;', '&#8207;', '&#8211;', '&#8212;', '&#8216;', '&#8217;', '&#8218;', '&#8220;', '&#8221;', '&#8222;', '&#8224;', '&#8225;', '&#37;', '&#8249;', '&#8250;', '&#8364;', '&#402;', '&#913;', '&#914;', '&#915;', '&#916;', '&#917;', '&#918;', '&#919;', '&#920;', '&#921;', '&#922;', '&#923;', '&#924;', '&#925;', '&#926;', '&#927;', '&#928;', '&#929;', '&#931;', '&#932;', '&#933;', '&#934;', '&#935;', '&#936;', '&#937;', '&#945;', '&#946;', '&#947;', '&#948;', '&#949;', '&#950;', '&#951;', '&#952;', '&#953;', '&#954;', '&#955;', '&#956;', '&#957;', '&#958;', '&#959;', '&#960;', '&#961;', '&#962;', '&#963;', '&#964;', '&#965;', '&#966;', '&#967;', '&#968;', '&#969;', '&#977;', '&#978;', '&#982;', '&#8226;', '&#8230;', '&#8242;', '&#8243;', '&#8254;', '&#8260;', '&#8472;', '&#8465;', '&#8476;', '&#8482;', '&#8501;', '&#8592;', '&#8593;', '&#8594;', '&#8595;', '&#8596;', '&#8629;', '&#8656;', '&#8657;', '&#8658;', '&#8659;', '&#8660;', '&#8704;', '&#8706;', '&#8707;', '&#8709;', '&#8711;', '&#8712;', '&#8713;', '&#8715;', '&#8719;', '&#8721;', '&#8722;', '&#8727;', '&#8730;', '&#8733;', '&#8734;', '&#8736;', '&#8743;', '&#8744;', '&#8745;', '&#8746;', '&#8747;', '&#8756;', '&#8764;', '&#8773;', '&#8776;', '&#8800;', '&#8801;', '&#8804;', '&#8805;', '&#8834;', '&#8835;', '&#8836;', '&#8838;', '&#8839;', '&#8853;', '&#8855;', '&#8869;', '&#8901;', '&#8968;', '&#8969;', '&#8970;', '&#8971;', '&#9001;', '&#9002;', '&#9674;', '&#9824;', '&#9827;', '&#9829;', '&#9830;'],

    // Convert HTML entities into numerical entities
    HTML2Numerical: function (s) {
        return this.swapArrayVals(s, this.arr1, this.arr2);
    },

    // Convert Numerical entities into HTML entities
    NumericalToHTML: function (s) {
        return this.swapArrayVals(s, this.arr2, this.arr1);
    },


    // Numerically encodes all unicode characters
    numEncode: function (s) {
        if (this.isEmpty(s)) return "";

        var a = [],
            l = s.length;

        for (var i = 0; i < l; i++) {
            var c = s.charAt(i);
            if (c < " " || c > "~") {
                a.push("&#");
                a.push(c.charCodeAt()); //numeric value of code point 
                a.push(";");
            } else {
                a.push(c);
            }
        }

        return a.join("");
    },

    // HTML Decode numerical and HTML entities back to original values
    htmlDecode: function (s) {

        var c, m, d = s;

        if (this.isEmpty(d)) return "";

        // convert HTML entites back to numerical entites first
        d = this.HTML2Numerical(d);

        // look for numerical entities &#34;
        arr = d.match(/&#[0-9]{1,5};/g);

        // if no matches found in string then skip
        if (arr != null) {
            for (var x = 0; x < arr.length; x++) {
                m = arr[x];
                c = m.substring(2, m.length - 1); //get numeric part which is refernce to unicode character
                // if its a valid number we can decode
                if (c >= -32768 && c <= 65535) {
                    // decode every single match within string
                    d = d.replace(m, String.fromCharCode(c));
                } else {
                    d = d.replace(m, ""); //invalid so replace with nada
                }
            }
        }

        return d;
    },

    // encode an input string into either numerical or HTML entities
    htmlEncode: function (s, dbl) {

        if (this.isEmpty(s)) return "";

        // do we allow double encoding? E.g will &amp; be turned into &amp;amp;
        dbl = dbl || false; //default to prevent double encoding

        // if allowing double encoding we do ampersands first
        if (dbl) {
            if (this.EncodeType == "numerical") {
                s = s.replace(/&/g, "&#38;");
            } else {
                s = s.replace(/&/g, "&amp;");
            }
        }

        // convert the xss chars to numerical entities ' " < >
        s = this.charEncode(s, false);

        if (this.EncodeType == "numerical" || !dbl) {
            // Now call function that will convert any HTML entities to numerical codes
            s = this.HTML2Numerical(s);
        }

        // Now encode all chars above 127 e.g unicode
        s = this.numEncode(s);

        // now we know anything that needs to be encoded has been converted to numerical entities we
        // can encode any ampersands & that are not part of encoded entities
        // to handle the fact that I need to do a negative check and handle multiple ampersands &&&
        // I am going to use a placeholder

        // if we don't want double encoded entities we ignore the & in existing entities
        if (!dbl) {
            s = s.replace(/&#/g, "##AMPHASH##");

            if (this.EncodeType == "numerical") {
                s = s.replace(/&/g, "&#38;");
            } else {
                s = s.replace(/&/g, "&amp;");
            }

            s = s.replace(/##AMPHASH##/g, "&#");
        }

        // replace any malformed entities
        s = s.replace(/&#\d*([^\d;]|$)/g, "$1");

        if (!dbl) {
            // safety check to correct any double encoded &amp;
            s = this.correctEncoding(s);
        }

        // now do we need to convert our numerical encoded string into entities
        if (this.EncodeType == "entity") {
            s = this.NumericalToHTML(s);
        }

        return s;
    },

    // Encodes the basic 4 characters used to malform HTML in XSS hacks
    charEncode: function (s, en) {        
        if (!this.isEmpty(s)) {
            en = en || true;
            // do we convert to numerical or html entity?
            if (en) {
                s = s.replace(/</g, "&lt;");
                s = s.replace(/>/g, "&gt;");
            } else {
                s = s.replace(/</g, "&#60;");
                s = s.replace(/>/g, "&#62;");
            }
            return s;
        } else {
            return "";
        }
    },

    // returns true if a string contains html or numerical encoded entities
    hasEncoded: function (s) {
        if (/&#[0-9]{1,5};/g.test(s)) {
            return true;
        } else if (/&[A-Z]{2,6};/gi.test(s)) {
            return true;
        } else {
            return false;
        }
    },

    // will remove any unicode characters
    stripUnicode: function (s) {
        return s.replace(/[^\x20-\x7E]/g, "");

    },

    // corrects any double encoded &amp; entities e.g &amp;amp;
    correctEncoding: function (s) {
        return s.replace(/(&amp;)(amp;)+/, "$1");
    },

    filterCharacters: function (text) {        
        var mapObj = {
            '&gt;': '>',
            '&lt;': '<',
            '&amp;': '&'
        };
        return text.replace(/&gt;|&lt;|&amp;/g, function (matched) {
            return mapObj[matched];
        });
    },

    // Function to loop through an array swaping each item with the value from another array e.g swap HTML entities with Numericals
    swapArrayVals: function (s, arr1, arr2) {
        if (this.isEmpty(s)) return "";
        var re;
        if (arr1 && arr2) {
            //ShowDebug("in swapArrayVals arr1.length = " + arr1.length + " arr2.length = " + arr2.length)
            // array lengths must match
            if (arr1.length == arr2.length) {
                for (var x = 0, i = arr1.length; x < i; x++) {
                    re = new RegExp(arr1[x], 'g');
                    s = s.replace(re, arr2[x]); //swap arr1 item with matching item from arr2	
                }
            }
        }
        return s;
    },

    inArray: function (item, arr) {
        for (var i = 0, x = arr.length; i < x; i++) {
            if (arr[i] === item) {
                return i;
            }
        }
        return -1;
    },  
}

;
var _currentWizard = null;
var wizardaction = null;
var windowWizardChange = false;

function _currentWizardNext() {
    windowWizardChange = true;
    _currentWizard.next();
}

function _currentWizardPrev() {
   _currentWizard.prev();
}

function _currentWizardCancel() {
    _currentWizard.cancel();
}
function _currentWizardClose() {
    if (_currentWizard != null)
        _currentWizard.close();
}

$(window).on('hashchange', function () {
    windowWizardChange = true;
    if (_currentWizard != null)
        _currentWizard.close();
});

function wizard(_settings) {
    var that = this;

    that.settings = $.extend({
        index: 0,
        name: "",
        steps: [],
        preventClose: false,
        closeTab: false,
        finishBtnText:'Finish'
    }, _settings);


    that.dom = {};
    //that.init();
}

wizard.prototype.init = function () {
    var that = this;
    _currentWizard = that;

    that.dom.modal = $("#modalWizard");
    that.dom.modalHeader = that.dom.modal.find(".modal-header");
    that.dom.modalBody = that.dom.modal.find(".modal-body");
    that.dom.modalFooter = that.dom.modal.find(".modal-footer");
    that.dom.modalText = that.dom.modalHeader.find(".modal-title");
    that.dom.stepHeader = that.dom.modalHeader.find(".wizard")
    that.dom.stepHeaderUL = that.dom.modalHeader.find(".steps")

    that.dom.stepHeaderUL.empty();
    that.dom.modalText.html(that.settings.name);
    that.dom.steps = [];
    for (var i = 0; i < that.settings.steps.length; i++) {
        var step = that.settings.steps[i];
        var li = $("<li></li>").appendTo(that.dom.stepHeaderUL);
        if (isNewUI) {
            li.html("<span class='badge'>" + (i + 1) + "</span><span class='step-title'>" + step.name + "</span><span class='chevron-icon'></span>");
            if (i < that.settings.steps.length - 1)
                li.find("span.chevron-icon").html("<i class='fa fa-angle-right'></i>");
        }
        else
            li.html("<span class='badge'>" + (i + 1) + "</span>" + step.name + "<span class='chevron'></span>");

        that.dom.steps.push(li);
    }

    that.update();

    var wizardId = getUniqueTime();
    that.dom.modalBody.attr("data-modal-id", wizardId);
    zIndexModalWizard.pushElement(wizardId); //add wizard id in stack maintained for z-indexes
    that.dom.modal.css("z-index", zIndexModalWizard.getHighestZIndex()); //apply highest index to current modal
};

wizard.prototype.show = function () {
    //this is to communicate between salesforce and AMP for closing the send email modal opened in saleforce lightning community
    postmessage = "sfiFrameMaximize";
    window.parent.postMessage(postmessage, "*");
    var that = this;
    $("#modalWizard").modal({ show: true, keyboard: false, backdrop: 'static' });
    that.init();
}

wizard.prototype.next = function () {
    wizardaction = "next";
    var that = this;
    var currentView = that.dom.modalBody.find(" > div");
    var events = $._data(currentView.get(0), "events");
    if (events !== undefined && events.save !== undefined) {
        $("#wizardPrev").attr('disabled', true);
        $("#wizardNext").attr('disabled', true);
        currentView.trigger("save", function (moveForward) {
            if (moveForward) {
                if (that.settings.index < that.settings.steps.length) {
                    that.settings.index++;
                    that.update();
                    return;
                }
            }
            that.updateButtons();
        });
    }
    else {
        if (that.settings.index < that.settings.steps.length) {
            that.settings.index++;
            that.update();
        }
    }
}

wizard.prototype.prev = function () {
    wizardaction = "prev";
    var that = this;
    var currentView = that.dom.modalBody.find(" > div");
    var events = $._data(currentView.get(0), "events");
    if (events !== undefined && events.prev !== undefined) {
        currentView.trigger("prev", function (moveBackward) {
            if (moveBackward) {
                if (that.settings.index > 0) {
                    that.settings.index--;
                    that.update();
                    return;
                }
            }
            that.updateButtons();
        });
    }
    else {
        if (that.settings.index > 0) {
            that.settings.index--;
            that.update();
        }
    }
}

wizard.prototype.goto = function (index) {
    var that = this;
    if (that.settings.index < index) {
        that.settings.index = index;
        that.update();
    }
}


wizard.prototype.updateButtons = function () {
    var that = this;
    var firstStep = (that.settings.index === 0);
    var LastStep = (that.settings.index === that.settings.steps.length-1);

    $("#wizardPrev").find('i').attr("class", "btn-icon fa fa-angle-double-left");
    $("#wizardNext").find('i').attr("class", "btn-icon fa fa-angle-double-right");
    $("#wizardPrev").attr('disabled', firstStep === true);
    $("#wizardNext").attr('disabled', false);
    var $buttonIcon = $("#wizardNext div").not(".btn-text");
    if (LastStep) { 
        var stepName = that.settings.steps[that.settings.index].lastStepName;
        if (stepName != undefined) {
            if (!isNewUI)
                $buttonIcon.html('<i class="btn-icon fa fa-paper-plane"></i>');
            else {
                $("#wizardNext").removeClass("btn-default");
                $("#wizardNext").addClass("btn-primary btn-primary-cta");
                $('.wizard-actions .pull-right:first-child').addClass('wizard-finish');
            }
            $("#wizardNext .btn-text").html(stepName);
        }
        else {
            if (!isNewUI)
                $buttonIcon.html('<i class="btn-icon fa fa-flag-checkered"></i>');
            else { 
                $("#wizardNext").removeClass("btn-default");
                $("#wizardNext").addClass("btn-primary btn-primary-cta");
                $('.wizard-actions .pull-right:first-child').addClass('wizard-finish');
            }
            $("#wizardNext .btn-text").html(that.settings.finishBtnText);
        }
    }
    else {
        if (!isNewUI)
            $("#wizardNext .btn-text").html('Next');
        else { 
            $('.wizard-actions .pull-right:first-child').removeClass('wizard-finish');
            $("#wizardNext").addClass("btn-default");
            $("#wizardNext").removeClass("btn-primary btn-primary-cta");
        }
    }
}

wizard.prototype.update = function () {
    var that = this;
    for (var i = 0; i < that.settings.steps.length; i++) {
        var li = that.dom.steps[i];
        if (isNewUI) {
            li.toggleClass("done", i < that.settings.index);
            if (li.hasClass("done"))
                li.find("span[class='badge']").html("<i class='fa fa-check'></i>");
            else {
                var step = i + 1;
                li.find("span[class='badge']").html("" + step + "");
            }
        }
        else
            li.toggleClass("complete", i < that.settings.index);

        li.toggleClass("active", i == that.settings.index);
    }
    that.dom.modal.find('#wizardPrev').attr('disabled', true);

    if (that.settings.steps[that.settings.index] != undefined) {
        if (that.settings.steps[that.settings.index].wizardclose != undefined)
            that.settings.preventClose = that.settings.steps[that.settings.index].wizardclose;
        else
            that.settings.preventClose = false;

        //seems like a hack?
        //if (that.settings.steps[that.settings.index].url.indexOf('javascript') == -1)
        that.dom.modalBody.load(that.settings.steps[that.settings.index].url, function () {
            that.updateButtons();
        });
    }
    else {
        if (that.settings.closeaction != undefined) {
            that.settings.closeaction();
        }
        that.close();
    }
    //else
    //    eval(that.settings.steps[that.settings.index].url);
}

wizard.prototype.cancel = function () {
    var that = this;
    if (that.settings.cancelaction == true && that.settings.cancelactionfunction != undefined) {
        that.settings.cancelactionfunction();
        return;
    }

    if (that.settings.cancelaction == null || that.settings.cancelaction == undefined || that.settings.cancelaction == true) {
        if (this.settings.name == 'Customize Video Media' && $("#" + $(this.dom.modalBody[0].firstElementChild).attr("id") + "_iframe_video").length == 1) {
            var isVideoLoaded = $("#" + $(this.dom.modalBody[0].firstElementChild).attr("id") + "_iframe_video").contents().find(".video-btn [videocreated=true]").length > 0 ? true : false
            var isUrlCreated = $("#" + $(this.dom.modalBody[0].firstElementChild).attr("id") + "_iframe_video").contents().find("#videoUrlContainer > div > div.url-box").css("display") != "none" ? true : false;
            if (!isVideoLoaded) {
                $.OpenSmartMessageBox2({ content: 'Video will be saved in a draft mode. Click to Build the Video or Close the window for future editing', buttons: "[Cancel][Ok]" },
                    function (result) {
                        if (result === 'Ok') {
                            api.call("GenerateVideoForPreview", { templateid: parseInt(that.settings.steps[0].url.substring(21, 14)), isdraft: true, generateimmediately: false }, function (res) {
                                events.savedVideoMedia();
                                _currentWizard.close();
                            });
                        }
                        $.CloseSmartMessageBox2();
                    }
                );
            }
            else if (isVideoLoaded && isUrlCreated) {
                $.OpenSmartMessageBox2({ content: 'Video Customized successfully. You can find video in the My Personalized section', buttons: '[Ok]' },
                    function (result) {
                        if (result == 'Ok') {
                            _currentWizard.close();
                        }
                        $.CloseSmartMessageBox2();
                    }
                );
            }
            else {
                $.OpenSmartMessageBox2({ content: 'Video processing will happen in the background, You will be notified when done. You can find processed videos in the My Customized section', buttons: '[Ok]' },
                    function (result) {
                        if (result == 'Ok') {
                            api.call("GenerateVideoForPreview", { templateid: parseInt(that.settings.steps[0].url.substring(21, 14)), isdraft: false, generateimmediately: false }, function (res) {
                                events.savedVideoMedia();
                                _currentWizard.close();
                            });
                        }
                        $.CloseSmartMessageBox2();
                    }
                );
            }
        } else {
            $.OpenSmartMessageBox2({ title: 'Ready to Close?', content: 'You are closing the wizard. You may lose your work if not saved.</br> Do you still want to close?', buttons: "[No][Yes]" },
                function (result) {
                    if (result === 'Yes') {
                        if ($(".page-modal.in").length > 0)
                            $(".page-modal").modal("hide");
                        $(".MessageBoxButtonSection button").addClass("disabled");
                        $(".MessageBoxButtonSection button:last").html('<i class="fa fa-spinner fa-sm fa-spin"></i>');
                        windowWizardChange = false;
                        //this is for salesforce and AMP communication
                        postmessage = "sfiFrameMinimize";
                        window.parent.postMessage(postmessage, "*");
                        //this is to communicate between salesforce and AMP for closing the send email modal opened in saleforce lightning community
                        if (postmessage != '' && (postmessage = "CloseViewAssetModalInSFDC" || window.location.href.indexOf('sf-handler.cshtml') > -1 || evtdata == "SendAMPEmail" || evtdata == "PublishSocialTemplate"))//checking if the modal is opened in the sf handler used in lightning components in salesforce
                            window.parent.postMessage(postmessage, "*");
                        that.close();
                        //for salesforce
                        if (FROMTPAPP) {
                            $(".modal.fade.in").removeClass("in");
                            $('.modal-backdrop').removeClass('in');
                            FROMTPAPP = false;
                        }
                        if (that.settings.closeaction != undefined) {
                            that.settings.closeaction();
                        }
                    }
                    $.CloseAllSmartMessageBox2();
                }
            );
        }           
    }
    else {
        that.close();
    }
}

wizard.prototype.close = function () {
    var that = _currentWizard;
    _currentWizard = null;
    //page = null;
    if (that.settings.closeTab && !windowWizardChange) {
        window.close();
        windowWizardChange = false;
    }
    else {
        $("#modalWizard").modal("hide");
        windowWizardChange = false;
    }

    //delay this by a second to give the fade out time to animate
    setTimeout(function () {
        that.dom.stepHeaderUL.empty();
        that.dom.modalText.html("");
        that.dom.modalBody.empty();
    }, 1000);
    zIndexModalWizard.popElement(); //remove entry of this wizard from the stack maintained for z-indexes
}

;
var api = {
    call: function(func, data, success, failed, ctx, canUseHostPath) {
        if (func === undefined || func === null) throw "api func was not valid";

        if (data !== undefined && data !== null) data = JSON.stringify(data);

        if (typeof failed !== "function") {
            ctx = failed;
            failed = null;
        }

        var url = "";
        if (canUseHostPath == true)
            url = hostPath ?? "";

        url += "/api/" + func;

        var headers = {};
        var csrf = this.getCookie("X-CSRF-Token", null);
        if (csrf !== null) {
            headers["x-csrf-token"] = csrf;
        }
        var _call = $.ajax({
            url: url,
            type: "POST",
            data: data,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            headers: headers,
            success: function(result) {
                if (success !== undefined && success !== null) {
                    try {
                        var version = result["version"];
                        if (version !== "undefined" && typeof (applicationVersionAlerted) !== "undefined" && typeof (applicationVersion) !== "undefined") {
                            if (!applicationVersionAlerted && version !== applicationVersion) {
                                applicationVersionAlerted = true;
                                $("#ampApplicationUpdatedWarning").show();
                            }
                        }
                        if (typeof debug !== "undefined") {
                            var ctx = result["ctx"];
                            if (ctx !== undefined && ctx !== null) {
                                var readq = ctx["ctx_ReadQueries"];
                                var insertq = ctx["ctx_InsertQueries"];
                                var deleteq = ctx["ctx_DeleteQueries"];
                                var totalq = readq + insertq + deleteq;
                                var dataSize = ctx["ctx_TotalDataSize"];
                                var duration = ctx["ctx_ExecutionTime"];
                                var rows = ctx["ctx_RowsPulled"];

                                debug.add(
                                    "api",
                                    func,
                                    totalq,
                                    rows,
                                    dataSize,
                                    duration,
                                    data,
                                    result
                                );
                            }
                        }
                    } catch (err) {}
                    success(result, ctx);
                }
            },
            error: function (request, status, errorThrown) {
                if (request.status == 401)
                    window.location = "https://partner-marketing.bitdefender.com/login";
            }
        });

        if (typeof failed === "function") {
            _call.fail(failed);
        }
        return _call;
    },
    callRemote: function (url, method, data, headers, success, failed) {
        if (url === undefined || url === null) throw "url was not valid";
        if (data !== undefined && data !== null) data = JSON.stringify(data);
        if (headers === undefined || headers == null) headers = {};

        var _call = $.ajax({
            url: url,
            type: method,
            data: data,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            headers: headers,
            async: true,
            success: function(result) {
                if (success !== undefined && success !== null) {
                    success(result);
                }
            }
        });

        if (typeof failed === "function") {
            _call.fail(failed);
        }
    },
    getCookie: function(name, defaultValue) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(";");
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == " ") c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0)
                if (c.substring(nameEQ.length, c.length) != "")
                    return c.substring(nameEQ.length, c.length);
                else return defaultValue;
        }
        return defaultValue;
    }
};

;
var fadeInDelay = 100;
var postmessage = "DontCloseSendEmail";
var evtdata = "";
var FROMTPAPP = false;//this flag will help to close the modal after email has been sent in tp apps. Currently for salesforce
var fromPlaybook = false;//For Playbook
var fromPlaybookLink = false;
var activeTwilioCall = false;// to check if there is any active twilio call connection
var exportTitle = "";
var loadJSandCSS = {}; //Created Global Variable for Checking CSS and JS file already loaded or not --Sumit PR 62632
var fileCount = false;
var uploadedFileId = 0;
var updatedBy = "flag7";
var createdBy = "flag22";
var score = "flag19";
var isNewUI = true;
var newAssetThreshold = newAssetThreshold;
/**
 * Gets the width of the OS scrollbar
 */
(function ($) {
    var scrollbarWidth = 0;
    $.getScrollbarWidth = function () {
        if (!scrollbarWidth) {
            if ($.browser.msie) {
                var $textarea1 = $('<textarea cols="10" rows="2"></textarea>')
						.css({ position: 'absolute', top: -1000, left: -1000 }).appendTo('body'),
					$textarea2 = $('<textarea cols="10" rows="2" style="overflow: hidden;"></textarea>')
						.css({ position: 'absolute', top: -1000, left: -1000 }).appendTo('body');
                scrollbarWidth = $textarea1.width() - $textarea2.width();
                $textarea1.add($textarea2).remove();
            } else {
                var $div = $('<div />')
					.css({ width: 100, height: 100, overflow: 'auto', position: 'absolute', top: -1000, left: -1000 })
					.prependTo('body').append('<div />').find('div')
						.css({ width: '100%', height: 200 });
                scrollbarWidth = 100 - $div.width();
                $div.parent().remove();
            }
        }
        return scrollbarWidth;
    };
})(jQuery);

//clear the modal to help free up js references
$("#modalDialog").on("hidden.bs.modal", function (e) {
    modal.closeall();
});

$("#modalDialog").on("hide.bs.modal", function (e) {
    if (modal.islocked(e))
        return e.preventDefault();
});

$(document.body).on('show.bs.modal', function () {
    $(window.document).find('html').addClass('modal-open');
    $(window.document).find('body').css('padding-right', $.getScrollbarWidth() + 'px');
});
$(document.body).on('hidden.bs.modal', function () {
    if (zIndexModalWizard.stack.length == 0) { // if all modals are closed, remove this class, else it shows double scroll
        $(window.document).find('html').removeClass('modal-open');
        $(window.document).find('body').css('padding-right', '');
    }
    $(window.document).find(".modal-footer").removeAttr("style");// In Drip editor it is added, removing after closing it
});

// Added to solve scrollbar issue in datepicker
const observer = new MutationObserver(function (mutationsList) {
    mutationsList.forEach(function (mutation) {
        if (mutation.type === "attributes" && mutation.attributeName === "class") {
            const htmlElement = $(mutation.target);

            // Check if 'modal-open' class is present and '.date-range-filters' exists
            if (htmlElement.hasClass("modal-open") && $(".date-range-filters .date-range-menu.open").length > 0) {
                htmlElement.removeClass("modal-open");
            }
        }
    });
});
const targetNode = document.querySelector("html");
observer.observe(targetNode, { attributes: true });

function questionnaireTrimText(e) {
    var $this = e;
    var html = $this.text().trim();
    if (html.length > 70)
        if ($this.find("p").length == 0)
            $this.text(html.substring(0, 70) + "...");
        else
            $this.find("p").text(html.substring(0, 70) + "...");
}
var LinkTypeEnums = {};
LinkTypeEnums.Opportunity = 16;
LinkTypeEnums.Contact =1;
LinkTypeEnums.User =2;
LinkTypeEnums.Case =169;
LinkTypeEnums.Organization = 8;
LinkTypeEnums.Deals = 176;
LinkTypeEnums.Account = 170;
LinkTypeEnums.Database = 212;
var partnerusername = "";
var windowChange = false;
var isDivModal = false;
const FilterDelimiter = '|';
var persona = {    
    hidemoveColumn: function () {  
        $('.nav-tabs').each(function () {
            var attributeValue = 'presentation';
            var $liElements = $(this).find('li[role*="' + attributeValue + '"]');
            if ($liElements.length == 1) {
                $liElements.find('.tabmove').closest('a').hide();
                $liElements.find('.tabdelete').closest('a').hide();
            }
            else {
                $liElements.find('.tabmove').closest('a').show();
                $liElements.find('.tabdelete').closest('a').show();
                $liElements.find('.tabdelete').show();
            }
            
        });
        $('.row').each(function () {
            var $column = $(this).find('.draggablecolumn');
            if ($column.length == 1)
                $column.find('.widgetmove').closest('a').hide();          
            else
                $column.find('.widgetmove').closest('a').show();            
            

        });
    },
    process: function (id) {
        var $request = $("#" + id);

        $request.find('[data-widget]').each(function () {
            var $div = $(this);
            var width = $div.data("width");
            var widget = $div.data("widget");
            var query = $div.data("query");
            $div.load("widgets/" + widget + "?" + query);
        });
    },
    OnLoadSuccess: function (widgetData) {             
        persona.disableTooltipForMobile();
        if ($.mobileApp && pymChild != null) { syncHeightForMobileApp(); }
        if (typeof (widgetData.widgetname) != "undefined" && widgetData.widgetname != null && widgetData.widgetname.trim() != "")
        {
            persona.hideinfoicon(widgetData);
            persona.hidemoveColumn();
            //getting height of the widget and saving it as attribute
            var $widget = $("div[data-widget='" + widgetData.widgetname + "'");
            $widget.attr("data-container-height", $widget.height());
        }        
        $('.dashboard-v5-widget').find('[rel=tooltip]').tooltip({trigger: "hover" ,container: '.dashboard-v5-widget'});        
    },
    loadSingleWidget: function (widget, options) {
        
                var resArr = [1024, 1280, 1360, 1366, 1440, 1600, 1680, 1920, 2560];

                var $div =  $(widget);
                $div.attr("data-isloaded", "inprogress");
                var widgetData = {};
                var width = $div.data("width");
                var widget = $div.data("widget");
                widgetData.widgetname = widget;
                widgetData.editmode = options.editmode;
                widgetData.outerDiv = $div.closest('.tab-pane').attr('id');
                widgetData.query = $div.data('query');
                widgetData.widgetid = $div.data("widgetid");
                if (options != undefined && options != null) {
                    if (options.isV5 != undefined && options.isV5 != null)
                        widgetData.isVersion5 = options.isV5;
                    if (options.isCustomize != undefined && options.isCustomize != null)
                        widgetData.enableCustomization = options.isCustomize;
                }
                var previewpath = $div.data("query");
                var widgetname = $div.data("name");
                var widgetloadurl = previewpath;
                
                if (previewpath.indexOf("?") != -1)
                    widgetloadurl += "&persona=" + options.personaname + "&editmode=" + options.editmode + "&personaoption=" + options.personaoption + "&platform=" + options.platform;
                else
                    widgetloadurl += "?persona=" + options.personaname + "&editmode=" + options.editmode + "&personaoption=" + options.personaoption + "&platform=" + options.platform;

                $div.attr("data-container-width", $div.width());
                
                var widgetInfo = $div.data("widgetinfo") != undefined && $div.data("widgetinfo") != "" ? $div.data("widgetinfo") : "";
                if (widgetInfo != "") {
                    if (widgetInfo.isResponsive)
                        $div.addClass("container-res-" + getNextHighestNumber(resArr, $div.width()));
                }
                if (options != undefined && options != null) {
                    if (options.personaid != undefined && options.personaid != null)
                        widgetloadurl += "&personaid=" + options.personaid;
                    if (options.personaoptionid != undefined && options.personaoptionid != null)
                        widgetloadurl += "&personaoptionid=" + options.personaoptionid;
                }
                if (typeof(widgetData.widgetid) != "undefined" && widgetData.widgetid != 0)
                    widgetloadurl += "&widgetid=" + widgetData.widgetid;

                if (typeof (widgetData.widgetid) != "undefined" && widgetData.widgetid != 0)
                    widgetloadurl += "&widgetid=" + widgetData.widgetid;
                $div.load(widgetloadurl, function (response, status, http) {
                    if (status == "success") {
                        $div.attr("data-isloaded", "true");
                        persona.OnLoadSuccess(widgetData);
                        persona.hidemoveColumn();
                    }
                    else
                    {
                        $div.attr("data-isloaded", "false");
                    }
                });
            
        
    },
    loadwidget: function (id, personaname, editmode, personaoption, platform, options) {
        var $request = $("#" + id);
        var $allWidgets = $request.find(".widget[data-query]");
        var resArr = [1024, 1280, 1360, 1366, 1440, 1600, 1680, 1920, 2560];

        var $inactiveTabWidgets = $request.find(".tab-pane").not('.active').find(".widget");
        var $defaultTabWidgets = $request.find(".tab-pane.tabload").find(".widget");
        $inactiveTabWidgets = $inactiveTabWidgets.not($defaultTabWidgets);

        var $activeWidgets = [];

        if (editmode)
            $activeWidgets = $allWidgets;
        else
            $activeWidgets = $allWidgets.not($inactiveTabWidgets);

        if ($activeWidgets.length > 0) {
            $activeWidgets.each(function () {
                var $div = $(this);
                var widgetData = {};
                var width = $div.data("width");
                var widget = $div.data("widget");
                widgetData.widgetname = widget;
                widgetData.editmode = editmode;
                widgetData.outerDiv = $div.closest('.tab-pane').attr('id');
                widgetData.query = $div.data('query');
                widgetData.widgetid = $div.data("widgetid");
                if (options != undefined && options != null) {
                    if (options.isV5 != undefined && options.isV5 != null)
                        widgetData.isVersion5 = options.isV5;
                    if (options.isCustomize != undefined && options.isCustomize != null)
                        widgetData.enableCustomization = options.isCustomize;
                    if (options.isEnableDashboardUserSetting != undefined && options.isEnableDashboardUserSetting != null)
                        widgetData.isEnableDashboardUserSetting = options.isEnableDashboardUserSetting;
                }
                var previewpath = $div.data("query");
                var widgetname = $div.data("name");
                var widgetloadurl = previewpath;
                if (previewpath.indexOf("?") != -1)
                    widgetloadurl += "&persona=" + personaname + "&editmode=" + editmode + "&personaoption=" + personaoption + "&platform=" + platform;                
                else
                    widgetloadurl += "?persona=" + personaname + "&editmode=" + editmode + "&personaoption=" + personaoption + "&platform=" + platform;

                $div.attr("data-container-width", $div.width());
                $div.attr("data-container-height", $div.height());
                var widgetInfo = $div.data("widgetinfo") != undefined && $div.data("widgetinfo") != "" ? $div.data("widgetinfo") : "";
                if (widgetInfo != "") {
                    if (widgetInfo.isResponsive)
                        $div.addClass("container-res-" + getNextHighestNumber(resArr, $div.width()));
                }
                if (options != undefined && options != null) {
                    if (options.personaid != undefined && options.personaid != null)
                        widgetloadurl += "&personaid=" + options.personaid;
                    if (options.personaoptionid != undefined && options.personaoptionid != null)
                        widgetloadurl += "&personaoptionid=" + options.personaoptionid;
                }

                if (typeof(widgetData.widgetid) != "undefined" && widgetData.widgetid != 0)
                    widgetloadurl += "&widgetid=" + widgetData.widgetid;
                
                $div.load(widgetloadurl, function (response, status, http) {
                    if (status == "success") {
                        $div.attr("data-isloaded", "true");
                        persona.OnLoadSuccess(widgetData);
                        persona.hidemoveColumn();
                    }
                });
            });
    }
    },

    loadLazy: function ($lazyWidgets, options) {               

        // Function to load the content of the div
        function loadContent(div) {

            if ($(div).data("isloaded")==false) {
                console.log("lazy loading widget : " + $(div).data("widget"));
                persona.loadSingleWidget(div, options);

                var $widgetTabPane = $(div).closest(".tab-pane");
                var $tabContent = $(div).closest(".tab-content");
                //if need to load widgets inside tab and load inactive tab widgets in background
                if ($tabContent.length > 0 && $widgetTabPane.find(".widget[data-isloaded='false']").length == 0 && $tabContent.find(".tab-pane.tabload").length > 0) {
                    $tabContent.find(".tab-pane").each(function (index, element) {                        
                        if ($(element).hasClass("tabload")) {
                            var $tabWidgets = $(element).find(".widget[data-isloaded='false']");
                            if ($tabWidgets.length > 0) {
                                $tabWidgets.empty();
                                $tabWidgets.each(function (index, div) {
                                    console.log("lazy loading widget : " + $(div).data("widget"));
                                    persona.loadSingleWidget(div, options);
                                });
                            }
                        }
                    });
                }
            }
        }

        // Callback function for IntersectionObserver
        const observerCallback = (entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    loadContent(entry.target);
                    observer.unobserve(entry.target);
                }
            });
        };
        
        if (observerConfigOptions.rootMarginType == "dynamic")
            observerConfigOptions.rootMargin = window.innerHeight;

        // Create an IntersectionObserver instance
        const observerOptions = {
            root: null, // Use the viewport as the container
            rootMargin: observerConfigOptions.rootMargin + 'px',
            threshold: 0.1 // Trigger when 10% of the div is in view
        };       
      
        const observer = new IntersectionObserver(observerCallback, observerOptions);

        // Select all divs with the 'lazy' load class and observe them
        // document.querySelectorAll('.lazy');
        const divs = $lazyWidgets.toArray(); // To Convert the jQuery collection to an array of DOM elements 
        divs.forEach(div => {
            observer.observe(div);
        });
    },
    widgetHeight: function (outerDiv) {
        var widgetDiv = $('#' + outerDiv).find('.widget');
        widgetDiv.css('height', 'auto');
        var maxHeight = 0;

        widgetDiv.each(function () {
            if ($(this).outerHeight() > maxHeight) {
                maxHeight = $(this).outerHeight();

                var wBodyHeight;
                var wHeaderHeight = $(this).find('.w-header').outerHeight();
                wBodyHeight = maxHeight - wHeaderHeight;

            }
        });

        widgetDiv.css('height', maxHeight);
    },
    refreshWidget: function (options) {
        var $request = $("#" + options.id);
        var $widget = $request.parent("div[data-widget]");
        
        if ($widget.length > 0) {
            var width = $widget.data("width");
            var widget = $widget.data("widget");
            var previewpath = $widget.data("query");
            var widgetname = $widget.data("name");
            options.query = previewpath;
            var widgetloadurl = previewpath;
            var designType = options.designtype != undefined ? options.designtype : ""
            var platform = options.platform != undefined ? options.platform : ""
            if (widgetloadurl.indexOf("?") != -1)
                widgetloadurl += "&persona=" + options.persona + "&editmode=" + options.editmode + "&personaoption=" + options.personaOption + "&platform=" + platform + "&design=" + designType;
            else
                widgetloadurl += "?persona=" + options.persona + "&editmode=" + options.editmode + "&personaoption=" + options.personaOption + "&platform=" + platform + "&design=" + designType;

            if (options != undefined && options != null) {
                if (options.isV5 != undefined && options.isV5 != null)
                    options.isVersion5 = options.isV5;
                if (options.isCustomize != undefined && options.isCustomize != null)
                    options.enableCustomization = options.isCustomize;
            }
            if (typeof(options.widgetID) != "undefined" && options.widgetID != 0)
                widgetloadurl += "&widgetid=" + options.widgetID;
            $widget.load(widgetloadurl, function (response, status, http) {
                if (status == "success") {
                    persona.OnLoadSuccess(options);
                    persona.hidemoveColumn();
                }
            });
        }
    },    
    loadV5Widget: function (options) {

        var $request = $("#" + options.id);
        var $widget = $request.parent("[data-widget='" + options.widgetname +"']");

        var urlparam = "";
        if (typeof(options.isSetup) != "undefined" && options.isSetup == true)
            $widget = $request.find("[data-widget='" + options.widgetname + "']");
        if (typeof (options.designtype) != "undefined" && options.designtype != "")
             urlparam += "&design=" + options.designtype;
        if (options.previewPath != "undefined" && options.previewPath != "")
             $widget = $request.find("[data-query='" + options.previewPath + "']");
        if (options.loadWidgetContainer != "undefined" && options.loadWidgetContainer != undefined && options.loadWidgetContainer != "")
            $widget = options.loadWidgetContainer;

        if ($widget.length > 0) {
            var widgetloadurl = $widget.data("query");
            if (options.widgetVersion > 0) {
                if (widgetloadurl.indexOf("?") != -1)
                    widgetloadurl += "&version=" + options.widgetVersion + "&persona=" + options.persona + "&editmode=" + options.editmode + "&personaoption=" + options.personaOption + "&platform=" + options.platform + urlparam;
                else
                    widgetloadurl += "?version=" + options.widgetVersion + "&persona=" + options.persona + "&editmode=" + options.editmode + "&personaoption=" + options.personaOption + "&platform=" + options.platform + urlparam;
            }
            else {
                if (widgetloadurl.indexOf("?") != -1)
                    widgetloadurl += "&persona=" + options.persona + "&editmode=" + options.editmode + "&personaoption=" + options.personaOption + "&platform=" + options.platform + urlparam;
                else
                    widgetloadurl += "?persona=" + options.persona + "&editmode=" + options.editmode + "&personaoption=" + options.personaOption + "&platform=" + options.platform + urlparam;
            }

            if (typeof(options.widgetid) != "undefined" && options.widgetid != undefined && options.widgetid != "0")
                widgetloadurl += "&widgetid=" + options.widgetid;

            $widget.load(widgetloadurl, function (response, status, http) {
                if (status == "success")
                    persona.OnLoadSuccess(options);
            });
         }
        $('.dashboard-v5-widget').find('[rel=tooltip]').tooltip({trigger: "hover" ,container: '.dashboard-v5-widget'});
    },
    loadQuicklink: function (options) {
        var $request = $("#" + options.id);
        var $quicklinks = $request.find('[data-linkname]');
        var designtype = "1", persona="", personaoption="", platform="", widgetCount=0;
        if (typeof (options.designtype) != "undefined" && options.designtype != "")
            designtype = options.designtype;
        if (typeof (options.persona) != "undefined" && options.persona != "")
            persona = options.persona;
        if (typeof (options.personaOption) != "undefined" && options.personaOption != "")
            personaoption = options.personaOption;
        if (typeof (options.widgetCount) != "undefined")
            widgetCount = options.widgetCount;
        if (typeof (options.platform) != "undefined")
            platform = options.platform;
        if ($quicklinks.length > 0) {
            $quicklinks.each(function () {
                var $div = $(this);
                var previewpath = $div.data("linkurl");
                var parserName = $div.data("parsername");
                var widgetloadurl = previewpath + "?editmode=" + options.editmode + "&design=" + designtype;
                if (persona != "")
                    widgetloadurl += "&persona=" + persona;
                if (personaoption != "")
                    widgetloadurl += "&personaoption=" + personaoption;
                if (platform != "")
                    widgetloadurl += "&platform=" + platform;
                if (parserName != "")
                    widgetloadurl += "&widgetname=" + parserName;
                if (widgetloadurl != "") {
                    $div.load(widgetloadurl, persona.OnLoadSuccess);

                }
                if (widgetCount != 0) {
                    var classId = Math.ceil(12 / widgetCount);
                    $div.parent().removeAttr("class").addClass("col-xs-12 col-sm-12 col-md-" + classId + " col-lg-" + classId);
                }
            });
    }
    },
    refreshQuicklink: function (id, options) {
        var $quicklink = $("#" + id).parent(".qlbutton");        
        var strParam = "";
        if (options.persona != undefined && options.persona != null)
            strParam += "&persona=" + options.persona;
        if (options.personaOption != undefined && options.personaOption != null)
            strParam += "&personaOption=" + options.personaOption;
        if (options.platform != undefined)
            strParam += strParam != "" ? "&platform=" + options.platform : "?platform=" + options.platform;
        if ($quicklink.length > 0) {            
            var previewpath = $quicklink.data("linkurl");
            var parserName = $quicklink.data("parsername");
            if (parserName != "")
                strParam += "&widgetname=" + parserName;
            if (previewpath != "") {
                $quicklink.load(previewpath + "?editmode=" + options.editmode + "&design=" + options.designtype + strParam, persona.OnLoadSuccess);
            }
        }
    },
    refreshStatQuicklink: function (id, options) {
        var $quicklink = $("#" + id).parent(".qlbutton");
        if ($quicklink.length > 0) {
            var previewpath = $quicklink.data("linkurl");
            if (previewpath != "") {
                $quicklink.load(previewpath + "?editmode=" + options.editmode + "&design=" + options.designtype + "&persona=" + options.persona + "&personaoption=" + options.personaOption, persona.OnLoadSuccess);
            }
        }
    },
    disableTooltipForMobile: function () {
        // Disable tooltips for mobile dashboard
        if (isMobile.any()) {
            $('[rel=tooltip]').tooltip('disable');
            $('[rel=popover-hover]').popover('disable');
        }
    },
    hideinfoicon: function (widgetData) {
        if (widgetData.query != null && widgetData.query != "")
        {
            var $widget = $("[data-query='" + widgetData.query + "']");
            var i = 0;
            $widget.each(function () {
                if ($widget.eq(i).length > 0 && (widgetData.editmode === "true" || widgetData.editmode == true) && widgetData.isVersion5 != undefined && widgetData.isVersion5 == true && widgetData.enableCustomization == true ) {
                    var container = $widget.eq(i).find(".swap-delete-container");
                    $(this).removeClass('hidden');
                    $(this).next('.loading-section').addClass('hidden');
                    if (container.length == 0) {
                        var $spanToWrapAnchor = $("<span>").attr({
                            "class": "swap-delete-container primarybackcolor"
                        }).prependTo($widget);
                        var deleteAnchor = $widget.eq(i).find(".delete-widget-button");
                        var exchangeAnchor = $widget.eq(i).find(".swap-widget-button");
                        var moveAnchor = $widget.eq(i).find(".swap-widget-button");
                        if (widgetData.isEnableDashboardUserSetting != undefined && widgetData.isEnableDashboardUserSetting) {
                            var userAnchor = $widget.eq(i).find(".user-widget-button");
                            var isRemovableUserAnchor = $widget.eq(i).attr("isremovable");
                            if (userAnchor.length == 0) {
                                var userAnchorClass = '';
                                var userAnchorTooltip = '';
                                if (isRemovableUserAnchor != undefined) {
                                    userAnchorClass = "pull-right user-widget-button active";
                                    userAnchorTooltip = 'In order to allow users to remove this widget from their Dashboard, please click here.';
                                }
                                else {
                                    userAnchorClass = "pull-right user-widget-button";
                                    userAnchorTooltip = 'To prevent users from re-moving this widget on their Dashboard, please click here.';
                                }
                                $("<a>").attr('rel', 'tooltip').attr('data-original-title', userAnchorTooltip).html(`<i class="fal fa-user-slash fa-lg" aria-hidden="true"></i>`).attr({
                                    "class": userAnchorClass
                                }).prependTo($spanToWrapAnchor);
                            }
                        }
                        if (deleteAnchor.length == 0) {
                            var $deleteanchor = $("<a>").attr('rel', 'tooltip').attr('data-original-title', 'Delete Widget').html(`<i class="fa fa-trash-o fa-lg" aria-hidden="true"></i>`).attr({
                                "class": "pull-right delete-widget-button"
                            }).prependTo($spanToWrapAnchor);
                        }
                        if (exchangeAnchor.length == 0) {
                            var $swapanchor = $("<a>").attr('rel', 'tooltip').attr('data-original-title', 'To replace the widget with another one of the same widths, please click on it').html(`<i class="fa fa-file-edit fa-lg" aria-hidden="true"></i>`).attr({
                                "class": "pull-right swap-widget-button"
                            }).prependTo($spanToWrapAnchor);
                        }
                        if (moveAnchor.length == 0) {
                            var $swapanchor = $("<a  style = 'cursor : move'>").attr('rel', 'tooltip').attr('data-original-title', 'Move Widget').html(`<i class="fa fa-arrows-alt widgetmove" aria-hidden="true"></i>`).attr({
                                "class": "pull-right move-widget-button"
                            }).prependTo($spanToWrapAnchor);
                        }
                    }
                }
                i++;
            });
            $widgetinfoicon = $widget.length > 0 ? $widget.find(".w-widget .inbox-info") : null;
            if ($widgetinfoicon !="undefined" && $widgetinfoicon!=null) {
                var infortext = $widgetinfoicon.attr("data-content");
                var $infoicon = typeof (infortext) !="undefined" && infortext.length > 0 ? $('<div/>').html(infortext).contents() : null;
                var p = typeof($infoicon) != "undefined" && $infoicon != null && $infoicon.length>0 ? $infoicon.find("p").html() : null;
                if (p == null || p.toLowerCase().trim() == "n/a" || p.toLowerCase().trim() == "" ) {
                    $widgetinfoicon.hide();
                }
            }
        }
    }
}
var reportfilter = {
    linkToID: null,
    linkType: 0,
    viewOption: 0,
    orgViewOption: 0,
    groupViewOption: 0,
    fundViewOption: 0,
    fundActivityViewOption: 0,
    userGroupViewOption: 0,
    groupType: 0,
    requestId: null,
    selectedRange: 0,
    startDate: null,
    endDate: null,
    orgId: null,
    orgGroupId: null,
    userId: null,
    fundId: null,
    fundActivityId: null,
    selectedCountryCode: null,
    activityType: null,
    userGroupId: null,
    orgGroupAndCondition: false,
    country: null,
    periodField: 1,
    dummyCheck: false,
    apiFilters: [],
    loadreportdata : function () {
        $(reportfilter.requestId).trigger("loadreportdata");
        },
    exportreportpdf : function () {
        $(reportfilter.requestId).trigger("exportreportpdf");
    },
    loadplaybookchange: function () {
        $(reportfilter.requestId).trigger("loadplaybookchange");
    },
    loademailgrid: function () {
        $(reportfilter.requestId).trigger("resetemailreportgrid");
    }

}

var opportunityStepProcess = {
    isDataRoomHidden: true,
    requestId: null,

    loadDataRoomData: function () {
        $(opportunityStepProcess.requestId).trigger("loaddataroomdata");
    },    
}

var playbookContactData = {
    requestId: null,
    contactData: null, 
    loadPlaybookContacts: function () {
        $(playbookContactData.requestId).trigger("loadplaybookcontacts");
    },
}
var savePlaybookXml = {
    requestId: null,
    currentAsset: null,
    process:false,
    inputAssetSent: function () {
        $(savePlaybookXml.requestId).trigger("inputAssetSent");
    },
    processAssetSent: function () {
        $(savePlaybookXml.requestId).trigger("processAssetSent");
    },
}
var playbookContactDataV5 = {
    requestId: null,
    loadPlaybookContacts: function (stepID) {
        $(playbookContactDataV5.requestId).trigger("loadplaybookcontactsv5", { stepID: stepID });
    },
}

var salesRepPlaybookData = {
    requestId: null,
    loadplaybookDonutData: function () {
        $(salesRepPlaybookData.requestId).trigger("loadplaybookDonutData");
    },
}

var salesImportDataRefresh = {
    $requestId: null,
    currentStepID: null,
    refreshProcessViewContactCount: function(){
        salesImportDataRefresh.$requestId.find('#step' + currentStepID).find('.acc-count-loader,.con-count-loader').show();
        salesImportDataRefresh.$requestId.find('#step' + currentStepID).find('.acc-count,.con-count').hide();
        api.call("GetProcessContactsCount", { templateid: playbookData.templateID }, function (r) {
            if (r.result != null) {
                $.each(r.result, function (i, t) {
                    if (t.nodeid == currentStepID) {
                        salesImportDataRefresh.$requestId.find('#step' + t.nodeid).find(".contacts-count").text(t.contacts);
                        salesImportDataRefresh.$requestId.find('#step' + t.nodeid).find(".accounts-count").text(t.accounts);
                    }
                });
                salesImportDataRefresh.$requestId.find('#step' + currentStepID).find('.acc-count-loader,.con-count-loader').hide();
                salesImportDataRefresh.$requestId.find('#step' + parseInt(currentStepID)).find('.acc-count-loader,.con-count-loader').hide();
                salesImportDataRefresh.$requestId.find('#step' + currentStepID).find('.acc-count,.con-count').show();
                salesImportDataRefresh.$requestId.find('#step' + parseInt(currentStepID)).find('.acc-count,.con-count').show();
            }
        });

    }
}
var leadsRoutedData = {
    requestId: null,
    loadLeadRoutedData: function () {
        $(leadsRoutedData.requestId).trigger("loadLeadRoutedData");
    },
}
var socialDripDataForPlaybook = {
    requestId: null,
    assetObjectContainer: null,
    publishingId: null,
    publishingName: null,
    createSocialDrip: function () {
        $(socialDripDataForPlaybook.requestId).trigger("setSocialDripControl");
    },
}
var nurturingDripDataForPlaybook = {
    requestId: null,
    lastmediaId: null,
    createNurturingDrip: function () {
        $(nurturingDripDataForPlaybook.requestId).trigger("setNurturingDripControl");
    },
}
var tmpl = {
    templateCache: {},
    cache: function (path, callback) {
        if (typeof tmpl.templateCache[path] === "undefined") {
            var $container = $("<div></div>");
            $container.appendTo("body");
            $container.load(path, function () {
                var result = $container.find(">script")[0].text;
                tmpl.templateCache[path] = doT.template(result, undefined);
                $container.remove();
                callback();
            })
            console.debug("cache miss");
            return;
        }

        console.debug("cache hit");
        callback();
    },
    load: function (func, data, template, container, callback, failed, xobni) {        
        if (typeof func === "function") {
            func(data, function (result) {                
                if (result.status == 1) {
                    if (typeof failed == "function") {
                        failed(result);
                    }
                    return;
                }
                result.data = data;
                if (xobni) result.xobni = xobni;
                var parser = (typeof template == "function") ? template : doT.template(document.getElementById(template).text, undefined);
                var output = parser(result);
                var rendered = $(output).hide();
                container.empty();
                container.append(rendered);
                rendered.fadeIn(fadeInDelay);

                tmpl.runinits();

                callback(result);
            });
        }
        else {
            api.call(func, data,
                function (r, ctx) {
                    if (xobni) r.result.xobni = xobni;
                    
                    if (r.status === 0) {
                        r.result.data = data;
                        var parser = (typeof template == "function") ? template : doT.template(document.getElementById(template).text, undefined);
                        var output = parser(r.result);
                        var rendered = $(output).hide();
                        container.empty();
                        container.append(rendered);
                        rendered.fadeIn(fadeInDelay);

                        tmpl.runinits();

                        callback(r.result);
                    } else if (r.status == 6) {// if RateLimitException is thrown then this message is shown
                        container.html("<div class='well'> There seems to be an issue with contacting the server, please try again in a little bit.</div>");
                    }
                    else {
                        //listgrid.showError('There seems to be an issue with contacting the server, please try again in a little bit.');
                        if (typeof (failed) === "function")
                            failed(r, ctx);
                        return;
                    }
                    //if (listgrid.onAfterLoad != null) {
                    //    listgrid.onAfterLoad();
                    //}
                }, function (r, ctx) {
                    if (typeof (failed) === "function")
                        failed(r, ctx);
                },
                0
            );
        }
    },
    parse: function (container, template, data, callback, xobni) {
        var parser = (typeof template == "function") ? template : doT.template(document.getElementById(template).text, undefined);
        var output = parser(data);
        var rendered = $(output).hide();
        if (data.hideplaybookloader && data.playbookloader != "") {
            $(rendered).find(".inbox-action-btns2 .header-search-wrapper .btn-search i").removeClass("fa").addClass("fal")
        }
        container.empty();
        container.append(rendered);
        rendered.fadeIn(fadeInDelay);

        tmpl.runinits();

        if (callback !== undefined)
            callback();
    },
    initcallbacks: [],
    init: function (callback) {
        tmpl.initcallbacks.push(callback);
    },
    runinits: function () {
        for (var i = 0; i < tmpl.initcallbacks.length; i++)
            tmpl.initcallbacks[i]();

        tmpl.initcallbacks = [];
    }
}

var PlaybookAssetPreviewOptions = {
    requestId: null
}
$(window).on('hashchange', function () {
    windowChange = true;
    modal.closeall();
});

window.addEventListener('message', function (evt) {
    var obj = $("#content div:eq(0)").attr("id");
    if (obj != undefined) {
        if (evt.data == "SendAMPEmail") {
            evtdata = evt.data;
            FROMTPAPP = true;
            $("#" + obj).trigger("send");
            postmessage = "CloseSendEmail";
        }
        else if (evt.data == "PublishSocialTemplate") {
            evtdata = evt.data;
            FROMTPAPP = true;
            $("#" + obj).trigger("publish");
            postmessage = "CloseSendEmail";
        }
    }
}, false);

var modal = function () {
    var modalstack = [];
    var isLoading = false;
    var init = false;

    function updateHeaderOld($header) {
        var headers = [];
        for (var i = 0; i < modalstack.length ; i++) {
            if (i < modalstack.length - 1) {
                if (modalstack[i].settings.title != "")
                    headers.push("<a href='javascript: void(0)' data-modal-id='" + modalstack[i + 1].id + "'>" + modalstack[i].settings.title + "</a>");
            }
            else
                headers.push("<span>" + modalstack[i].settings.title + "</span>");
        }
        $header.find("h4").html(headers.join(' &gt; '));
        //$header.html("<h4 class='modal-title' id='H2'>" + headers.join(' &gt; ') + "</h4>");
        $header.find("h4 a").on("click", function () { modal.close(parseInt($(this).data("modal-id"))); });

        var id = modalstack[modalstack.length - 1].id;
        var $footer = $("#modalDialog > .modal-dialog > .modal-content > .modal-footer");
        if (modalstack.length > 1)
            $footer.find("button:first").show();
        else
            $footer.find("button:first").hide();

        if (!modalstack[modalstack.length - 1].settings.closeButton)
            $footer.find(".btn-default:last").hide();
        else
            $footer.find(".btn-default:last").show();

        $footer.find("button[data-modal-id]").hide();
        $footer.find("button[data-modal-id=" + id + "]").show();
    }

    function getButtonLocalization(name) {
        if (name == "Close")
            return "Close"; //"{$ui.modal.close}";
        else if (name == "Done")
            return "Done"; //"{$ui.modal.done}";
        else if (name == "Back")
            return "Back"; //"{$ui.modal.back}";
        else if (name == "Views")
            return "Back"; //"{$ui.modal.views}";
        else if (name == "Views")
            return "Save"; //"{$ui.modal.save}";
        else if (name == "Send")
            return "Send"; //"{$ui.modal.save}";
        else if (name == "Generate")
            return "Generate"; //"{$ui.modal.save}";
        else if (name == "Validate")
            return "Validate"; //"{$ui.modal.save}";
        else if (name == "Import")
            return "Import";

        console.debug("button " + name + " not localized");
        return name; //missing localization
    }

    function getButtonIcon(name) {
        if (name == "close" || name == "cancel")
            return "fa fa-times";
        else if (name == "done")
            return "fa fa-check";
        else if (name == "back")
            return "fa fa-caret-left";
        else if (name == "views")
            return "fa fa-eye";
        else if (name == "save")
            return "fa fa-save";
        else if (name == "export")
            return "fa fa-download";
        else if (name == "send sms")
            return "fa fa-inbox";
        else if (name == "send email")
            return "far fa-envelope";
        else if (name == "view assets")
            return "far fa-file";
        else if (name == "image")
            return "far fa-image";
        else if (name == "document")
            return "fa fa-cog";
        else if (name == "execute play")
            return "fa fa-book";
        else if (name == "actions")
            return "fas fa-cogs";
        else if (name == "info")
            return "fa fa-info-circle";
        else if (name == "report")
            return "far fa-chart-bar";
        else if (name == "sharing")
            return "fa fa-cubes";
        else if (name == "lists")
            return "fa fa-users";
        else if (name == "add to drip")
            return "fa fa-sitemap";
        else if (name == "database")
            return "fa fa-database";
        else if (name == "offline activity")
            return "fa fa-male";
        else if (name == "filters")
            return "fa fa-filter";
        else if (name == "opportunities")
            return "fa fa-cubes";
        else if (name == "generate")
            return "fal fa-plus-square";
        else if (name == "send")
            return "fa fa-paper-plane";
        else if (name == "ok")
            return "far fa-check-circle";
        else if (name == "select")
            return "fa fa-check";
        else if (name == "publish")
            return "fa fa-plane";
        else if (name == "insert" || name == "use")
            return "fa fa-plus-circle";
        else if (name == "schedule")
            return "fa fa-repeat";
        else if (name == "switch")
            return "fa fa-exchange";
        else if (name == "submit" || name == "validate" || name == "import")
            return "fa fa-check-square";
        else if (name == "start")
            return "fa fa-play-circle";
        else if (name == "attach")
            return "fa fa-paperclip";
        else if (name == "upload")
            return "fa fa-upload";
        else if (name == "load")
            return "fa fa-spinner";
        else if (name == "next")
            return "fa fa-angle-double-right";
        else if (name == "quote")
            return "fa fa-shopping-cart";
        else if (name == "setup")
            return "fa fa-cog";
        else if (name == "pdf")
            return "far fa-file-pdf";
        else if (name == "download")
            return "fa fa-download";
        else if (name == "lowdownload")
            return "fa fa-download";
        else if (name == "highdownload")
            return "fa fa-download";
        else if (name == "mobiledownload")
            return "fa fa-mobile";
        else if (name == "approve")
            return "fa fa-mobile";
        else if (name == "discount")
            return "fa fa-badge-percent";
        else if (name == "sendquote")
            return "fa fa-paper-plane";
        else if (name == "sendproposal")
            return "fa fa-paper-plane";
        else if (name == "warranty")
            return "fa fa-file";
        else if (name == "sendagreement")
            return "fa fa-paper-plane";
        else if (name == "cancelagreement")
            return "fa fa-paper-plane";
        else if (name == "downloadexcel")
            return "fa fa-download";
        else if (name == "customize")
            return "fa fa-cog";
        else if (name == "user-check")
            return "far fa-user-check";
        return "fa fa-question"; //missing icon?
    }

    function doSave(moveToIndex)
    {
        var mdata = modalstack[modalstack.length - 1];
        if (mdata.settings.preventClose && mdata.settings.closeAction) {
            $.OpenSmartMessageBox2({ title: "Ready to switch View", content: "You are switching to different the view. You may lose your work.</br> Do you want to save changes?", buttons: "[Cancel][Save]" },
                function (result) {
                    if (result === "Save") {
                        $.CloseSmartMessageBox2();
                        saveWhileClosingTemplate();
                        saveAndLoadView(moveToIndex);
                    }
                    else {
                        $.CloseSmartMessageBox2();
                        saveAndLoadView(moveToIndex);
                    }
                }
            );
        }
        else
            return;
    }


    function doClose() {
        var mdata = modalstack[modalstack.length - 1];
        if (mdata.settings.preventClose && mdata.settings.closeAction) {
            if (mdata.settings.isEditor) {
                $.OpenSmartMessageBox2({ title: 'Ready to Close?', content: 'You are closing the editor. You may lose your work.<br/> Save changes to the editor?', buttons: '[Cancel][Close][Save & Close]' },
                    function (result) {
                        if (result === 'Save & Close') {
                            $.CloseSmartMessageBox2();
                            events.savedTemplate();
                            if (mdata.settings.isDripEditor)
                                SaveDripWhileClosing();
                            else
                                saveWhileClosingTemplate();
                            return;
                        }
                        else if (result === 'Close') {
                            $.CloseSmartMessageBox2();
                            modal.closeall();
                            events.savedTemplate();
                        }
                        else {
                            $.CloseSmartMessageBox2();
                            return;
                        }
                    }
                );
            }
            else {
                $.OpenSmartMessageBox2({ title: 'Ready to Close?', content: 'You are closing the modal. You may lose your work if closed.<br/> Do you want to close?', buttons: '[No][Yes]' },
                    function (result) {
                        if (result === 'Yes') {
                            $.CloseSmartMessageBox2();
                            modal.closeall();
                        }
                        else {
                            $.CloseSmartMessageBox2();
                            return;
                        }
                    }
                );
            }
        }
        else if (mdata.settings.isCancel) {
            if (mdata.settings.isitemNull != undefined && mdata.settings.isitemNull != "" && mdata.settings.isitemNull != null) {
                modal.closeall();
            }
            else {
                if (typeof radioButtonChangeCallBack === "function")
                    radioButtonChangeCallBack();
                modal.closeall();
            }
        }
        else
            modal.closeall();
    }

    function updateHeader($header) {
        var buttonNames = {
            "save": 'Save',
            "ok": 'Ok',
            "cancel": 'Cancel',
            "close": 'Close',
            "submit": 'Submit',
            "done": 'Done',
            "export": 'Export',
            "send sms": 'Send SMS',
            "send email": 'Send Email',
            "view assets": 'View Assets',
            "image": 'Image',
            "document": 'Document',
            "execute play": 'Execute Play',
            "actions": "Actions",
            "info": 'Info',
            "report": 'Report',
            "opportunities": 'Opportunities',
            "filters": 'Filters',
            "sharing":'Sharing',
            "lists": 'Lists',
            "add to drip": 'Add to Drip',
            "database": 'Database',
            "offline activity": 'Offline Activity',
            "generate": 'Generate',
            "approve": 'Approve',
            "pdf":'PDF',
            "select": 'Select',
            "publish": 'Publish',
            "send": 'Send',
            "finish": 'Finish',
            "insert": 'Insert',
            "select": 'Select',
            "schedule": 'Schedule',
            "use": 'Use',
            "switch": 'Switch',
            "start": 'Start Test',
            "attach": 'Attach',
            "upload": 'Upload',
            "load": 'Load',
            "next": 'Next',
            "quote": 'Order quote',
            "setup": 'Setup',
            "validate": 'Validate',
            "import": 'Import',
            "download": 'Download',
            "lowdownload": 'Low Res PDF',
            "highdownload": 'High Res PDF',
            "mobiledownload": 'To Mobile',
            "downloadhtml": 'Download Html',
            "add": 'add',
            "addselected": 'Add Selected',
            "discount": 'Discount',
            "sendquote": '{$ajax_discount_rule.sendquote}',
            "sendproposal": '{$ajax_discount_rule.sendproposal}',
            "warranty": '{$ajax_discount_rule.warranty}',
            "sendagreement": '{$ajax_discount_rule.SendOrderPaperWork}',
            "cancelagreement": '{$ajax_discount_rule.CancelAgreement}',
            "downloadexcel": '{$ajax_discount_rule.downloadexcel}',
            "customize": 'Customize',
            "viewattachments": 'View Attachments',
            "submitforapproval": 'Submit For Approval',
            "assign":'assign',
            "usethisimage": 'Use This Image',
            "backtogallery": 'Back to Gallery',
            "usethisdocument": 'Use This Document',
            "usethisvideo": 'Use This Video',
            "preview": 'Preview',
            "originalrecordpreview": 'Original Record Preview',
            "saveasdraft": 'Save as Draft',
            //add more button localizations here
        };
        var mdata = modalstack[modalstack.length - 1];
        var settings = mdata.settings;
        var view = settings.views[settings.currentViewIndex];
        var showBackButton = modalstack.length > 1;
        if (showBackButton)
            currentModalView.isDirty = false;

        var headers = [];
        for (var i = 0; i < modalstack.length; i++) {
            if (i < modalstack.length - 1)
                headers.push("<a href='javascript: void(0)' data-modal-id='" + modalstack[i + 1].id + "'>" + modalstack[i].settings.title + "</a>");
            else
                headers.push("<span>" + modalstack[i].settings.title + "</span>");
        }
        $header.find("h4").html(headers.join(' &gt; '));
        $header.find("h4 a").on("click", function () { modal.close(parseInt($(this).data("modal-id"))); });

        var mdata = modalstack[modalstack.length - 1];
        var settings = mdata.settings;
        var view = settings.views[settings.currentViewIndex];
        var showBackButton = modalstack.length > 1;
        var showCloseButton = modalstack[modalstack.length - 1].settings.closeButton;
        if (typeof (isNewUI) == 'undefined')
            isNewUI = true;
        var actionButtonHtml = "";
        if (isNewUI) {
            actionButtonHtml = "<div class='text-center pull-right'>" +
                "<a class='btn btn-default btn-primary btn-primary-cta' data-modal-id='__MODALID__' data-action-name='__ACTION__'>" +
                "<span class=''>__TEXT__</span>" +
                "</a>" +
                "</div>";
        } else {
            actionButtonHtml = "<div class='text-center pull-right'>" +
                "<a class='btn btn-default' data-modal-id='__MODALID__' data-action-name='__ACTION__'>" +
                "<div><i class='btn-icon __ICON__'></i></div>" +
                "<div class='btn-text'>__TEXT__</div>" +
                "</a>" +
                "</div>";
        }

        var $modalDialog = $("#modalDialog");
        var $modalPrev = $modalDialog.find(".modalBack");
        $modalPrev.toggle(showBackButton);

        var $subactions = $("#modalSubActionsDropDown");
        $subactions.empty();

        var subactions = settings.subactions;
        if (subactions.length>0)
        {
            var subActionButton = "<button class='btn btn-primary dropdown-toggle' data-toggle='dropdown'>" +
                "<div>" + "<i class='fa fa-sort-down pull-right'></i >" +
                "<i class='fa-xg fa fa-cog'></i></div>" +
                '<div class="font-xs">Actions</div>' +
                "</button>" +
                "<ul class='dropdown-menu pull-right wide'></ul>";

            var $btn = $(subActionButton);
            $btn.appendTo($subactions);
            var $subActionUl = $subactions.find("ul.dropdown-menu");

            for (var x = 0; x <= subactions.length - 1; x++) {
                (function (i) {
                    var buttonName = subactions[i].name.toLowerCase();

                    var subActionButtonHtml = "<li><a data-modal-id='__MODALID__' data-action-name='__ACTION__'>" +
                        "<i class='fa fa-" + subactions[i].icon +"'></i>" +
                        "<span>__TEXT__</span>" +
                        "</a >" +
                        "</li>";

                    var html = subActionButtonHtml
                        .replace("__TEXT__", subactions[i].name)// for other languages lookup function was not giving expected button name and icon.
                        .replace("__MODALID__", mdata.id)
                        .replace("__ACTION__", buttonName);//cphillips83: this uses a lookup function to find the correct icon based on button name

                    var $btn1 = $(html);

                    return $btn1;

                })(x).appendTo($subActionUl);
            }
                var $a1 = $subactions.find("ul li");
                //cphillips83: js closures really piss me off
                $a1.on("click", function () {
                    var i = $(this).index();
                    if (subactions[i].actionmethod !== undefined) {
                        subactions[i].actionmethod();
                    }
                    else
                        modal.show({ title: subactions[i].name, views: [subactions[i]], buttons: subactions[i].buttons, subactions: [] });
               });
        }

        //process buttons
        var $actions = $(".modal-content .modalActionButtons");
        $actions.empty();

        var buttons = typeof (view.buttons) === "undefined" ? [] : view.buttons.slice();
        var hideCloseButton = modalstack[modalstack.length - 1].settings.hideCloseButton;
        if (!~$.inArray("cancel", buttons) && !hideCloseButton) {
            buttons.push('close');
        }
        if (~$.inArray("cancel", buttons) && hideCloseButton)
            buttons.pop("cancel");
        for (var i = buttons.length - 1; i >= 0; i--) {
            //using a anonymous lambda to fix js closure issue
            (function (i) {
                var buttonName = buttons[i];
                var buttonText = buttonNames[buttonName];
                if (typeof (buttonText) === "undefined" || buttonText == "") //incase this button hasn't been location yet
                    buttonText = "!Missing!";

                var html = "";
                if (isNewUI) {
                    if (buttonName == "close" || buttonName == "cancel") {
                        closeOrCancelUi = "<div class='text-center pull-right v5-close'>" +
                            "<a class='btn btn-default' data-modal-id='__MODALID__' data-action-name='__ACTION__'>" +
                            "<div><i class='btn-icon __ICON__'></i></div>" +
                            "</a>" +
                            "</div>";

                        html = closeOrCancelUi
                            .replace("__ICON__", getButtonIcon(buttonName))
                            .replace("__TEXT__", buttonText)
                            .replace("__MODALID__", mdata.id)
                            .replace("__ACTION__", buttonName);
                    }
                    else {
                        if (buttons.length == 1) {//#42702 fixed
                            actionButtonHtml = "<div class='hidden'></div><div class='text-center pull-right'>" +
                                "<a class='btn btn-primary btn-primary-cta' data-modal-id='__MODALID__' data-action-name='__ACTION__'>" +
                                "<span class=''>__TEXT__</span>" +
                                "</a>" +
                                "</div>";
                        }
                        html = actionButtonHtml
                            .replace("__ICON__", getButtonIcon(buttonName))
                            .replace("__TEXT__", buttonText)
                            .replace("__MODALID__", mdata.id)
                            .replace("__ACTION__", buttonName);
                    }
                }
                else {
                    html = actionButtonHtml
                        .replace("__ICON__", getButtonIcon(buttonName))
                        .replace("__TEXT__", buttonText)
                        .replace("__MODALID__", mdata.id)
                        .replace("__ACTION__", buttonName);
                }

                var $btn = $(html);
                var $a = $btn.find("a");

                //doClose is a special case where it will ask if they are sure they want to close
                //prevent close is set to true
                $a.on("click", buttonName == "close" || buttonName == "cancel" ? doClose : function () {//to append header buttons
                    mdata.content.find("> div:first").trigger(buttonName, function (result) {
                        if (result === null || result === true || typeof (result) === "object") {
                            if (mdata.settings.callback !== undefined)
                                mdata.settings.callback(buttonName, result);

                            modal.close(mdata.id);
                            //var download = { icon: "download", name: "Export", url: "/connections/contacts/export/null/null?linkids=" + id + "&isSmartlist=null&isContactcompany=null" }

                            if (mdata.settings.gridobj != null) {
                                mdata.settings.gridobj.refresh();
                            }
                        }
                    });
                });

                return $btn;
            })(i).appendTo($actions);
        }
        
        if (subactions.length > 0 || settings.views.length>=2)
            $subactions.parent().show();
        else
            $subactions.parent().hide();
    }

    function saveAndLoadView(index)
    {
        if (modalstack.length > 1)
        {
            var mdata = modalstack[modalstack.length - 1];
            var view = mdata.settings.views[index];
        }
        else{
        var mdata = modalstack[modalstack.length - 1];
        var view = mdata.settings.views[index];
        }
        if (view.name == "internalplaybookeditor") {
            modal.close();
            window.location.href = view.url;
            return;
        }
        mdata.content.load(view.url);
        var originalTitle = mdata.settings.title;
        var selectedViewTitle = "";

        var currentViewName = $("#modalSubViewDropDown .fa-check").parent().find("span").text();
        selectedViewTitle = originalTitle.replace(currentViewName, view.name);
        var getTempName = new RegExp('\\((.*)\\)');
        var currentTemplateName = originalTitle;
        if (getTempName.test(originalTitle)) { //update template's new name in every modal in editor
            if (originalTitle.match('\\((.*)\\)') != null && originalTitle.match('\\((.*)\\)').length >= 2)//added null check to fix title issue
                currentTemplateName = originalTitle.match('\\((.*)\\)')[1];
            var newTemplateName = '<b><i>' + $('#myModalLabel span b').text().trim() + '</i></b>';
            selectedViewTitle = selectedViewTitle.replace(currentTemplateName, newTemplateName);
        }

        mdata.settings.title = selectedViewTitle;

        var len = modalstack.length - 1;

        updateView(index);
    }

    function updateView(selected) {
        if (modalstack.length === 0)
            return;

        var mdata = modalstack[modalstack.length - 1];
        mdata.settings.currentViewIndex = selected;
        var settings = mdata.settings;

        var $modal = $("#modalDialog");
        var $header = $modal.find(".modal-header");
        updateHeader($header);
 
        var $views = $("#modalSubViewDropDown");
        $views.empty();

        var views = settings.views;

        if (modalstack.length > 1) {
            //updateHeader($views);
            bindViews($views, selected);
            //mdata.content.load(mdata.settings.views[selected].url);
        }
        else {

            if (views.length < 2)
                $views.hide();
            else
                bindViews($views, selected);
        }
    }

    function bindViews($views, selected)
    {
        var mdata = modalstack[modalstack.length - 1];
        mdata.settings.currentViewIndex = selected;
        var settings = mdata.settings;

        var views = settings.views;

        var viewButton = "<button class='btn btn-primary dropdown-toggle' data-modal-id='__MODALID__' data-action-name='__ACTION__' data-toggle='dropdown' > " +
            "<div>" + "<i class='fa fa-sort-down pull-right'></i >" +
            "<i class='fa-xg fa fa-list-alt'></i></div>" +
            '<div class="font-xs">More</div>' +
            "</button>" +
            "<ul class='dropdown-menu pull-right wide'></ul>";

        var $btn = $(viewButton);
        $btn.appendTo($views);
        var $viewActionUl = $views.find("ul.dropdown-menu");


        $views.show();
        for (var i = 0; i <= views.length - 1; i++) {
            var view = views[i];
            var prefix = view.iconprefix != undefined ? view.iconprefix : "fa";
            //var li = $("<a class='btn btn-default text-center' href='#" + view.name + "' data-modal-view-index='" + i + "'><div><i class='fa fa-" + view.icon + "'></i></div><div>" + view.name + "</div></a>");
            var iconhtml = "";
            if (view.icon != "" && view.icon != "undefined")
                iconhtml = "<i class='" + prefix + " fa-" + view.icon + "'></i>";
            var a = $("<li><a data-action-name='" + view.name + "' data-modal-view-index='" + i + "'>" + iconhtml +"<span>" + view.name + "</span></a></li>");

            $viewActionUl.append(a);
            a.data("view", settings.views);

            if (i === selected) {
                //a.addClass("btn-selected");
                a.find("a").append("<i class='fa fa-check pull-right'></i>");
                if (view.buttonaction != undefined)
                    mdata.settings.closeAction = view.buttonaction;
                else
                    mdata.settings.closeAction = false;
            }
        }

        $views.find("a").each(function () {
            var $a = $(this);
            var index = $a.data('modal-view-index');
            $a.on("click", function (e) {
                e.preventDefault();
                if (mdata.settings.views[mdata.settings.currentViewIndex].buttonaction == true && currentModalView.isDirty)
                    doSave(index);
                else
                    saveAndLoadView(index);

                currentModalView.isDirty = false; //reset value after use
            });
        });

    }


    Number.isInteger = Number.isInteger || function (value) {
        return typeof value === "number" &&
               isFinite(value) &&
               Math.floor(value) === value;
    };
    $(function () {
        var $footer = $("#modalDialog > .modal-dialog > .modal-content > .modal-footer");
        $footer.find("button:first").on("click", function () {
            modal.close();
            
        });
        $footer.find("button:last").on("click", function () {
            var mdata = modalstack[modalstack.length - 1];
            if (mdata.settings.preventClose && mdata.settings.closeAction) {
                $.OpenSmartMessageBox2({ title: '{$ui.grid.alert.readytoclose}', content: "You are closing the editor. You may lose your work.</br> Save changes to the editor?", buttons: "[Cancel][Close][Save & Close]" },
                    function (result) {
                        if (result === "Save & Close") {
                            $.CloseSmartMessageBox2();
                            saveWhileClosingTemplate();
                        }
                        else if (result === "Close") {
                           $.CloseSmartMessageBox2();
                           modal.closeall();
                        }
                        else {
                          $.CloseSmartMessageBox2();
                          return;
                        }
                    }
                );
            }
            else
                modal.closeall();
        });
    });

    return {
               
        sendVideoEmail: function (emailid,options) {
            if (emailid > 0) {
                var views = [
                    { icon: "envelope", name: options.info, url: "/communicate/email/" + emailid, buttons: ["save"]}
                ];
                modal.show({ title: options.title_compose_email +"<span class='label txt-color-white draft' id='lblWhatIsIt'>" + options.new + "</span>", views: views });
            }
        },
        viewDocumentTracking: function (id, tempelateid, title, options) {
            var views = [
                 { icon: "file", name: options.contactviews, url: "https://partner-marketing.bitdefender.com/data-room/" + tempelateid + "/" + id + "/documenttracking/links" }
            ];
            modal.show({ title: title, views: views });
        },
        viewPickDataroom:function(dataroom,name,options){
            var views = [
                { icon: "chart-bar", name: options.activity, url: "https://partner-marketing.bitdefender.com/collateral/data-room/" + data.id + "/report", iconprefix: "far"},
                { icon: "users", name: options.contacts, url: "https://partner-marketing.bitdefender.com/collateral/data-room/" + data.id + "/interestbycontact" },
                { icon: "share", name: options.documents, url: "https://partner-marketing.bitdefender.com/collateral/data-room/" + data.id + "/documenttracking" },
            ];
            var title = 'Data Room' + ' > ' + '' + views[0].name + ' (<b><i>' + name + '</i></b>)';
            modal.show({ title: title, views: views });
        },
        showDataroomReport: function (id, title, options) {
            var views = [{ icon: "database", name: options.send, url: "/sendassets/dataroomreport/" + id }];
            modal.show({ title: title, views: views });
        },
        sendVideoEmailToPartner: function (emailid,options) {
            if (emailid > 0) {
                var views = [
                    { icon: "envelope", name: options.info, url: "/communicate/email/" + emailid + "/partner", buttons: ["finish"]}
                ];
                modal.show({ title: options.title_compose_email + "<span class='label txt-color-white draft' id='lblWhatIsIt'>"+options.new+"</span>", views: views });
            }
        },
        showImage: function (callback, url) {
            var views = [{ icon: "image", name: "Image Gallery", url: url, buttons: ["addselected","cancel"], iconprefix: "far" }];
            modal.show({ title: 'Images', views: views, callback: callback });
        },
        showImageView: function (data, callback) {
            if (data.isSelectButton != undefined){
                if (data.isannouncement != undefined && data.announcerequestid != undefined){
                    var url = "/gallery/images/" + data.id + "/view?istemplate=" + data.istemplate + "&isselectbutton=" + data.isSelectButton + "&singleselect=" + data.singleselect + "&isannouncement=" + data.isannouncement + "&announcerequestid=" + data.announcerequestid + "&showWebBanner=" + data.showWebBanner;
                }
                else{
                   var url = "/gallery/images/" + data.id + "/view?istemplate=" + data.istemplate + "&isselectbutton=" + data.isSelectButton + "&singleselect=" + data.singleselect;
                }
            }
            else{
                var url = "/gallery/images/" + data.id + "/view?istemplate=" + data.istemplate;
            }

            if (data.istemplate) { 
                buttons = (data.canViewBanner == true && data.canEmailSend == true && data.canSendBanner == true && data.canEditBanner == true && !data.isrestricted) ? ["download", "send", "customize"] :              (data.canViewBanner == true && data.canEmailSend == true && data.canSendBanner == true && !data.isrestricted) ? ["download", "send"] :
                          (data.canViewBanner == true && data.canEditBanner == true) ? ["download", "customize"] : 
                          data.canViewBanner == true ? ["download"] : [];
            }
           else{
                buttons = (data.canEmailSend == true && !data.isrestricted) ? ["send"] : [];
           }

            if (data.isSelectButton != undefined && data.isSelectButton == true) {
                buttons = ["backtogallery"];

                if (data.singleselect) {
                    buttons.push("usethisimage");
                }

                if (data.canEmailSend) {
                    buttons.push("send");
                }
            }

            var views = [{ icon: "info-circle", name: "Info", url: url, buttons: buttons }];

            if (data.canedit) {
                if (data.encryptedid != null && data.encryptedid != undefined) {
                    if (data.foldertype != undefined && data.foldertype != null)
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/images/" + data.encryptedid + "/edit/edit" + "/" + getTimeStamp() + "/encrypt?foldertype=" + data.foldertype + "&isbookmark=" + data.isbookmark + "&issetup=" + data.issetup, buttons: ["save"] });
                    else
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/images/" + data.encryptedid + "/edit/edit" + "/" + getTimeStamp() + "/encrypt?issetup=" + data.issetup, buttons: ["save"] });
                } else {
                    if (data.foldertype != undefined && data.foldertype != null)
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/images/" + data.id + "/edit/edit" + "/" + getTimeStamp() + "?foldertype=" + data.foldertype + "&isbookmark=" + data.isbookmark + "&issetup=" + data.issetup, buttons: ["save"] });
                    else
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/images/" + data.id + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + data.issetup, buttons: ["save"] });
                }
            }

            if (data.saveOnDblClick != true && data.saveOnDblClick != undefined) {
                if (data.showPermission)
                    views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/newversion/" + data.shareType + "/" + data.id, buttons: ["save"] });
                if (!data.isrestricted) {
                    if (data.canSendEmail) {
                        views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?templates=null" + "&files=" + data.id + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                        views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?templates=" + null + "&files=" + data.id + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, buttons: ["finish"] });
                    }
                    if (data.publish) {
                        views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + data.id, buttons: ["publish"] });
                    }
                }
                if (data.rating) {
                    views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + data.id + "/" + 2 + "/rating/comment", iconprefix: "fas" });
                }
            }
            var title = "";
            if (data.name != undefined)
                title = 'Images > ' + views[0].name + ' (<b><i>' + data.name + '</i></b>)';
            else
                title = 'Images > ' + views[0].name + '<br>';
            modal.show({ title: title, views: views, callback: callback });
        },
        selectAttachment: function (callback, emailName) {
            var views = [{ icon: "file", name: 'Document Gallery', url: "/gallery/document/v5?singleselect=false" + "&buttonaction=true" + "&isdocumentimport=true" , buttons: ["attach"]},
                { icon: "image", name: 'Image Gallery', url: "/gallery/images/v5?singleselect=false" + "&saveondblclick=true", buttons: ["attach"], iconprefix: "far" },        //saveondblclick added for #13196
                { icon: "file-video", name: 'Video Gallery', url: "/gallery/video/v5?singleselect=0" + "&iseventcalender=true", buttons: ["addselected"] }];

            modal.show({ title: 'Add Attachments', views: views, callback: callback });
        },
        selectAttachmentForCoSell: function (callback, emailName) {
            var views = [{ icon: "file", name: 'Document Gallery', url: "/gallery/documents?buttonaction=true&singleselectwithattach=true", buttons: ["attach"], buttonaction: true },
                { icon: "image", name: 'Image Gallery', url: "/gallery/images?saveondblclick=true&singleselect=true", buttons: ["attach"], iconprefix: "far" },        //saveondblclick added for #13196
                { icon: "file-video", name: 'Video Gallery', url: "/gallery/videos?saveondblclick=true&singleselect=1", buttons: ["add"] }];

            modal.show({ title: 'Add Attachments', views: views, callback: callback });
        },
        showEmail: function (email, options) {
            email = $.extend({
                ispartner: false
            }, email);

            if (_isMobileBrowser == true) {
                modal.showEmailInMobile(email);
                return;
            }
            var timestamp = $.now();
            if (email === null) {
                var views = [
                   { icon: "database", name: options.info, url: "/communicate/email/0/" + getTimeStamp(),buttons:["save"], buttonaction: true }
                ];
                modal.show({ title: options.title_compose_sms + "<span class='label txt-color-white draft' id='lblWhatIsIt'>" + options.new + "</span>", views: views, locked: true, preventClose: true, subactions:[] });
            }
            else if (email.linkids) {
                var views = [

                   { icon: "database", name: options.info, url: "/communicate/newemail/0?linkids=" + email.linkids + "&issrepprocess=true&isSmartlist=" + email.isSmartlist + "&isContactcompany=" + email.isContactcompany,buttons:["save"], buttonaction: true }

                ];
                modal.show({ title: options.title_compose_sms + "<span class='label txt-color-white draft' id='lblWhatIsIt'>" + options.new + "</span>", views: views, locked: true, preventClose: true,subactions:[] });
            }
            else if (email.senton || email.status == 16) {
                var views = [];

                if (email.ispartner) {
                    views.push({ icon: "chart-bar", name: options.report, url: "/communicate/email/" + email.id + "/report/partner", iconprefix: "far" });
                }
                else {
                    views.push({ icon: "chart-bar", name: options.report, url: "/communicate/email/" + email.id + "/report", iconprefix: "far" });
                }
                views.push(
                    { icon: "comments", name: options.message, url: "/communicate/email/" + email.id + "/message", iconprefix: "far"  },
                    { icon: "users", name: options.recipients, url: "/communicate/email/" + email.id + "/receipients" },
                    { icon: "share", name: options.opened, url: "/communicate/email/" + email.id + "/interest" },
                    { icon: "ban", name: options.bounced, url: "/communicate/email/" + email.id + "/bounced" },
                   //{ icon: "minus-circle", name: "Unsubscribed",  url: "https://partner-marketing.bitdefender.com/communicate/email/" + id + "/unsubscribed"},
                    { icon: "external-link", name: options.links, url: "/communicate/email/" + email.id + "/links?ispartner=" + email.ispartner},
                    { icon: "reply", name: options.unopened, url: "/communicate/email/" + email.id + "/unopened" },
                    { icon: "minus-circle", name: options.unsubscribed, url: "/communicate/email/" + email.id + "/unsubscribed" },
                    { icon: "user-times", name: 'Spam Complaints', url: "/communicate/email/" + email.id + "/spam"}
                );
                var title = options.title != null ? options.title : 'Sent Email ' + views[0].name;
                title += " (<b><i>" + email.name + "</i></b>)";
                modal.show({ title: title, views: views, subactions: [] });
            }
            else if (email.scheduledon == null && email.senton == null) {
                var views = [];

                var _emailID = email.id;
                var _templateID = email.templateid;
                var _isPartner = email.ispartner;
                var _wizdata = {
                    name: options.sendEmail,
                    steps: [
                        { name: options.emailEditor, url: "/communicate/email/" + _templateID + "/" + _emailID + "/editor" },
                        { name: options.sendEmail, url: "/communicate/email/" + _emailID + "?isstepprocess=true&ispartner=" + _isPartner }
                    ]
                };
                var _wizard = new wizard(_wizdata);
                _wizard.show();

            }
            else if (email.scheduledon != null && email.senton == null)//SCHEDULED
            {
                var views = [];
                var _emailID = email.id;
                var _templateID = email.templateid;
                var _isPartner = email.ispartner;
                var _wizdata = {
                    name: options.sendEmail,
                    steps: [
                        { name: options.emailEditor, url: "/communicate/email/" + _templateID + "/editor" },
                        { name: options.sendEmail, url: "/communicate/email/" + _emailID + "?isstepprocess=true&ispartner=" + _isPartner, wizardclose: true }
                    ]
                };
                var _wizard = new wizard(_wizdata);
                _wizard.show(); 

                //modal.show({ title: "Compose Email <span class='label txt-color-white draft' id='lblWhatIsIt'>SCHEDULED</span>", views: views, buttons: "[Save]" });
            }
        },
        showEmailDirector: function (email, options) {
            var isEmailDirector = false;
            if (options.isEmailDirector != undefined)
                isEmailDirector = options.isEmailDirector;

            if (email === null) {
                var views = [
                   { icon: "database", name: options.info, url: "/communicate/email/0/" + getTimeStamp(),buttons:["save"], buttonaction: true }
                ];
                modal.show({ title: options.title_compose_sms + "<span class='label txt-color-white draft' id='lblWhatIsIt'>" + options.new + "</span>", views: views, locked: true, preventClose: true, subactions:[] });
            }
            else if (email.linkids) {
                var views = [

                   { icon: "database", name: options.info, url: "/communicate/newemail/0?linkids=" + email.linkids + "&issrepprocess=true&isSmartlist=" + email.isSmartlist + "&isContactcompany=" + email.isContactcompany,buttons:["save"], buttonaction: true }

                ];
                modal.show({ title: options.title_compose_sms + "<span class='label txt-color-white draft' id='lblWhatIsIt'>" + options.new + "</span>", views: views, locked: true, preventClose: true,subactions:[] });
            }
            else if (email.senton || email.status == 16) {
                var views = [];

                if (email.ispartner) {
                    views.push({ icon: "chart-bar", name: options.report, url: "/communicate/email/" + email.id + "/report/partner", iconprefix: "far" });
                }
                else {
                    views.push({ icon: "chart-bar", name: options.report, url: "/communicate/email/" + email.id + "/report?isEmailDirector=" + isEmailDirector, iconprefix: "far" });
                }
                
                views.push({ icon: "comments", name: options.message, url: "/communicate/email/" + email.id + "/directormessage?isEmailDirector=" + isEmailDirector, iconprefix: "far" });
                var title = options.title != null ? options.title : 'Sent Email ' + views[0].name;
                title = options.title != null ? options.title : 'Email Director ' + views[0].name;
                modal.show({ title: title, views: views, subactions: [] });
            }
            else if (email.scheduledon == null && email.senton == null) {
                var views = [];

                var _emailID = email.id;
                var _templateID = email.templateid;
                var _isPartner = email.ispartner;
                var _wizdata = {
                    name: options.sendEmail,
                    steps: [
                        { name: options.emailEditor, url: "/communicate/email/" + _templateID + "/" + _emailID + "/editor" },
                        { name: options.sendEmail, url: "/communicate/email/" + _emailID + "?isstepprocess=true&ispartner=" + _isPartner + "&isEmailDirector=" + isEmailDirector }
                    ]
                };
                var _wizard = new wizard(_wizdata);
                _wizard.show();

            }
            else if (email.scheduledon != null && email.senton == null)//SCHEDULED
            {
                var views = [];
                var _emailID = email.id;
                var _templateID = email.templateid;
                var _isPartner = email.ispartner;
                var _wizdata = {
                    name: options.sendEmail,
                    steps: [
                        { name: options.emailEditor, url: "/communicate/email/" + _templateID + "/editor" },
                        { name: options.sendEmail, url: "/communicate/email/" + _emailID + "?isstepprocess=true&ispartner=" + _isPartner +"&isEmailDirector=" + isEmailDirector, wizardclose: true }
                    ]
                };
                var _wizard = new wizard(_wizdata);
                _wizard.show(); 
            }
        },

        showEmailMessage: function (email) {
            var views = [
                { icon: "comments", name: options.message, url: "/communicate/email/" + email.id + "/message", iconprefix: "far" }
            ];
            modal.show({ title: 'Send Email Message', views: views });
        },
        editApprovalRejectedTemplate: function (template) {
            $.extend({
                ispartner: false
            })
            var _isPartner = false;
            var _wizdata = {
                name: template.sendEmail,
                steps: [
                    { name: template.emailEditor, url: "/communicate/email/" + template.templateid + "/editor" },
                    { name: template.sendEmail, url: "/communicate/email/" + template.emailid + "?isstepprocess=true&ispartner=" + _isPartner }
                ]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        setupDashboardAddRow: function (options) {
            var _wizardData = {
                name: 'Add New Row',
                steps: [
                    { name: 'INFO', url: "/dashboardv5/infosetting?rowid=" + options.rowID + "&pageid=" + options.reqID + "&profileid=" + options.profileid + "&persona=" + options.persona + "&personaoption=" + options.personaoption + "&isbackward=" +options.isbackward},
                    { name: 'STYLING', url: "/dashboardv5/rowsetting?rowid=" + options.rowID + "&pageid=" + options.reqID + "&profileid=" + options.profileid + "&persona=" + options.persona + "&personaoption=" + options.personaoption + "&iswizard=" + true },
                    { name: 'Add Widget', url: "/dashboardv5/addwidget?rowid=" + options.rowID + "&pageid=" + options.reqID + "&profileid=" + options.profileid + "&persona=" + options.persona + "&personaoption=" + options.personaoption }
                ]
            };
            var _wizard = new wizard(_wizardData);
            _wizard.show();
        },
        sendApprovedEmail: function (options) {
            var views = [
                { icon: "inbox", name: options.sendEmail, url: "/communicate/email/" + options._emailid + "?isstepprocess=true", buttonaction: true, buttons: ["finish"] }
            ];
            modal.show({ title: options.sendEmail, views: views});
        },
        setupDashboardRowStyle: function (options, callback) {
            var view = [
                { icon: "inbox", name: options.sendEmail, url: "/dashboardv5/rowsetting?pageid=" + options.reqID + "&rowid=" + options.rowID + "&profileid=" + options.profileid + "&persona=" + options.persona + "&personaoption=" + options.personaoption, buttonaction: true, buttons: ["save"] }
            ];
            modal.show({ title: options.title, views: view, callback: callback, locked: true, preventClose: true  });
        },
        setupDashboardRowTitleEdit: function (options, callback) {
            var view = [
                { icon: "inbox", name: "Edit Row Title", url: "/dashboardv5/rowtitle?pageid=" + options.reqID + "&rowid=" + options.rowID + "&profileid=" + options.profileid + "&persona=" + options.persona + "&personaoption=" + options.personaoption , buttonaction: true, buttons: ["save"] }
            ];
            modal.show({ title: options.title, views: view, callback: callback, locked: true, preventClose: true });
        },
        showAiUserPanel: function (options) {
            var views = [
                { icon: "inbox", name: "Preview", url: "/bridgeai/ask?tabid=" + options.tabid + "&ispreview=" + options.ispreview}
            ];
            const data = [
                'solutionid',
                'soltuiontypeid',
                'solutionname',
                'projecttypeid',
                'projectid',
                'userid',
                'organizationid',
                'accountid',
                'contactid',
                'hideactions'
            ].reduce((acc, key) => {
                if (options[key]) acc[key] = options[key];
                return acc;
            }, {});

            if (Object.keys(data).length) {
                const queryParams = new URLSearchParams(data).toString();
                views[0].url += `&${queryParams}`;
            }
            var title = "Preview";
            if (options.isaisprinkler)
                title = changeModalHeadersLogo();
            modal.show({ title: title, views: views, hideCloseButton: options.hideaction },function(){
                var previousModalTitle = $(".ai-sprinkler-view");
                if (previousModalTitle.length > 0) {
                    let titleContainer = previousModalTitle.closest('h4');
                    previousModalTitle.closest('a').remove();
                    if (titleContainer.length > 0)
                        titleContainer.html(titleContainer.html().replace('&gt;', ''));
                }
            });
        },
        showAiUserPanelNew: function (options) {
            var views = [
                { icon: "inbox", name: "Preview", url: "/bridgeai/ask?tabid=" + options.tabid + "&ispreview=" + options.ispreview + "&searchprompt=" + options.inputText }
            ];
            const data = [
                'solutionid',
                'soltuiontypeid',
                'solutionname',
                'projecttypeid',
                'projectid',
                'userid',
                'organizationid',
                'accountid',
                'contactid',
                'hideactions'
            ].reduce((acc, key) => {
                if (options[key]) acc[key] = options[key];
                return acc;
            }, {});

            if (Object.keys(data).length) {
                const queryParams = new URLSearchParams(data).toString();
                views[0].url += `&${queryParams}`;
            }
            var title = "Preview";
            if (options.isaisprinkler)
                title = changeModalHeadersLogo();
            modal.show({ title: title, views: views, hideCloseButton: options.hideaction }, function () {
                var previousModalTitle = $(".ai-sprinkler-view");
                if (previousModalTitle.length > 0) {
                    let titleContainer = previousModalTitle.closest('h4');
                    previousModalTitle.closest('a').remove();
                    if (titleContainer.length > 0)
                        titleContainer.html(titleContainer.html().replace('&gt;', ''));
                }
            });
        },
        showAidashboardsidepanel: function (options) {
            var views = [
                { icon: "inbox", name: "Preview", url: "/bridgeai/dashboardsidepanel" }
            ];

            var title = "Bridge AI";
            if (options.isaisprinkler)
                title = changeModalHeadersLogo();
            modal.show({ title: title, views: views, hideCloseButton: options.hideaction }, function () {
                var previousModalTitle = $(".ai-sprinkler-view");
                if (previousModalTitle.length > 0) {
                    let titleContainer = previousModalTitle.closest('h4');
                    previousModalTitle.closest('a').remove();
                    if (titleContainer.length > 0)
                        titleContainer.html(titleContainer.html().replace('&gt;', ''));
                }
            });
        },
        showAiRawData: function (options) {
            var views = [
                { icon: "inbox", name: "Preview", url: "/bridgeai/rawdata?chatid=" + options.chathistoryid }
            ];
            
            modal.show({ title: "Preview", views: views, hideCloseButton:options.hideaction },function(){
                var previousModalTitle = $(".ai-sprinkler-view");
                if (previousModalTitle.length > 0) {
                    let titleContainer = previousModalTitle.closest('h4');
                    previousModalTitle.closest('a').remove();
                    if (titleContainer.length > 0)
                        titleContainer.html(titleContainer.html().replace('&gt;', ''));
                }
            });
        },
        showAdminPanel: function(options, callback){
            var views = [
                { icon: "inbox", name: "Admin Panel", url: `/setup/aiprompt/configuration?isadminpanelmodal=${options.isadminpanelmodal}&selectedtab=${options.tabId}` }
            ];
            modal.show({ title: "Bridge AI", views: views, callback: callback, hideCloseButton: options.hideactions }, function () {
                var previousModalTitle = $(".ai-sprinkler-view");
                if (previousModalTitle.length > 0) {
                    let titleContainer = previousModalTitle.closest('h4');
                    previousModalTitle.closest('a').remove();
                    if (titleContainer.length > 0)
                        titleContainer.html(titleContainer.html().replace('&gt;', ''));
                }
            });
        },
        showWorkflowManager: function(options, callback){
            var views = [
                { icon: "inbox", name: "Admin Panel", url: `setup/bridgeai/workflow?flowid=${options.flowid}` }
            ];
            modal.show({ title: "Bridge AI", views: views, callback: callback, hideCloseButton: options.hideactions }, function () {
                var previousModalTitle = $(".ai-sprinkler-view");
                if (previousModalTitle.length > 0) {
                    let titleContainer = previousModalTitle.closest('h4');
                    previousModalTitle.closest('a').remove();
                    if (titleContainer.length > 0)
                        titleContainer.html(titleContainer.html().replace('&gt;', ''));
                }
            });
        },
        showMdfContactLists: function (callback, options) {
            var title = '';
            if (typeof options.mdfRequestId != 'undefined')
                var url = `/communicate/media/lookup/mdf?mdfRequestId=${options.mdfRequestId}&showImport=${options.showImport}`
            else
                var url = `/communicate/media/lookup/mdf?showImport=${options.showImport}`
            var views = [{ icon: "", name: options.info, url: url, buttons: ["save"]}];
                title = options.title_contacts;
            
            modal.show({ title: title, views: views, callback: callback });
        },
        showContactLists: function (ispartner, callback, options) {
            var title = '';
            var _showList = true;
            var singleSelect = false;
            var isEmailDirector = false;
            var senderList = false;
            if (options.showlist == false)
                _showList = false;
            if (options.singleselect == true)
                singleSelect = true;
            if (options.isEmailDirector == true)
                isEmailDirector = true;
            if (options.senderList == true)
                senderList = true;

            if(ispartner){
                var views = [{ icon: "user", name: 'Info', url: "/communicate/media/lookup/partner/" + _showList + "/" + singleSelect, buttons: ["select"], buttonaction: true }];
                title = options.title_users;
            }
            else
            {
                var views = [{ icon: "user", name: options.info, url: "/communicate/media/lookup/email/" + _showList + "/" + singleSelect + "/" + "?isEmailDirector=" + isEmailDirector + "&senderList=" + senderList, buttons: ["select"], buttonaction: true }];
                if (isEmailDirector)
                    title = options.title_Company;
                else
                    title = options.title_contacts;
            }
            modal.show({ title: title, views: views, callback: callback });
        },
        showUserLists: function (callback, options) {
            var title = '';
            var views = [{
                icon: "user", name: options.info, url: "/communicate/email/" + options.id + "/lookup/?isEmailDirector=true" , buttons: ["select"], buttonaction: true }];
            title = options.title_users;

            modal.show({ title: title, views: views, callback: callback });
        },
        showTestEmailWizard: function (options) {
            var wizardData = {
                name: 'Send EMAIL',
                steps: [
                    { name: 'Preview', url: "/communicate/email/" + options.mediatemplateid + "/editor/true/true" },
                    { name: 'Recipients', url: "/communicate/media/lookup/email/" + options.showlist + "/" + options.singleselect + "/" + options.mediatemplateid, lastStepName: "finish",wizardclose: true}
                ]
            };
            wizardData["preventClose"] = false;
            var _wizard = new wizard(wizardData);
            _wizard.show();
        },
        showEmailInMobile: function (email) {
            var timestamp = $.now();
            if (email === null) {
                var views = [
                    { icon: "database", name: 'Info', url: "/mobile/importtemplate", buttonaction: true, buttons: ["save"]}
                ];
                modal.show({ title: 'Compose Email <span class="label txt-color-white draft" id="lblWhatIsIt">NEW</span>', views: views,locked: true, preventClose: true });
            }
            else if (email.linkids) {
                var views = [
                    { icon: "database", name: 'Info', url: "/mobile/importtemplate/" + email.linkids + "/" + email.isSmartlist + "/" + email.isContactcompany, buttonaction: true, buttons: ["save"]}
                ];
                modal.show({ title: 'Compose Email <span class="label txt-color-white draft" id="lblWhatIsIt">NEW</span>', views: views,locked: true, preventClose: true });
            }
            else if (email.senton || email.status == 16) {
                var views = [];

                if (email.ispartner) {
                    views.push({ icon: "chart-bar", name: 'Report', url: "/communicate/email/" + email.id + "/report/partner", iconprefix: "far" });
                }
                else {
                    views.push({ icon: "chart-bar", name: 'Report', url: "/communicate/email/" + email.id + "/report", iconprefix: "far" });
                }
                views.push(
                    { icon: "comments", name: 'Message', url: "/communicate/email/" + email.id + "/message", iconprefix: "far"  },
                    { icon: "users", name: 'Recipients', url: "/communicate/email/" + email.id + "/receipients" },
                    { icon: "share", name: 'Opened', url: "/communicate/email/" + email.id + "/interest" },
                    { icon: "ban", name: 'Bounced', url: "/communicate/email/" + email.id + "/bounced" },
                   //{ icon: "minus-circle", name: "Unsubscribed",  url: "https://partner-marketing.bitdefender.com/communicate/email/" + id + "/unsubscribed"},
                    { icon: "external-link", name: 'Links', url: "/communicate/email/" + email.id + "/links" },
                    { icon: "reply", name: 'Unopened', url: "/communicate/email/" + email.id + "/unopened" },
                    { icon: "minus-circle", name: 'Unsubscribed', url: "/communicate/email/" + email.id + "/unsubscribed" }
                );
                var title = 'Sent Email > ' + views[0].name + ' (<b><i>' + email.name + '</i></b>)' + ' <span class="label txt-color-white draft" id="lblWhatIsIt">' + options.sent + '</span>';
                modal.show({ title: title, views: views });
            }
            else if (email.scheduledon == null && email.senton == null) {
                var views = [];
                if (email.ispartner)
                    views.push({ icon: "envelope", name: 'Info', url: "/communicate/email/" + email.id + "/partner", buttonaction: true, buttons: ["save"] });
                else
                    views.push({ icon: "envelope", name: 'Info', url: "/communicate/email/0/mobileeditor/" + email.id, buttonaction: true, buttons: ["save"]});
                modal.show({ title: 'Compose Email <span class="label txt-color-white draft" id="lblWhatIsIt">{$ajax_sms.DRAFT}</span>', views: views});
            }
            else if (email.scheduledon != null && email.senton == null)//SCHEDULED
            {
                var views = [];
                if (email.ispartner)
                    views.push({ icon: "envelope", name: 'Info', url: "/communicate/email/" + email.id + "/partner", buttonaction: true, buttons: ["save"] });
                else
                    views.push({ icon: "envelope", name: 'Info', url: "/communicate/email/0/mobileeditor/" + email.id, buttonaction: true, buttons: ["save"] });

                modal.show({ title: 'Compose Email <span class="label txt-color-white draft" id="lblWhatIsIt">{$ajax_sms.SCHEDULED}</span>', views: views });
            }
        },
        showPartnerEmail: function (linkids, issmartlis, isContactcompany, ispartner, isUser, options, contactListId = null) {
            modal.createNSendEmail(linkids, issmartlis, isContactcompany, ispartner, isUser, contactListId);
            return;
                var views = [
                    { icon: "envelope", name: options.info, url: "/communicate/email/0/partner?linkids=" + linkids + "&isSmartlist=" + issmartlis + "&isContactcompany=" + iscontactcompany +"&isuser=" +isUser, buttons: ["save"]}
                ];
                modal.show({ title: options.compose + "<span class='label txt-color-white draft' id='lblWhatIsIt'>" + options.new + "</span>", views: views });
        },
        showEmailReport: function (email,options) {
            var views = [
                   { icon: "chart-bar", name: options.report, url: "/communicate/email/" + email.id + "/report", iconprefix: "far" },
                { icon: "comments", name: options.message, url: "/communicate/email/" + email.id + "/message", iconprefix: "far"  },
                   { icon: "users", name: options.recipients, url: "/communicate/email/" + email.id + "/receipients" },
                   { icon: "share", name: options.opened, url: "/communicate/email/" + email.id + "/interest" },
                   { icon: "ban", name: options.bounced, url: "/communicate/email/" + email.id + "/bounced" },
                  //{ icon: "minus-circle", name: "Unsubscribed",  url: "https://partner-marketing.bitdefender.com/communicate/email/" + id + "/unsubscribed"},
                   { icon: "external-link", name: options.links, url: "/communicate/email/" + email.id + "/links" },
                   { icon: "reply", name: options.unopened, url: "/communicate/email/" + email.id + "/unopened" },
                   { icon: "minus-circle", name: options.unsubscribed, url: "/communicate/email/" + email.id + "/unsubscribed" }
            ];
            var title = 'Sent Email > ' + views[0].name + ' (<b><i>' + email.name + '</i></b>)' + ' <span class="label txt-color-white draft" id="lblWhatIsIt">' + options.sent + '</span>';
            modal.show({ title: title, views: views });
        },
        showEmailView: function (data) {
            if (data.canEmailSend)
                views = [{ icon: "view", name: 'View', url: "/communicate/email/" + data.id + "/view", buttons: ["send"] }];
            else
                views = [{ icon: "view", name: 'View', url: "/communicate/email/" + data.id + "/view" }];
            var title = "";
            if (data.name != undefined)
                title = 'Email > ' + views[0].name + ' (<b><i>' + data.name + '</i></b>)';
            else
                title = 'Email > ' + views[0].name + '<br>';
            modal.show({ title: title, views: views });
        },
        showEmailSend : function (option){
                 var views = [
                     { icon: "database", name: 'Info', url: "/communicate/email/0?emailtemplateid=" + option.id, buttons: ["save"] }
                ];
                 modal.show({ title: 'Send' +" - "+ option.name, views: views });
        },
        showPartnerEmailSend: function (option) {
            var views = [
                { icon: "database", name: 'Info', url: "/communicate/email?ispartner=false&isuser=false", buttons: ["save"] }
            ];
            modal.show({ title: option.name, views: views });
        },

        showEmailPartnerSend: function (option) {
            var extraParam = option["addclass"] == undefined ? "" : "&addclass=" + option["addclass"];
            var views = [];
            if (option.linkids != null && option.linkids != undefined && option.linkids != "") {
                views.push({ icon: "database", name: 'Info', url: "/communicate/email/0?emailtemplateid=" + option.id + "&ispartner=true" + "&isuser=" + option.isUserGrid + "&issmartlist=" + option.isSmartlist + "&linkids=" + option.linkids + extraParam , buttons:["finish"] });
            }
            else
                views.push({ icon: "database", name: 'Info', url: "/communicate/email/0?emailtemplateid=" + option.id + "&ispartner=true" + extraParam, buttons: ["finish"] });
            modal.show({ title: 'Send Email' + " - " + option.name, views: views });
        },
        showEmailPartnerSendStepWizard: function (data) {
            var inputStep = { name: 'input', url: "/editor/media/questionpicker/" + data.id, wizardclose: true };
            var dbAssetStep = { name: 'Database', url: "/editor/media/dbassetpicker/" + data.id + "/" + data.firstpage, wizardclose: true };
            var opportunityStep = { name: 'opportunity', url: "/editor/media/opportunitypicker/" + data.id + "/" + data.firstpage, wizardclose: true };
            var webinarStep = { name: 'Webinar', url: "/editor/media/webinarpicker/" + data.id, wizardclose: true };
            var steps = [];
            if (data.hasquestionnaire)
                steps.push(inputStep);
            if (data.usedatasource)
                steps.push(dbAssetStep);
            if (data.UseProjectSource)
                steps.push(opportunityStep);
            if (data.hasWebinar)
                steps.push(webinarStep);

            var extraParam = data["addclass"] == undefined ? "" : "&addclass=" + data["addclass"];

            var url = "";
            if (data.linkids != null && data.linkids != undefined && data.linkids != "")
                url = "/communicate/email/0?emailtemplateid=" + data.id + "&ispartner=true" + "&isuser=" + data.isUserGrid + "&issmartlist=" + data.isSmartlist + "&linkids=" + data.linkids + extraParam + "&isstepprocess=true";
            else
                url = "/communicate/email/0?emailtemplateid=" + data.id + "&ispartner=true" + extraParam + "&isstepprocess=true";

            var SendEmailStep = { icon: "database", name: 'Send Email', url: url, buttons: ["finish"] };
            steps.push(SendEmailStep);
            var _wizdata = {
                name: 'Customize Personalization Data',
                steps: steps
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();

        },
        ShowInternalPlaybookReport : function(option){
              var views = [
                  { icon: "envelope", name: 'Info', url: "/internalplaybookrecordreport/" + option.id }
                ];
                modal.show({ title: option.name, views: views });
        },
        showPrintRelatedAssets: function (id) {
            var views = [
                { icon: "file", name: 'Related Assets', url: "/relatedassets/" + id }
            ];
            modal.show({
                title: 'Related Assets', views: views });
        },
        ShowAssociatePBContacts: function (options, callback) {
            var templateID = options.templateid;
            var playbookName = options.name;
            var url = "/internalplaybook/contactassociation/" + templateID;
            if (options.stepid != null || options.stepid != undefined)
                url += "?stepid=" + options.stepid;
            var views = [
                { title: 'Add From Contacts', icon: "user", name: '{$ajax_persona_ngkf_channelpartner.AddContactsText}', url: url }
            ];
            modal.show({ title: 'Assign Tasks (' + playbookName + ')', views: views, callback: callback });
        },
        showPlaybookAssetObjectPreview: function (options) {
            var views = [{ icon: "file", name: 'Send Asset', url: "/sendassets/internalplaybooknewassets?linkids=" + options.contactID + "&isSmartlist=null&filterparam=" + options.filterParam + '&addcontactfilter=' + options.addContactFilter + '&assettypes=' + options.assetTypes + '&andoroutfilter=' + options.andOrOutFilter + '&filterids=' + options.filterIDs }]
            modal.show({ title: options.assetObjectTitle, views: views });
        },
        showPlaybookContacts: function (options, callback) {
            var title = options.title;
            var url = "/internalplaybook/" + options.id + "/contacts?stepid=" + options.stepid;
            if (options.name != null || options.name != undefined)
                title = options.title + '(<b><i>' + options.name + '</i></b>)';
            if (options.isStepWise != null || options.isStepWise != undefined)
                url += "&isstepwise=" + options.isStepWise;
            var views = [{ icon: "user", name: options.title, url: url, buttons: ["done"] }];
            modal.show({ title: title, views: views, callback: callback, locked: true, preventClose: true, hideCloseButton:true});
        },
        AddListsToPlaybookStep: function (options, callback) {
            var url = "/internalplaybook/addlists/" + options.templateid + "/" + options.stepid;
            if (options.stepdelay != null || options.stepdelay != undefined)
                url += "?stepdelay=" + options.stepdelay;
            var views = [
                { icon: "list", name: 'Recipient Lists', url: url, buttons: ["submit"] }
            ];
            modal.show({ title: 'Add From List', views: views, callback: callback });
        },
        showPlaybookPrintCampaign: function () {
            var _wizdata = {
                name: 'Add Print Campaign',
                steps: [
                    { name: 'Select Template', url: "/internalplaybook/printcampaign/templates" },
                    { name: 'Configure', url: "/internalplaybook/printcampaign/settings", wizardclose: true}
                ]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        editPlaybookPrintCampaign: function (noOfContacts, isPersonalized, currentAssetId, callback) {
            var url = "/internalplaybook/printcampaign/settings/" + noOfContacts + "/" + isPersonalized + "/" + currentAssetId;
            var views = [
                { icon: "list", name: 'Configure', url: url, buttons: ["save"] }
            ];
            modal.show({ title: 'Configure', views: views, callback: callback });
        },
        sendExternalMedia: function (options, callback) {
            var param = "";
            if (options.linkIDs != null)
                param = "&linkids=" + options.linkIDs;
            else if (options.contactListID != null)
                param = "&contactlistid=" + options.contactListID;
            var views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?assetID=0&isAssetEmail=true&isPlaybookAsset=true&templateid=" + options.templateID + "&stepassetID=" + options.assetID + param, buttons: ["finish"] }];
            modal.show({ title: 'Send External Media', views: views, callback: callback });
        },
        showPlaybookReports: function (options) {
            var url = "";
            if (!options.summaryReport) {
                url = "/internalplaybook/userreport/" + options.originalTemplateID;
            }
            else {
                url = "/internalplaybook/userreport/" + options.originalTemplateID + "?userid=" + options.userid;
            }
            var views = [{ icon: "user", name: options.name, url: url }];
            modal.show({ title: options.name, views: views });
        },
        showPlaybookContactLists: function (options, callback,closeCallback) {
            var url = "";
            var rangeURl = "";
            if (options.selectedRange)
                rangeURl = "&selectedrange=" + options.selectedRange + "&startdate=" + options.startDate + "&enddate=" + options.endDate;
            if (options.reporttype == '5') {
                var url = "/internalplaybook/contacts/" + options.templateid + "?index=" + options.index + "&format=" + options.format + "&reporttype=" + options.reporttype + "&dispositionid=" + options.dispositionid + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration + "&internalPlaybookID=" + options.internalPlaybookID;
            }
            else if (options.groupType == '18') {
                if (options.contacts == true)
                    var url = "/internalplaybook/contacts/" + options.templateid + "?reporttype=" + options.reporttype + "&playbookactivity=" + options.playbookactivity + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration + "&internalPlaybookID=" + options.internalPlaybookID;
                else if (options.call == true)  
                    var url = "/internalplaybook/contacts/" + options.templateid + "?index=" + options.index + "&format=" + options.format + "&reporttype=" + options.reporttype + rangeURl + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration + "&internalPlaybookID=" + options.internalPlaybookID;
                else
                    var url = "/internalplaybook/contacts/" + options.templateid + "?reporttype=" + options.reporttype + "&groupType=" + options.groupType;
            }
            else if (options.reporttype == '19') {
                var url = "/internalplaybook/contacts/" + options.templateid + "?reporttype=" + options.reporttype + "&playbookactivity=" + options.playbookactivity + rangeURl + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration + "&internalPlaybookID=" + options.internalPlaybookID;
            }
            else {
                if(options.index)
                    var url = "/internalplaybook/contacts/" + options.templateid + "?index=" + options.index + "&format=" + options.format + "&reporttype=" + options.reporttype + rangeURl + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration  + "&internalPlaybookID=" + options.internalPlaybookID;
                else
                    var url = "/internalplaybook/contacts/" + options.templateid + "?format=" + options.format + "&reporttype=" + options.reporttype + rangeURl + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration +  "&internalPlaybookID=" + options.internalPlaybookID;
            }

            if (options.selectedrange)
                url += `&selectedrange=${options.selectedrange}`; //append selectedRange if there is one.
            if (options.startdate)
                url += `&startdate=${options.startdate}`; //append startDate if there is one.
            if (options.enddate)
                url += `&enddate=${options.enddate}`; //append endDate if there is one.

            var views = [{ icon: "user", name: options.title, url: url }];
            modal.show({ title: options.title, views: views, callback: callback, closeCallback: closeCallback });
        },
        showPlaybookDataByInterestStatus: function (options, callback) {
            var url = `/salesdashboard/${options.templateid}?fetchaccounts=${options.fetchaccounts}&intereststatus=${options.intereststatus}`;
            if (options.companyid != undefined)
                url = `/salesdashboard/${options.templateid}?fetchaccounts=${options.fetchaccounts}&intereststatus=${options.intereststatus}&companyid=${options.companyid}`;
            var modalTitle = 'Total Contacts';
            if (options.modalHeader)
                modalTitle = options.modalHeader;
            if (options.isUserViewDashboard && options.todoType != undefined)
                url = `/salesdashboard/${options.templateid}?fetchaccounts=${options.fetchaccounts}&intereststatus=${options.intereststatus}&companyid=${options.companyid}&isuserviewdashboard=${options.isUserViewDashboard}&todotype=${options.todoType}&selectedrange=${options.selectedrange}`;
            var views = [{ icon: "user", name: modalTitle, url: url }];
            modal.show({ title: modalTitle, views: views, callback: callback });
        },
        showPlaybookContactBreakDownLists: function (options, callback) {
            if (options.selectedRange)
                var url = "/internalplaybook/contacts/" + options.templateid + "?format=" + options.format + "&reporttype=" + options.reporttype + "&hour=" + options.hour + "&weekday=" + options.weekday + "&selectedrange=" + options.selectedRange + "&startdate=" + options.startDate + "&enddate=" + options.endDate + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration + "&internalPlaybookID=" + options.internalPlaybookID;
            else
                var url = "/internalplaybook/contacts/" + options.templateid + "?format=" + options.format + "&reporttype=" + options.reporttype + "&hour=" + options.hour + "&weekday=" + options.weekday + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration + "&internalPlaybookID=" + options.internalPlaybookID;
            var views = [{ icon: "user", name: options.title, url: url }];
            modal.show({ title: options.title, views: views, callback: callback });
        },
        showPlaybookContactReport: function (options, callback) {
            var rangeURl = "";
            if (options.selectedRange)
                rangeURl = "&selectedrange=" + options.selectedRange + "&startdate=" + options.startDate + "&enddate=" + options.endDate;
            if (options.index != -1) {
                var url = "/internalplaybook/contactreport/" + options.templateid + "?index=" + options.index + "&format=" + options.format + "&reporttype=" + options.reporttype + "&contactid=" + options.contactid + "&type=" + options.type + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration + "&playbookuserid=" + options.playbookuserid + "&internalPlaybookID=" + options.internalPlaybookID + "&linktoid=" + options.linktoid + "&linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption;
            }
            else {
                var url = "/internalplaybook/contactreport/" + options.templateid + "?format=" + options.format + "&reporttype=" + options.reporttype + "&contactid=" + options.contactid + "&type=" + options.type + "&hour=" + options.hour + "&weekday=" + options.weekday + rangeURl + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration + "&playbookuserid=" + options.playbookuserid + "&internalPlaybookID=" + options.internalPlaybookID + "&linktoid=" + options.linktoid + "&linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption;
            }

            var views = [{ icon: "user", name: options.title, url: url }];
            modal.show({ title: options.title, views: views, callback: callback });
        },
        showPlaybookActivityBreakDown: function (options, callback, closeCallback) {
            var url = "";
            if (!options.summaryReport) {
                if (options.selectedRange)
                    url = "/internalplaybook/activitybreakdown/" + options.templateid + "/" + options.reporttype + "/" + options.format + "?selectedrange=" + options.selectedRange + "&startdate=" + options.startDate + "&enddate=" + options.endDate + "&usergroupid=" + options.userGroupID + "&grouptype=" + options.groupType + "&usergroupviewoption=" + options.userGroupViewOption;
                else
                    url = "/internalplaybook/activitybreakdown/" + options.templateid + "/" + options.reporttype + "/" + options.format;

            }
            else {
                url = "/internalplaybook/activitybreakdown/" + options.templateid + "/" + options.reporttype + "/" + options.format + "?linktoid=" + options.linkToID + "&linktype=" + options.linkType + "&viewoption=" + options.viewOption + "&orgviewoption=" + options.orgViewOption + "&groupviewoption=" + options.groupViewOption + "&summaryreport=" + options.summaryReport + "&selectedrange=" + options.selectedRange + "&startdate=" + options.startDate + "&enddate=" + options.endDate + "&usergroupid=" + options.userGroupID + "&grouptype=" + options.groupType + "&usergroupviewoption=" + options.userGroupViewOption;
            }
            var views = [{ icon: "user", name: options.name, url: url }];
            modal.show({ title: options.name, views: views, callback: callback, closeCallback: closeCallback });
        },
        showPlaybookEmailClickReport: function (options, callback) {
            if (options.index != -1) {
                var url = "/internalplaybook/emailclick/" + options.templateid + "?index=" + options.index + "&format=" + options.format + "&reporttype=" + options.reporttype + "&contactid=" + options.contactid + "&type=" + options.type + "&emailid=" + options.emailid;
            }
            else {
                var url = "/internalplaybook/emailclickbreakdown/" + options.templateid + "?format=" + options.format + "&reporttype=" + options.reporttype + "&contactid=" + options.contactid + "&type=" + options.type + "&hour=" + options.hour + "&weekday=" + options.weekday + "/&emailid=" + options.emailid;
            }

            var views = [{ icon: "user", name: options.title, url: url }];
            modal.show({ title: options.title, views: views, callback: callback });
        },
        showPlaybookUserLists: function (options, callback) {

            var url = "";
            if (options.reporttype == '19') {
                url = "/internalplaybook/users?templateid=" + options.templateid + "&reporttype=" + options.reporttype + "&linktoid=" + options.linkToID + "&linktype=" + options.linkType + "&viewoption=" + options.viewOption + "&orgviewoption=" + options.orgViewOption + "&groupviewoption=" + options.groupViewOption + "&playbookactivity=" + options.playbookactivity + "&minCallDuration=0&maxCallDuration=0" + "&usergroupid=" + options.userGroupID + "&grouptype=" + options.groupType + "&usergroupviewoption=" + options.userGroupViewOption;
            }
            else if (options.reporttype == '5') {
                url = "/internalplaybook/users?templateid=" + options.templateid + "&index=" + options.index + "&format=" + options.format + "&reporttype=" + options.reporttype + "&dispositionid=" + options.dispositionid + "&linktoid=" + options.linkToID + "&linktype=" + options.linkType + "&viewoption=" + options.viewOption + "&orgviewoption=" + options.orgViewOption + "&groupviewoption=" + options.groupViewOption + "&minCallDuration=-1&maxCallDuration=-1" + "&usergroupid=" + options.userGroupID + "&grouptype=" + options.groupType + "&usergroupviewoption=" + options.userGroupViewOption;
            }
            else {
                if (options.index != -1) { // -1 index checked has been added for graphs called from heatmap graph in which there is a no index value only weekdays and hours value has been send as parameter.
                    url = "/internalplaybook/users?templateid=" + options.templateid + "&index=" + options.index + "&format=" + options.format + "&reporttype=" + options.reporttype + "&linktoid=" + options.linkToID + "&linktype=" + options.linkType + "&viewoption=" + options.viewOption + "&orgviewoption=" + options.orgViewOption + "&groupviewoption=" + options.groupViewOption + "&minCallDuration=-1&maxCallDuration=-1" + "&usergroupid=" + options.userGroupID + "&grouptype=" + options.groupType + "&usergroupviewoption=" + options.userGroupViewOption;
                }
                else if (options.format) {
                    url = "/internalplaybook/users?templateid=" + options.templateid + "&format=" + options.format + "&reporttype=" + options.reporttype + "&linktoid=" + options.linkToID + "&linktype=" + options.linkType + "&viewoption=" + options.viewOption + "&orgviewoption=" + options.orgViewOption + "&groupviewoption=" + options.groupViewOption + "&hour=" + options.hour + "&weekday=" + options.weekday + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration + "&usergroupid=" + options.userGroupID + "&grouptype=" + options.groupType + "&usergroupviewoption=" + options.userGroupViewOption;
                }
                else if (options.hour != undefined && options.weekday != undefined) {
                    url = "/internalplaybook/users?templateid=" + options.templateid + "&reporttype=" + options.reporttype + "&linktoid=" + options.linkToID + "&linktype=" + options.linkType + "&viewoption=" + options.viewOption + "&orgviewoption=" + options.orgViewOption + "&groupviewoption=" + options.groupViewOption + "&hour=" + options.hour + "&weekday=" + options.weekday +  "&minCallDuration=-1&maxCallDuration=-1" + "&usergroupid=" + options.userGroupID + "&grouptype=" + options.groupType + "&usergroupviewoption=" + options.userGroupViewOption;

                }
                else {
                    url = "/internalplaybook/users?templateid=" + options.templateid + "&reporttype=" + options.reporttype + "&linktoid=" + options.linkToID + "&linktype=" + options.linkType + "&viewoption=" + options.viewOption + "&orgviewoption=" + options.orgViewOption + "&groupviewoption=" + options.groupViewOption +  "&minCallDuration=-1&maxCallDuration=-1" + "&usergroupid=" + options.userGroupID + "&grouptype=" + options.groupType + "&usergroupviewoption=" + options.userGroupViewOption;

                }
            }
            if (options.selectedrange)
                url += `&selectedrange=${options.selectedrange}`; //append selectedRange if there is one.
            if (options.startdate)
                url += `&startdate=${options.startdate}`; //append startDate if there is one.
            if (options.enddate)
                url += `&enddate=${options.enddate}`; //append endDate if there is one.
            var views = [{ icon: "user", name: options.title, url: url }];
            modal.show({ title: options.title, views: views, callback: callback });
        },
        showPlaybookListReport: function (options) {
            var url = "";
            if (options.reporttype == '19') {
                url = "/internalplaybook/playbooklist?templateid=" + options.templateid + "&reporttype=" + options.reporttype + "&userid=" + options.userid + "&playbookactivity=" + options.playbookactivity + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration;
            }
            else if (options.reporttype == '5') {
                url = "/internalplaybook/playbooklist?templateid=" + options.templateid + "&index=" + options.index + "&format=" + options.format + "&reporttype=" + options.reporttype + "&dispositionid=" + options.dispositionid + "&userid=" + options.userid + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration;
            }
            else {
                if (options.index != -1) { // -1 index checked has been added for graphs called from heatmap graph in which there is a no index value only weekdays and hours value has been send as parameter.
                    url = "/internalplaybook/playbooklist?templateid=" + options.templateid + "&index=" + options.index + "&format=" + options.format + "&reporttype=" + options.reporttype + "&userid=" + options.userid + "&selectedrange=" + options.selectedRange + "&startdate=" + options.startDate + "&enddate=" + options.endDate + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration;
                }
                else if (options.format && options.format != 0) {
                    url = "/internalplaybook/playbooklist?templateid=" + options.templateid + "&format=" + options.format + "&reporttype=" + options.reporttype + "&userid=" + options.userid + "&hour=" + options.hour + "&weekday=" + options.weekday + "&selectedrange=" + options.selectedRange + "&startdate=" + options.startDate + "&enddate=" + options.endDate + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration;
                }
                else {
                    url = "/internalplaybook/playbooklist?templateid=" + options.templateid + "&reporttype=" + options.reporttype + "&userid=" + options.userid + "&selectedrange=" + options.selectedRange + "&startdate=" + options.startDate + "&enddate=" + options.endDate + "&minCallDuration=" + options.minCallDuration + "&maxCallDuration=" + options.maxCallDuration;
                }
            }

            if (options.selectedrange)
                url += `&selectedrange=${options.selectedrange}`; //append selectedRange if there is one.
            if (options.startdate)
                url += `&startdate=${options.startdate}`; //append startDate if there is one.
            if (options.enddate)
                url += `&enddate=${options.enddate}`; //append endDate if there is one.

            var views = [{ icon: "user", name: options.title, url: url }];
            modal.show({ title: options.title, views: views });
        },
        showPlaybookSummaryUserLists: function (options, callback) {
            var url = "/reports/playbookusers?templateid=" + options.templateid + "&linktoid=" + options.linkToID + "&linktype=" + options.linkType + "&viewoption=" + options.viewOption + "&orgviewoption=" + options.orgViewOption + "&groupviewoption=" + options.groupViewOption + "&activitytype=" + options.activityType + "&usergroupid=" + options.userGroupID + "&grouptype=" + options.groupType + "&usergroupviewoption=" + options.userGroupViewOption
            var views = [{ icon: "user", name: options.title, url: url }];
            if (options.selectedrange)
                views[0].url += `&selectedrange=${options.selectedrange}`; //append selectedRange if there is one.
            if (options.startdate)
                views[0].url += `&startdate=${options.startdate}`; //append startDate if there is one.
            if (options.enddate)
                views[0].url += `&enddate=${options.enddate}`; //append endDate if there is one.
            modal.show({ title: options.title, views: views, callback: callback });
        },
        showPlaybookGrid: function (options, callback) {
            var url = "/widgets/custom/salesrepplaybookwidgetcontactgrid/" + options.templateid +"?playbookactivity=" + options.playbookactivity
                //+ "& linktoid=" + options.linkToID + " & linktype=" + options.linkType + " & viewoption=" + options.viewOption + " & orgviewoption=" + options.orgViewOption + " & groupviewoption=" + options.groupViewOption + " & activitytype=" + options.activityType
            var views = [{ icon: "user", name: options.title, url: url }];
            modal.show({ title: options.title, views: views, callback: callback });
        },
        showEmailStats: function (email, options) {
            email = $.extend({
                link: false,
                unopen: false,
                unsub: false,
                bounce: false,
                receipients: false,
                open: false,
                message: false,
                ispartner: false,
                spam : false
            }, email)
            var isEmailDirector = false;
            if (email.isEmailDirector)
                isEmailDirector = true;
            var views = [];
            if (!isEmailDirector) {
                views.push({
                    icon: "chart-bar", name: 'Report', url: "/communicate/email/" + email.id + "/report?currentuser=false&ispartner=" + email.ispartner , iconprefix: "far" });
            if (email.message)
                views.unshift({ icon: "comments", name: 'Message', url: "/communicate/email/" + email.id + "/message?currentuser=false", iconprefix: "far"  });
            else
                views.push({ icon: "comments", name: 'Message', url: "/communicate/email/" + email.id + "/message?currentuser=false", iconprefix: "far"  });
            if (email.receipients)
                views.unshift({ icon: "users", name: 'Recipients', url: "/communicate/email/" + email.id + "/receipients?currentuser=false&ispartner=" + email.ispartner });
            else 
                views.push({ icon: "users", name: 'Recipients', url: "/communicate/email/" + email.id + "/receipients?currentuser=false&ispartner=" + email.ispartner });
            if (email.open)
                views.unshift({ icon: "share", name: 'Opened', url: "/communicate/email/" + email.id + "/interest?currentuser=false&ispartner=" + email.ispartner });
            else
                views.push({ icon: "share", name: 'Opened', url: "/communicate/email/" + email.id + "/interest?currentuser=false&ispartner=" + email.ispartner });
            if (email.bounce)
                views.unshift({ icon: "ban", name: 'Bounced', url: "/communicate/email/" + email.id + "/bounced?currentuser=false" });
            else
                views.push({ icon: "ban", name: 'Bounced', url: "/communicate/email/" + email.id + "/bounced?currentuser=false" });
            if (email.link)
                views.unshift({ icon: "external-link", name: 'Links', url: "/communicate/email/" + email.id + "/links?currentuser=false&ispartner=" + email.ispartner });
            else
                views.push({ icon: "external-link", name: 'Links', url: "/communicate/email/" + email.id + "/links?currentuser=false&ispartner=" + email.ispartner });
            if (email.unopen)
                views.unshift({ icon: "reply", name: 'Unopened', url: "/communicate/email/" + email.id + "/unopened?currentuser=false&ispartner=" + email.ispartner });
            else
                views.push({ icon: "reply", name: 'Unopened', url: "/communicate/email/" + email.id + "/unopened?currentuser=false&ispartner=" + email.ispartner });
            if (email.unsub)
                views.unshift({ icon: "minus-circle", name: 'Unsubscribed', url: "/communicate/email/" + email.id + "/unsubscribed?currentuser=false" });
            else
                views.push({ icon: "minus-circle", name: 'Unsubscribed', url: "/communicate/email/" + email.id + "/unsubscribed?currentuser=false" });
            if (email.spam)
                views.unshift({ icon: "user-times", name: 'Spam Complaints', url: "/communicate/email/" + email.id + "/spam?currentuser=false" });
            else
                views.push({ icon: "user-times", name: 'Spam Complaints', url: "/communicate/email/" + email.id + "/spam?currentuser=false" });

            }
            else
                views.push({
                    icon: "users", name: 'Users', url: "/communicate/email/" + email.id + "/users?isEmailDirector=" + isEmailDirector
                });
            var title = 'Email Report (<b><i>' + email.name + '</i></b>)';
            modal.show({ title: title, views: views, subactions:[] });
        },
        showFieldChooserForCustomizedUrl: function (type, options, isForCustomizedUrl, callback) {
            var views = [{ icon: "image", name: "", url: "/setup/fieldchooser/internalplaybook/" + type + "/" + isForCustomizedUrl, buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: options.addFields, views: views, callback: callback });
        },
        showFieldChooser: function (type, options, callback) {
            let hideImageFields = options.hideImageFields ?? false;
            let url = `/setup/fieldchooser/${type}?hideimagefields=${hideImageFields}`;
            if (options?.isCustomizedUrl)
                url += `&iscustomizedurl=${options.isCustomizedUrl}`;
            if (options?.isPlaybook)
                url += `&isplaybook=${options.isPlaybook}`;
            if (options?.isBanner)
                url += `&isbanner=${options.isBanner}`;

            var views = [{ icon: "image", name: "", url: url, buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: options.addFields, views: views, callback: callback });
        },
        showFieldChooserBlog: function (type, options, callback) {
            var isAnnouncement = false;
            if (options.isAnnouncement != undefined && options.isAnnouncement != null && options.isAnnouncement != false)
                isAnnouncement = true;
            var isSmartList = false;
            if (options.isSmartList != undefined && options.isSmartList != null)
                isSmartList = true;
            var views = [{ icon: "image", name: "", url: "/setup/fieldchooser/blog/" + type + "/" + options.isLink + "?isAnnouncement=" + isAnnouncement + "&isSmartList=" + isSmartList,/*buttons: ["save"],*/ iconprefix: "far" }];
            modal.show({ title: options.addFields, views: views, callback: callback });
        },
        showContactLookup: function (ispartner, callback) {
            if (ispartner) {
                var views = [{ icon: "user", name: options.info, url: "/communicate/lookup/partner/media", buttons: ["select"] }];
                var title = options.title_users;
            }
            else {
                var views = [{ icon: "user", name: options.info, url: "/communicate/media/lookup", buttons: ["select"] }];
                var title = options.title_contacts;
            }
            modal.show({ title: title, views: views, callback: callback });
        },
        showContactLookUpForUser: function (ispartner, callback, options) {
            if (ispartner) {
                var views = [{ icon: "user", name: options.info, url: "/communicate/lookup/partner/media", buttons: ["select"]}];
                var title = options.title_users;
            }
            else {
                var views = [{ icon: "user", name: options.info, url: "/communicate/media/lookup", buttons: ["select"] }];
                var title = options.title_contacts;
            }
            modal.show({ title: title, views: views, callback: callback });
        },
        showGalleryForEmail: function (callback) {
            var views = [{ icon: "image", name: '{$ajax_persona_dhalia_channelpartner.ImageGallery}', url: "/gallery/images?saveondblclick=true", buttons: ["insert"], iconprefix: "far"},          //saveondblclick added for #13196
                { icon: "file", name: 'Document Gallery', url: "/gallery/documents", buttons: ["insert"]}];
            modal.show({ title: 'Select Attachment', views: views, callback: callback });
        },
        showContactStats: function (id) {
            var views = [{ icon: "chart-bar", name: 'Report', url: "/connections/contacts/stats/" + id + "/true", iconprefix: "far" }];
            modal.show({ title: 'Contact Stats', views: views });
        },
        showEmailOpened: function (id) {
            var views = [
                   { icon: "share", name: 'Opened', url: "/communicate/email/" + id + "/interest" },
                { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message", iconprefix: "far"  },
                   { icon: "chart-bar", name: 'Report', url: "/communicate/email/" + id + "/report" , iconprefix: "far"},
                   { icon: "users", name: 'Recipients', url: "/communicate/email/" + id + "/receipients" },
                   { icon: "ban", name: 'Bounced', url: "/communicate/email/" + id + "/bounced" },
                   { icon: "external-link", name: 'Links', url: "/communicate/email/" + id + "/links" },
                   { icon: "minus-circle", name: 'Unsubscribed', url: "/communicate/email/" + id + "/unsubscribed" },
                   { icon: "reply", name: 'Unopened', url: "/communicate/email/" + id + "/unopened" },
                   { icon: "user-times", name: 'Spam Complaints', url: "/communicate/email/" + id + "/spam" }
            ];
            modal.show({ title: views[0].name, views: views });
        },
        showEmailDelivered: function (id) {
            var views = [
                   { icon: "users", name: 'Recipients', url: "/communicate/email/" + id + "/receipients" },
                   { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message", iconprefix: "far"  },
                   { icon: "chart-bar", name: 'Report', url: "/communicate/email/" + id + "/report", iconprefix: "far" },
                   { icon: "share", name: 'Opened', url: "/communicate/email/" + id + "/interest" },
                   { icon: "ban", name: 'Bounced', url: "/communicate/email/" + id + "/bounced" },
                   { icon: "external-link", name: 'Links', url: "/communicate/email/" + id + "/links" },
                   { icon: "minus-circle", name: 'Unsubscribed', url: "/communicate/email/" + id + "/unsubscribed" },
                   { icon: "reply", name: 'Unopened', url: "/communicate/email/" + id + "/unopened" },
                   { icon: "user-times", name: 'Spam Complaints', url: "/communicate/email/" + id + "/spam" }
            ];
            modal.show({ title: views[0].name, views: views });
        },
        showEmailClicked: function (id,isPartner) {
            var views = [
                   { icon: "external-link", name: 'Links', url: "/communicate/email/" + id + "/links" + "?ispartner=" + isPartner },
                { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message", iconprefix: "far"  },
                   { icon: "chart-bar", name: 'Report', url: "/communicate/email/" + id + "/report", iconprefix: "far" },
                   { icon: "users", name: 'Recipients', url: "/communicate/email/" + id + "/receipients" },
                   { icon: "share", name: 'Opened', url: "/communicate/email/" + id + "/interest" },
                   { icon: "ban", name: 'Bounced', url: "/communicate/email/" + id + "/bounced" },
                   { icon: "minus-circle", name: 'Unsubscribed', url: "/communicate/email/" + id + "/unsubscribed" },
                   { icon: "reply", name: 'Unopened', url: "/communicate/email/" + id + "/unopened" },
                   { icon: "user-times", name: 'Spam Complaints', url: "/communicate/email/" + id + "/spam" }
            ];
            modal.show({ title: "" + views[0].name +"", views: views });
        },
        showEmailBounced: function (id,isUserDrip) {
            var views = [
                { icon: "ban", name: 'Bounced', url: "/communicate/email/" + id + "/bounced" + "?isuserdrip=" + isUserDrip },
                { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message", iconprefix: "far"  },
                   { icon: "chart-bar", name: 'Report', url: "/communicate/email/" + id + "/report", iconprefix: "far" },
                   { icon: "users", name: 'Recipients', url: "/communicate/email/" + id + "/receipients" },
                   { icon: "share", name: 'Opened', url: "/communicate/email/" + id + "/interest" },
                   { icon: "external-link", name: 'Links', url: "/communicate/email/" + id + "/links" },
                   { icon: "minus-circle", name: 'Unsubscribed', url: "/communicate/email/" + id + "/unsubscribed" },
                   { icon: "reply", name: 'Unopened', url: "/communicate/email/" + id + "/unopened" }
            ];
            modal.show({ title: views[0].name, views: views });
        },
        showEmailUnsubscribed: function (id) {
            var views = [
                { icon: "minus-circle", name: 'Unsubscribed', url: "/communicate/email/" + id + "/unsubscribed" },
                { icon: "share", name: 'Opened', url: "/communicate/email/" + id + "/interest" },
                { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message", iconprefix: "far"  },
                { icon: "chart-bar", name: 'Report', url: "/communicate/email/" + id + "/report", iconprefix: "far" },
                { icon: "users", name: 'Recipients', url: "/communicate/email/" + id + "/receipients" },
                { icon: "ban", name: 'Bounced', url: "/communicate/email/" + id + "/bounced" },
                { icon: "external-link", name: 'Links', url: "/communicate/email/" + id + "/links" },
                { icon: "reply", name: 'Unopened', url: "/communicate/email/" + id + "/unopened" },
                { icon: "user-times", name: 'Spam Complaints', url: "/communicate/email/" + id + "/spam" }
            ];
            modal.show({ title: 'Activity > ' + views[0].name +'', views: views });
        },
        showEmailUnopened: function (id) {
            
            var views = [
                { icon: "reply", name: 'Unopened', url: "/communicate/email/" + id + "/unopened" },
                { icon: "minus-circle", name: 'Unsubscribed', url: "/communicate/email/" + id + "/unsubscribed" },
                { icon: "share", name: 'Opened', url: "/communicate/email/" + id + "/interest" },
                { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message", iconprefix: "far" },
                { icon: "chart-bar", name: 'Report', url: "/communicate/email/" + id + "/report", iconprefix: "far"},
                { icon: "users", name: 'Recipients', url: "/communicate/email/" + id + "/receipients" },
                { icon: "ban", name: 'Bounced', url: "/communicate/email/" + id + "/bounced" },
                { icon: "external-link", name: 'Links', url: "/communicate/email/" + id + "/links" },
                { icon: "user-times", name: 'Spam Complaints', url: "/communicate/email/" + id + "/spam" }
            ];
            modal.show({ title: views[0].name, views: views });
        },
        showEmailSpam: function (id, emailname) {
            var views = [
                { icon: "user-times", name: 'Spam Complaints', url: "/communicate/email/" + id + "/spam" },
                { icon: "minus-circle", name: 'Unsubscribed', url: "/communicate/email/" + id + "/unsubscribed" },
                { icon: "share", name: 'Opened', url: "/communicate/email/" + id + "/interest" },
                { icon: "reply", name: 'Unopened', url: "/communicate/email/" + id + "/unopened" },
                { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message", iconprefix: "far"  },
                { icon: "chart-bar", name: 'Report', url: "/communicate/email/" + id + "/report", iconprefix: "far" },
                { icon: "users", name: 'Recipients', url: "/communicate/email/" + id + "/receipients" },
                { icon: "ban", name: 'Bounced', url: "/communicate/email/" + id + "/bounced" },
                { icon: "external-link", name: 'Links', url: "/communicate/email/" + id + "/links" }
            ];
            if (typeof (emailname) != "undefined" && emailname)
                modal.show({ title: views[0].name + " (" + emailname+")", views: views });
            else
                modal.show({ title: views[0].name, views: views });
        },
        showEmailUnopened: function (id) {
            var views = [
                { icon: "reply", name: 'Unopened', url: "/communicate/email/" + id + "/unopened" },
                { icon: "minus-circle", name: 'Unsubscribed', url: "/communicate/email/" + id + "/unsubscribed" },
                { icon: "share", name: 'Opened', url: "/communicate/email/" + id + "/interest" },
                { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message", iconprefix: "far" },
                { icon: "chart-bar", name: 'Report', url: "/communicate/email/" + id + "/report", iconprefix: "far" },
                { icon: "users", name: 'Recipients', url: "/communicate/email/" + id + "/receipients" },
                { icon: "ban", name: 'Bounced', url: "/communicate/email/" + id + "/bounced" },
                { icon: "external-link", name: 'Links', url: "/communicate/email/" + id + "/links" },
                { icon: "user-times", name: 'Spam Complaints', url: "/communicate/email/" + id + "/spam" }
            ];
            modal.show({ title: views[0].name, views: views });
        },
        showEmailDirectorOpened: function (id,options) {
            var isEmailDirector = false;
            if (options.isemaildirector)
                isEmailDirector = true;
            var views = [
                { icon: "share", name: 'Opened', url: "/communicate/email/" + id + "/interest?currentuser=false&isemaildirector="+isEmailDirector},
                { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message?isEmailDirector=" + isEmailDirector, iconprefix: "far" },
            ];
            
            modal.show({ title: views[0].name, views: views });
        },
        showEmailDirectorDelivered: function (id, options) {
            var isEmailDirector = false;
            if (options.isemaildirector)
                isEmailDirector = true;
            if (isEmailDirector) {
                var views = [
                    { icon: "users", name: 'Recipients', url: "/communicate/email/" + id + "/receipients?isemaildirector=" +isEmailDirector+"&currentuser=false"},
                    { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message?isEmailDirector=" + isEmailDirector, iconprefix: "far" },
                ];
            }
            modal.show({ title: views[0].name, views: views });
        },
        showUsers: function (id, options) {
            var isEmailDirector = false;
            if (options.isEmailDirector != undefined || options.isEmailDirector == true) {
                isEmailDirector = true;
            }
            var views = [
                { icon: "users", name: 'Users', url: "/communicate/email/" + id + "/users?isEmailDirector=" + isEmailDirector},
            ];
            modal.show({ title: title, views: views });
        },
        showEmailDirectorClicked: function (id, isPartner,options) {
            var isEmailDirector = false;
            if (options.isemaildirector)
                isEmailDirector = true;
            var views = [
                    { icon: "external-link", name: 'Links', url: "/communicate/email/" + id + "/links" + "?ispartner=" + isPartner},
                    { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message?isEmailDirector=" + isEmailDirector, iconprefix: "far" },
                ];
            modal.show({ title: "" + views[0].name +"", views: views });
        },
        showEmailDirectorBounced: function (id, isUserDrip, options) {
            var isEmailDirector = false;
            if (options.isemaildirector)
                isEmailDirector = true;
            if (isEmailDirector) {
                var views = [
                    { icon: "ban", name: 'Bounced', url: "/communicate/email/" + id + "/bounced" + "?isuserdrip=" + isUserDrip+"&currentuser=false" },
                    { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message?isEmailDirector=" + isEmailDirector, iconprefix: "far" },
                ];
            }
            modal.show({ title: views[0].name, views: views });
        },
        showEmailDirectorUnsubscribed: function (id, options) {
            var isEmailDirector = false;
            if (options.isemaildirector)
                isEmailDirector = true;
            if (options.currentuser)
                currentUser = true;
            var views = [
                    { icon: "minus-circle", name: 'Unsubscribed', url: "/communicate/email/" + id + "/unsubscribed?currentuser=true"},
                    { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message?isEmailDirector=" + isEmailDirector, iconprefix: "far" },
                ];
            modal.show({ title: 'Activity > ' + views[0].name +'', views: views });
        },
        showEmailDirectorSpam: function (id, emailname,options) {
            var isEmailDirector = false;
            if (options.isemaildirector)
                isEmailDirector = true;
            var views = [
                    { icon: "user-times", name: 'Spam Complaints', url: "/communicate/email/" + id + "/spam"},
                    { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message?isEmailDirector=" + isEmailDirector, iconprefix: "far" },
                ];
            
            if (typeof (emailname) != "undefined" && emailname)
                modal.show({ title: views[0].name + " (" + emailname+")", views: views });
            else
                modal.show({ title: views[0].name, views: views });
        },
        showEmailDirectorUnopened: function (id,options) {
            var isEmailDirector = false;
            if (options.isemaildirector)
                isEmailDirector = true;
            var views = [
                { icon: "reply", name: 'Unopened', url: "/communicate/email/" + id + "/unopened"},
                { icon: "comments", name: 'Message', url: "/communicate/email/" + id + "/message?isEmailDirector=" + isEmailDirector, iconprefix: "far" },
            ];
            modal.show({ title: views[0].name, views: views });
        },
        showEmailLinks: function (emailid, id, flag,ispartner) {
            var views = [
                { icon: "chart-bar", name: 'Report', url: "/communicate/email/links/" + emailid + "/" + id + "/" + flag + "?ispartner=" + ispartner, iconprefix: "far" }
            ];

            var title = ispartner != true ? 'Link Contacts' : 'Link Users';
            modal.show({ title: title, views: views });
        },
        showPrint: function (id, options) {
            $.extend({
                cansend: false,
                isMedia: false,
                isNeedApproval: false,
                canorderprint: false,
                canpublish: false,
                canedit: false,
                customize: false,
                linkids: null,
                isSmartlist: null,
                canPartnerSend: false,
                status: 1,
                ispartner: false,
                locked: false,
                closetab:false
            }, options);
            var views = [];
            if (!options.isPrintMedia)
                options.isPrintMedia = false;
            if (!options.isNeedApproval) {
                var showHideButtons;
                if ((options.restrictDownload === 'True' || options.restrictDownload === true)) {
                    if (options.cansend && options.canEmailSend) {
                        showHideButtons = ["send"];
                    } else {
                        showHideButtons = [];
                    }
                } else {
                    if (options.cansend && options.canEmailSend) {
                        showHideButtons = hideMobileApps === true
                            ? ["highdownload", "lowdownload", "send"]
                            : ["highdownload", "lowdownload", "mobiledownload", "send"];
                    } else {
                        showHideButtons = hideMobileApps === true
                            ? ["highdownload", "lowdownload"]
                            : ["highdownload", "lowdownload", "mobiledownload"];
                    }
                }
                if (!options.isApproved) {
                    if (options.customize) {
                        if (options.isMedia && !options.canprintskipeditor || options.issiteorsuperadmin) {
                            if (options.canedit) views.push({ icon: "edit", name: 'Customize', url: "/collateral/pdf/" + id + "/editor?isprintmedia=" + options.isPrintMedia });
                        }
                        views.push({ icon: "search", name: 'View', url: "/collateral/pdf/" + id + "/view?isprintmedia=" + options.isPrintMedia });
                    }
                    else {
                        views.push({ icon: "search", name: 'View', url: "/collateral/pdf/" + id + "/view?isprintmedia=" + options.isPrintMedia, buttons: showHideButtons });
                        if (options.isMedia && !options.canprintskipeditor || options.issiteorsuperadmin) {
                            if (options.canedit) views.push({ icon: "edit", name: 'Customize', url: "/collateral/pdf/" + id + "/editor?isprintmedia=" + options.isPrintMedia, buttonaction: true});
                        }
                    }
                }
                else
                    views.push({ icon: "search", name: 'View', url: "/collateral/pdf/" + id + "/view?isprintmedia=" + options.isPrintMedia, buttons: showHideButtons });

                if (options.output)///if it is media then only add info page
                {
                    views.push({ icon: "info-circle", name: 'Info', url: "/collateral/pdf/" + id + "/info", buttons: ["save"] });
                }
                else {
                    if (options.canShare)
                        views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/video/permissions/" + id + "/" + 100 + "/" + id, buttons: ["save"] });
                }
                if (options.canEmailSend) {
                    if (options.status == 1) {
                        if (options.linkids != null) {      //print view 
                            if(options.canSend)
                                views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist + "&customsendmodal=true&hideimportcustomize=true",buttons:["finish"]});
                            if (options.canPartnerSend && options.canSend)
                                views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist + "&ispartner=" + true + "&customsendmodal=true&hideimportcustomize=true", buttons: ["finish"]});
                        }
                        else {
                            if (options.canSend)
                                views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&customsendmodal=true&hideimportcustomize=true", buttons: ["finish"] });
                            if (options.canPartnerSend && options.canSend)
                                views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&ispartner=" + true + "&customsendmodal=true&hideimportcustomize=true" , buttons: ["finish"]});
                        }
                    }
                    else {
                        if (options.linkids != null)
                            views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist + "&ispartner=" + true + "&customsendmodal=true&hideimportcustomize=true", buttons: ["finish"]});
                        else
                            views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&ispartner=" + true + "&customsendmodal=true&hideimportcustomize=true", buttons: ["finish"]});
                    }
                }
                if (options.canpublish) views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/true/" + id , buttons: ["publish"]});
                if (options.canorderprint) views.push({ icon: "print", name: "Vendor", url: "/collateral/pdf/" + id + "/order",buttons: ["send"] });
                
                if (options.hasquestionnaire)
                    views.push({ icon: "question-circle", name: 'Input', url: "/collateral/pdf/" + id + "/questions", buttons: ["save"] });
                
                if (options.hasEbookAccess)
                    views.push({ icon: "book-spells", name: 'Ebook', url: "/collateral/ebook/" + id + "/directview"});
            }
            else {
                views.push({ icon: "search", name: 'View', url: "/collateral/pdf/" + id + "/view?isprintmedia=" + options.isPrintMedia });
                if (options.canedit && !options.canprintskipeditor || options.issiteorsuperadmin) views.push({ icon: "edit", name: 'Customize', url: "/collateral/pdf/" + id + "/editor?isprintmedia=" + options.isPrintMedia });
                if (options.cansend) views.push({ icon: "envelope", name: 'Send for Approval', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true",buttons:["finish"] });
            }
            var title = "";
            if (options.name != undefined) {
                title = 'Print > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            }
            else
                title = 'Print > ' + views[0].name + '<br>';
            modal.show({ title: title, views: views, locked: true, preventClose: true});
            var $modalHeader = $(".modal-header-left");

            if (options.startdate != null || options.enddate != null) {
                $modalHeader.css("display", "block");
                $modalHeader.find(".created").html("");
                $modalHeader.find(".expired").html("");

                if(options.startdate != null)
                    $modalHeader.find(".created").html("<span>Valid From </span><span>" + shortDateWithoutTime(options.startdate) + "</span>");

                if (options.enddate != null)
                    $modalHeader.find(".expired").html("<span>Valid To </span><span>" + shortDateWithoutTime(options.enddate) + "</span>");
            }
            else
                $modalHeader.css("display", "none");
        },

        showPlaybookPrint: function (id, options, callback) {
            var isTrueSet = (options.issend == 'true');
            var showHideButtons;
            if (typeof (options.cansendemail) != 'undefined' && typeof (options.cansendprint) != 'undefined' && (!options.cansendemail || !options.cansendprint))
                isTrueSet = false;
            if (options.restrictDownload) {
                showHideButtons = isTrueSet ? ["send"] : [];
            } else {
                showHideButtons = ["highdownload", "lowdownload"];
                if (!hideMobileApps) {
                    showHideButtons.push("mobiledownload");
                }
                if (isTrueSet) {
                    showHideButtons.push("send");
                }
            }
            var views = [
                { icon: "search", name: 'View', url: "/collateral/pdf/" + id + "/view/" + options.originalTemplateId + "?assetType=" + options.assetType, buttons: showHideButtons },
                { icon: "share-alt", name: 'Sharing', url: `/setup/sharing/video/permissions/${options.originalTemplateId}/100/${id}`, buttons: ["save"] },
                {
                    icon: "envelope", name: 'Send Email', url: `/communicate/email/0?assetid=${id}&isAssetEmail=true&customsendmodal=true&hideimportcustomize=true&playbookid=${options.originalTemplateId}&assetType=${options.assetType}&isplaybookasset=true`, buttons: ["finish"] },
                {
                    icon: "user-plus", name: 'Send To Users', url: `/communicate/email/0?assetid=${id}&isAssetEmail=true&ispartner=false&customsendmodal=true&hideimportcustomize=true&playbookid=${options.originalTemplateId}&assetType=${options.assetType}&isplaybookasset=true`, buttons: ["finish"] },
                { icon: "globe", name: 'Social Share', url: `/setup/publish/media/true/${id}/${options.originalTemplateId}`, buttons: ["publish"] },
                //{ icon: "print", name: "Vendor", url: "/collateral/pdf/" + id + "/order", buttons: ["send"] },
                //{ icon: "map", name: 'Ebook', url: "/collateral/ebook/" + id + "/directview" },
            ];
            if (typeof (options.cansendemail) != 'undefined' && typeof (options.cansendprint) != 'undefined' && (!options.cansendemail || !options.cansendprint)) {
                views = [
                    { icon: "search", name: 'View', url: `/collateral/pdf/${id}/view/${options.originalTemplateId}?assetType=${options.assetType}`, buttons: showHideButtons },
                    { icon: "share-alt", name: 'Sharing', url: `/setup/sharing/video/permissions/${options.originalTemplateId}/100/${id}`, buttons: ["save"] },
                    { icon: "globe", name: 'Social Share', url: `/setup/publish/media/true/${id}/${options.originalTemplateId}`, buttons: ["publish"] },
                ];
            }
            var title = "";
            if (options.name != undefined) {
                title = 'Print > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            }
            else
                title = 'Print > ' + views[0].name + '<br>';
            modal.show({ title: title, views: views, locked: true, preventClose: true, callback: callback });
            var $modalHeader = $(".modal-header-left");

            if (options.startdate != null || options.enddate != null) {
                $modalHeader.css("display", "block");
                $modalHeader.find(".created").html("");
                $modalHeader.find(".expired").html("");
            }
            else
                $modalHeader.css("display", "none");
        },

        showDocument: function (data) {
            if (data.isSelectButton != undefined){
                var previewUrl = data.previewurl != undefined ? data.previewurl.replace("{0}", data.id) : "/collateral/pdf/document/" + data.id + "/view?isselectbutton=" + data.isSelectButton + "&singleselect=" + data.singleselect;
            }else{
              var previewUrl = data.previewurl != undefined ? data.previewurl.replace("{0}", data.id) : "/collateral/pdf/document/" + data.id + "/view";
            }
            if (data.canEmailSend && !data.isbridgeai && !data.isrestricted)  // For AI Preview document
                views = [{ icon: "info-circle", name: "Info", url: previewUrl, buttons: ["send"] }];
            else
                views = [{ icon: "info-circle", name: "Info", url: previewUrl }];

            if (data.isSelectButton != undefined && data.isSelectButton == true){

                buttons = ["backtogallery"];

                if (data.singleselect) {
                    buttons.push("usethisdocument");
                }
                if (data.canEmailSend && !data.isrestricted) {
                    buttons.push("send");
                }

                views = [{ icon: "info-circle", name: "Info", url: previewUrl, buttons: buttons }];
            }
            if(data.canedit){
                if (data.encryptedid != null && data.encryptedid != undefined) {
                    if (data.foldertype != undefined && data.foldertype != null)
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + data.encryptedid + "/edit/edit/" + getTimeStamp() + "/encrypt?issetup=" + data.isSetup + "&foldertype=" + data.foldertype + "&isbookmark=" + data.isbookmark + "&types=" + data.types, buttons: ["save", "cancel"] });
                    else
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + data.encryptedid + "/edit/edit/" + getTimeStamp() + "/encrypt?issetup=" + data.isSetup, buttons: ["save", "cancel"] });
                } else {
                    if (data.foldertype != undefined && data.foldertype != null)
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + data.id + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + data.isSetup + "&foldertype=" + data.foldertype + "&isbookmark=" + data.isbookmark + "&types=" + data.types, buttons: ["save", "cancel"] });
                    else
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + data.id + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + data.isSetup, buttons: ["save", "cancel"] });
                }
            }
            if (data.singleselect != true && data.singleselect != undefined) {
                if (data.isarchived == true) {
                    if (data.showPermission) {
                        views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/newversion/" + data.sharetype + "/" + data.id, buttons: ["save"] })
                    }
                    if (!data.isrestricted) {
                        if (data.canSendEmail) {
                            views.push({ icon: "envelope", name: "Send Email", url: "/communicate/email/0?templates=" + null + "&files=" + data.id + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                            views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?templates=" + null + "&files=" + data.id + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, buttons: ["finish"] });
                        }
                        views.push({ icon: "database", name: 'Data Room', url: "/collateral/datarooms/" + data.id + "/" + 2 })
                        if (data.hasversionaccess == true && data.hasversionaccess != undefined) {
                            views.push({ icon: "history", name: 'Versions', url: "/gallery/file/versions/" + data.types + "/" + data.id + "?issetup=" + data.isSetup + "&iswizard=" + data.iswizard })
                        }
                    }
                }
                if (data.rating) {
                    views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + data.id + "/" + 2 + "/rating/comment", iconprefix: "fas" });
                }
            }
            var title = "";
            if (data.name != undefined) 
                title = 'Document > ' + views[0].name + ' (<b><i>' + data.name + '</i></b>)';
            else
                title = 'Document > ' + views[0].name + '<br>';
            modal.show({ title: title  , views: views },function(){
                var previousModalTitle = $(".ai-sprinkler-view");
                if (previousModalTitle.length > 0) {
                    let titleContainer = previousModalTitle.closest('h4');
                    previousModalTitle.closest('a').remove();
                    if (titleContainer.length > 0)
                        titleContainer.html(titleContainer.html().replace('&gt;', ''));
                }
            });
        },

        showPlyabookVideo: function (data) {
            if (data.videotemplate != "undefined" && data.videotemplate != null && data.videotemplate !="") {
                views = [{ icon: "view", name: 'View', url: data.videotemplate }];
            }
            else {
                views = [{ icon: "view", name: 'View', url: "/collateral/video/" + data.id + "/view/" + data.originalTemplateId }];
            }
            var title = "";
            if (data.name != undefined)
                title = 'Videos > ' + views[0].name + ' (<b><i>' + data.name + '</i></b>)';
            else
                title = 'Videos > ' + views[0].name + '<br>';
            modal.show({ title: title, views: views });

        },

        showPlaybookDocument: function (data) {
            var showHideButtons = hideMobileApps == true ? ["send"] : ["send"];
            var isTrueSet = (data.issend === 'true');
            if (typeof (data.cansendemail) != 'undefined'  && !data.cansendemail)
                isTrueSet = false;
            if (isTrueSet == true) {
                views = [{ icon: "view", name: 'View', url: "/collateral/pdf/document/" + data.id + "/view/" + data.originalTemplateId, buttons: showHideButtons }];
            }
            else {
                views = [{ icon: "view", name: 'View', url: "/collateral/pdf/document/" + data.id + "/view/" + data.originalTemplateId }];
            }
            var title = "";
            if (data.name != undefined)
                title = 'Document > ' + views[0].name + ' (<b><i>' + data.name + '</i></b>)';
            else
                title = 'Document > ' + views[0].name + '<br>';
            modal.show({ title: title, views: views });
        },
        showPlaybookPresentationPreview: function (id, options) {
            var isTrueSet = (options.issend == 'true');
            if ((typeof (options.cansendemail) != 'undefined' && !options.cansendemail) || (typeof (options.cansendpowerpoint) != 'undefined' && !options.cansendpowerpoint)) 
                    isTrueSet = false;
            if (isTrueSet) {
                views = [{ icon: "view", name: "View", url: "/collateral/presentation/" + id + "/view/" + options.originalTemplateId, buttons: ["send"] }];
            }
            else {
                views = [{ icon: "view", name: "View", url: "/collateral/presentation/" + id + "/view/" + options.originalTemplateId }];
            }
            var title = "";
            if (options.name != undefined)
                title = 'Presentations > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            else
                title = 'Presentations > ' + views[0].name + '';
            modal.show({ title: title, views: views });
        },

        showVideo: function (data) {
            var level = data.EnumsShareFlagsShareValue;
            var flags = data.EnumsShareFlagsSendValue;
            var buttons = data.canEmailSend && data.canVideoSend
                && (((parseInt(data.shareLevel) & level) == level) && ((parseInt(data.shareFlag) & flags) == flags)) && !data.isrestricted ? ["send"] : [];

            if (data.isSelectButton != undefined && data.isSelectButton == true) {

                buttons = ["backtogallery"];

                if (data.singleselect) {
                    buttons.push("usethisvideo");
                }

                if (data.canEmailSend && !data.isrestricted) {
                    buttons.push("send");
                }
            }

            var views = data.ispersonalized != undefined ? [{ icon: "info-circle", name: "Info", url: "/collateral/video/" + data.id + "/view?ispersonalizedvideo=" + data.ispersonalized, buttons: buttons }] :
                [{ icon: "info-circle", name: "Info", url: "/collateral/video/" + data.id + "/view", buttons: buttons }];

            if (data.isSelectButton != undefined && data.isSelectButton == true){

                if (data.ispersonalized != undefined){
                    var views = [{ icon: "info-circle", name: "Info", url: "/collateral/video/" + data.id + "/view?ispersonalizedvideo=" + data.ispersonalized + "&isselectbutton=" + data.isSelectButton + "&singleselect=" + data.singleselect, buttons: buttons }]
                }else{
                    var views = [{ icon: "info-circle", name: "Info", url: "/collateral/video/" + data.id + "/view?isselectbutton=" + data.isSelectButton + "&singleselect=" + data.singleselect, buttons: buttons }];
                }
            }
            if (data.canedit){
                if (data.encryptedid != null || data.encryptedid != undefined) {
                    if (data.foldertype != undefined && data.foldertype != null)
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + data.encryptedid + "/edit/encrypt?ispersonalizedvideo=" + data.ispersonalizedvideo + "&foldertype=" + data.foldertype + "&isbookmark=" + data.isbookmark + "&orgid=" + data.orgid + "&issetup=" + data.issetup, buttons: ["save"] });
                    else
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + data.encryptedid + "/edit/encrypt?ispersonalizedvideo=" + data.ispersonalizedvideo + "&orgid=" + data.orgid + "&issetup=" + data.issetup, buttons: ["save"] });
                } else {
                    if (data.foldertype != undefined && data.foldertype != null)
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + data.id + "/edit?ispersonalizedvideo=" + data.ispersonalizedvideo + "&foldertype=" + data.foldertype + "&isbookmark=" + data.isbookmark + "&orgid=" + data.orgid + "&issetup=" + data.issetup, buttons: ["save"] });
                    else
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + data.id + "/edit?ispersonalizedvideo=" + data.ispersonalizedvideo + "&orgid=" + data.orgid + "&issetup=" + data.issetup, buttons: ["save"] });
                }
            }
            if (data.singleselect != 1 && data.singleselect != undefined) {
                if (data.showPermission) {
                    views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/newversion/" + data.shareType + "/" + data.id, buttons: ["save"] });
                }
                if (!data.isrestricted) {
                    if (data.cansendemail) {
                        views.push({ icon: "paper-plane", name: "Send Email", url: "/communicate/email/0?templates=" + null + "&files=" + data.id + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                    }
                    if (data.cansendtopartner == true) {
                        views.push({ icon: "paper-plane", name: 'Send Email To Users', url: "/communicate/email/0?templates=" + null + "&files=" + data.id + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, iconprefix: "far", buttons: ["finish"] });
                    }
                    if (data.publish) {
                        views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + data.id, buttons: ["publish"] });
                    }
                }
                if (data.rating) {
                    views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + data.id + "/" + 2 + "/rating/comment", iconprefix: "fas" });
                }
            }
            
            var title = "";
            if (data.name != undefined) 
                title = 'Videos > ' + views[0].name + ' (<b><i>' + data.name + '</i></b>)';
            else
                title = 'Videos > ' + views[0].name + '<br>';
            modal.show({ title: title, views: views });

        },
        showVideoTemplate: function (data, callback) {                         
            var views = [{
                icon: "info-circle", name: "Info", url: "/manage/video/mediapreview/" + data.id + "?isstepprocess=" + true, wizardclose: true
            }];
            if (data.encryptedid != null || data.encryptedid != undefined) {
                if (data.foldertype != undefined && data.foldertype != null)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + data.encryptedid + "/edit/encrypt?ispersonalizedvideo=" + data.ispersonalizedvideo + "&foldertype=" + data.foldertype + "&isbookmark=" + data.isbookmark + "&orgid=" + data.orgid + "&issetup=" + data.issetup, buttons: ["save"] });
                else
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + data.encryptedid + "/edit/encrypt?ispersonalizedvideo=" + data.ispersonalizedvideo + "&orgid=" + data.orgid + "&issetup=" + data.issetup, buttons: ["save"] });
            } else {
                if (data.foldertype != undefined && data.foldertype != null)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + data.id + "/edit?ispersonalizedvideo=" + data.ispersonalizedvideo + "&foldertype=" + data.foldertype + "&isbookmark=" + data.isbookmark + "&orgid=" + data.orgid + "&issetup=" + data.issetup, buttons: ["save"] });
                else
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + data.id + "/edit?ispersonalizedvideo=" + data.ispersonalizedvideo + "&orgid=" + data.orgid + "&issetup=" + data.issetup, buttons: ["save"] });
            }
            if (data.singleselect != 1 && data.singleselect != undefined) {
                if (data.showPermission) {
                    views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/video/permissions/" + data.id + "/" + 900 + "/" + data.id, buttons: ["save"] });
                }
                if (!data.isrestricted) {
                    if (data.cansendemail) {
                        views.push({ icon: "paper-plane", name: "Send Email", url: "/communicate/email/0?templates=" + null + "&files=" + data.id + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                    }
                    if (data.cansendtopartner == true) {
                        views.push({ icon: "paper-plane", name: 'Send Email To Users', url: "/communicate/email/0?templates=" + null + "&files=" + data.id + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, iconprefix: "far", buttons: ["finish"] });
                    }
                    if (data.publish) {
                        views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + data.id, buttons: ["publish"] });
                    }
                }
                if (data.rating) {
                    views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + data.id + "/" + 2 + "/rating/comment", iconprefix: "fas" });
                }
            }
            var title = "";
            if (data.name != undefined)
                title = 'Videos > ' + views[0].name + ' (<b><i>' + data.name + '</i></b>)';
            else
                title = 'Videos > ' + views[0].name + '<br>';
            modal.show({ title: title, views: views, callback: callback });
        },
        showNewFormContacts: function (data, callback) {
            var strParam = '';

            if (data.linktype != undefined)
                strParam += "linktype=" + data.linktype;
            if (data.viewoption != undefined)
                strParam += "&viewoption=" + data.viewoption;
            if (data.linktoid != undefined)
                strParam += "&linktoid=" + data.linktoid;
            if (data.orgviewoption != undefined)
                strParam += "&orgviewoption=" + data.orgviewoption;
            if (data.groupviewoption != undefined)
                strParam += "&groupviewoption=" + data.groupviewoption;
            var views = [
                { icon: "", title: data.title, url: "/forms/newcontacts/" + data.id + "?" + strParam }
            ];
            modal.show({ title: data.title, views: views, callback: callback });
            },

        //Added by Nikita for download.
        showDownloadHtml: function (id, title, buttonText, playbookId, linearPlaybookId, isPreview) {
            var url = "/communicate/email/download/" + id;
            if (typeof playbookId != "undefined")
                url += "?playbookid=" + playbookId;

            if (typeof linearPlaybookId != "undefined")//#40976 - email download issue when Non contact playbook is added to Linear playbook
                url += "&linearplaybookid=" + linearPlaybookId;

            if (typeof isPreview != "undefined")
                url += "&ispreview=" + isPreview;

            var views = [
                { icon: "", name: title, url: url }
            ];

            modal.show({ title: title, views: views});
        },
        //Modify by Lalita to fix bug #4941, to get media template type
        showEditPrintWizard: function (print, allpagestemplateonlydb) {
            $.extend({
                locked: false,
                closetab:false,
                ispersonalized: false
            }, print);

            modal.closeall();

            var temptype = print.templatetype;//Added by lalita
            var editor = { name: getTemplateTypetext(temptype) + print.editor, url: "/collateral/pdf/" + print.id + "/editor?ispersonalized=" + print.ispersonalized, wizardclose: true }//Customize
            if (print.hasquestionnaire == true && print.usedatasource == 1 && print.useprojectsource == 1 && !allpagestemplateonlydb) {
                var info = { name: print.info, url: "/collateral/pdf/" + print.id + "/info" + "/" + getTimeStamp(), wizardclose: print.locked }
                var questions = { name: 'Input', url: "/collateral/pdf/" + print.id + "/questions", wizardclose: print.locked, buttons: ["save"] }
                var assetpicker = { name: print.datapicker, url: "/collateral/pdf/" + print.id + "/assetpicker", wizardclose: print.locked }
                if (print.canprintskipeditor && !isSiteOrSuperAdmin)
                    var opportunityPicker = { name: 'Opportunity Picker', url: "/collateral/pdf/" + print.id + "/opportunitypicker?islaststep=true", wizardclose: true }
                else
                    var opportunityPicker = { name: 'Opportunity Picker', url: "/collateral/pdf/" + print.id + "/opportunitypicker", wizardclose: print.locked }
                var _wizdata = {
                    name: print.customizeprint,
                    steps: [info, questions, assetpicker, opportunityPicker]
                };
            }
            else if (print.hasquestionnaire == true && print.usedatasource == 1 && print.useprojectsource == 0 && !allpagestemplateonlydb) {
                var info = { name: print.info, url: "/collateral/pdf/" + print.id + "/info" + "/" + getTimeStamp(), wizardclose: print.locked }
                var questions = { name: 'Input', url: "/collateral/pdf/" + print.id + "/questions", wizardclose: print.locked, buttons: ["save"] }
                if (print.canprintskipeditor && !isSiteOrSuperAdmin)
                    var assetpicker = { name: print.datapicker, url: "/collateral/pdf/" + print.id + "/assetpicker?islaststep=true", wizardclose: true }
                else
                    var assetpicker = { name: print.datapicker, url: "/collateral/pdf/" + print.id + "/assetpicker", wizardclose: print.locked }
                var _wizdata = {
                    name: print.customizeprint,
                    steps: [info, questions, assetpicker]
                };
            }
            else if (print.hasquestionnaire == true && print.usedatasource == 0 && print.useprojectsource == 1) {
                var info = { name: print.info, url: "/collateral/pdf/" + print.id + "/info" + "/" + getTimeStamp(), wizardclose: print.locked }
                var questions = { name: 'Input', url: "/collateral/pdf/" + print.id + "/questions", wizardclose: print.locked, buttons: ["save"] }
                if (print.canprintskipeditor && !isSiteOrSuperAdmin)
                    var opportunityPicker = { name: 'Opportunity Picker', url: "/collateral/pdf/" + print.id + "/opportunitypicker?islaststep=true", wizardclose: true }
                else
                    var opportunityPicker = { name: 'Opportunity Picker', url: "/collateral/pdf/" + print.id + "/opportunitypicker", wizardclose: print.locked }
                var _wizdata = {
                    name: print.customizeprint,
                    steps: [info, questions, opportunityPicker]
                };
            }
            else if (print.hasquestionnaire == true && print.usedatasource == 0 && print.useprojectsource == 0) {
                var info = { name: print.info, url: "/collateral/pdf/" + print.id + "/info" + "/" + getTimeStamp(), wizardclose: print.locked }
                if (print.canprintskipeditor && !isSiteOrSuperAdmin)
                    var questions = { name: 'Input', url: "/collateral/pdf/" + print.id + "/questions?islaststep=true", wizardclose: true, buttons: ["save"] }
                else
                    var questions = { name: 'Input', url: "/collateral/pdf/" + print.id + "/questions", wizardclose: print.locked, buttons: ["save"] }
                var _wizdata = {
                    name: print.customizeprint,
                    steps: [info, questions]
                };
            }
            else if (print.hasquestionnaire == false && print.usedatasource == 1 && print.useprojectsource == 1 && !allpagestemplateonlydb) {
                var info = { name: print.info, url: "/collateral/pdf/" + print.id + "/info" + "/" + getTimeStamp(), wizardclose: print.locked }
                var assetpicker = { name: print.datapicker, url: "/collateral/pdf/" + print.id + "/assetpicker", wizardclose: print.locked }
                if (print.canprintskipeditor && !isSiteOrSuperAdmin)
                    var opportunityPicker = { name: 'Opportunity Picker', url: "/collateral/pdf/" + print.id + "/opportunitypicker?islaststep=true", wizardclose: true }
                else
                    var opportunityPicker = { name: 'Opportunity Picker', url: "/collateral/pdf/" + print.id + "/opportunitypicker", wizardclose: print.locked }
                var _wizdata = {
                    name: print.customizeprint,
                    steps: [info, assetpicker, opportunityPicker]
                };
            }
            else if (print.hasquestionnaire == false && print.usedatasource == 1 && print.useprojectsource == 0 && !allpagestemplateonlydb) {
                var info = { name: print.info, url: "/collateral/pdf/" + print.id + "/info" + "/" + getTimeStamp(), wizardclose: print.locked }
                if (print.canprintskipeditor && !isSiteOrSuperAdmin)
                    var assetpicker = { name: print.datapicker, url: "/collateral/pdf/" + print.id + "/assetpicker?islaststep=true", wizardclose: true }
                else
                    var assetpicker = { name: print.datapicker, url: "/collateral/pdf/" + print.id + "/assetpicker", wizardclose: print.locked }
                var _wizdata = {
                    name: print.customizeprint,
                    steps: [info, assetpicker]
                };
            }
            else if (print.hasquestionnaire == false && print.usedatasource == 0 && print.useprojectsource == 1) {
                var info = { name: print.info, url: "/collateral/pdf/" + print.id + "/info" + "/" + getTimeStamp(), wizardclose: print.locked }
                if (print.canprintskipeditor && !isSiteOrSuperAdmin)
                    var opportunityPicker = { name: 'Opportunity Picker', url: "/collateral/pdf/" + print.id + "/opportunitypicker?islaststep=true", wizardclose: true }
                else
                    var opportunityPicker = { name: 'Opportunity Picker', url: "/collateral/pdf/" + print.id + "/opportunitypicker", wizardclose: print.locked }
                var _wizdata = {
                    name: print.customizeprint,
                    steps: [info, opportunityPicker]
                };
            }
            else {
                if (print.canprintskipeditor && !isSiteOrSuperAdmin)
                    var info = { name: print.info, url: "/collateral/pdf/" + print.id + "/info" + "/" + getTimeStamp() + "?islaststep=true", wizardclose: true }
                else
                    var info = { name: print.info, url: "/collateral/pdf/" + print.id + "/info" + "/" + getTimeStamp(), wizardclose: print.locked }
                var _wizdata = {
                    name: print.customizeprint,
                    steps: [info]
                };
            }

            if (print.issiteorsuperadmin || !print.canprintskipeditor)
                _wizdata.steps.push(editor);

            _wizdata["preventClose"] = print.locked;
            _wizdata["closeTab"] = print.closetab;
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showEditContractWizard: function (contract, allpagestemplateonlydb) {
            var temptype = print.templatetype;//Added by lalita
            var info = { name: 'Info', url: "/contracts/editinfo/" + contract.id + "/" + contract.iscreditcard }
            var questions = { name: 'Input', url: "/collateral/pdf/" + contract.id + "/questions" }
            var assetpicker = { name: 'DataPicker', url: "/collateral/pdf/" + contract.id + "/assetpicker" }
            var signature = { name: 'View & Sign', url: "/contracts/signature/" + contract.id}
            var editor = { name: getTemplateTypetext(temptype) + 'Editor', url: "/contracts/editor/" + contract.id }//Customize
            var url = "/contracts/send/" + contract.id + "/" + contract.ispartner
            if (typeof (contract.playbookid) != 'undefined')
                url = url + "?playbookid=" + contract.playbookid;
            var sendcontract = { name: 'Contract', url: url }
            var medianame = contract.name;
            if (contract.hasquestionnaire == true && contract.usedatasource == 1 && !allpagestemplateonlydb)
                var _wizdata = {
                    name: 'Customize Contract',
                    steps: [info, questions, assetpicker, editor, signature, sendcontract]
                };
            else if (contract.hasquestionnaire == true && contract.usedatasource == 0)
                var _wizdata = {
                    name: 'Customize Contract',
                    steps: [info, questions, editor, signature, sendcontract]
                };
            else if (contract.hasquestionnaire == false && contract.usedatasource == 1 && !allpagestemplateonlydb)
                var _wizdata = {
                    name: 'Customize Contract',
                    steps: [info, assetpicker, editor, signature, sendcontract]
                };
            else if (contract.hasquestionnaire == false && contract.usedatasource == 0)
                var _wizdata = {
                    name: 'Customize Contract',
                    steps: [info, editor, signature, sendcontract]
                };
            else
                var _wizdata = {
                    name: 'Customize Contract',
                    steps: [info, editor, signature, sendcontract]
                }; 
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },

        showPDFContractWizard: function (contract) {
            var temptype = print.templatetype;//Added by lalita
            var info = { name: contract.info, url: "/contracts/editinfo/" + contract.id + "/" + contract.iscreditcard} 
            var data = { name: 'Data', url: "/contracts/editdata/" + contract.id}
            var signature = { name: 'View & Sign', url: "/contracts/signature/" + contract.id }
            var editor = { name: getTemplateTypetext(temptype) + contract.editor, url: "/contracts/editor/" + contract.id }//Customize
            var sendcontract = { name: contract.sendcontract, url: "/contracts/send/" + contract.id + "/" + contract.ispartner }
            var medianame = contract.name;
            var _wizdata = {
                name: 'Create Contract',
                    steps: [info, data, editor, signature, sendcontract]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showPresentation: function (templatedata) {
            modal.closeall();

            var wizardStepInfo = { icon: "info-circle", name: "Info", url: "/collateral/presentation/" + templatedata.id + "/info" };
            var wizardStepAssetPicker = { icon: "info-circle", name: "AssetPicker", url: "/collateral/presentation/" + templatedata.id + "/assetpicker" };
            var wizardStepReordering = { icon: "info-circle", name: "Reordering", url: "/collateral/presentation/" + templatedata.id + "/reordering" };

            var wizardSteps = [];

            if (templatedata.hasquestionnaire && templatedata.usedatasource == "1")
                wizardSteps = [wizardStepInfo, wizardStepAssetPicker, wizardStepReordering];
            else if (templatedata.hasquestionnaire)
                wizardSteps = [wizardStepInfo, wizardStepReordering];
            else if (templatedata.usedatasource == "1")
                wizardSteps = [wizardStepInfo, wizardStepAssetPicker, wizardStepReordering];
            else
                wizardSteps = [wizardStepInfo, wizardStepReordering];

            modal.show({ title: "Presentation", views: wizardSteps, buttons: "[Save]" });
        },
       
        showDataRooms: function (asset, type) {
            //type either 1 for template/media or 2 for image/doc/video
            if (asset.isPdf == undefined && asset.isPdf != true) {
                asset.isPdf = false;
            }
            var assetId;
            if (asset.id == undefined)
                assetId = asset.linkid;
            else
                assetId = asset.id;
            var views = [{ icon: "database", name: 'Data Room', url: "/collateral/datarooms/" + assetId + "/" + type + "?isPdf=" + asset.isPdf }];
            var title = 'Data Rooms';
            if (asset.showViews != undefined && asset.showViews == true) {
                if (asset.canSendEmail) {
                    views.push({ icon: "envelope", name: "Send Email", url: "/communicate/email/0?templates=" + null + "&files=" + assetId + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                    views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?templates=" + null + "&files=" + assetId + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, buttons: ["finish"] });
                }
                if (asset.permission)
                    views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + assetId + "/" + asset.sharetype + "/" + asset.id, buttons: ["save"] });
                if (asset.canedit)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + assetId + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + options.isSetup, buttons: ["save", "cancel"] });
                if (asset.canedit && asset.hasversionaccess == true && asset.hasversionaccess != undefined) {
                    views.push({ icon: "history", name: 'Versions', url: "/gallery/file/versions/" + asset.filetype + "/" + assetId + "?issetup=" + asset.isSetup + "&iswizard=" + asset.iswizard })
                }
                if (asset.rating) {
                    views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + assetId + "/" + 2 + "/rating/comment", iconprefix: "fas" });
                }
                title = " Document " + " > " + views[0].name + " (<b><i>" + asset.displayname + "</i></b>)";
            }
            modal.show({ title: title, views: views });
        },
        showCreatePresentationWizard: function (ppt) {
            $.extend({
                locked: false,
                closetab:false
            }, ppt);
            modal.closeall();
            var wizardStepInfo = { name: ppt.info, url: "/collateral/presentation/" + ppt.id + "/info", wizardclose: ppt.locked };
            //var wizardStepEditor = { name: "Editor", url: "/collateral/presentation/" + ppt.id + "/editor" };
            var wizardStepQuestionnaire = { name: 'Input', url: "/collateral/presentation/" + ppt.id + "/questions", wizardclose: ppt.locked };
            var wizardStepAssetPicker = { name: ppt.datapicker, url: "/collateral/presentation/" + ppt.id + "/assetpicker", wizardclose: ppt.locked };
            var wizardStepReordering = { name: ppt.manageslides, url: "/collateral/presentation/" + ppt.id + "/reordering?canEmailSend=" + ppt.send, wizardclose: ppt.locked };

            var wizardSteps = [];

            if (ppt.hasquestionnaire && ppt.usedatasource == "1")
                wizardSteps = [wizardStepInfo, wizardStepQuestionnaire, wizardStepAssetPicker, wizardStepReordering];
            else if (ppt.hasquestionnaire)
                wizardSteps = [wizardStepInfo, wizardStepQuestionnaire, wizardStepReordering];
            else if (ppt.usedatasource == "1")
                wizardSteps = [wizardStepInfo, wizardStepAssetPicker, wizardStepReordering];
            else
                wizardSteps = [wizardStepInfo, wizardStepReordering];

            var _wizdata = { name: ppt.customizeppt, steps: wizardSteps };
            
            _wizdata["preventClose"] = ppt.locked;
            _wizdata["closeTab"] = ppt.closetab;
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        sendContract: function (_templateID, _options) {
            var signature = { name: 'View & Sign', url: "/contracts/signature/" + _templateID }
            var url = "/contracts/send/" + _templateID + "/" + _options.ispartner;
            if (typeof (_options.playbookid) != 'undefined')
                url = url + "?playbookid=" + _options.playbookid;
            var sendcontract = { name: 'Contract', url: url }

            var _wizdata = {
                name: _options.name != undefined ? 'Contract' + ' - ' + _options.name : 'Contract',
                steps: [ signature, sendcontract]
            };

            var _wizard = new wizard(_wizdata);
            _wizard.show();
 
        },
        resendContract: function (_templateID,contractID, _options) {
            var views = [
                { name: 'Contract', url: "/contracts/resend/" + _templateID + "/" + _options.ispartner + "/" + contractID, buttons:["finish"] },
            ];
            modal.show({ title: 'Contract', views: views});
        },
        showContract: function (id, emailid, options) {
            var views = [];
            if (emailid != undefined)
                views.push({ icon: "search", name: 'View', url: "/contracts/view/" + id + "/" + emailid });
            views.push({ icon: "info-circle", name: 'Info', url: "/contracts/editinfo/" + id + "/true", buttons:["save"]});
            if (emailid != undefined){
                views.push({
                    icon: "users", name: 'Recipients', url: "/communicate/email/" + emailid + "/receipients?ispartner=" + options.ispartner });
                views.push({
                    icon: "share", name: 'Opened', url: "/communicate/email/" + emailid + "/interest?ispartner=" + options.ispartner });
                views.push({
                    icon: "ban", name: 'Bounced', url: "/communicate/email/" + emailid + "/bounced?ispartner=" + options.ispartner }); 
                views.push({
                    icon: "minus-circle", name: 'Unsubscribed', url: "/communicate/email/" + emailid + "/unsubscribed?ispartner=" + options.ispartner }); 
                views.push({ icon: "reply", name: 'Unopened', url: "/communicate/email/" + emailid + "/unopened?ispartner=" + options.ispartner });  
            } 
            modal.show({ title: 'Contract', views: views, buttons: ["save"]});

        },
        showOpportunityContract: function(projectID, projectType, options, callback) {
            var views = [
                { icon: "cubes", name: 'Info', url: "https://partner-marketing.bitdefender.com/contracts/opportunity-contact/" + projectID + "/" + projectType, buttons: ["save"] },
            ];
            modal.show({ title: options.title, views: views, callback: callback  });
        },
        showOpportunityTypeForContract: function (userId, opportunityOpenStage,isContract, callback) {
            var views = [{ name: 'Opportunity', url: "/contracts/opportunity-records/" + userId + "/" + opportunityOpenStage+ "/" + isContract, buttons:["save"] }];
            modal.show({ title: 'Opportunity Associated', views: views, callback: callback});
        },
        resendRejectedContract: function (contract, lastContract, allpagestemplateonlydb) {
            var questions = { name: contract.question, url: "/collateral/pdf/" + contract.id + "/questions" }
            var assetpicker = { name: contract.datapicker, url: "/collateral/pdf/" + contract.id + "/assetpicker" }
            var signature = { name: 'View & Sign', url: "/contracts/signature/" + contract.id }
            var editor = { name:  contract.editor, url: "/contracts/editor/" + contract.id }//Customize
            var sendcontract = { name: contract.sendcontract, url: "/contracts/resend/" + contract.id + "/" + contract.ispartner + "/" + lastContract}
            var medianame = contract.name;
            if (contract.hasquestionnaire == true && contract.usedatasource == 1 && !allpagestemplateonlydb)
                var _wizdata = {
                    name: contract.customize,
                    steps: [ questions, assetpicker, editor, signature, sendcontract]
                };
            else if (contract.hasquestionnaire == true && contract.usedatasource == 0)
                var _wizdata = {
                    name: contract.customize,
                    steps: [ questions, editor, signature, sendcontract]
                };
            else if (contract.hasquestionnaire == false && contract.usedatasource == 1 && !allpagestemplateonlydb)
                var _wizdata = {
                    name: contract.customize,
                    steps: [ assetpicker, editor, signature, sendcontract]
                };
            else if (contract.hasquestionnaire == false && contract.usedatasource == 0 && !contract.isplaybookcontract)
                var _wizdata = {
                    name: contract.customize,
                    steps: [ editor, signature, sendcontract]
                };
            else if (contract.hasquestionnaire == false && contract.usedatasource == 0 && contract.isplaybookcontract)
                var _wizdata = {
                    name: contract.customize,
                    steps: [editor, sendcontract]
                };
            else
                var _wizdata = {
                    name: contract.customize,
                    steps: [ editor, signature, sendcontract]
                };
            var _wizard = new wizard(_wizdata);
            _wizard.show();

        },
        showContractDetailedReport: function (organizationid, organizationgroupid, userid, status) {
            var views = [{ icon: "database", name: 'Send', url: "/contracts/detailedreport/" + organizationid + "/" + organizationgroupid + "/" + userid + "/" + status + "" }];
            modal.show({ title: 'Contract report', views: views });
        },
        showContractUpdate: function (contractId, options) {
            var views = [{ icon: "image", name: options.contractinfo, url: "/contracts/update/" + contractId, iconprefix: "far" }];
            modal.show({ title: options.title, views: views });
        },
        openemailtemplates: function (isSuccessUrl, _options, callback) {
            var views = [{ icon: "database", name: 'Send', url: "/contracts/email/" + isSuccessUrl, buttons: ["save"] }];
            modal.show({ title: _options.header, views: views, callback: callback });
        },
        showOpportunityDetailedReport: function (organizationid, organizationgroupid, userid, status) {
            var views = [{ icon: "database", name: 'Send', url: "/contracts/opportunitydetailedreport/" + organizationid + "/" + organizationgroupid + "/" + userid + "/" + status + "" }];
            modal.show({ title: 'Contract report', views: views });
        },
        sendPrint: function (id, linkids, isSmartlist, isContactcompany, playbookID) {
            sendPrint(id, linkids, isSmartlist, isContactcompany, false, playbookID);
        },
        sendPrint: function (id, linkids, isSmartlist, isContactcompany, islocked,playbookID) {
             
            if (linkids != null && linkids != "") {
                var views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&customsendmodal=true&hideimportcustomize=true", buttons: ["finish"]}];
            }
            else if (playbookID != null && playbookID != "") {
                var views = [{
                    icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&customsendmodal=true&hideimportcustomize=true&playbookid=" + playbookID, buttons: ["finish"]
                }];
            }
            else {
                var views = [{
                    icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&customsendmodal=true&hideimportcustomize=true", buttons: ["finish"]}];
            }
            modal.show({ title: 'Send Print', views: views, locked: islocked, closeTab: islocked });
        },
        sendPrintForProject: function (options) {
            var id = options.id;
            var linkIDs = null;
            var isSmartlist = options.issmartlist;
            var isContactcompany = options.iscontactcompany;
            var isLocked = options.islocked;
            var projectID = options.projectid;
            var projectTypeID = options.projecttypeid;

            if (linkIDs != null && linkIDs != "") {
                var views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + linkIDs + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&isopportunity=true&projectid=" + projectID + "&projecttypeid=" + projectTypeID + "&customsendmodal=true&hideimportcustomize=true", buttons: ["finish"]}];
            }
            else {
                var views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&isopportunity=true&projectid=" + projectID + "&projecttypeid=" + projectTypeID + "&customsendmodal=true&hideimportcustomize=true", buttons: ["finish"]}];
            }
            modal.show({ title: 'Send', views: views, locked: isLocked, closeTab: isLocked });
        },
        sendAssetsEmail: function (templates, files, options) {
            sendAssetsEmail(templates, files, options, null, null, null, null);
        },
        sendAssetsEmail: function (templates, files, options, linkids, isSmartlist, isContactcompany, isUserGrid) {
            var opt = $.extend({
                hideimportcustomize: true,
                customsendmodal: true,
                locked: false
            }, options);

            var views = [];
            title = getSendAssetModalTitle(options.templatetype);
            if (options.templatetype != "other" && options.name != undefined) {//for templates names are missing while sending the email
                title = title + " - " + options.name;
            }

            if (options.templatetype == 36864) {  //to send playbook , assetid is used
                if (linkids != null && linkids != "") {
                    views = [{
                        icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + templates + "&isAssetEmail=true&linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&customsendmodal=" + opt.customsendmodal + "&hideimportcustomize=" + opt.hideimportcustomize, buttons: ["finish"]
                    }];
                }
                else if (options.calendareventid != null && options.calendareventid != "") {
                    views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + templates + "&isAssetEmail=true&calendareventid=" + options.calendareventid + "&customsendmodal=" + opt.customsendmodal + "&hideimportcustomize=" + opt.hideimportcustomize, buttons: ["finish"] }];
                }
                else {
                    views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + templates + "&isAssetEmail=true&customsendmodal=" + opt.customsendmodal + "&hideimportcustomize=" + opt.hideimportcustomize, buttons: ["finish"] }];
                }
                modal.show({ title: title, views: views, locked: opt.locked, closeTab: options.closetab });
            }
            else {
                if (linkids != null && linkids != "") {
                    if (isUserGrid != null && isUserGrid != undefined)
                        views.push({ icon: "database", name: 'Send Email', url: "/communicate/email/0?templates=" + templates + "&files=" + files + "&isMultipleAssetEmail=true&linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&ispartner=" + options.ispartner + "&customsendmodal=" + opt.customsendmodal + "&hideimportcustomize=" + opt.hideimportcustomize + "&isUser=" + isUserGrid, buttons: ["finish"] });
                    else
                        views.push({ icon: "database", name: 'Send Email', url: "/communicate/email/0?templates=" + templates + "&files=" + files + "&isMultipleAssetEmail=true&linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&customsendmodal=" + opt.customsendmodal + "&hideimportcustomize=" + opt.hideimportcustomize, buttons: ["finish"] });
                }
                else {
                    views.push({ icon: "paper-plane", name: 'Send Email', url: "/communicate/email/0?templates=" + templates + "&files=" + files + "&isMultipleAssetEmail=true&customsendmodal=" + opt.customsendmodal + "&hideimportcustomize=" + opt.hideimportcustomize + "&playbookid=" + options.playbookId+"&isopportunity=" + options.isopportunity + "&projecttypeid=" + options.projecttypeid + "&projectid=" + options.projectid, buttons: ["finish"] });  //for #20443
                }
                if (options.showViews != undefined && options.showViews == true) {
                    if (options.cansendtopartner == true) {
                        views.push({ icon: "paper-plane", name: 'Send Email To Users', url: "/communicate/email/0?templates=" + null + "&files=" + files + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + opt.customsendmodal + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&hideimportcustomize=" + opt.hideimportcustomize, iconprefix: "far", buttons: ["finish"] });
                    }
                    if (options.templatetype == '8388608') {
                        if (options.permission)
                            views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/video/permissions/" + files + "/" + options.sharetype + "/" + files, buttons: ["save"] })

                        if (options.canedit)
                            views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + files + "/edit", buttons: ["save"] });
                        title = "Video" + " > " + views[0].name;
                    }
                    else if (options.templatetype == '1048576') {
                        if (options.permission)
                            views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + files + "/" + options.sharetype + "/" + files, buttons: ["save"] });

                        if (options.canedit)
                            views.push({ icon: "edit", name: "Edit", url: "/gallery/images/" + files + "/edit/edit" + "/" + getTimeStamp(), buttons: ["save"] });

                        title = 'Image > ' + views[0].name;
                    }
                    else if (options.templatetype == '2097152') {
                        if (options.permission)
                            views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + files + "/" + options.sharetype + "/" + files, buttons: ["save"] });
                        if (options.canedit)
                            views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + files + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + options.isSetup, buttons: ["save", "cancel"] });
                        if (options.canedit && options.hasversionaccess == true && options.hasversionaccess != undefined) {
                            views.push({ icon: "history", name: 'Versions', url: "/gallery/file/versions/" + options.types + "/" + files + "?issetup=" + options.isSetup + "&iswizard=" + options.iswizard })
                        }
                        views.push({ icon: "database", name: 'Data Room', url: "/collateral/datarooms/" + files + "/" + 2 });
                        title = " Document " + " > " + views[0].name;
                    }
                    if (options.publish) {
                        views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + files, buttons: ["publish"] });
                    }
                    if (options.rating != undefined && options.rating) {
                          views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + files + "/" + 2 + "/rating/comment", iconprefix: "fas" });
                    }
                    if (options.name != null) {
                        title = title + " (<b><i>" + options.name + "</i></b>)";
                    }
                }
                modal.show({ title: title, views: views });
            }
        },
        
        
        sendPartnerAssetsEmail: function (templates, files, options) {
            sendPartnerAssetsEmail(templates, files, options, null, null, null, null);
        },
        sendPartnerAssetsEmail: function (templates, files, options, linkids, isSmartlist, isContactcompany, isUserGrid) {
            var opt = $.extend({
                hideimportcustomize: true,
                customsendmodal: true
            }, options);

            var views = [];
            title = getSendAssetModalTitle(options.templatetype);
            if (options.templatetype != "other" && options.name != undefined) {//for templates names are missing while sending the email
                title = title + " - " + options.name;
            }

            if (options.templatetype == 36864) {        //to send playbook , assetid is used
                if (linkids != null && linkids != "")
                    views = [{ icon: "envelope", name: 'Info', url: "/communicate/email/0?assetid=" + templates + "&isAssetEmail=true&linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&ispartner=true&isUser=" + isUserGrid + "&customsendmodal=" + opt.customsendmodal + "&hideimportcustomize=" + opt.hideimportcustomize, buttons: ["save"] }];
                else
                    views = [{ icon: "view", name: 'Send', url: "/communicate/email/0?assetid=" + templates + "&isAssetEmail=true&ispartner=true&customsendmodal=" + opt.customsendmodal + "&hideimportcustomize=" + opt.hideimportcustomize, buttons: ["finish"] }];
                if (options.title != "" && options.title != undefined) {//for title are missing while sending the email
                    title = options.title;
                }
            }
            else {
                if (linkids != null && linkids != "") {
                    if (isUserGrid != null && isUserGrid != undefined)
                        views.push({
                            icon: "database", name: 'Send Email', url: "/communicate/email/0?templates=" + templates + "&files=" + files + "&isMultipleAssetEmail=true&linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&ispartner=" + options.ispartner + "&customsendmodal=" + opt.customsendmodal + "&hideimportcustomize=" + opt.hideimportcustomize + "&isUser=" + isUserGrid, buttons: ["finish"] });
                    else
                        views.push({ icon: "database", name: 'Send Email', url: "/communicate/email/0?templates=" + templates + "&files=" + files + "&isMultipleAssetEmail=true&linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&ispartner=true&customsendmodal=" + opt.customsendmodal + "&hideimportcustomize=" + opt.hideimportcustomize, buttons: ["finish"] });
                }
                else {
                    views.push({
                        icon: "paper-plane", name: 'Send Email To Users', url: "/communicate/email/0?templates=" + templates + "&files=" + files + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + opt.customsendmodal + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&hideimportcustomize=" + opt.hideimportcustomize, iconprefix: "far", buttons: ["finish"] });
                    if (options.showViews != undefined && options.showViews == true) {
                        if (options.cansendemail)
                            views.push({ icon: "paper-plane", name: 'Send Email', url: "/communicate/email/0?templates=" + templates + "&files=" + files + "&isMultipleAssetEmail=true&customsendmodal=" + opt.customsendmodal + "&hideimportcustomize=" + opt.hideimportcustomize, buttons: ["finish"] });  //for #20443
                        if (options.templatetype == '8388608') {
                            if (options.permission)
                                views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/video/permissions/" + files + "/" + options.sharetype + "/" + files, buttons: ["save"] })

                            if (options.canedit)
                                views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + files + "/edit", buttons: ["save"] });
                            title = "Video" + " > " + views[0].name;
                        }
                        else if (options.templatetype == '2097152') {
                            if (options.permission)
                                views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + files + "/" + options.sharetype + "/" + files, buttons: ["save"] });
                            if (options.canedit)
                                views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + files + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + options.isSetup, buttons: ["save", "cancel"] })

                            views.push({ icon: "database", name: 'Data Room', url: "/collateral/datarooms/" + files + "/" + 2 });
                            if (options.canedit && options.hasversionaccess == true && options.hasversionaccess != undefined) {
                                views.push({ icon: "history", name: 'Versions', url: "/gallery/file/versions/" + options.filetype + "/" + files + "?issetup=" + options.isSetup + "&iswizard=" + options.iswizard })
                            }
                            title = " Document " + " > " + views[0].name;
                        }
                        else if (options.templatetype == '1048576') {
                            if (options.permission)
                                views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + files + "/" + options.sharetype + "/" + options.id, buttons: ["save"] });

                            if (options.canedit)
                                views.push({ icon: "edit", name: "Edit", url: "/gallery/images/" + files + "/edit/edit" + "/" + getTimeStamp(), buttons: ["save"] });

                            title = 'Image > ' + views[0].name;
                        }
                        if (options.publish != undefined && options.publish) {
                            views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + files, buttons: ["publish"] });
                        }
                        if (options.rating != undefined && options.rating) {
                            views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + files + "/" + 2 + "/rating/comment", iconprefix: "fas" });
                        }
                    }
                    if (options.name != null) {
                        title = title + ' (<b><i>' + options.name + '</i></b>)';
                    }
                }
            }
            modal.show({ title: title , views: views });
        },
        sendEmailForAssets: function (_assetID, fileId, linkids, isSmartlist, isContactcompany, isPartner, _isMobileBrowser, isHideImport, assetType,isUserGrid) {
            var options = {};
            options["_assetID"] = _assetID;
            options["fileId"] = fileId;
            options["linkids"] = linkids;
            options["isSmartlist"] = isSmartlist;
            options["isContactcompany"] = isContactcompany;
            options["isPartner"] = isPartner;
            options["_isMobileBrowser"] = _isMobileBrowser;
            options["isHideImport"] = isHideImport;
            options["assetType"] = assetType;
            options["projectType"] = null;
            options["projectID"] = null
            options["isUserGrid"] = isUserGrid;
            modal.sendEmailForAssetsFromProject(options);
        },
        sendEmailForAssetsFromProject: function (options) {
            var _assetID = options._assetID;
            var fileId = options.fileId;
            var linkids = options.linkids;
            var isSmartlist = options.isSmartlist;
            var isContactcompany = options.isContactcompany;
            var isPartner = options.isPartner;
            var _isMobileBrowser = options._isMobileBrowser;
            var isHideImport = options.isHideImport;
            var assetType = options.assetType;
            var projectType = options.projectType;
            var projectID = options.projectID;
            var isUserGrid = options.isUserGrid;
            var arrEmailParam = ["?linkids=" + linkids + "&isstepprocess=false&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&ispartner=" + isPartner];
            if (projectType != null && projectID != null) {
                arrEmailParam.push("isopportunity=true");
                arrEmailParam.push("projectid=" + projectID);
                arrEmailParam.push("projecttypeid=" + projectType);
            }
            var strEmailParam = arrEmailParam.join('&')
            if (typeof (_assetID) == "number")
                _assetIDs = [_assetID];
            else
                _assetIDs = _assetID;
            if (typeof (fileId) == "number")
                fileIds = [fileId];
            else
                fileIds = fileId;
            api.call("CreateTemplateForAssets", { templateid: _assetIDs, templatename: "new media", files: fileIds }, function (result) {

                var _emailID = result.result.email.id;
                var _templateID = result.result.template.id;
                if (_isMobileBrowser == true) {
                    if (result.result.template.hasquestionnaire == 1)
                        window.location.href = hostPath + "/#communicate/email/" + _templateID + "/mquestions/" + _emailID + strEmailParam;
                    else if (result.result.template.usedatasource == 1)
                        window.location.href = hostPath + "/#communicate/email/" + _templateID + "/massetpicker/" + _emailID + strEmailParam;
                    else
                        window.location.href = hostPath + "/#communicate/email/" + _templateID + "/mobileeditor/" + _emailID + strEmailParam;
                }
                else {
                    var views = [{ icon: "database", name: 'Send', url: "/communicate/email/" + _emailID + strEmailParam + "&customsendmodal=true&hideimportcustomize=true&" + "&isUser=" + isUserGrid+"", buttons:["save"]}];
                    modal.show({ title: 'Send', views: views });
                }
            });
        },
        sendPrintToPartner: function (id, linkids, isSmartlist, isContactcompany) {
            var views = null;
            if (linkids != null && linkids != "") {
                var views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&ispartner=" + true, buttons: ["finish"]}];
            }
            else {
                var views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&sAssetEmail=true" + "&ispartner=" + true, buttons: ["finish"] }];
            }
            modal.show({ title: 'Send', views: views});
        },

        sendEmailToPartner: function (contactids) {
            var views = null;
            views = [{ icon: "envelope", name: 'Send', url: "/communicate/newemail/0?linkids=" + contactids + "&isSmartlist=null&ispartner=" + true, buttons: ["finish"] }];
            modal.show({ title: 'Email <span class="label txt-color-white draft" id="lblWhatIsIt">NEW</span>', views: views});
        },
        sendEmailToUsers: function (linkids) {
            modal.closeall();
            var strEmailParam = "?linkids=" + linkids + "&isstepprocess=true&isuser=true&ispartner=True";
            api.call("CreateTemporaryMedia", { templateid: 0, templatename: "new media" }, function (result) {
                var _emailID = result.result.email.id;
                var _templateID = result.result.template.id;
                var _wizdata = {
                    name: 'Send EMAIL',
                    steps: [
                        { name: 'Select Template', url: "/communicate/email/selecttemplate/" + _templateID + "/" + _emailID + strEmailParam },
                        { name: 'Email Editor', url: "/communicate/email/" + _templateID + "/editor" },
                        { name: 'Send Email', url: "/communicate/email/" + _emailID + strEmailParam, wizardclose: true }
                    ]
                };

                var _wizard = new wizard(_wizdata);
                _wizard.show();
            });
        },
        sendEmailToPartnerForChannel: function (contactids, isorganization,isengagementreport) {
            modal.closeall();
            var sendEmailLink = "/isstepprocess/partner/" + isorganization + "/" + "null" + "/" + contactids + "?isSmartlist=" + false;//#20159 "Select Template" step in "Send Email" step wizard keeps on loading.
            if (isengagementreport != undefined)
                sendEmailLink = sendEmailLink + "&isengagementreport=" + isengagementreport;
            api.call("CreateTemporaryMedia", { templateid: 0, templatename: "new media" }, function (result) {
                var _emailID = result.result.email.id;
                var _templateID = result.result.template.id;
                var _wizdata = {
                    name: 'Send EMAIL',
                    steps: [
                        { name: 'Select Template', url: "/communicate/email/selecttemplate/" + _templateID + "/" + _emailID + sendEmailLink },
                        { name: 'Email Editor', url: "/communicate/email/" + _templateID + "/editor" },
                        { name: 'Send Email', url: "/communicate/email/" + _emailID + sendEmailLink, wizardclose: true }
                    ]
                }
                console.log(_wizdata);
                var _wizard = new wizard(_wizdata);
                _wizard.show();
            });           
        },
        sendPartner: function (id, linkids, isSmartlist ,options) {
            var views = null;
            if (linkids != null && linkids != "")
                var views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&ispartner=" + true + "&customsendmodal=" + options.customsendmodal + "&hideimportcustomize=" + options.hideimportcustomize, buttons: ["finish"]}];
            else
                var views = [{
                    icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true" + "&ispartner=" + true + "&customsendmodal=" + options.customsendmodal + "&hideimportcustomize=" + options.hideimportcustomize, buttons: ["finish"]}];

            modal.show({ title: 'Send', views: views });
        },
        showVendor: function (id,options) {
            var views = null;
            if (id != null && id != "")
                var views = [{ icon: "database", name: options.name, url: "/setup/vendor/" + id + "/" + getTimeStamp(), buttons: ["save"] }];
            else
                var views = [{ icon: "database", name: options.name, url: "/setup/vendor/0/" + getTimeStamp(), buttons: ["save"] }];

            modal.show({ title: options.name, views: views });
        },
        showPrinter: function () {
            var views = [{ icon: "database", name: 'Printer', url: "/setup/printersetting/" + getTimeStamp(), buttons: ["save"] }];
            modal.show({ title: 'Printer Setting', views: views});
        },
        printVendor:function(id){
            printVendor(id, false);
        },
        printVendor: function (id,locked) {
            var views = [{ icon: "print", name: 'Print', url: "/collateral/pdf/" + id + "/order", buttons: ["send"] }];
            modal.show({ title: 'Send To Print Vendor', views: views,closeTab:locked , locked: true, preventClose: true,});
        },
        printVendorForPlaybook: function (playbookId, id, currentStepId, mincontacts, ispersonalized, contactwise) {
            var _wizdata = {
                name: 'Print',
                steps: [
                    { name: 'Contacts', url: "/internalplaybook/printcampaign/contacts/" + playbookId + "/" + id + "/" + currentStepId + "/" + mincontacts + "/" + contactwise },
                    { name: 'Preview', url: "/internalplaybook/printcampaign/preview/" + id },
                    { name: 'Send', url: "/internalplaybook/printcampaign/send/" + id + "/" + ispersonalized + "/" + currentStepId + "/" + contactwise },
                ]
            }
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showEventList: function (options) {
            var urlParam ="";
            if (options.eventtype != undefined && options.eventtype != "")
                urlParam += urlParam != "" ? "&eventtype=" + options.eventtype : "?eventtype=" + options.eventtype;
            if (options.selectedyear != undefined && options.selectedyear != "")
                urlParam += urlParam != "" ? "&selectedyear=" + options.selectedyear : "?selectedyear=" + options.selectedyear;
            var views = [
                { icon: "", name: options.title, url: "/widgets/eventlist" + urlParam}
            ];
            modal.show({ title:options.name, views: views });
        },

        showWebsiteMedia: function (id, options,encryptedid) {
            $.extend({
                cansend: false,
                canSendEmail: false,
                canPartnerSendWeb: false,
                canPartnerSend:false,
                canpublish: false,
                canedit: false,
                customize: false,
                linkids: null,
                isSmartlist: null,
                encryptedid: null,
                candesign: false
            }, options);
            var views = [];
            if (!options.isNeedApproval) {
                if (!options.isApproved) {
                    if (options.customize) {
                        if (options.canedit) views.push({ icon: "edit", name: 'Editor', url: "/manage/web/" + id + "/editor", buttonaction: true });
                        views.push({ icon: "search", name: 'View', url: "/manage/web/" + id + "/view?rand=1" });
                    }
                    else {
                        if (encryptedid != null && encryptedid != undefined)
                            views.push({ icon: "search", name: 'View', url: "/manage/web/view/" + encryptedid + "?rand=1" });
                        else
                            views.push({ icon: "search", name: 'View', url: "/manage/web/" + id + "/view?rand=1" });
                        if (options.canedit) views.push({ icon: "edit", name: 'Editor', url: "/manage/web/" + id + "/editor", buttonaction: true });
                    }
                }
                else {
                    if (encryptedid != null && encryptedid != undefined)
                        views.push({ icon: "search", name: 'View', url: "/manage/web/view/" + encryptedid + "?rand=1" });
                    else
                        views.push({ icon: "search", name: 'View', url: "/manage/web/" + id + "/view?rand=1" });
                }
                if (options.canSendEmail) {
                    if (options.cansend) {
                        if (options.linkids != null) {
                            views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?templates=" + [id] + "&isMultipleAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist, buttons: ["finish"] });
                            if (options.cansend && options.canPartnerSend)
                                views.push({ icon: "user-plus", name: 'Send To Users', url: "/communicate/email/0?templates=" + [id] + "&isMultipleAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist + "&ispartner=" + true, buttons: ["finish"]});
                        }
                        else {
                            views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?templates=" + [id] + "&isMultipleAssetEmail=true", buttons: ["finish"] });
                            if (options.canPartnerSend)
                                views.push({ icon: "user-plus", name: 'Send To Users', url: "/communicate/email/0?templates=" + [id] + "&isMultipleAssetEmail=true&ispartner=" + true, buttons: ["finish"] });
                        }
                    }
                }

                views.push({ icon: "qrcode", name: 'Get QR Code', url: "/manage/landingpage/" + id + "/qrcode" });
                if (options.canpublish) views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/true/" + id ,buttons:["save"]});

                if (options.output)
                    views.push({ icon: "info-circle", name: 'Info', url: "/manage/web/" + id + "/info" + "/" + getTimeStamp(),buttons:["save"] });

                if (options.output && options.hasquestionnaire)
                    views.push({ icon: "question-circle", name: 'Input', url: "/manage/web/" + id + "/questions" });

                views.push({ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/website/" + id + "/report", iconprefix: "far" });
                views.push({ icon: "file", name: 'Pages', url: "/manage/campaigns/website/" + id + "/interestbypage", buttons: ["save"]});
                views.push({ icon: "users", name: 'Contacts', url: "/manage/campaigns/website/" + id + "/interestbycontact", buttons: ["save"] });
                views.push({ icon: "signal", name: 'Signups', url: "/manage/campaigns/landingpage/" + id + "/signups" });
            }
            else {
                if (encryptedid != null && encryptedid != undefined)
                    views.push({ icon: "search", name: 'View', url: "/manage/web/view/" + encryptedid + "?rand=1" });
                else
                    views.push({ icon: "search", name: 'View', url: "/manage/web/" + id + "/view?rand=1" });
                views.push({ icon: "envelope", name: 'Send for Approval', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"] });
                views.push({ icon: "qrcode", name: 'Get QR Code', url: "/manage/landingpage/" + id + "/qrcode" });
                if (options.canedit) views.push({ icon: "edit", name: 'Editor', url: "/manage/web/" + id + "/editor" });
                if (options.output) views.push({ icon: "info-circle", name: 'Info', url: "/manage/web/" + id + "/info", buttons: ["save"] });
            }
            var headerTitle = "";
            if (options.name != undefined) {
                headerTitle = 'Website > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            }
            else
                headerTitle = 'Website > ' + views[0].name + '';
            modal.show({ title: headerTitle, views: views, locked: true, preventClose: true });
        },
        showEditWebsiteWizard: function (web, allpagestemplateonlydb) {
            modal.closeall();
            var info = { name: web.info, url: "/manage/web/" + web.id + "/info" }
            var questions = { name: 'Input', url: "/manage/web/" + web.id + "/questions" }
            var assetpicker = { name: web.assetpicker, url: "/manage/web/" + web.id + "/assetpicker" }
            var editor = { name: web.webeditor, url: "/manage/web/" + web.id + "/editor", wizardclose: true }//Customize
            var opportunitypicker = { name: 'opportunity', url: "/collateral/pdf/" + web.id + "/opportunitypicker", wizardclose: true }

            if (web.hasquestionnaire == true && web.usedatasource == 1 && !allpagestemplateonlydb && web.useprojectsource == 1)
                var _wizdata = {
                    name: web.customizewebsite,
                    steps: [info, questions, assetpicker, opportunitypicker, editor]
                };
           else if (web.hasquestionnaire == true && web.usedatasource == 1 && !allpagestemplateonlydb)
                var _wizdata = {
                    name: web.customizewebsite,
                    steps: [info, questions, assetpicker, editor]
                };
            else if (web.hasquestionnaire == true && web.usedatasource == 0 && web.useprojectsource == 1)
                var _wizdata = {
                    name: web.customizewebsite,
                    steps: [info, questions, opportunitypicker,editor]
                };
            else if (web.hasquestionnaire == true && web.usedatasource == 0)
                var _wizdata = {
                    name: web.customizewebsite,
                    steps: [info, questions, editor]
                };
            else if (web.hasquestionnaire == false && web.usedatasource == 1 && !allpagestemplateonlydb && web.useprojectsource == 1)
                var _wizdata = {
                    name: web.customizewebsite,
                    steps: [info, assetpicker, opportunitypicker, editor]
                };
            else if (web.hasquestionnaire == false && web.usedatasource == 1 && !allpagestemplateonlydb)
                var _wizdata = {
                    name: web.customizewebsite,
                    steps: [info, assetpicker, editor]
                };
            else if (web.hasquestionnaire == false && web.usedatasource == 0 && web.useprojectsource==1)
                var _wizdata = {
                    name: web.customizewebsite,
                    steps: [info, opportunitypicker, editor]
                };
            else
                var _wizdata = {
                    name: web.customizewebsite,
                    steps: [info, editor]
                };
            _wizdata["preventClose"] = false;
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        sendWebsite: function (id, linkids, isSmartlist, isContactcompany) {
            var views = null;
            
            if (linkids != null && linkids != "") {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany, buttons: ["finish"] }];
            }
            else {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"]}];
            }

            modal.show({ title: 'Send', views: views});
        },
        sendWebsiteToPartner: function (id, linkids, isSmartlist) {
            var views = null;
            if (linkids != null && linkids != "")
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&ispartner=" + true, buttons: ["finish"] }];
            else
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&ispartner=" + true, buttons: ["finish"] }];

            modal.show({ title: 'Send', views: views});
        },
        ShowWebReport: function (options) {
            $.extend({
                view: false,
                page: false,
                contact: false,
                currentuser: true
            }, options);
            var views = [];
            var title = null;
            if (options.view)
                views.push({ icon: "search", name: 'View', url: "/manage/web/" + options.id + "/view?rand=1&amp;currentuser=" + options.currentuser });
            if (options.iswebbanner) {
                if (options.userid !== undefined)
                    views.push({ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/webbanner/" + options.id + "/report?currentuser=" + options.currentuser + "&userid=" + options.userid, iconprefix: "far" });
                else
                    views.push({ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/webbanner/" + options.id + "/report?currentuser=" + options.currentuser, iconprefix: "far" });
            }
            else {
                if (options.userid !== undefined)
                    views.push({ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/website/" + options.id + "/report?currentuser=" + options.currentuser + "&userid=" + options.userid, iconprefix: "far" });
                else
                    views.push({ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/website/" + options.id + "/report?currentuser=" + options.currentuser, iconprefix: "far" });
            }
            if (options.page)
                views.unshift({ icon: "file", name: 'Pages', url: "/manage/campaigns/website/" + options.id + "/interestbypage?currentuser=" + options.currentuser });
            else
                views.push({ icon: "file", name: 'Pages', url: "/manage/campaigns/website/" + options.id + "/interestbypage?currentuser=" + options.currentuser });

            if (options.contact)
                views.unshift({ icon: "users", name: 'Contacts', url: "/manage/campaigns/website/" + options.id + "/interestbycontact?currentuser=" + options.currentuser });
            else
                views.push({ icon: "users", name: 'Contacts', url: "/manage/campaigns/website/" + options.id + "/interestbycontact?currentuser=" + options.currentuser });

            if (options.name != undefined) {
                title = 'Websites Report > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            } else
                title = 'Activity > ' + views[0].name +'';
                
            modal.show({ title: title, views: views });
        },
        ShowWebBannerReport: function (options) {
            $.extend({
                view: false,
                contact: false,
                signup: false,
                currentuser: true
            })
            var views = [];
            var title = null;

            var parameters = "";
            if (options.linktoid != undefined) {
                if (options.linktoid != null)
                    parameters = "&linktoid=" + options.linktoid + "&linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption;
                else
                    parameters = "&linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption;

                if (options.startdate != null && options.enddate != null)
                    parameters += "&selectedrange=" + options.selectedrange + "&startdate=" + options.startdate + "&enddate=" + options.enddate;
                else
                    parameters += "&selectedrange=" + options.selectedrange;
            }

            if (options.view)
                views.push({ icon: "search", name: 'View', url: "/manage/web/" + options.id + "/view?rand=1&currentuser=" + options.currentuser });

            if (options.userid !== undefined)
                views.push({ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/webbanner/" + options.id + "/report?currentuser=" + options.currentuser + "&userid=" + options.userid, iconprefix: "far" });
            else
                views.push({ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/webbanner/" + options.id + "/report?currentuser=" + options.currentuser, iconprefix: "far" });

            views.push({ icon: "file", name: 'Pages', url: "/manage/campaigns/website/" + options.id + "/interestbypage?currentuser=" + options.currentuser + parameters });

            if (options.contact)
                views.unshift({ icon: "users", name: 'Contacts', url: "/manage/campaigns/website/" + options.id + "/interestbycontact?currentuser=" + options.currentuser + parameters });
            else
                views.push({ icon: "users", name: 'Contacts', url: "/manage/campaigns/website/" + options.id + "/interestbycontact?currentuser=" + options.currentuser + parameters });

            if (options.name != undefined) {
                title = 'Web Banner > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            }
            else
                title = 'Activity > ' + views[0].name + '';

            modal.show({ title: title, views: views });
        },
        showWebPageVisits: function (siteid, pageid, currentuser) {
            var views = [
                { icon: "file", name: 'Page Visits', url: "/manage/campaigns/website/" + siteid + "/" + pageid + "/interestbypage/visits?currentuser=" + currentuser }
            ];

            modal.show({ title: 'Page Views for Contacts', views: views });
        },
        showWebPageUniqueVisits: function (siteid, pageid, currentuser) {
            var views = [
                { icon: "file", name: 'Unique Visits', url: "/manage/campaigns/website/" + siteid + "/" + pageid + "/interestbypage/unique?currentuser=" + currentuser }
            ];

            modal.show({ title: 'Page Views for Contacts', views: views });
        },
        ShowPresentationReport: function (options) {
            $.extend({
                view: false,
                page: false,
                contact: false,
                locked:false
            })
            var views = [];
            var title = null;
         
            views.push({ icon: "chart-bar", name: 'Report', url: "/collateral/presentation/" + options.id + "/report", iconprefix: "far" });
            if (options.page)
                views.unshift({ icon: "file", name: 'Interest By Page', url: "/collateral/presentation/" + options.id + "/interestbypage" });
            else
                views.push({ icon: "file", name: 'Interest By Page', url: "/collateral/presentation/" + options.id + "/interestbypage" });

            if (options.contact)
                views.unshift({ icon: "users", name: 'Interest By Contact', url: "/collateral/presentation/" + options.id + "/interestbycontact" });
            else
                views.push({ icon: "users", name: 'Interest By Contact', url: "/collateral/presentation/" + options.id + "/interestbycontact" });
                
            if (options.name != undefined) {
                title = 'Presentation Report > '+views[0].name+' (<b><i>' + options.name + '</i></b>)';
            }
            else
                title = 'Activity > ' + views[0].name +'';

            modal.show({ title: title, views: views, locked: options.locked, closeTab: options.closetab });
        },
        ShowPresentationViews: function (id,options) {
            var views = [];
            var title = null;

            views.push({ icon: "search", name: 'View', url: "/collateral/presentation/" + options.id + "/view" });
            views.push({ icon: "info-circle", name: 'Info', url: "/collateral/presentation/" + options.id + "/info", buttons: ["save"] });
            if (options.canEmailSend) {
                if (options.cansend) {
                    if (options.status == 1) {
                        if (options.linkids != null) {
                            views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist, buttons: ["finish"] });
                            if (options.canPartnerSend)
                                views.push({ icon: "user-plus", name: 'Send To Users', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist + "&ispartner=" + true, buttons: ["finish"] });
                        }
                        else {
                            views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"] });
                            if (options.canPartnerSend)
                                views.push({ icon: "user-plus", name: 'Send To Users', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&ispartner=" + true, buttons: ["finish"] });
                        }
                    }
                    else {
                        if (options.linkids != null)
                            views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist + "&ispartner=" + true, buttons: ["finish"] });
                        else
                            views.push({ icon: "user-plus", name: 'Send To Users', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&ispartner=" + true, buttons: ["finish"] });
                    }
                }
            }
            //views.push({ icon: "envelope", name: "Send", url: "/collateral/presentation/" + options.id + "/send" });
            views.push({ icon: "tasks", name: 'Manage Slides', url: "/collateral/presentation/" + options.id + "/reordering", buttons: ["save"]});

            if (options.name != undefined) {
                title = 'Presentations > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            }
            else
                title = 'Presentations > '+views[0].name+'';

            modal.show({ title: title, views: views});
        },
        ShowFormReport: function (options) {
            $.extend({
                signup: false,
                contact: false,
            })
            var strParam = '';
            if (options.linktype != undefined)
                strParam += "linktype=" + options.linktype;
            if (options.viewoption != undefined)
                strParam += "&viewoption=" + options.viewoption;
            if (options.linktoid != undefined)
                strParam += "&linktoid=" + options.linktoid;
            if (options.orgviewoption != undefined)
                strParam += "&orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != undefined)
                strParam += "&groupviewoption=" + options.groupviewoption;

            var views = [];
            var title = null;

            views.push({ icon: "chart-bar", name: 'Report', url: "/forms/" + options.id + "/report?" + strParam, iconprefix: "far"});
            if (options.contact)
                views.unshift({ icon: "users", name: 'Contacts', url: "/forms/" + options.id + "/interestbycontact?" + strParam });
            else
                views.push({ icon: "users", name: 'Contacts', url: "/forms/" + options.id + "/interestbycontact?" + strParam});
            if (options.signup)
                views.unshift({ icon: "signal", name: 'Effectiveness by Use', url: "/forms/" + options.id + "/effectivenessbyuse?" + strParam});
            else
                views.push({ icon: "signal", name: 'Effectiveness by Use', url: "/forms/" + options.id + "/effectivenessbyuse?" + strParam});
            if (options.name != undefined) {
                title = "" + options.title + " > " + views[0].name + " (<b><i>" + options.name + "</i></b>)";
            }
            else
                title = 'Activity > ' + views[0].name + '';

            modal.show({ title: title, views: views });
        },
        showEffectiveMedia: function (options) {
            var strParam = '';

            if (options.linktype != undefined)
                strParam += "linktype=" + options.linktype;
            if (options.viewoption != undefined)
                strParam += "&viewoption=" + options.viewoption;
            if (options.linktoid != undefined)
                strParam += "&linktoid=" + options.linktoid;
            if (options.orgviewoption != undefined)
                strParam += "&orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != undefined)
                strParam += "&groupviewoption=" + options.groupviewoption;
            var views = [{ icon: "envelope", name: 'Effectiveness by Use', url: "/forms/" + options.formid + "/" + options.contactid + "/effectivenessbyuse?" + strParam }];
            modal.show({ title: options.title, views: views });
        },
        showFormSignupData: function (formid, templateid, contactid) {
            var views = [{ icon: "envelope", name: 'Signed Up On', url: "/forms/effectivenessbyuse/signups/" + formid + "/" + templateid + "/" + contactid }];
            modal.show({ title: 'Signed Up On', views: views });
        },
        showSummeryGridData: function (options) {
            var strParam = "";
            if (options.stage != undefined && options.stage != null)
                strParam += strParam != "" ? "&stage=" + options.stage : "?stage=" + options.stage;
            if (options.selectedrange != undefined && options.selectedrange != null)
                strParam += strParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
            if (options.projectTypeID != undefined && options.projectTypeID != null)
                strParam += strParam != "" ? "&projecttypeid=" + options.projectTypeID : "?projecttypeid=" + options.projectTypeID;
            if (options.startdate != undefined && options.startdate != "")
                strParam += strParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            if (options.enddate != undefined && options.enddate != "")
                strParam += strParam != "" ? "&enddate=" + options.enddate: "?enddate=" + options.enddate;
            if (options.linktoid != null)
                strParam += strParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != null)
                strParam += strParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != null)
                strParam += strParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.orgviewoption != null)
                strParam += strParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != null)
                strParam += strParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            var views = [{ icon: "envelope", name: options.title, url: "/widgets/OpportunityTaskGrid" + strParam }];
            modal.show({ title: options.title, views: views });
        },
        showUserRequestReport: function (options) {
            var urlParam = "";
            if (options.widgetname != undefined && options.widgetname != "")
                urlParam += urlParam != "" ? "&widgetname=" + encodeURIComponent(options.widgetname) : "?widgetname=" + encodeURIComponent(options.widgetname);
            if (options.activitytype != undefined && options.activitytype != "")
                urlParam += urlParam != "" ? "&activitytype=" + options.activitytype : "?activitytype=" + options.activitytype;
            if (options.foldername != undefined && options.foldername != "")
                urlParam += urlParam != "" ? "&folder=" + encodeURIComponent(options.foldername) : "?folder=" + encodeURIComponent(options.foldername);
            if (options.stage != undefined && options.stage != "")
                urlParam += urlParam != "" ? "&stage=" + options.stage : "?stage=" + options.stage;
            if (options.caseid != undefined && options.caseid != "")
                urlParam += urlParam != "" ? "&caseid=" + options.caseid : "?caseid=" + options.caseid;
            if (options.projectTypeID != undefined && options.projectTypeID != "")
                urlParam += urlParam != "" ? "&projecttypeid=" + options.projectTypeID : "?projecttypeid=" + options.projectTypeID;
            if (options.fundid != undefined && options.fundid != 0)
                urlParam += urlParam != "" ? "&fundid=" + options.fundid : "?fundid=" + options.fundid;
            if (options.orgid != undefined && options.orgid != "")
                urlParam += urlParam != "" ? "&organizationid=" + options.orgid : "?organizationid=" + options.orgid;
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + options.enddate : "?enddate=" + options.enddate;
            if (options.fundid != undefined && options.fundid != 0)
                urlParam += urlParam != "" ? "&fundid=" + options.fundid : "?fundid=" + options.fundid;
            if (options.linktoid != undefined && options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != undefined && options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != undefined && options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.orgviewoption != undefined && options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != undefined && options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.modern != undefined && options.modern != null && options.modern != "")
                urlParam += urlParam != "" ? "&modern=" + options.modern : "?modern=" + options.modern;
            if (options.isHeaderShowing != null)
                urlParam += urlParam != "" ? "&isheadershowing=" + options.isHeaderShowing : "?isheadershowing=" + options.isHeaderShowing;
            var views = [
                { icon: "", name: options.title, url: "/widgets/userscountreport/" + urlParam }
            ];
            modal.show({ title: "Userwise Report", views: views });

        }, showOpportunityRequestsReport: function (options) {
            var urlParam = "";
            if (options.stage != undefined)
                urlParam += urlParam != "" ? "&stage=" + options.stage : "?stage=" + options.stage;
            if (options.projecttypeid != undefined && options.projectid != "")
                urlParam += urlParam != "" ? "&projecttypeid=" + options.projecttypeid : "?projecttypeid=" + options.projecttypeid;
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + options.enddate : "?enddate=" + options.enddate;
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" +options.viewoption;
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.isHeaderShowing != null)
                urlParam += urlParam != "" ? "&isheadershowing=" + options.isHeaderShowing : "?isheadershowing=" + options.isHeaderShowing;
            var views = [
                { icon: "", name: options.title, url: "/widgets/opportunitygrid/" + urlParam }
            ];
            modal.show({ title: options.title, views: views });

        },
        showLandingpageMedia: function (id, options,encryptedId) {
            $.extend({
                cansend: false,
                canpublish: false,
                canedit: false,
                customize: false,
                contactids: null,
                encryptedId : null,
                canemailsend: false,
                canpartnersend: false,
                isResponsive:false
            }, options);
            var views = [];
            //var modalTitle = "Landing Page";
            if (!options.isNeedApproval) {
                if (!options.isApproved) {
                    if (options.customize) {
                        if (options.canedit) views.push({ icon: "edit", name: options.editor, url: "/manage/landingpage/" + id + "/editor", buttonaction: true });
                        views.push({ icon: "search", name: options.view, url: "/manage/landingpage/" + id + "/view?rand=1" });
                    }
                    else {
                        if (encryptedId != null && encryptedId != undefined){
                            views.push({ icon: "search", name: options.view, url: "/manage/landingpage/view/" + encryptedId + "?rand=1" });
                      }  else
                            views.push({ icon: "search", name: options.view, url: "/manage/landingpage/" + id + "/view?rand=1" });
                        if (options.canedit) views.push({ icon: "edit", name: options.editor, url: "/manage/landingpage/" + id + "/editor", buttonaction: true });
                    }
                }
                else {
                    if (encryptedId != null && encryptedId != undefined)
                        views.push({ icon: "search", name: options.view, url: "/manage/landingpage/view/" + encryptedId + "?rand=1" });
                    else
                        views.push({ icon: "search", name: options.view, url: "/manage/landingpage/" + id + "/view?rand=1" });

                }
                if (options.canemailsend) {
                    if (options.cansend) {
                        if (options.contactids != null) {
                            views.push({ icon: "envelope", name: options.send, url: "/communicate/email/0?templates=" + [id] + "&isMultipleAssetEmail=true&linkids=" + options.contactids, buttons: ["finish"] });
                            if (options.canpartnersend)
                                views.push({ icon: "envelope", name: options.sendtousers, url: "/communicate/email/0?templates=" + [id] + "&isMultipleAssetEmail=true&linkids=" + options.contactids + "&ispartner=" + true, buttons: ["finish"] });
                        }
                        else {
                            views.push({ icon: "envelope", name: options.send, url: "/communicate/email/0?templates=" + [id] + "&isMultipleAssetEmail=true", buttons: ["finish"] });
                            if (options.canpartnersend)
                                views.push({ icon: "envelope", name: options.sendtousers, url: "/communicate/email/0?templates=" + [id] + "&isMultipleAssetEmail=true&ispartner=" + true, buttons: ["finish"] });
                        }
                    }
                }
                if (options.output) {
                    views.push({ icon: "info-circle", name: options.info, url: "/manage/landingpage/" + id + "/info" + "/" + getTimeStamp(), buttons: ["save"] });
                    // views.push({ icon: "view", name: "Personalize", url: "/manage/web/" + id + "/url" });
                }
                if (!options.isResponsive){
                views.push({ icon: "qrcode", name: 'Get QR Code', url: "/manage/landingpage/" + id + "/qrcode" });
                if (options.canautopublish && options.canpublish) views.push({ icon: "globe", name: options.publish, url: "/setup/publish/media/true/" + id, buttons: ["publish"] });
                if (options.output && options.hasquestionnaire)
                    views.push({ icon: "question-circle", name: 'Input', url: "/manage/landingpage/" + id + "/questions", buttons: ["save"] });
                views.push({ icon: "chart-bar", name: options.report, url: "/manage/campaigns/landingpage/" + id + "/report", iconprefix: "far" });
                views.push({ icon: "file", name: options.pages, url: "/manage/campaigns/website/" + id + "/interestbypage"});
                views.push({ icon: "users", name: options.contacts, url: "/manage/campaigns/website/" + id + "/interestbycontact"});
                views.push({ icon: "signal", name: options.signups, url: "/manage/campaigns/landingpage/" + id + "/signups" });
            }
            }
            else {
                if (encryptedId != null && encryptedId != undefined)
                    views.push({ icon: "search", name: options.view, url: "/manage/landingpage/view/" + encryptedId + "?rand=1" });
                else
                    views.push({ icon: "search", name: options.view, url: "/manage/landingpage/" + id + "/view?rand=1" });
                views.push({ icon: "envelope", name: options.sendtoapproval, url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"] });
                views.push({ icon: "qrcode", name: 'Get QR Code', url: "/manage/landingpage/" + id + "/qrcode" });
                if (options.canedit) views.push({ icon: "edit", name: options.editor, url: "/manage/landingpage/" + id + "/editor" });
                if (options.output) views.push({ icon: "info-circle", name: options.info, url: "/manage/landingpage/" + id + "/info", buttons: ["save"]});
            }
            var headerTitle = "";
            if (options.name != undefined) {
                if (options.isResponsive)
                    headerTitle = 'Knowledge Pages > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
                else
                headerTitle = 'Landing Page > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            }
            else{
                if (options.isResponsive)
                    headerTitle = 'Knowledge Pages > ' + views[0].name + '';
                else
                headerTitle = 'Landing Page > ' + views[0].name + '';
                }
            modal.show({ title: headerTitle, views: views, locked: true, preventClose: true });
        },
        //Modify by lalita to get media template type
        showEditLandingpageWizard: function (pagedata, allpagestemplateonlydb) {
            modal.closeall();
            var temptype = pagedata.templatetype;//Added by lalita to get media template type
            var info = { name: pagedata.info, url: "/manage/landingpage/" + pagedata.id + "/info" }
            var questions = { name: 'Input', url: "/manage/landingpage/" + pagedata.id + "/questions" }
            var assetpicker = { name: pagedata.assetpicker, url: "/manage/landingpage/" + pagedata.id + "/assetpicker" }
            var opportunityStep = { name: 'opportunity', url: "/collateral/pdf/" + pagedata.id + "/opportunitypicker" }
            var editor = { name: pagedata.webeditor, url: "/manage/landingpage/" + pagedata.id + "/editor?canEmailSend=" + pagedata.send, wizardclose: true }
            if (pagedata.isresponsive){
                editor = { name: pagedata.webeditor, url: "/manage/landingpage/" + pagedata.id + "/editor?isResponsive=true", wizardclose: true }
            }
            if (pagedata.hasquestionnaire == true && pagedata.usedatasource == 1 && !allpagestemplateonlydb && pagedata.useprojectsource==1)
                var _wizdata = {
                    name: pagedata.customizewebsite,
                    steps: [info, questions, assetpicker, opportunityStep, editor]
                };
            else if (pagedata.hasquestionnaire == true && pagedata.usedatasource == 0 && pagedata.useprojectsource==0)
                var _wizdata = {
                    name: pagedata.customizewebsite,
                    steps: [info, questions, editor]
                };
            else if (pagedata.hasquestionnaire == false && pagedata.useprojectsource == 1 && pagedata.usedatasource == 1 && !allpagestemplateonlydb)
                var _wizdata = {
                    name: pagedata.customizewebsite,
                    steps: [info, assetpicker, opportunityStep, editor]
                };
            else if (pagedata.hasquestionnaire == false && pagedata.usedatasource == 1 && !allpagestemplateonlydb)
                var _wizdata = {
                    name: pagedata.customizewebsite,
                    steps: [info, assetpicker, editor]
                };
            else if (pagedata.hasquestionnaire == true && pagedata.usedatasource == 1 && !allpagestemplateonlydb)
                var _wizdata = {
                    name: pagedata.customizewebsite,
                    steps: [info, questions, assetpicker, editor]
                };
            else if (pagedata.hasquestionnaire == false && pagedata.useprojectsource == 1 && pagedata.usedatasource == 0 && !allpagestemplateonlydb)
                var _wizdata = {
                    name: pagedata.customizewebsite,
                    steps: [info, assetpicker, opportunityStep, editor]
                };
            else if (pagedata.hasquestionnaire == false && pagedata.useprojectsource == 0 && pagedata.usedatasource == 0 && !allpagestemplateonlydb)
                var _wizdata = {
                    name: pagedata.customizewebsite,
                    steps: [info, assetpicker, editor]
                };
            else if (pagedata.hasquestionnaire == false && pagedata.useprojectsource == 1)
                var _wizdata = {
                    name: pagedata.customizewebsite,
                    steps: [info, opportunityStep, editor]
                };
            else if (pagedata.hasquestionnaire == true && pagedata.useprojectsource == 1)
                var _wizdata = {
                    name: pagedata.customizewebsite,
                    steps: [info, questions, opportunityStep, editor]
                };
            else if (pagedata.hasquestionnaire == false && pagedata.usedatasource == 0)
                var _wizdata = {
                    name: pagedata.customizewebsite,
                    steps: [info, editor]
                };
            else
                var _wizdata = {
                    name: pagedata.customizewebsite,
                    steps: [info, editor]
                };
            _wizdata["preventClose"] = false;
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showResponsiveWeb: function (option) {        
            views = [{icon: "view", name : 'View', url: "/manage/responsiveweb/" + option .id+"/viewasset/"}];
            var title = "";
            if (option.name != undefined)
                title = 'Knowledge Pages > ' + views[0].name + ' (<b><i>' + data.name + '</i></b>)';
            else
                title = 'Knowledge Pages > ' + views[0].name + '<br>';
            modal.show({ title: title, views: views });
        },
        showVideoMediaWizard: function (pagedata, allpagestemplateonlydb) {
            modal.closeall();
            var temptype = pagedata.templatetype;
            var info = { name: pagedata.info, url: "/manage/video/" + pagedata.id + "/info" }
            var editor = { name: pagedata.videoeditor, url: "/manage/video/" + pagedata.id + "/editor", wizardclose: true }
            var preview = { name: pagedata.preview, url: "/manage/video/mediapreview/" + pagedata.id + "?isstepprocess=" + true, wizardclose: true }
            var questions = { name: 'Input', url: "/manage/landingpage/" + pagedata.id + "/questions" }
            var _wizdata = {
                name: pagedata.customizewebsite,
                steps: [info, editor, preview]
            };
            if (pagedata.hasquestionnaire == true)
                var _wizdata = {
                    name: pagedata.customizewebsite,
                    steps: [info, questions, editor, preview]
                };
            _wizdata["preventClose"] = false;
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showVideoMediaEditor: function (pagedata) {
            modal.closeall();
            var editor = { name: pagedata.videoeditor, url: "/manage/video/" + pagedata.id + "/editor", wizardclose: true }
            var preview = { name: pagedata.preview, url: "/manage/video/mediapreview/" + pagedata.id + "?isstepprocess=" + true, wizardclose: true }
            var _wizdata = {
                name: pagedata.customizewebsite,
                steps: [editor, preview]
            };
            _wizdata["preventClose"] = false;
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showVideoPreview: function (id, options) {
            $.extend({
                cansend: false,
                canpublish: false,
                canedit: false,
                customize: false,
                contactids: null
            }, options);

            var views = [{ icon: "search", name: 'View', url: "/manage/video/mediapreview/" + id + "?isstepprocess=" + false }];
            if (options.cansend) {
                if (options.contactids != null) {
                    views.push({ icon: "envelope", name: options.send, url: "/communicate/email/0?templates=" + [id] + "&isMultipleAssetEmail=true&linkids=" + options.contactids, buttons: ["send"] });
                    if (options.canPartnerSend)
                        views.push({ icon: "envelope", name: options.sendtousers, url: "/communicate/email/0?templates=" + [id] + "&isMultipleAssetEmail=true&linkids=" + options.contactids + "&ispartner=" + true, buttons: ["send"] });
                }
                else {
                    views.push({ icon: "envelope", name: options.send, url: "/communicate/email/0?templates=" + [id] + "&isMultipleAssetEmail=true", buttons: ["send"] });
                    if (options.canPartnerSend)
                        views.push({ icon: "envelope", name: options.sendtousers, url: "/communicate/email/0?templates=" + [id] + "&isMultipleAssetEmail=true&ispartner=" + true, buttons: ["send"] });
                }
            }
            if (options.canpublish) views.push({ icon: "globe", name: options.publish, url: "/setup/publish/media/true/" + id, buttons: ["publish"] });

            var headerTitle = "";
            if (options.name != undefined) {
                headerTitle = 'Video > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            }
            else
                headerTitle = 'Video > ' + views[0].name + '';
            modal.show({ title: headerTitle, views: views, locked: true, preventClose: true });
        },
        showVideoPreviewOnly: function (id, options) {

            var views = [{ icon: "search", name: 'View', url: "/manage/video/mediapreview/" + id + "?isstepprocess=" + false }];
            var headerTitle = "";
            if (options.name != undefined) {
                headerTitle = 'Video > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            }
            else
                headerTitle = 'Video > ' + views[0].name + '';
            modal.show({ title: headerTitle, views: views, locked: true, preventClose: true });
        },
        showVideoSend: function (id, options) {
            $.extend({ cansend: false, contactids: null }, options);
            var views = null;
            if (options.cansend) {
                if (options.contactids != null) {
                    views = [{ icon: "envelope", name: options.send, url: "/communicate/email/0?templates=" + [id] + "&isMultipleAssetEmail=true&linkids=" + options.contactids, buttons: ["finish"] }];
                }
                else {
                    views = [{ icon: "envelope", name: options.send, url: "/communicate/email/0?templates=" + [id] + "&isMultipleAssetEmail=true", buttons: ["finish"] }];
                }
            }
            modal.show({ title: options.send, views: views, locked: true, preventClose: true });
        },

        showVideoPublish: function (id, istemplate, options) {
            $.extend({ canpublish: false }, options);
            var views = null;
            if (options.canpublish) views = [{ icon: "globe", name: options.publish, url: "/setup/publish/media/" + istemplate +"/" + id, buttons: ["publish"] }];
            modal.show({ title: options.publish, views: views, locked: true, preventClose: true });
        },
        sendLandingPage: function (id, linkids) {
            var views = null;
            if (linkids != null && linkids != "") {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + linkids, buttons: ["finish"]}];
            }
            else {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"]}];
            }

            modal.show({ title: 'Send Landing Page', views: views});
        },
        sendWebBanner: function (id, linkids,name) {
            var views = null;
            if (linkids != null && linkids != "") {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + linkids, buttons: ["finish"]}];
            }
            else {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"]}];
            }
            var title = name != undefined ? 'Send Web Banner' + ' - ' + name : 'Send';
            modal.show({ title: title, views: views });
        },
        sendWebBannerToPartner: function (id, linkids, name) {
            var views = null;
            if (linkids != null && linkids != "")
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&contactids=" + linkids + "&ispartner=" + true, buttons: ["finish"]}];
            else
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&ispartner=" + true, buttons: ["finish"] }];
            var title = name != undefined ? 'Send Web Banner' + ' - ' + name : 'Send';
            modal.show({ title: title, views: views });
        },
        sendLandingPageToPartner: function (id, linkids) {
            var views = null;
            if (linkids != null && linkids != "")
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&contactids=" + linkids + "&ispartner=" + true, buttons: ["finish"]}];
            else
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&ispartner=" + true, buttons: ["finish"] }];
            modal.show({ title: 'Send Landing Page', views: views });
        },
        ShowLandingPageReport: function (options) {
            $.extend({
                view: false,
                contact: false,
                signup: false,
                currentuser: true
            })
            var views = [];
            var title = null;

            var parameters = "";
            if (options.linktoid != undefined)
            {
                if (options.linktoid != null)
                    parameters = "&linktoid=" + options.linktoid + "&linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption;
                else
                    parameters = "&linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption;

                if (options.startdate != null && options.enddate != null)
                    parameters += "&selectedrange=" + options.selectedrange + "&startdate=" + options.startdate + "&enddate=" + options.enddate;
                else
                    parameters += "&selectedrange=" + options.selectedrange;
            }

            if (options.view)
                views.push({ icon: "search", name: 'View', url: "/manage/web/" + options.id + "/view?rand=1&currentuser=" + options.currentuser });
            if (options.userid !== undefined)
                views.push({ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/landingpage/" + options.id + "/report?currentuser=" + options.currentuser + "&userid=" + options.userid, iconprefix: "far" });
            else
                views.push({ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/landingpage/" + options.id + "/report?currentuser=" + options.currentuser, iconprefix: "far" });
            views.push({ icon: "file", name: 'Pages', url: "/manage/campaigns/website/" + options.id + "/interestbypage?currentuser=" + options.currentuser + parameters });

            if (options.contact)
                views.unshift({ icon: "users", name: 'Contacts', url: "/manage/campaigns/website/" + options.id + "/interestbycontact?currentuser=" + options.currentuser + parameters });
            else
                views.push({ icon: "users", name: 'Contacts', url: "/manage/campaigns/website/" + options.id + "/interestbycontact?currentuser=" + options.currentuser + parameters });

            if (options.signup)
                views.unshift({ icon: "signal", name: 'Signups', url: "/manage/campaigns/landingpage/" + options.id + "/signups?currentuser=" + options.currentuser + parameters });
            else
                views.push({ icon: "signal", name: 'Signups', url: "/manage/campaigns/landingpage/" + options.id + "/signups?currentuser=" + options.currentuser + parameters });

            if (options.name != undefined) {
                title = 'Landing Page > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            }
            else
                title = 'Activity > ' + views[0].name + '';

            modal.show({ title: title, views: views });
        },

        showDataroomAssetsVisits: function (id) {
            var views = [
                { icon: "cog", name: 'Documents', url: "/collateral/data-room/" + id + "/documenttracking" }//to show dataroom documents(asset views/visits)#77704
            ];
            modal.show({ title: title, views: views });
        },

        showDataroomAssetsVisitsLastMonth: function (option) {
            var views = [
                { icon: "cog", name: 'Documents', url: "/collateral/data-room/" + option.id + "/documenttracking?lastmonth=true"}
            ];
            modal.show({ title: title, views: views });
        },
        showPlaybookMedia: function (id, options) {
            $.extend({
                canEmailSend: false,
                canPartnerSend: false,
                cansend: false,
                isMedia: false,
                canpublish: false,
                canedit: false,
                customize: false,
                linkids: null,
                isSmartlist: null,
                closetab:false,
                isPlaybook:false
            }, options);
            var views = [];
            if (!options.isNeedApproval) {
                if (!options.isApproved) {
                    if (options.customize) {
                        if (options.isMedia) {
                            if (options.canedit) views.push({
                                icon: "cog", name: 'Customize', url: `/collateral/data-room/${id}/editor?isplaybook=${options.isPlaybook}&playbookid=${options.playbookid}`, buttonaction: true });
                        }
                        views.push({ icon: "search", name: 'View', url: `/collateral/data-room/${id}/view?rand=1&isPlaybook=${options.isPlaybook}` });
                    }
                    else {
                        views.push({ icon: "search", name: 'View', url: `/collateral/data-room/${id}/view?rand=1&isPlaybook=${options.isPlaybook}` });
                        if (options.isMedia || (!options.output)) {
                            if (options.canedit) views.push({ icon: "cog", name: 'Customize', url: `/collateral/data-room/${id}/editor?isplaybook=${options.isPlaybook}&playbookid=${options.playbookid}`, buttonaction: true });
                        }
                    }
                }
                else
                    views.push({ icon: "search", name: 'View', url: `/collateral/data-room/${id}/view?rand=1&isPlaybook=${options.isPlaybook}` });

                if (options.canEmailSend) {
                    if (options.linkids != null) {
                        if (options.cansend)
                            views.push({ icon: "envelope", name: 'Send Email', url: `/communicate/email/0?assetid=${id}&isAssetEmail=true&linkids=${options.linkids}&isSmartlist=${options.isSmartlist}&customsendmodal=true&hideimportcustomize=true&playbookid=${options.playbookid}`, buttons: ["finish"] });
                        if (options.cansend && options.canPartnerSend)
                            views.push({ 
                                icon: "user-plus", name: "Send To Users", url: `/communicate/email/0?assetid=${id}&isAssetEmail=true&linkids=${options.linkids}&isSmartlist=${options.isSmartlist}&ispartner=true&customsendmodal=true&hideimportcustomize=true&playbookid=${options.playbookid}`, buttons: ["finish"]});
                    }
                    else {
                        if (options.cansend)
                            views.push({ icon: "envelope", name: 'Send Email', url: `/communicate/email/0?assetid=${id}&isAssetEmail=true&customsendmodal=true&hideimportcustomize=true&playbookid=${options.playbookid}`, buttons: ["finish"] });
                        if (options.cansend && options.canPartnerSend)
                            views.push({ icon: "user-plus", name: "Send To Users", url: `/communicate/email/0?assetid=${id}&isAssetEmail=true&ispartner=true&customsendmodal=true&hideimportcustomize=true&playbookid=${options.playbookid}`, buttons: ["finish"]});
                    }
                }
                if (options.canpublish) views.push({ icon: "globe", name: 'Social Share', url: `/setup/publish/media/true/${id}`, buttons: ["publish"] });

                if (options.output)///if it is media then only add info page
                    views.push({ icon: "info-circle", name: 'Info', url: `/collateral/data-room/${id}/info/${getTimeStamp()}`, buttons: ["save"] });
                if (options.output && options.hasquestionnaire)
                    views.push({ icon: "question-circle", name: 'Input', url: `/collateral/data-room/${id}/questions`, buttons: ["save"] });
                if (options.output) {
                    views.push({ icon: "chart-bar", name: 'Report', url: `/collateral/data-room/${id}/report`, iconprefix: "far" });
                    views.push({ icon: "users", name: 'Contacts', url: `/collateral/data-room/${id}/interestbycontact` });
                    views.push({ icon: "cog", name: 'Documents', url: `/collateral/data-room/${id}/documenttracking`});
                }

            } else {
                views.push({ icon: "search", name: 'View', url: `/collateral/data-room/${id}/view?rand=1&isPlaybook=${options.isPlaybook}` });
                if (options.cansend) views.push({ icon: "envelope", name: 'Send for Approval', url: `/communicate/email/0?assetid=${id}&isAssetEmail=true`, buttons:["finish"]});
                if (options.canedit) views.push({ icon: "edit", name: 'Customize', url: `/collateral/data-room/${id}/editor?isplaybook=${options.isPlaybook}&playbookid=${options.playbookid}` });
                if (options.output) views.push({ icon: "info-circle", name: 'Info', url: `/collateral/data-room/${id}/info`, buttons: ["save"] });
            }
            if (!options.output)
                modal.show({ title: 'Data Room > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)', views: views, locked: true, preventClose: true });
            else
                modal.show({ title: 'Data Room > ' + views[0].name + '', views: views, locked: true, preventClose: true });
        },
        showEditPlaybookWizard: function (playbook) {
            $.extend({
                locked: false,
                closetab:false
            },playbook)
            modal.closeall();
            var temptype = playbook.templatetype;
            var info = { name: playbook.info, url: "/collateral/data-room/" + playbook.id + "/info" + "/" + getTimeStamp() }
            var questions = { name: 'Input', url: "/collateral/data-room/" + playbook.id + "/questions" }
            var editor = {
                name: getTemplateTypetext(temptype) + playbook.editor, url: "/collateral/data-room/" + playbook.id + "/editor" + "?canEmailSend=" + playbook.send, wizardclose: true }//Customize

            if (playbook.hasquestionnaire == true) {
                var _wizdata = {
                    name: playbook.customizedataroom,
                    steps: [info, questions, editor]
                };
            }
            else {
                var _wizdata = {
                    name: playbook.customizedataroom,
                    steps: [info, editor]
                };
            }
            _wizdata["preventClose"] = playbook.locked;
            _wizdata["closeTab"] = playbook.closetab;
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        sendPlaybook: function (id, pbdata) {
            $.extend({
                locked:false
            },pbdata)
            var views = null;
            
            if (pbdata.linkids != null && pbdata.linkids != "") {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + pbdata.linkids + "&isSmartlist=" + pbdata.isSmartlist + "&isContactcompany=" + pbdata.isContactcompany, buttons: ["finish"] }];
            }
            else if (pbdata.calendareventid != null && pbdata.calendareventid != "") {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&calendareventid=" + pbdata.calendareventid, buttons: ["finish"]}];
            }
            else {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"]}];
            }
            modal.show({ title: 'Send', views: views, locked: pbdata.locked, closeTab: pbdata.closetab });
        },
        sendPlaybookForProject: function (options) {
            var id = options.id;
            var pbData = options;
            var projectID = options.projectid;
            var projectTypeID = options.projecttypeid;
            $.extend({
                locked: false
            }, pbData)
            var views = null;

            if (pbData.linkids != null && pbData.linkids != "") {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + pbData.linkids + "&isSmartlist=" + pbData.isSmartlist + "&isContactcompany=" + pbData.isContactcompany + "&isopportunity=true&projectid=" + projectID + "&projecttypeid=" + projectTypeID, buttons: ["finish"]}];
            }
            else {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true" + "&isopportunity=true&projectid=" + projectID + "&projecttypeid=" + projectTypeID, buttons: ["finish"]}];
            }
            modal.show({ title: 'Send', views: views, locked: pbData.locked, closeTab: pbData.closetab });
        },
        showPlaybookReport: function (options) {
            $.extend({
                locked: false,
                closetab:false
            },options)
            var views = [
                { icon: "chart-bar", name: 'Report', url: "/collateral/data-room/" + options.id + "/report", iconprefix: "far" },
               { icon: "users", name: 'Contacts', url: "/collateral/data-room/" + options.id + "/interestbycontact" },
               { icon: "share", name: 'Documents', url: "/collateral/data-room/" + options.id + "/documenttracking" },
            ];
            var title = 'Data Room > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';//#73350 Playbook text appeared instead of Dataroom
            modal.show({ title: title, views: views, locked: options.locked, closeTab: options.closetab });
        },
        showFanpageReport: function (options) {
            var title = null;
            var views = [
                 { icon: "chart-bar", name: 'Report', url: "/social/breakdown/" + options.id + "/fanpage", iconprefix: "far" },
                 { icon: "file", name: 'Contacts', url: "/social/fanpage/" + options.id + "/interestbycontact" }
            ];
            if (options.name != undefined)
                title = 'Facebook Page > ' + views[0].option + ' (<b><i>' + options.name + '</i></b>)';
            else
                title = 'Facebook Page > ' + views[0].option + '';

            modal.show({ title: title, views: views });
        },
        showMediaReport: function (options) {
            $.extend({
                mediatype: 1
            }, options);
            var title = null;
            var views = [
                { icon: "chart-bar", name: 'Report', url: "/social/breakdown/" + options.id + "/" + options.mediatype + "/media", iconprefix: "far" },
               { icon: "signal", name: 'Contacts', url: "/social/socialmedia/" + options.id + "/interestbycontact" },
            ];
            if (options.name != undefined)
                title = 'Social Media > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            else
                title = 'Social Media > ' + views[0].name + '';

            modal.show({ title: title, views: views });
        },
        showTrackingSitesReport: function (data) {
           
            var views = [];
            if (data.isnew == undefined) {
                views.push({ icon: "chart-bar", name: 'Report', url: "/manage/externaltracking/sites/" + data.id + "/report", iconprefix: "far" });
                views.push({ icon: "share", name: 'Pages', url: "/manage/externaltracking/sites/" + data.id + "/interestbypage" });
                views.push({ icon: "ban", name: 'Keywords', url: "/manage/externaltracking/sites/" + data.id + "/keywords" });
                views.push({ icon: "code", name: 'Track Code', url: "/trackingcode/" + data.key + "/0" });
            }
            views.push({ icon: "users", name: 'Contacts', url: "/manage/externaltracking/sites/" + data.id + "/interestbycontact" });
            if (data.canedit == true) {
                views.push({ icon: "edit", name: 'Edit', url: "/manage/externaltracking/sites/" + data.id + "/" + data.key + "/edit", buttons: ["save"] });
            }
            var title = 'Tracking Site > ' + views[0].name + ' (<b><i>' + data.name + '</i></b>)';
            modal.show({ title: title, views: views });
        },

        showTrackSiteReport: function (data) {
            var views = [];
            views.push({ icon: "chart-bar", name: 'Report', url: "/manage/externaltracking/sites/" + data.id + "/report", iconprefix: "far" });
            if (data.page)
                views.unshift({ icon: "share", name: 'Pages', url: "/manage/externaltracking/sites/" + data.id + "/interestbypage" });
            else
                views.push({ icon: "share", name: 'Pages', url: "/manage/externaltracking/sites/" + data.id + "/interestbypage" });

            if (data.contact)//                
                views.unshift({ icon: "users", name: 'Contacts', url: "/manage/externaltracking/sites/" + data.id + "/interestbycontact" });
            else
                views.push({ icon: "users", name: 'Contacts', url: "/manage/externaltracking/sites/" + data.id + "/interestbycontact" });

            if (data.trackcode)// 
                views.unshift({ icon: "code", name: 'Track Code', url: "/trackingcode/" + data.key + "/0" });
            else
                views.push({ icon: "code", name: 'Track Code', url: "/trackingcode/" + data.key + "/0" });

            views.push({ icon: "ban", name: 'Keywords', url: "/manage/externaltracking/sites/" + data.id + "/keywords" });
            if (data.canedit == "True") {
                views.push({ icon: "edit", name: 'Edit', url: "/manage/externaltracking/sites/" + data.id + "/" + data.key + "/edit",buttons:["save"] });
            }

            modal.show({ title: 'Activity > '+views[0].name+'', views: views });



        },
        showTrackingLinkEdit: function (data) {
            var views = [
                { icon: "info-circle", name: 'Info', url: "/manage/externaltracking/links/" + data.id + "/" + data.key + "/edit", buttons: ["save"] }
            ];
            views.push({ icon: "chart-bar", name: 'Report', url: "/manage/externaltracking/links/" + data.id + "/report?campaignID=" + data.campaignid + "", iconprefix: "far" });
            if (data.fromsource) {
                if (data.contact)
                    views.unshift({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact?source=true&sourceid=" + data.sourceid });
                else
                    views.push({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact?source=true&sourceid=" + data.sourceid });
            }
            else {
                if (data.contact) {
                    if (data.showsignup && data.showsignup != undefined)
                        views.unshift({ icon: "user", name: 'Signups', url: "/manage/campaigns/" + data.campaignid + "/signupcontact?linkid=" + data.id })
                    else
                        views.unshift({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact" });
                }
                else
                    views.push({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact" });
            }
            if (data.trackcode)
                views.unshift({ icon: "code", name: 'Track Link', url: "/trackingcode/" + data.key + "/1" });
            else
                views.push({ icon: "code", name: 'Track Link', url: "/trackingcode/" + data.key + "/1" })

            if (data.showPermission)
                views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/newversion/" + data.shareType + "/" + data.id, buttons: ["save"] });

            var title = 'Tracking Link Info' + " (<b><i>" + data.name + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        showTrackingLinkInfo: function (data) {
            var views = [
                { icon: "info-circle", name: 'Info', url: "/manage/externaltracking/links/" + data.id + "/" + data.key + "/edit", buttons: ["save"] }
            ];
            var title = 'Tracking Link Info';
            modal.show({ title: title, views: views });
        },
        showTrackingLinkWizard: function (data) {

            var info = { name: 'Info', url: "/manage/externaltracking/links/" + data.id + "/" + data.key + "/edit" };
            var sharing = { name: "Sharing", url: "/setup/sharing/newversion/" + data.shareType + "/" + data.id };

            var _wizdata = {
                name: 'Info',
                steps: [info, sharing]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showTrackingLinkContacts: function (data) {
            var views = [
                { icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact?showsource=false" }
            ];
            var title = 'Tracking Link Contacts' + " (<b><i>" + data.name + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        showTrackingLinksReport: function (data) {
            var removeTrackLinkOption = false;
            if (data.removetracklinkoption)
                removeTrackLinkOption = true;
            var views = [
                { icon: "chart-bar", name: 'Report', url: "/manage/externaltracking/links/" + data.id + "/report?campaignID=" + data.campaignid + "", iconprefix: "far" }];
            if (data.fromsource) {
                if (data.contact)
                    views.unshift({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact?source=true&sourceid=" + data.sourceid });
                else
                    views.push({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact?source=true&sourceid=" + data.sourceid });
            }
            else {
                if (data.contact) {
                    if (data.showsignup && data.showsignup != undefined)
                        views.unshift({ icon: "user", name: 'Signups', url: "/manage/campaigns/" + data.campaignid + "/signupcontact?linkid=" + data.id })
                    else
                        views.unshift({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact" });
                }
                else
                    views.push({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact" });
            }
            if (data.canedit == "True") {
                views.push({ icon: "info-circle", name: 'Info', url: "/manage/externaltracking/links/" + data.id + "/" + data.key + "/edit",buttons:["save"] });
            }
            if (!removeTrackLinkOption) {
                if (data.trackcode)// 
                    views.unshift({ icon: "code", name: 'Track Link', url: "/trackingcode/" + data.key + "/1" });
                else
                    views.push({ icon: "code", name: 'Track Link', url: "/trackingcode/" + data.key + "/1" });
            }

            //if (data.canshare == "True") // ned to check the sharing permission
            //    views.push({ icon: "share-alt", name: "Sharing", url: "/setup/sharing/permissions/" + data.id + "/" + 1500 + "/" + null, buttons: ["save"] }); //TYPE_TRACKING_LINKS:1500
            var title = null;
            if (data.name != undefined)
                title = 'Link Tracking ' + views[0].name + ' (<b><i>' + data.name + '</i></b>)';
            else if (data.showsignup && data.showsignup != undefined)
                title = views[0].name;
            else {
                if (data.fromsource) {
                    var sourcename = data.sourcename.charAt(0).toUpperCase() + data.sourcename.slice(1).toLowerCase();
                    title = 'Activity ' + views[0].name + ' (<b><i>Source-wise Chart: ' + sourcename + '</i></b>)';
                }
                else
                    title = 'Activity ' + views[0].name;
            }
            modal.show({ title: title, views: views });
        },
        showTrackingLinkPermission: function (data, shareType, idsToShare) {
            var views = [
                { icon: "share-alt", name: 'Sharing', url: "/setup/sharing/newversion/" + shareType + "/" + idsToShare, buttons: ["save"] }
            ];
            views.push({ icon: "info-circle", name: 'Info', url: "/manage/externaltracking/links/" + data.id + "/" + data.key + "/edit" });

            views.push({ icon: "chart-bar", name: 'Report', url: "/manage/externaltracking/links/" + data.id + "/report?campaignID=" + data.campaignid + "", iconprefix: "far" });
            if (data.fromsource) {
                if (data.contact)
                    views.unshift({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact?source=true&sourceid=" + data.sourceid });
                else
                    views.push({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact?source=true&sourceid=" + data.sourceid });
            }
            else {
                if (data.contact) {
                    if (data.showsignup && data.showsignup != undefined)
                        views.unshift({ icon: "user", name: 'Signups', url: "/manage/campaigns/" + data.campaignid + "/signupcontact?linkid=" + data.id })
                    else
                        views.unshift({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact" });
                }
                else
                    views.push({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact" });
            }
            if (data.trackcode)
                views.unshift({ icon: "code", name: 'Track Link', url: "/trackingcode/" + data.key + "/1" });
            else
                views.push({ icon: "code", name: 'Track Link', url: "/trackingcode/" + data.key + "/1" })

            var title = 'Tracking Link Info > ' + views[0].name;
            modal.show({ title: title, views: views });
        },
        showTemplateReport: function (options) {
            var views = [
                    { icon: "signal", name: 'Links', url: "/autotemplate/" + options.id }
            ];
            modal.show({ title: 'Template Report' + options.name, views: views });
        },
        showPrintReport: function (id,templateid) {
            var views = [
                    { icon: "signal", name: 'Links', url: "/autotemplate/" + id + "?templateid=" + templateid }
            ];
            modal.show({ title: 'Template Report', views: views });
        },
        showPollMedia: function (id, options) {
            $.extend({
                canedit: false,
                canpublish: false,
                customize: false
            }, options);

            var views = [];
            if (options.customize) {
                if (options.canedit) views.push({ icon: "edit", name: 'Customize', url: "/collateral/poll/" + id + "/editor" });
                views.push({ icon: "search", name: 'View', url: "/collateral/poll/" + id + "/view" });
            }
            else {
                views.push({ icon: "search", name: 'View', url: "/collateral/poll/" + id + "/view" });
                if (options.canedit) views.push({ icon: "edit", name: 'Customize', url: "/collateral/poll/" + id + "/editor" });
            }
            if (options.canpublish) views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/true/" + id, buttons: ["save"] });
            if (options.output) {
                views.push({ icon: "info-circle", name: 'Info', url: "/collateral/poll/" + id + "/info" ,buttons:["save"]});
            }
            modal.show({ title: '{$ajax_poll.Poll} > '+views[0].name+'', views: views});
        },
        showEditPollWizard: function (poll) {
            var info = { name: 'Info', url: "/collateral/poll/" + poll.id + "/info" }
            var editor = { name: 'Customize', url: "/collateral/poll/" + poll.id + "/editor" }
            var medianame = poll.name;

            var _wizdata = {
                name: 'Customize ' + medianame,
                steps: [info, editor]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showTemplateUsageReport: function (options) {
            $.extend({
                isusage: false,
                viewheader:'Report'
            }, options);

            var views = [];
            var usageFromPlaybook = false;
            if (options.usagefromplaybook)
                usageFromPlaybook = true;
            if (options.isassetreport == undefined)
                options.isassetreport = false;
            if (options.linktoid != null)
                views.push({
                    icon: "signal", name: options.viewheader, url: "/setup/asset/report/" + options.id + "/" + getTimeStamp() + "?usage=" + options.isusage + "&linktoid=" + options.linktoid + "&linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption + "&format=" + options.format + "&selectedrange=" + options.selectedrange + "&usedinplaybook=" + usageFromPlaybook
                });
            else 
                views.push({
                    icon: "signal", name: options.viewheader, url: "/setup/asset/report/" + options.id + "/" + getTimeStamp() + "?usage=" + options.isusage + "&linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption + "&format=" + options.format + "&selectedrange=" + options.selectedrange + "&usedinplaybook=" + usageFromPlaybook + "&isassetreport=" + options.isassetreport
                });

            if (options.startdate != null && options.startdate != "") {
                views[0].url += "&startdate=" + encodeURIComponent(options.startdate);
            }
            if (options.enddate != null && options.enddate != "") {
                views[0].url += "&enddate=" + encodeURIComponent(options.enddate);
            }
            if (options.usergroupid != null) {
                views[0].url += "&usergroupid=" + options.usergroupid;
            }
            if (options.grouptype != null) {
                views[0].url += "&grouptype=" + options.grouptype;
            }
            if (options.usergroupviewoption != null) {
                views[0].url += "&usergroupviewoption=" + options.usergroupviewoption;
            }

            modal.show({ title: options.title + "-" + options.name, views: views });
        },

        showAssetTemplateContactReport: function (options) {
            $.extend({
                isusage: false,
                viewheader: "Report"
            }, options);
            var modaltitle;
            var views = [];
            //if (options.linktoid != null)
                views.push({
                    icon: "signal", name: options.viewheader, url: "/setup/viewasset/contactreport/" + options.id +"?usage=" + options.isusage + "&linktoid=" + options.linktoid + "&linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption + "&format=" + options.format + "&selectedrange=" + options.selectedrange + "&isGridview=" + options.isGridView

                });
            
            if (options.isprintreport)
                modaltitle = ""
            else
                modaltitle = options.title + "-" + options.name;

            modal.show({ title: modaltitle , views: views });
        },
        showAssetFileHandleContactReport: function (options) {
            $.extend({
                isusage: false,
                viewheader: "Report"
            }, options);

            var views = [];
            //if (options.linktoid != null)
            views.push({
                icon: "signal", name: options.viewheader, url: "/setup/viewasset/contactreportfilehandles/" + options.id + "?usage=" + options.isusage + "&linktoid=" + options.linktoid + "&linktype=" + options.linktype
                    + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption + "&format=" + options.format + "&selectedrange=" + options.selectedrange + "&isGridview=" + options.isGridView

            });
            modal.show({ title: options.title + "-" + options.name, views: views });
        },

        showAssetTemplateUsageReport: function (options) {
            $.extend({
                isusage: false,
                viewheader: "Report"
            }, options);

            var views = [];
            if (options.linktoid != null)
                views.push({
                    icon: "signal", name: options.viewheader, url: "/setup/viewasset/report/" + options.id + "/" + getTimeStamp() + "?usage=" + options.isusage + "&linktoid=" + options.linktoid + "&linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption + "&format=" + options.format + "&selectedrange=" + options.selectedrange
                });
            else
                views.push({
                    icon: "signal", name: options.viewheader, url: "/setup/viewasset/report/" + options.id + "/" + getTimeStamp() + "?usage=" + options.isusage + "&linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption + "&format=" + options.format + "&selectedrange=" + options.selectedrange
                });

            if (options.startdate != null && options.startdate != "") {
                views[0].url += "&startdate=" + options.startdate;
            }
            if (options.enddate != null && options.enddate != "") {
                views[0].url += "&enddate=" + options.enddate;
            }

            modal.show({ title: options.title + "-" + options.name, views: views });
        },
        showPrintTemplateUsageReport: function (options) {
            $.extend({
                isusage: false,
                viewheader: 'Report'
            }, options);

            var views = [];
            if (options.linktoid != null)
                views.push({
                    icon: "signal", name: options.viewheader, url: "/setup/asset/report/" + options.id + "/" + getTimeStamp() + "?usage=" + options.isusage + "&linktoid=" + options.linktoid + "&linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption + "&format=" + options.format + "&selectedrange=" + options.selectedrange + "&printreportoption=" + options.printreportoption + "&isreport=" + options.isReport + "&isdownload=" + options.isdownload
                });
            else
                views.push({
                    icon: "signal", name: options.viewheader, url: "/setup/asset/report/" + options.id + "/" + getTimeStamp() + "?usage=" + options.isusage + "&linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption + "&format=" + options.format + "&selectedrange=" + options.selectedrange + "&printreportoption=" + options.printreportoption
                });

            if (options.startdate != null && options.startdate != "") {
                views[0].url += "&startdate=" + options.startdate;
            }
            if (options.enddate != null && options.enddate != "") {
                views[0].url += "&enddate=" + options.enddate;
            }
            if (options.usergroupid != null) {
                views[0].url += "&usergroupid=" + options.usergroupid;
            }
            if (options.grouptype != null) {
                views[0].url += "&grouptype=" + options.grouptype;
            }
            if (options.usergroupviewoption != null) {
                views[0].url += "&usergroupviewoption=" + options.usergroupviewoption;
            }
            if (options.isengagementreport != null) {
                views[0].url += "&isengagementreport=" + options.isengagementreport;
            }
            if (options.orgintereststatus != null) {
                views[0].url += "&orgintereststatus=" + options.orgintereststatus;
            }
            if (options.isReport != null && options.isReport == true) {
                modal.show({ title: options.title, views: views });
            }
            else {
                modal.show({ title: options.title + "-" + options.name, views: views });
            }
        },
        showReportForTemplateUsage: function (options) {
            $.extend({
                viewheader: 'Report'
            }, options);
            var views = [];
            var parameters = "";

            if (typeof(options.linktoid) != "undefined") {
                if (options.linktoid != null)
                    parameters += "&linktoid=" + options.linktoid + "&linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption +
                        "&format=" + options.format + "&selectedrange=" + options.selectedrange;
                else
                    parameters += "&linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption +
                        "&format=" + options.format + "&selectedrange=" + options.selectedrange;
            }

            if (options.startdate != null && options.startdate != "") {
                parameters += "&startdate=" + options.startdate;
            }
            if (options.enddate != null && options.enddate != "") {
                parameters += "&enddate=" + options.enddate;
            }

            views.push({
                icon: "signal", name: options.viewheader, url: "/setup/drip/report/" + options.id + "/" + getTimeStamp() + "?isvideo=" + options.isvideo + "&isview=" + options.isview + parameters
                });
            modal.show({ title: options.title + "- " + options.name, views: views });
        },

        showReportForMediaAssetsUsage: function (options) {
            $.extend({
                viewheader: 'Report'
            }, options);
            var views = [];
            var parameters = "";
            if (typeof (options.linktoid) != "undefined") {
                if (options.linktoid != null)
                    parameters += "&linktoid=" + options.linktoid + "&linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption +
                        "&format=" + options.format + "&selectedrange=" + options.selectedrange;
                else
                    parameters += "&linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption +
                        "&format=" + options.format + "&selectedrange=" + options.selectedrange;

                if (options.startdate != null && options.startdate != "") {
                    parameters += "&startdate=" + options.startdate;
                }
                if (options.enddate != null && options.enddate != "") {
                    parameters += "&enddate=" + options.enddate;
                }
                if (options.usergroupid != null) {
                    parameters += "&usergroupid=" + options.usergroupid;
                }
                if (options.grouptype != null) {
                    parameters += "&grouptype=" + options.grouptype;
                }
                if (options.usergroupviewoption != null) {
                    parameters += "&usergroupviewoption=" + options.usergroupviewoption;
                }
            }

            views.push({
                icon: "signal", name: options.viewheader, url: "/setup/gallery/assets/" + options.id + "/" + getTimeStamp() + "?isvideo=" + options.isvideo + "&isdocument=" + options.isdocument + "&isview=" + options.isview + parameters
            });
            modal.show({ title: options.title + "-" + options.name, views: views });
        },

        showMediaAssetsUsageReport: function (options) {
            $.extend({
                viewheader: "Report"
            }, options);
            var views = [];
            var parameters = "";
            if (typeof (options.linktoid) != "undefined") {
                if (options.linktoid != null)
                    parameters += "&linktoid=" + options.linktoid + "&linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption +
                        "&format=" + options.format + "&selectedrange=" + options.selectedrange;
                else
                    parameters += "&linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption +
                        "&format=" + options.format + "&selectedrange=" + options.selectedrange;

                if (options.startdate != null && options.startdate != "") {
                    parameters += "&startdate=" + options.startdate;
                }
                if (options.enddate != null && options.enddate != "") {
                    parameters += "&enddate=" + options.enddate;
                }
            }

            views.push({
                icon: "signal", name: options.viewheader, url: "/setup/gallery/viewassets/" + options.id + "/" + getTimeStamp() + "?isvideo=" + options.isvideo + "&isdocument=" + options.isdocument + "&isview=" + options.isview + parameters
            });
            modal.show({ title: options.title + "-" + options.name, views: views });
        },

        showReportForSocialUsage: function (options) {
            $.extend({
                viewheader: 'Report'
            }, options);
            var views = [];
            views.push({
                icon: "signal", name: options.viewheader, url: "/setup/social/report/" + options.id + "/" + getTimeStamp()
            });
            modal.show({ title: options.title + "-" + options.name, views: views });
        },

        showOrganizationUserVideoViews: function (options) {
            var views = [];
            views.push({
                icon: "user", name: options.viewheader, url: "/gallery/video/views/" + options.id + "/" + getTimeStamp() + "?videoid=" + options.video + "&isview=" + options.isview
            });
            modal.show({ title: "", views: views });
        },
        showFeedbackRating: function (options) {
            var views = [];
            
            views.push({
                icon: "star", name: 'Feedback and Rating', url: "/feedback/" + options.id + "/" + options.feedbacktype + "/rating/comment", iconprefix: "fas",
            });            

            var title = 'Feedback and Rating (' + options.name + ')';
            modal.show({ title: title, views: views });
        },

        showOrganizationUserForCertification: function (options) {
            var views = [];
            views.push({
                icon: "user", name: "", url: "/gallery/video/views/" + options.id + "/" + getTimeStamp() + "?certificationid=" + options.certificationid + "&iscertification=" + options.iscertification + "&status=" + options.status
            });
            modal.show({ title: options.title, views: views });
        },

        showUserVideoViewsReport: function (options) {
            var views = [];
            views.push({
                icon: "user", name: options.viewheader, url: "/gallery/video/views/report/" + options.id + "/" + getTimeStamp() + "?videoid=" + options.videoID
            });
            modal.show({ title: options.viewheader, views: views });
        },
        showSocialCustomizeDrip: function (publishingid) {
            views = [
                { icon: "edit", name: 'Data', url: "/setup/social/" + publishingid + "/publishings", buttons: ["save"] },
            ];
            modal.show({
                title: 'Social Drip', views: views, buttons: "[Save]", callback: function () {
                    modal.close();
                }
            });
        },
        showApprovalPreview: function (id, options) {
            var views = [];
            if (options.state == 0) {
                views.push({ icon: "signal", name: options.preview, url: "/approval/templates/templateapproval-view/" + id });
                views.push({ icon: "thumbs-up", name: options.approve, url: "/approval/templates/approval-action/" + options.id + "/1/0", buttons: ["save"] });
                views.push({ icon: "times", name: options.reject, url: "/approval/templates/approval-action/" + options.id + "/2/0", buttons: ["save"]});
            }
            else if (options.state == 1) {
                views.push({ icon: "signal", name: options.preview, url: "/approval/templates/templateapproval-view/" + id });
                views.push({ icon: "history", name: options.history, url: "/approval/templates/approval-action/" + options.id + "/1/1" });
            }
            else if (options.state == 2) {
                views.push({ icon: "signal", name: options.preview, url: "/approval/templates/templateapproval-view/" + id });
                views.push({ icon: "history", name: options.history, url: "/approval/templates/approval-action/" + options.id + "/1/1" });
                views.push({ icon: "edit", name: options.edit, url: "/approval/templates/approval-action/" + options.id + "/1/1",buttons:["save"] });
            }
            else
                views.push({ icon: "signal", name: options.preview, url: "/approval/templates/templateapproval-view/" + id });

            var title = options.title + " > " + views[0].name + " (" + options.name + ")";
                modal.show({ title:title, views: views });
        },
        showQuestionMedia: function (id, options) {
            $.extend({
                canedit: false,
                canpublish: false,
                customize: false
            }, options);

            var views = [];
            if (options.customize) {
                if (options.canedit) views.push({ icon: "edit", name: 'Customize', url: "/collateral/questionnaire/" + id + "/editor" });
                views.push({ icon: "search", name: 'View', url: "/collateral/questionnaire/" + id + "/view" });
            }
            else {
                views.push({ icon: "search", name: 'View', url: "/collateral/questionnaire/" + id + "/view" });
                if (options.canedit) views.push({ icon: "edit", name: 'Customize', url: "/collateral/questionnaire/" + id + "/editor" });
            }
            if (options.canpublish) views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/true/" + id, buttons: ["save"] });
            if (options.output) {
                views.push({ icon: "info-circle", name: 'Info', url: "/collateral/questionnaire/" + id + "/info",buttons:["save"] });
            }
            modal.show({ title: 'Questionnaire > '+views[0].name+'', views: views });
        },
        showEditQuestionWizard: function (poll) {
            var info = { name: 'Info', url: "/collateral/questionnaire/" + poll.id + "/info" }
            var editor = { name: 'Customize', url: "/collateral/questionnaire/" + poll.id + "/editor" }
            var medianame = poll.name;

            var _wizdata = {
                name: 'Customize ' + medianame,
                steps: [info, editor]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showBannerMedia: function (id, options) {//added by Lalita for banner
            $.extend({
                canedit: false,
                canpublish: false,
                customize: false
            }, options);

            var views = [];
            if (options.customize) {
                if (options.canedit) views.push({ icon: "edit", name: 'Customize', url: "/collateral/banner/" + id + "/editor" });
                views.push({ icon: "search", name: 'View', url: "gallery/images/"+id+"/view?istemplate=true" });
            }
            else {
                views.push({ icon: "search", name: 'View', url: "/collateral/banner/" + id + "/view" });
                if (options.canedit) views.push({ icon: "edit", name: 'Customize', url: "/collateral/banner/" + id + "/editor", buttons:["save"] });
            }
            if (options.canpublish) views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/true/" + id, buttons: ["save"]});
            if (options.output) {
                views.push({ icon: "info-circle", name: 'Info', url: "/collateral/banner/" + id + "/info", buttons: ["save"]});
            }
            modal.show({ title: 'Banner', views: views });
        },
        showEditBannerWizard: function (banner) {//Added by Lalita, modified for #19071
            var info = { name: banner.info, url: "/collateral/banner/" + banner.id + "/info" }
            var editor = { name: banner.customize, url: "/collateral/banner/" + banner.id + "/editor" }

            var _wizdata = {
                name: banner.name,
                steps: [info,editor]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showLeadHistory: function (options) {
            var views = [{ icon: "chart-bar", name: 'History', url: "/manage/leads/leadhistory/" + options.id + "/" + options.selectedfolderid, iconprefix: "far" }];
            modal.show({ title: 'Request History', views: views });
        },
        showEditLead: function (id) {
            var views = [{ icon: "", name: "", url: "/manage/leads/leadedit/" + id, buttons: ["save"] }];
            modal.show({ title: 'Deal Details', views: views });
        },
        showUpdateLeadRequest: function (id, status) {
            var views = [{ icon: "", name: "", url: "/setup/leads/updateleadrequest/" + id + "/" + status, buttons: ["save"]}];
            modal.show({ title: 'Deal Details', views: views });
        },
        showOpportunityType: function (options) {
            var views = [{ icon: "cubes", name: 'Opportunity Type', url: "/manage/leads/opportunityType/" + options.leadid + "/" + options.leadcompany, buttons: ["save"]}];
            modal.show({ title: 'Opportunity Type', views: views });
        },
        showOpportunityTypeForLead: function (options) {
            if (options.isdealapprover == true){
                var views = [{ icon: "cubes", name: 'Opportunity Type', url: "/manage/leads/opportunityType/" + options.leadid + "?isdealapprover=true", buttons: ["next"]}];
            }
            else{
                if (options.type != undefined) {
                    var views = [{ icon: "cubes", name: 'Opportunity Type', url: "/manage/leads/opportunityType/" + options.leadid +"?type="+options.type, buttons: ["next"] }];
                }
                else{
                var views = [{ icon: "cubes", name: 'Opportunity Type', url: "/manage/leads/opportunityType/" + options.leadid, buttons: ["next"] }];
                }        
            }
            modal.show({ title: 'Select Opportunity Type', views: views });
        }, showDealRequestsReport: function (options) {
            var urlParam = "";
            if (options.foldername != undefined)
                urlParam += urlParam != "" ? "&folder=" + encodeURIComponent(options.foldername) : "?folder=" + encodeURIComponent(options.foldername);
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + encodeURIComponent(options.selectedrange) : "?selectedrange=" + encodeURIComponent(options.selectedrange);
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + encodeURIComponent(options.startdate) : "?startdate=" + encodeURIComponent(options.startdate);
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + encodeURIComponent(options.linktoid) : "?linktoid=" + encodeURIComponent(options.linktoid);
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + encodeURIComponent(options.linktype) : "?linktype=" + encodeURIComponent(options.linktype);
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + encodeURIComponent(options.viewoption) : "?viewoption=" + encodeURIComponent(options.viewoption);
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + encodeURIComponent(options.orgviewoption) : "?orgviewoption=" + encodeURIComponent(options.orgviewoption);
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + encodeURIComponent(options.groupviewoption) : "?groupviewoption=" + encodeURIComponent(options.groupviewoption);
            if (options.isHeaderShowing != null)
                urlParam += urlParam != "" ? "&isheadershowing=" + encodeURIComponent(options.isHeaderShowing) : "?isheadershowing=" + encodeURIComponent(options.isHeaderShowing);
            if (options.Isreportenable != null)
                urlParam += urlParam != "" ? "&Isreportenable=" + encodeURIComponent(options.Isreportenable) : "?Isreportenable=" + encodeURIComponent(options.Isreportenable);
            if (options.projecttypeid != null)
                urlParam += urlParam != "" ? "&selectedprojecttypeid=" + encodeURIComponent(options.projecttypeid) : "?selectedprojecttypeid=" + encodeURIComponent(options.projecttypeid);
            var views = [
                { icon: "", name: options.title, url: "/manage/leads/leadregistered/" + urlParam }
            ];
            modal.show({ title: options.title, views: views });

        },
        showOpportunityRequestsReport: function (options) {
            var urlParam = "";
            if (options.stage != undefined)
                urlParam += urlParam != "" ? "&stage=" + encodeURIComponent(options.stage) : "?stage=" + encodeURIComponent(options.stage);
            if (options.projecttypeid != undefined && options.projectid != "")
                urlParam += urlParam != "" ? "&projecttypeid=" + encodeURIComponent(options.projecttypeid) : "?projecttypeid=" + encodeURIComponent(options.projecttypeid);
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + encodeURIComponent(options.selectedrange) : "?selectedrange=" + encodeURIComponent(options.selectedrange);
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + encodeURIComponent(options.startdate) : "?startdate=" + encodeURIComponent(options.startdate);
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + encodeURIComponent(options.linktoid) : "?linktoid=" + encodeURIComponent(options.linktoid);
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + encodeURIComponent(options.linktype) : "?linktype=" + encodeURIComponent(options.linktype);
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + encodeURIComponent(options.viewoption) : "?viewoption=" + encodeURIComponent(options.viewoption);
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + encodeURIComponent(options.orgviewoption) : "?orgviewoption=" + encodeURIComponent(options.orgviewoption);
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + encodeURIComponent(options.groupviewoption) : "?groupviewoption=" + encodeURIComponent(options.groupviewoption);
            if (options.isHeaderShowing != null)
                urlParam += urlParam != "" ? "&isheadershowing=" + encodeURIComponent(options.isHeaderShowing) : "?isheadershowing=" + encodeURIComponent(options.isHeaderShowing);
            var views = [
                { icon: "", name: options.title, url: "/widgets/opportunitygrid/" + urlParam }
            ];
            modal.show({ title: options.title, views: views });

        },
        showLeadsRequestsReport: function (options) {
            var urlParam = "";
            if (options.stage != undefined)
                urlParam += urlParam != "" ? "&stage=" + encodeURIComponent(options.stage) : "?stage=" + encodeURIComponent(options.stage);
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + encodeURIComponent(options.selectedrange) : "?selectedrange=" + encodeURIComponent(options.selectedrange);
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + encodeURIComponent(options.startdate) : "?startdate=" + encodeURIComponent(options.startdate);
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + encodeURIComponent(options.linktoid) : "?linktoid=" + encodeURIComponent(options.linktoid);
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + encodeURIComponent(options.linktype) : "?linktype=" + encodeURIComponent(options.linktype);
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + encodeURIComponent(options.viewoption) : "?viewoption=" + encodeURIComponent(options.viewoption);
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + encodeURIComponent(options.orgviewoption) : "?orgviewoption=" + encodeURIComponent(options.orgviewoption);
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + encodeURIComponent(options.groupviewoption) : "?groupviewoption=" + encodeURIComponent(options.groupviewoption);
            if (options.isHeaderShowing != null)
                urlParam += urlParam != "" ? "&isheadershowing=" + encodeURIComponent(options.isHeaderShowing) : "?isheadershowing=" + encodeURIComponent(options.isHeaderShowing);
            var views = [
                { icon: "", name: options.title, url: "/widgets/leadsgriddata/" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showCommissionRequestsReport: function (options) {
            var urlParam = "";
            if (options.projecttypeid != undefined && options.projectid != "")
                urlParam += urlParam != "" ? "&projecttypeid=" + encodeURIComponent(options.projecttypeid) : "?projecttypeid=" + encodeURIComponent(options.projecttypeid);
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + encodeURIComponent(options.selectedrange) : "?selectedrange=" + encodeURIComponent(options.selectedrange);
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + encodeURIComponent(options.startdate) : "?startdate=" + encodeURIComponent(options.startdate);
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + encodeURIComponent(options.linktoid) : "?linktoid=" + encodeURIComponent(options.linktoid);
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + encodeURIComponent(options.linktype) : "?linktype=" + encodeURIComponent(options.linktype);
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + encodeURIComponent(options.viewoption) : "?viewoption=" + encodeURIComponent(options.viewoption);
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + encodeURIComponent(options.orgviewoption) : "?orgviewoption=" + encodeURIComponent(options.orgviewoption);
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + encodeURIComponent(options.groupviewoption) : "?groupviewoption=" + encodeURIComponent(options.groupviewoption);
            if (options.isHeaderShowing != null)
                urlParam += urlParam != "" ? "&isheadershowing=" + encodeURIComponent(options.isHeaderShowing) : "?isheadershowing=" + encodeURIComponent(options.isHeaderShowing);
            if (options.stage != null)
                urlParam += urlParam != "" ? "&stage=" + encodeURIComponent(options.stage) : "?stage=" + encodeURIComponent(options.stage);
            if (options.isgrid != null)
                urlParam += urlParam != "" ? "&isgrid=" + encodeURIComponent(options.isgrid) : "?isgrid=" + encodeURIComponent(options.isgrid);
            var views = [
                { icon: "", name: options.title, url: "/widgets/commissiongriddata/" + urlParam }
            ];
            modal.show({ title: options.title, views: views });

        },
        showMDFRequestReport: function (options) {
            var urlParam = "";
            if (options.foldername != undefined)
                urlParam += urlParam != "" ? "&mdfstage=" + encodeURIComponent(options.foldername) : "?mdfstage=" + encodeURIComponent(options.foldername);
            if (options.orgid != undefined && options.orgid != "")
                urlParam += urlParam != "" ? "&organizationid=" + encodeURIComponent(options.orgid) : "?organizationid=" + encodeURIComponent(options.orgid);
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + encodeURIComponent(options.selectedrange) : "?selectedrange=" + encodeURIComponent(options.selectedrange);
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + encodeURIComponent(options.startdate) : "?startdate=" + encodeURIComponent(options.startdate);
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
            if (options.fundid != undefined && options.fundid != 0)
                urlParam += urlParam != "" ? "&fundid=" + encodeURIComponent(options.fundid) : "?fundid=" + encodeURIComponent(options.fundid);
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + encodeURIComponent(options.linktoid) : "?linktoid=" + encodeURIComponent(options.linktoid);
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + encodeURIComponent(options.linktype) : "?linktype=" + encodeURIComponent(options.linktype);
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + encodeURIComponent(options.viewoption) : "?viewoption=" + encodeURIComponent(options.viewoption);
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + encodeURIComponent(options.orgviewoption) : "?orgviewoption=" + encodeURIComponent(options.orgviewoption);
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + encodeURIComponent(options.groupviewoption) : "?groupviewoption=" + encodeURIComponent(options.groupviewoption);
            if (options.isHeaderShowing != null)
                urlParam += urlParam != "" ? "&isheadershowing=" + encodeURIComponent(options.isHeaderShowing) : "?isheadershowing=" + encodeURIComponent(options.isHeaderShowing);
            if (options.Isreportenable != null)
                urlParam += urlParam != "" ? "&Isreportenable=" + encodeURIComponent(options.Isreportenable) : "?Isreportenable=" + encodeURIComponent(options.Isreportenable);
            var views = [
                { icon: "", name: options.title, url: "/widgets/funds/" + urlParam }
            ];
            modal.show({ title: options.title, views: views });

        },
        showCasesRequestReport: function (options) {
            var urlParam = "isgrid=true";
            if (options.caseid != undefined)
                urlParam += urlParam != "" ? "&caseid=" + encodeURIComponent(options.caseid) : "?caseid=" + encodeURIComponent(options.caseid);
            if (options.foldername != undefined)
                urlParam += urlParam != "" ? "&stage=" + encodeURIComponent(options.foldername) : "?stage=" + encodeURIComponent(options.foldername);
            if (options.orgid != undefined && options.orgid != "")
                urlParam += urlParam != "" ? "&organizationid=" + encodeURIComponent(options.orgid) : "?organizationid=" + encodeURIComponent(options.orgid);
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + encodeURIComponent(options.selectedrange) : "?selectedrange=" + encodeURIComponent(options.selectedrange);
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + encodeURIComponent(options.startdate) : "?startdate=" + encodeURIComponent(options.startdate);
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + encodeURIComponent(options.linktoid) : "?linktoid=" + encodeURIComponent(options.linktoid);
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + encodeURIComponent(options.linktype) : "?linktype=" + encodeURIComponent(options.linktype);
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + encodeURIComponent(options.viewoption) : "?viewoption=" + encodeURIComponent(options.viewoption);
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + encodeURIComponent(options.orgviewoption) : "?orgviewoption=" + encodeURIComponent(options.orgviewoption);
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + encodeURIComponent(options.groupviewoption) : "?groupviewoption=" + encodeURIComponent(options.groupviewoption);
            if (options.isHeaderShowing != null)
                urlParam += urlParam != "" ? "&isheadershowing=" + encodeURIComponent(options.isHeaderShowing) : "?isheadershowing=" + encodeURIComponent(options.isHeaderShowing);
            if (options.Isreportenable != null)
                urlParam += urlParam != "" ? "&isreportfilter=" + encodeURIComponent(options.Isreportenable) : "?isreportfilter=" + encodeURIComponent(options.Isreportenable);
            var views = [{ icon: "", name: "All courses", url: "/widgets/custom/allcases/?" + urlParam }];
            modal.show({ title: options.title, views: views });
        },
        showUserRequestReport: function (options) {
            var urlParam = "";
            if (options.widgetname != undefined && options.widgetname != "")
                urlParam += urlParam != "" ? "&widgetname=" + encodeURIComponent(options.widgetname) : "?widgetname=" + encodeURIComponent(options.widgetname);
            if (options.activitytype != undefined && options.activitytype != "")
                urlParam += urlParam != "" ? "&activitytype=" + encodeURIComponent(options.activitytype) : "?activitytype=" + encodeURIComponent(options.activitytype);
            if (options.foldername != undefined && options.foldername != "")
                urlParam += urlParam != "" ? "&stage=" + encodeURIComponent(options.foldername) : "?stage=" + encodeURIComponent(options.foldername);
            if (options.caseid != undefined && options.caseid != "")
                urlParam += urlParam != "" ? "&caseid=" + encodeURIComponent(options.caseid) : "?caseid=" + encodeURIComponent(options.caseid);
            if (options.projecttypeid != undefined && options.projectid != "")
                urlParam += urlParam != "" ? "&projecttypeid=" + encodeURIComponent(options.projecttypeid) : "?projecttypeid=" + encodeURIComponent(options.projecttypeid);
            if (options.fundid != undefined && options.fundid != 0)
                urlParam += urlParam != "" ? "&fundid=" + encodeURIComponent(options.fundid) : "?fundid=" + encodeURIComponent(options.fundid);
            if (options.orgid != undefined && options.orgid != "")
                urlParam += urlParam != "" ? "&organizationid=" + encodeURIComponent(options.orgid) : "?organizationid=" + encodeURIComponent(options.orgid);
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + encodeURIComponent(options.selectedrange) : "?selectedrange=" + encodeURIComponent(options.selectedrange);
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + encodeURIComponent(options.startdate) : "?startdate=" + encodeURIComponent(options.startdate);
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
            if (options.fundid != undefined && options.fundid != 0)
                urlParam += urlParam != "" ? "&fundid=" + encodeURIComponent(options.fundid) : "?fundid=" + encodeURIComponent(options.fundid);
            if (options.linktoid != undefined && options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + encodeURIComponent(options.linktoid) : "?linktoid=" + encodeURIComponent(options.linktoid);
            if (options.linktype != undefined && options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + encodeURIComponent(options.linktype) : "?linktype=" + encodeURIComponent(options.linktype);
            if (options.viewoption != undefined && options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + encodeURIComponent(options.viewoption) : "?viewoption=" + encodeURIComponent(options.viewoption);
            if (options.orgviewoption != undefined && options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + encodeURIComponent(options.orgviewoption) : "?orgviewoption=" + encodeURIComponent(options.orgviewoption);
            if (options.groupviewoption != undefined && options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + encodeURIComponent(options.groupviewoption) : "?groupviewoption=" + encodeURIComponent(options.groupviewoption);
            if (options.modern != undefined && options.modern != null && options.modern != "")
                urlParam += urlParam != "" ? "&modern=" + encodeURIComponent(options.modern) : "?modern=" + encodeURIComponent(options.modern);
            if (options.isHeaderShowing != null)
                urlParam += urlParam != "" ? "&isheadershowing=" + encodeURIComponent(options.isHeaderShowing) : "?isheadershowing=" + encodeURIComponent(options.isHeaderShowing);
            if (options.Isreportenable != null)
                urlParam += urlParam != "" ? "&Isreportenable=" + encodeURIComponent(options.Isreportenable) : "?Isreportenable=" + encodeURIComponent(options.Isreportenable);
            var views = [
                { icon: "", name: options.title, url: "/widgets/custom/userscountreport/" + urlParam }
            ];
            modal.show({ title: "Userwise Report", views: views });

        },
        showEbook: function (id, options) {
            $.extend({
                cansend: false,
                canpublish: false,
                canedit: false,
                customize: false,
                linkids: null,
                isSmartlist: null,
                reports: false,
                canPartnerSend: false,
                closetab:false
            }, options);
            var views = [];
            views.push({ icon: "search", name: "View", url: "/collateral/ebook/" + id + "/view" });
            if (options.canpublish) views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/true/" + id });
            if (options.cansend) {
                if (options.linkids != null) {
                    views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist,buttons:["finish"] });
                    if (options.canPartnerSend)
                        views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist + "&ispartner=" + true, buttons: ["finish"]});
                }
                else {
                    views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"] });
                    if (options.canPartnerSend)
                        views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&ispartner=" + true, buttons: ["finish"]});
                }
            }
            if (options.reports) {
                views.push({ icon: "chart-bar", name: 'Report', url: "/collateral/ebook/" + options.id + "/report", iconprefix: "far" });
                views.push({ icon: "file", name: 'Pages', url: "/collateral/ebook/" + options.id + "/interestbypage", buttons: ["save"]});
                views.push({ icon: "users", name: 'Contacts', url: "/collateral/ebook/" + options.id + "/interestbycontact", buttons: ["save"] });
            }
            var title = 'eBooks' + ' > ' + '' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            modal.show({ title: title, locked: true, preventClose: true, closeTab: options.closetab, views: views});
        },

        showPlaybookEbook: function (id, options, callback) {
            var views = [
                { icon: "search", name: 'View', url: `/collateral/ebook/${id}/view/${options.originalTemplateId}` },
                { icon: "globe", name: 'Social Share', url: `/setup/publish/media/true/${id}/${options.originalTemplateId}` },
                { icon: "envelope", name: 'Send Email', url: `/communicate/email/0?assetid=${id}&isAssetEmail=true&linkids=${options.linkids}&isSmartlist=${options.isSmartlist}&playbookid=${options.originalTemplateId}&isplaybookasset=true`, buttons: ["finish"] },
                { icon: "user-plus", name: 'Send To Users', url: `/communicate/email/0?assetid=${id}&isAssetEmail=true&linkids=${options.linkids}&isSmartlist=${options.isSmartlist}&ispartner=false&playbookid=${options.originalTemplateId}&isplaybookasset=true`, buttons: ["finish"] },
                { icon: "chart-bar", name: 'Report', url: `/collateral/ebook/${options.id}/report`, iconprefix: "far" },
                { icon: "file", name: 'Pages', url: `/collateral/ebook/${options.id}/interestbypage`, buttons: ["save"] },
                { icon: "users", name: 'Contacts', url: `/collateral/ebook/${options.id}/interestbycontact`, buttons: ["save"] },
            ];
            if ((typeof (options.cansendemail) != 'undefined' && !options.cansendemail) || (typeof (options.cansendebook) != 'undefined' && !options.cansendebook)) {
                    views = [
                    { icon: "search", name:'View', url: `/collateral/ebook/${id}/view/${options.originalTemplateId}`},
                    { icon: "globe", name: 'Social Share', url: `/setup/publish/media/true/${id}/${options.originalTemplateId}`},
                    { icon: "chart-bar", name: 'Report', url: `/collateral/ebook/${options.id}/report`, iconprefix: "far" },
                    { icon: "file", name: 'Pages', url: `/collateral/ebook/${options.id}/interestbypage`, buttons: ["save"] },
                    { icon: "users", name: 'Contacts', url: `/collateral/ebook/${options.id}/interestbycontact`, buttons: ["save"] },
                ];
            }
            var title = 'eBooks' + ' > ' + '' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            modal.show({ title: title, locked: true, preventClose: true, closeTab: options.closetab, views: views, callback: callback });
        },

        showMDFPartnerPortalReport: function (options) {
            var urlParam = "";
            if (options.foldername != undefined)
                urlParam += urlParam != "" ? "&mdfstage=" + encodeURIComponent(options.foldername) : "?mdfstage=" + encodeURIComponent(options.foldername) + "&defaultCurrency=" + options.defaultCurrency;
            var views = [
                { icon: "", name: options.title, url: "/widgets/partnerportalmdfreport" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },

        showMDFManagerPortalReport: function (options) {
            var urlParam = "";
            if (options.foldername != undefined)
                urlParam += urlParam != "" ? "&mdfstage=" + encodeURIComponent(options.foldername) : "?mdfstage=" + encodeURIComponent(options.foldername) + "&defaultCurrency=" + options.defaultCurrency;
            if (options.showheader != undefined)
                urlParam += urlParam != "" ? "&showheader=" + encodeURIComponent(options.showheader) : "?showheader=" + encodeURIComponent(options.showheader) + "&defaultCurrency=" + options.defaultCurrency;
            var views = [
                { icon: "", name: options.title, url: "/manage/mdf/viewrequests" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showActiveAccountOfDataRoom: function (options) {
            var urlParam = "";
            var views = [
                { icon: "", name: options.title, url: "/widgets/dataroomprogress/accountmodel" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showDataRoom: function (options) {
            var urlParam = "";
            var urlParam = "";
            if (options.foldername != undefined)
                urlParam += urlParam != "" ? "&mdfstage=" + encodeURIComponent(options.foldername) : "?mdfstage=" + encodeURIComponent(options.foldername);
            var views = [
                { icon: "", name: options.title, url: "/widgets/dataroomprogress/modaldataroom" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        //Admin interactivedata start
        showAssetsList: function (options) {
            var url = "/interactivequestionnaire/assetslist/" + options.id;
            var views = [
                { icon: "edit", name: 'Info', url: url }
            ];

            modal.show({ title: options.name, views: views, buttons: "[Save]" });
        },
        showIQTemplate: function (data,options) {
            var id = data.id;
            var views=[];
            if (options?.isnew) {
                views.push({icon: "edit", name: 'Editor', url: `interactivequestionnaire/fieldsgrid/${id}` },
                { icon: "info-circle", name: 'Info', url: `/interactivequestionnaire/info/new/${id}`, buttons: ["save"] });
                if (data.outputtype == 7) {
                    views=[];
                    views.push(
                        { icon: "edit", name: 'Editor', url: `/interactivequestionnaire/fieldsgrid/${id}` },
                        { icon: "edit", name: 'GoogleConfig', url: `/interactivequestionnaire/googleconfiguration/${id}`, buttons: ["save"] },
                        { icon: "info-circle", name: 'Info', url: `/interactivequestionnaire/info/new/${id}`, buttons: ["save"] });
                }
                if (data.outputtype == 8) {
                    views = [
                        { icon: "edit", name: 'Editor', url: `/interactivequestionnaire/fieldsgrid/${id}` },
                        { icon: "edit", name: 'SolutionConfig', url: `/interactivequestionnaire/solutionconfigurationpage/${id}`, buttons: ["save"] },
                        { icon: "info-circle", name: 'Info', url: `/interactivequestionnaire/info/new/${id}`, buttons: ["save"] },
                    ];
                }
                if (data.outputtype == 9) {
                    views = [
                        { icon: "edit", name: 'Editor', url: `/interactivequestionnaire/fieldsgrid/${id}` },
                        { icon: "edit", name: ' Products ', url: `/interactivequestionnaire/products/${id}`, buttons: ["save"] },
                        { icon: "info-circle", name: 'Info', url: `/interactivequestionnaire/info/new/${id}`, buttons: ["save"] },
                    ];
                }
            }else{
                views.push({ icon: "edit", name: 'Editor', url: `/interactivequestionnaire/fieldsgrid/${id}` },
                { icon: "info-circle", name: 'Info', url: `/interactivequestionnaire/info/${id}`, buttons: ["save"] });
                if (data.outputtype == 7) {
                    views = [];
                    views.push(
                        { icon: "edit", name: 'Editor', url: `/interactivequestionnaire/fieldsgrid/${id}` },
                        { icon: "edit", name: 'GoogleConfig', url: `/interactivequestionnaire/googleconfiguration/${id}`, buttons: ["save"] },
                        { icon: "info-circle", name: 'Info', url: `/interactivequestionnaire/info/${id}`, buttons: ["save"] });
                }
                if (data.outputtype == 8) {
                    views = [
                        { icon: "edit", name: 'Editor', url: `/interactivequestionnaire/fieldsgrid/${id}` },
                        { icon: "edit", name: 'SolutionConfig', url: `/interactivequestionnaire/solutionconfigurationpage/${id}`, buttons: ["save"] },
                        { icon: "info-circle", name: 'Info', url: `/interactivequestionnaire/info/${id}`, buttons: ["save"] },
                    ];
                }
                if (data.outputtype == 9) {
                    views = [
                        { icon: "edit", name: 'Editor', url: `/interactivequestionnaire/fieldsgrid/${id}` },
                        { icon: "edit", name: ' Products ', url: `/interactivequestionnaire/products/${id}`, buttons: ["save"] },
                        { icon: "info-circle", name: 'Info', url: `/interactivequestionnaire/info/${id}`, buttons: ["save"] },
                    ];
                }
            }


            modal.show({ title: 'Setup Interactive Forms', views: views, buttons: "[Save]" });
        },
        showIQDataTemplate: function (id) {
            var views = [
                { icon: "edit", name: 'Editor', url: "/interactivequestionnaire/interactivedatagrid/" + id },
            ];

            modal.show({ title: 'Setup Interactive Forms', views: views, buttons: "[Save]" });
        },
        showIQLink: function (callback, options) {
            var views = [
                { icon: "link", name: 'Info', url: "/interactivequestionnaire/linkform/" + options.id + "/" + options.actionid, buttons: ["save"] }
            ];

            modal.show({ title: 'Fields Grid', views: views, callback: callback });
        },
        showIQForm: function (callback, options) {
            var views =[];
            if (options?.isnew){
                views.push({ icon: "edit", name: 'Info', url: `/interactivequestionnaire/fieldform/new/${options.id}/${options.nodeid}/${options.parentid}/${options.groupname}`, buttons: ["save"] });
            }else{
                views.push({
                    icon: "edit", name: 'Info', url: `/interactivequestionnaire/fieldform/${options.id}/${options.nodeid}/${options.parentid}/${options.groupname}`, buttons: ["save"] });
            }

            modal.show({ title: 'Fields Grid', views: views, callback: callback });
        },
        showGoogleConfiguration: function (callback, options) {
            var views = [
                { icon: "edit", name: 'GoogleConfig', url: "/interactivequestionnaire/googleconfiguration/" + options.id, buttons: ["save"] }
            ]

            modal.show({ title: 'Google Configuration', views: views, callback: callback });
        },
        showSolutionConfiguration: function (callback, options) {
            var views = [
                { icon: "edit", name: 'SolutionConfig', url: `/interactivequestionnaire/solutionconfigurationpage/${options.id}`, buttons: ["save"] }
            ]

            modal.show({ title: 'Solution Configuration', views: views, callback: callback });
        },
        showProductRecords: function (callback, options) {
            var views = [
                { icon: "edit", name: ' Products ', url: `/interactivequestionnaire/products/${options.id}`, buttons: ["save"] }
            ]

            modal.show({ title: ' Products ', views: views, callback: callback });
        },
        showGalleriesModal: function (callback, options) {
            //var views = [{ icon: "", name: "Galleries", url: "/interactivequestionnaire/galleries/" + options.id + "/" + options.nodeid }];
            var singleSelect = 1;
            if (typeof (options.singleselect) !== "undefined") {
                singleSelect = options.singleselect
            }
            var url = "/interactivequestionnaire/galleries/" + options.id + "/" + options.nodeid + "/" + options.optionindex + "?singleselect=" + singleSelect;

            if (typeof (options.imagetypes) !== "undefined") {
                url += "&imagetypes=" + options.imagetypes;
            }
            if (typeof (options.imagefilters) !== "undefined") {
                url += "&imagefilters=" + options.imagefilters;
            }
            var views = [{ icon: "", name: 'Galleries', url: url, buttons: ["done"] }];
            modal.show({ title: 'Gallery', views: views, callback: callback });
        },
        showSingleImageGalleriesModal: function (callback, options) {
            var views = [{ icon: "", name: 'Galleries', url: "/interactivequestionnaire/singleimagegallery/" + options.id + "/" + options.nodeid + "/" + options.optionindex, buttons: ["done"] }];
            modal.show({ title: 'Gallery', views: views, callback: callback });
        },
        showAssetFiltersModal: function (callback, options) {
            //var views = [{ icon: "", name: "Asset Filters", url: "/interactivequestionnaire/assetfilters/" + options.id + "/" + options.nodeid }];
            var views = [{ icon: "", name: 'Asset Filters', url: "/interactivequestionnaire/assetfilters/" + options.id + "/" + options.nodeid + "/" + options.optionindex, buttons: ["done"] }];
            modal.show({ title: 'Asset Filters', views: views, callback: callback });
        },
        showIconGalleryModal: function (callback, options) {
            var views = [{ icon: "", name: 'Icon Gallery', url: "/interactivequestionnaire/icongallery/" + options.id + "/" + options.nodeid + "/" + options.optionindex, buttons: ["done"] }];
            modal.show({ title: 'Icon Gallery', views: views, callback: callback });
        },
        showIQPreview: function (options) {
            var url = "/interactivequestionnaire/preview/" + options.id;
            if (options.formid > 0) {
                url = "/interactivequestionnaire/preview/" + options.id + "/" + options.formid + "/" + options.linkid;
            }
            var views = [
                { icon: "edit", name: 'Info', url: url }
            ];

            modal.show({ title: options.name, views: views, buttons: "[Save]" });
        },
        showProductFiltersModal: function (callback, options) {
            var views = [{ icon: "", name: "Product Filters", url: "/interactivequestionnaire/productfilters/" + options.id + "/" + options.nodeid + "/" + options.optionindex, buttons: ["done"] }];
            modal.show({ title: "Product Filters", views: views, callback: callback });
        },
        showGroupIQForm: function (callback, options) {
            var views = [
                { icon: "edit", name: 'Info', url: "/interactivequestionnaire/groupform/" + options.id + "/" + options.groupid, buttons: ["save"] }
            ];

            modal.show({ title: 'Group Fields', views: views, callback: callback });
        },
        showGroupIQGrid: function (callback, options) {
            var views = [
                { icon: "edit", name: 'Info', url: "/interactivequestionnaire/groupsgrid/" + options.id, buttons: ["save"] }
            ];

            modal.show({ title: 'Groups', views: views, callback: callback });
        },
        showIFTEditDetails: function (options, callback) {
            var view = [
                { icon: "inbox", name: 'Edit Row Title', url: "/interactivequestionnaire/previewdata/" + options.iftID + "/" + options.oppID + "/true", buttonaction: true }
            ];
            modal.show({ title: options.title, views: view});
        },
        showIQTemplateWizard: function (callback, options) {
            var views = [];
            if (options?.isnew){
                views.push({ icon: "edit", name: 'Info', url: `/interactivequestionnaire/info/new/${options.id}`, buttons: ["save"] })
            }else{
                views.push({ icon: "edit", name: 'Info', url: `/interactivequestionnaire/info/${options.id}`, buttons: ["save"] })
            }

            modal.show({ title: "Setup Interactive Forms", views: views, callback: callback });
        },
        showIQTemplateWizardDirect: function (callback, options) {
            var views = [
                { icon: "edit", name: 'Info', url: "/interactivequestionnaire/iftedit/" + options.id, buttons: ["save"] }
            ];

            modal.show({ title: "Setup Interactive Values", views: views, callback: callback });
        },
        showTemplateLists: function (callback, isblogger) {
            var views = [{ icon: "picture-o", name: "Templates", url: "/interactivequestionnaire/template/" + isblogger + "/false", buttons: ["done"] }];
            modal.show({ title: "Templates", views: views, callback: callback });
        },
        showProjectQuoteTool: function (iftquoteid, projecttypeid, projectid) {
            var views = [{
                name: "Quoting Tool", url: "/interactivequestionnaire/preview/" + iftquoteid + "?fromopp=true&projecttypeid=" + projecttypeid + "&projectid=" + projectid, buttonaction: true
            }];
            modal.show({ title: "Quoting Tool", views: views });
        },
        showIQFormCRM: function () {
           var views = [
               { icon: "edit", name: 'Info', url: "/interactivequestionnaire/googleconfigurationaddon", buttons: ["save"] }
            ];

            modal.show({ title: "Setup CRM Providers Values", views: views});
        },
        //Admin interactivedata end
        showCPQ: function (id, options) {
            $.extend({
                cansend: false,
                canpublish: false,
                canedit: false,
                customize: false,
                linkids: null,
                isSmartlist: null,
                reports: false,
                canPartnerSend: false,
                closetab: false
            }, options);
            var views = [];
            views.push({ icon: "search", name: 'View', url: "/collateral/faq/" + id + "/view" });
            if (options.cansend) {
                if (options.linkids != null) {
                    views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist, buttons: ["finish"] });
                    if (options.canPartnerSend)
                        views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist + "&ispartner=" + true, buttons: ["finish"], iconprefix: "far" });
                }
                else {
                    views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"] });
                    if (options.canPartnerSend)
                        views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&ispartner=" + true, buttons: ["finish"], iconprefix: "far" });
                }
            }
            views.push({ icon: "address-book", name: 'Associated Assets', url: "/related-assets/" + id});
            var title = 'FAQs' + " > " + "" + views[0].name + " (<b><i>" + options.name + "</i></b>)";
            modal.show({ title: title, locked: true, preventClose: true, closeTab: options.closetab, views: views });
        },
        showCPQForPrint: function (CPQId, printID, callback) {
            var views = [{ icon: "search", name: 'FAQs', url: "/interactivequestionnaire/preview/" + CPQId + "?printtemplateid=" + printID, buttons: ["save"] }];

            modal.show({ title: 'FAQs', views: views, callback: callback });
        },
        showIFTFromGrid: function (callback) {
            var views = [{ icon: "picture-o", name: "", url: "/setup/interactivequestionnaire?fromprint=true", buttons: ["save"] }];
            modal.show({ title: 'Create Fund Request', views: views, callback: callback });
        },
        showCPQForPrint: function (CPQId, printID, callback) {
            var iftName = 'FAQs';
            api.call("GetIQEnginesByID", { cpqid: parseInt(CPQId) }, function (result) {
                iftName = result.result.interactiveQuestionniare.name;
                var views = [{ icon: "search", name: iftName, url: "/interactivequestionnaire/preview/" + CPQId + "?printtemplateid=" + printID, buttons: ["save"] }];

                modal.show({ title: iftName, views: views, callback: callback });
            });
        },
        sendEbook: function (id, edata) {
            $.extend({
                locked: false,
                closetab:false
            },edata)
            var views = [];

            if (edata.linkids != null && edata.linkids != "") {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + edata.linkids + "&isSmartlist=" + edata.isSmartlist + "&isContactcompany=" + edata.isContactcompany, buttons: ["finish"]}];
            }
            else {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"]}];
            }

            modal.show({ title: 'Send Ebook', views: views,locked: edata.locked, closeTab: edata.closetab });
        },
        sendEbookForProject: function (eData) {
            $.extend({
                locked: false,
                closetab: false
            }, eData)
            var views = [];
            var projectID = eData.projectid;
            var projectTypeID = eData.projecttypeid;

            var linkIDs = eData.linkids;
            if (linkIDs != null && linkIDs != "") {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + eData.id + "&isAssetEmail=true&linkids=" + linkIDs + "&isSmartlist=" + eData.isSmartlist + "&isContactcompany=" + eData.isContactcompany + "&isopportunity=true&projectid=" + projectID + "&projecttypeid=" + projectTypeID, buttons:["finish"]}];
            }
            else {
                var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + eData.id + "&isAssetEmail=true&isopportunity=true&projectid=" + projectID + "&projecttypeid=" + projectTypeID, buttons: ["finish"]}];
            }

            modal.show({ title: 'Send eBook', views: views, locked: eData.locked, closeTab: eData.closetab });
        },
        showEbookReport: function (options) {
            $.extend({
                //view: false,
                page: false,
                contact: false,
            })
            var views = [];
            var title = "";

            views.push({ icon: "chart-bar", name: 'Report', url: "/collateral/ebook/" + options.id + "/report", iconprefix: "far" });
            if (options.page)
                views.unshift({ icon: "file", name: 'Pages', url: "/collateral/ebook/" + options.id + "/interestbypage" });
            else
                views.push({ icon: "file", name: 'Pages', url: "/collateral/ebook/" + options.id + "/interestbypage" });

            if (options.contact)
                views.unshift({ icon: "users", name: 'Contacts', url: "/collateral/ebook/" + options.id + "/interestbycontact" });
            else
                views.push({ icon: "users", name: 'Contacts', url: "/collateral/ebook/" + options.id + "/interestbycontact" });

            if (options.name != undefined) {
                title = 'Ebook Report > ' + views[0].name + " (<b><i>" + options.name + "</i></b>)";
            }
            else
                title = 'Activity > ' + views[0].name + '';

            modal.show({ title: title, views: views });
        },
        showTrackingLinkSource: function (id, linkid, sorceid, isuniquesource, issource) {
            var views = [
                { icon: "fa-fw fa-bullhorn", name: 'Source Details', url: "manage/externaltracking/source-history/" + id + "/" + linkid + "?sorceid=" + sorceid + "&isuniquesource=" + isuniquesource + "&issource=" + issource }
            ];
            modal.show({ title: 'Source Details', views: views });
        },
        //Added by Lalita
        showCertificationReport: function (options) {
            var parameters = "";

            if (options.linktype != undefined) {
                if (options.grouptype == undefined)
                    options.grouptype = "";
                if (options.usergroupid == undefined)
                    options.usergroupid = "";
                if (options.usergroupviewoption == undefined)
                    options.usergroupviewoption = "";

                if (options.linktoid != null)
                    parameters = "linktoid=" + options.linktoid + "&linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption + "&groupType=" + options.grouptype + "&usergroupid=" + options.usergroupid + "&usergroupviewoption=" + options.usergroupviewoption;
                else
                    parameters = "linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption + "&groupType=" + options.grouptype + "&usergroupid=" + options.usergroupid + "&usergroupviewoption=" + options.usergroupviewoption;
            }

            var views = [{ icon: "chart-bar", name: 'Report', url: "/collateral/questionnaire/" + options.id + "/report?" + parameters, iconprefix: "far" }];
            modal.show({ title: 'Certification Report' + " (<b><i>" + options.name +"</b></i>)", views: views });
        },
        showCertificationResult: function (options) {//Added by Lalita           

            var views = [];
            var title = "";

            var parameters = "";

            if (options.grouptype == undefined)
                options.grouptype = "";
            if (options.usergroupid == undefined)
                options.usergroupid = "";
            if (options.usergroupviewoption == undefined)
                options.usergroupviewoption = "";

            if (options.linktoid != null)
                parameters = "linktoid=" + options.linktoid + "&linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption + "&groupType=" + options.grouptype + "&usergroupid=" + options.usergroupid + "&usergroupviewoption=" + options.usergroupviewoption;
            else 
                parameters = "linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption + "&groupType=" + options.grouptype + "&usergroupid=" + options.usergroupid + "&usergroupviewoption=" + options.usergroupviewoption;

            views.push({
                icon: "chart-bar", name: 'Report', url: "/collateral/questionnaire/" + options.id + "/report?" + parameters, iconprefix: "far" });            
                        
            if (options.name == 'Users')
                views.unshift({
                    icon: "user", name: 'Total Users', url: "/collateral/questionnaire/" + options.id + "/users?" + parameters });
            else
                views.push({
                    icon: "user", name: 'Total Users', url: "/collateral/questionnaire/" + options.id + "/users?" + parameters });
                        
            if (options.name == 'Taken' || options.name == 'Attempt')
                views.unshift({ icon: "flag", name: options.name, url: "/collateral/questionnaire/" + options.id + "/taken?" + parameters, iconprefix: "far" });
            else
                views.push({
                    icon: "flag", name: 'Taken', url: "/collateral/questionnaire/" + options.id + "/taken?" + parameters, iconprefix: "far" });
                       
            if (options.name == 'Completed')
                views.unshift({
                    icon: "flag-checkered", name: 'Completed', url: "/collateral/questionnaire/" + options.id + "/completed?" + parameters});
            else
                views.push({
                    icon: "flag-checkered", name: 'Completed', url: "/collateral/questionnaire/" + options.id + "/completed?" + parameters });
                        
            if (options.name == 'Passed')
                views.unshift({
                    icon: "thumbs-up", name: 'Passed', url: "/collateral/questionnaire/" + options.id + "/pass?" + parameters });
            else
                views.push({
                    icon: "thumbs-up", name: 'Passed', url: "/collateral/questionnaire/" + options.id + "/pass?" + parameters });
                        
            if (options.name == 'Failed')
                views.unshift({
                    icon: "thumbs-down", name: 'Failed', url: "/collateral/questionnaire/" + options.id + "/fail?" + parameters });
            else
                views.push({
                    icon: "thumbs-down", name: 'Failed', url: "/collateral/questionnaire/" + options.id + "/fail?" + parameters });
           
            if (options.name != undefined) {
                if (options.templatename != undefined)
                    title = 'Certification ' + views[0].name + " (<b><i>" + options.templatename + "</b></i>)";
                else
                    title = 'Certification ' + views[0].name + "";
            }
            else
                title = 'Activity > ' + views[0].name + '';

            modal.show({ title: title, views: views });
        },
        showCertificationResultData: function (options) {

            var views = [];
            var title = "";

            var parameters = "";

            if (options.linktoid != null)
                parameters = "linktoid=" + options.linktoid + "&linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption;
            else 
                parameters = "linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption;
            if (options.showorgtab != undefined && options.showorgtab != null)
                parameters += "&showorgtab=" + options.showorgtab;
            if (options.ispartnercertificationscoringwidget != undefined && options.ispartnercertificationscoringwidget != null)
                parameters += "&ispartnercertificationscoringwidget=" + options.ispartnercertificationscoringwidget;

            views.push({
                icon: "chart-bar", name: 'Report', url: "/collateral/questionnaire/" + options.id + "/report?" + parameters, iconprefix: "far" });            

            if (options.name == 'Completed')
                views.unshift({
                    icon: "flag-checkered", name: 'Completed', url: "/collateral/questionnaire/" + options.id + "/completed?" + parameters
                });
            else
                views.push({
                    icon: "flag-checkered", name: 'Completed', url: "/collateral/questionnaire/" + options.id + "/completed?" + parameters
                });

            if (options.name == 'On Going')
                views.unshift({
                    icon: "thumbs-down", name: 'On Going', url: "/collateral/questionnaire/" + options.id + "/ongoing?" + parameters
                });
            else
                views.push({
                    icon: "thumbs-down", name: 'On Going', url: "/collateral/questionnaire/" + options.id + "/ongoing?" + parameters
                });

            if (options.name == 'Not Started')
                views.unshift({
                    icon: "thumbs-down", name: 'Not Started', url: "/collateral/questionnaire/" + options.id + "/notstarted?" + parameters
                });
            else
                views.push({
                    icon: "thumbs-down", name: 'Not Started', url: "/collateral/questionnaire/" + options.id + "/notstarted?" + parameters
                });
                       
            if (options.name == 'Passed')
                views.unshift({
                    icon: "thumbs-up", name: 'Passed', url: "/collateral/questionnaire/" + options.id + "/pass?" + parameters });
            else
                views.push({
                    icon: "thumbs-up", name: 'Passed', url: "/collateral/questionnaire/" + options.id + "/pass?" + parameters });

            if (options.name != undefined) {
                if (options.templatename != undefined)
                    title = 'Certification ' + views[0].name + " (<b><i>" + options.templatename + "</b></i>)";
                else
                    title = 'Certification ' + views[0].name + "";
            }
            else
                title = 'Activity > ' + views[0].name + '';

            modal.show({ title: title, views: views });
        },
        showCertificationResultDataUserBase: function (options) {

            var views = [];
            var title = "";

            var parameters = "";

            if (options.linktoid != null)
                parameters = "linktoid=" + options.linktoid + "&linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption;
            else
                parameters = "linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption;
            if (options.showorgtab != undefined && options.showorgtab != null)
                parameters += "&showorgtab=" + options.showorgtab;
            if (options.ispartnercertificationscoringuserbasewidget != undefined && options.ispartnercertificationscoringuserbasewidget != null)
                parameters += "&ispartnercertificationscoringuserbasewidget=" + options.ispartnercertificationscoringuserbasewidget;

            views.push({
                    icon: "flag-checkered", name: 'Completed', url: "/collateral/questionnaire/" + options.id + "/completed?" + parameters
                });

            if (options.name == 'On Going')
                views.unshift({
                    icon: "thumbs-down", name: 'On Going', url: "/collateral/questionnaire/" + options.id + "/ongoing?" + parameters
                });
            else
                views.push({
                    icon: "thumbs-down", name: 'On Going', url: "/collateral/questionnaire/" + options.id + "/ongoing?" + parameters
                });

            if (options.name == 'Not Started')
                views.unshift({
                    icon: "thumbs-down", name: 'Not Started', url: "/collateral/questionnaire/" + options.id + "/notstarted?" + parameters
                });
            else
                views.push({
                    icon: "thumbs-down", name: 'Not Started', url: "/collateral/questionnaire/" + options.id + "/notstarted?" + parameters
                });

            if (options.name != undefined) {
                if (options.templatename != undefined)
                    title = 'Certification ' + views[0].name + " (<b><i>" + options.templatename + "</b></i>)";
                else
                    title = 'Certification ' + views[0].name + "";
            }
            else
                title = 'Activity > ' + views[0].name + '';

            modal.show({ title: title, views: views });
        },
        showEmailCampaign: function (options, callback) {
            var views = [{ icon: "", name: "", url: "/manage/mdf/emailcampaign", buttons: ["save"] }];
            modal.show({ title: options.title, views: views, callback: callback});
        },
        showDealRegistration: function (callback) {
            var views = [{ icon: "", name: 'Info', url: "/manage/mdf/leadregistered/", buttons: ["save"]}];
            modal.show({ title: 'Deal Requests', views: views,  callback: callback });
        },
        showDealRegistrationRecords: function (options, callback) {

            var views = [{ icon: "", name: 'Info', url: "/manage/leads/records?counttype=" + options.counttype + "&leadpagetype=" + options.leadpagetype, buttons: [] }];

            var headerTitle = "";
            switch (parseInt(options.counttype)) {
                case 1: headerTitle = 'Total Deals Registered';
                    break;
                case 2: headerTitle = 'Last 30 Days';
                    break;
                case 3: headerTitle = 'Last 60 Days';
                    break;
                case 4: headerTitle = 'Last 90 Days';
                    break;
                case 5: headerTitle = 'Above 90 Days';
                    break;
                case 6: headerTitle = 'Approved Deals';
                    break;
                case 7: headerTitle = 'Rejected Deals';
                    break;
                case 9: headerTitle = 'By Your Own Company';
                    break;
                case 10: headerTitle = 'By Other Partners';
                    break;
                case 11: headerTitle = 'By Your Channel Managers';
                    break;
                default: headerTitle = 'Deal Requests';
                    break;
            }

            modal.show({ title: headerTitle, views: views, callback: callback });
        },
        sendEbookToPartner: function (id, linkids, isSmartlist) {
            var views = [
                { icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&ispartner=" + true, buttons: ["finish"] }
            ];
            modal.show({ title: 'Send Ebook', views: views });
        },
        sendFAQToPartner: function (id, linkids, isSmartlist) {
            var views = [
                { icon: "envelope", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&ispartner=" + true, buttons: ["finish"] }
            ];
            modal.show({title:'Send FAQs/KnowledgeBase', views: views });
        },
        showPublish: function (id) {
            var views = [{ icon: "image", name: 'Publish', url: "/setup/socialmedia/publish/" + id, buttons: ["publish"], iconprefix: "far"}];
            modal.show({ title: 'Publish', views: views});
        },
        playbookPublishFile: function (id, playbookid) {
            var views = [{ icon: "image", name: 'Social Share', url: "/setup/publish/media/false/" + id + "/" + playbookid, buttons: ["publish"], iconprefix: "far" }];
            modal.show({ title: 'Social Share', views: views });
        },
        playbookPublishBadge: function (id) {
            var views = [{ icon: "image", name: 'Social Share', url: "/setup/publish/media/false/" + id + "?isbadge=true", buttons: ["publish"], iconprefix: "far" }];
            modal.show({ title: 'Social Share', views: views });
        },
        playbookPublishTemplate: function (id, playbookid, assetid) {
            var views = [{ icon: "image", name: 'Social Share', url: "/setup/publish/media/true/" + id + "/" + playbookid + "?assetid=" + assetid, buttons: ["publish"], iconprefix: "far" }];
            modal.show({ title: 'Social Share', views: views });
        },
        playbookPublishCertificateTemplate: function (id, playbookid, assetid, certificationid) {
            var views = [{ icon: "image", name: 'Social Share', url: "/setup/publish/media/true/" + id + "/" + playbookid + "?assetid=" + assetid + "&iscertificate=true" + "&certificationid=" + certificationid, buttons: ["publish"], iconprefix: "far" }];
            modal.show({ title: 'Social Share', views: views });
        },
        showPublishMedia:function(id){
            showPublishMedia(id, false);
        },
        showPublishMedia: function (id,locked) {
            var views = [{ icon: "image", name: 'Social Share', url: "/setup/publish/media/true/" + id, buttons: ["publish"], iconprefix: "far"}];
            modal.show({ title: 'Social Share', views: views,locked:locked,closeTab:locked });
        },
        showPublishMediaPlaybook: function (id, locked) {
            var views = [{ icon: "image", name: 'Social Share', url: "/setup/publish/playbookmedia/true/" + id + "/true", buttons: ["publish"], iconprefix: "far" }];
            modal.show({ title: 'Social Share', views: views, locked: locked, closeTab: locked });
        },
        showBannerPublishMedia: function (id, playbookid, assettype) {
            var views = [{ icon: "image", name: "Publish", url: "/setup/publish/media/true/" + id + "/" + playbookid + "/" + assettype , buttons: ["publish"] }];
            modal.show({ title: "Publish", views: views, locked: false, closeTab: false });
        },
        showPublishFile: function (id) {
            var views = [{ icon: "image", name: 'Social Share', url: "/setup/publish/media/false/" + id, buttons: ["publish"], iconprefix: "far"}];
            modal.show({ title: 'Social Share', views: views });
        },
        showPublishMessage: function (url, qs = undefined, isAiBridge = false, chatHeader = "", fileId = "", templateId = "", isAITemplate = false, hideAction = false) {
            var views = [{ icon: "image", name: 'Publish', url: "/setup/publish/message?customurl=" + escape(url) + (qs == undefined ? "" : qs) + '&isaibridge=' + isAiBridge + '&chatheader=' + encodeURIComponent(chatHeader) + '&fileid=' + fileId + '&templateid=' + templateId + '&isAITemplate=' + isAITemplate, buttons: ["publish"], iconprefix: "far" }];
            modal.show({ title: "Publish", views: views, hideCloseButton: hideAction }, function () {
                var previousModalTitle = $(".ai-sprinkler-view");
                if (previousModalTitle.length > 0) {
                    let titleContainer = previousModalTitle.closest('h4');
                    previousModalTitle.closest('a').remove();
                    if (titleContainer.length > 0)
                        titleContainer.html(titleContainer.html().replace('&gt;', ''));
                }
            });
        },
        galPublish: function (id, options) {
            var views = [{ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + id, buttons: ["publish"]}];
            var title = (options != undefined && options.name != undefined && options.name != "") ? 'Publish' + ' (<b><i>' + options.name + '</i></b>)': 'Publish';
            if (options != undefined && options.showViews == true) {
                if (options.cansendemail) {
                    views.push({ icon: "paper-plane", name: "Send Email", url: "/communicate/email/0?templates=" + null + "&files=" + id + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                }
                if (options.cansendtopartner == true) {
                        views.push({ icon: "paper-plane", name: 'Send Email To Users', url: "/communicate/email/0?templates=" + null + "&files=" + id + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, iconprefix: "far", buttons: ["finish"] });
                }
                if (options.templatetype == '8388608') {
                    if (options.permission) {
                        views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/video/permissions/" + id + "/" + options.sharetype + "/" + id, buttons: ["save"] });
                    }
                    if (options.canedit) {
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + id + "/edit", buttons: ["save"] });
                    }
                    title = "Video" + " > " + views[0].name + "(<b><i>" + options.name + "</i></b>)";
                }
                else if (options.templatetype == '1048576') {
                    if (options.permission) {
                        views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + id + "/" + options.shareType + "/" + id, buttons: ["save"] });
                    }
                    if (options.canedit) {
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/images/" + id + "/edit/edit" + "/" + getTimeStamp(), buttons: ["save"] });
                    }

                    title = 'Image > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
                }
                if (options.rating != undefined && options.rating) {                    
                    views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + id + "/" + 2 + "/rating/comment", iconprefix: "fas" });
                }
            }
            modal.show({ title: title, views: views });
        },
        showPlaybookPublishFile: function (id,callback) {
            var views = [{ icon: "image", name: 'Publish', url: "/setup/publish/media/false/" + id, buttons: ["publish"], iconprefix: "far" }];
            modal.show({ title: 'Publish', views: views, callback: callback });
        },
        showSharingForBridgeAI: function (data, callback) {
            var views = [{ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + data.id + "/" + data.sharetype + "/share", buttons: ["save"] }];
            modal.show({ title: `Bridge AI ${data.tabname} Permission`, views: views, callback: callback });
        },
        showSharing: function (shareid, idstoshare, sharetype, options) {
            var views = [{ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/newversion/" + sharetype + "/" + idstoshare, buttons: ["save"] }];
            var title = 'Sharing';
            if (options != undefined && options.showViews == true) {
                if (options.cansendemail == true && !options.isrestricted) {
                    views.push({ icon: "paper-plane", name: "Send Email", url: "/communicate/email/0?templates=" + null + "&files=" + idstoshare + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                }
                if (options.cansendtopartner == true && !options.isrestricted) {
                        views.push({ icon: "paper-plane", name: 'Send Email To Users', url: "/communicate/email/0?templates=" + null + "&files=" + idstoshare + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, iconprefix: "far", buttons: ["finish"] });
                }
                if (options.publish && !options.isrestricted) {
                    views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + idstoshare, buttons: ["publish"] });
                }
                if (options.canedit)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + shareid + "/edit" + "?issetup=" + options.issetup, buttons: ["save"] });
                if (options.rating) {
                    views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + shareid + "/" + 2 + "/rating/comment", iconprefix: "fas" });
                }
                if (options.name != null) {
                    title = "Video" + " > " + views[0].name + " (<b><i>" + options.name + "</i></b>)";
                }
                else {
                    title = "Video" + " > " + views[0].name;
                }
            }
            modal.show({ title: title, views: views });
        },
        showSharingForAssets: function (data) {
            var views = [{ icon: "share-alt", name: 'Sharing', url: `/setup/sharing/permissions/${data.id}/${data.sharetype}/${data.idstoshare}`, buttons: ["save"] }];

            var title = data.name + " > " + 'Sharing' + " (<b><i>" + data.displayname + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        showPlaybookSharing: function (shareid, idstoshare, sharetype, options) {
            var views = [{ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/newversion/" + sharetype + "/" + idstoshare +"?iscompanyuserlist=" + options.isCompanyUserList, buttons: ["save"] }];

            var title = 'Sharing';
            modal.show({ title: title, views: views });
        },
        showTemplateSharing: function (shareid, idstoshare, sharetype, name, options) {
            var views = [{ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/newversion/" + sharetype + "/" + idstoshare, buttons: ["save"] }];
            var title = " Document " + " > " + 'Sharing';;
            if (name != undefined)
                title = 'Sharing (<b><i>' + name + '</i></b>)';
            if (options != undefined && options.showViews == true) {
                if (options.canSendEmail && !options.isrestricted) {
                    views.push({ icon: "envelope", name: "Send Email", url: "/communicate/email/0?templates=" + null + "&files=" + idstoshare + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                    views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?templates=" + null + "&files=" + idstoshare + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, buttons: ["finish"] });
                }
                if (options.canedit)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + shareid + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + options.isSetup, buttons: ["save", "cancel"] });
                if (options.rating) {
                    views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + shareid + "/" + 2 + "/rating/comment", iconprefix: "fas" });
                }
                if (!options.isrestricted) {
                views.push({ icon: "database", name: 'Data Room', url: "/collateral/datarooms/" + shareid + "/" + 2 });
                }
                if (options.canedit && options.hasversionaccess == true && options.hasversionaccess != undefined && !options.isrestricted) {
                    views.push({ icon: "history", name: 'Versions', url: "/gallery/file/versions/" + options.types + "/" + shareid + "?issetup=" + options.isSetup + "&iswizard=" + options.iswizard })
                }
                if (name != null)
                    title = " Document " + " > " + views[0].name + " (<b><i>" + name + "</i></b>)";
            }
            modal.show({ title: title, views: views });
        },
        showBrandSharing: function (shareid, sharetype) {
            var views = [{ icon: "edit", name: 'Permissions', url: "/setup/sharing/permissions/" + shareid + "/" + sharetype + "/share", buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: 'Brand Permission', views: views });
        },
        showCrmLogin: function () {
            var views = [{ icon: "cog", name: 'Login', url: "/crm/login/salesforce2", buttons: ["save"]}];
            modal.show({ title: '{$ajax_crm_settings.LoginForm}', views: views });
        },
        showTigerpawLogin: function () {
            var views = [
                { icon: "", name: "", url: "/crm/login/tigerpaw", buttons: ["save"]}
            ];
            modal.show({ title: '{$ajax_crm_settings.LoginForm}', views: views });
        },
        showTigerpawLogin2: function () {
            var views = [
                { icon: "", name: "", url: "/crm/login/tigerpaw2", buttons: ["save"] }
            ];
            modal.show({ title: '{$ajax_crm_settings.LoginForm}', views: views });
        },
        showTemplate: function (id, options, pageid) {
            var info = { icon: "info-circle", name: 'Info', url: "/setup/template/" + id + "/info" + "/" + getTimeStamp()+ "?foldertype=" +options.foldertype + "&isbookmark=" + options.isbookmark ,buttons:["save"] }
            var settings = { icon: "database", name: 'Settings', url: "/setup/template/" + id + "/data",buttons: ["save"] }
            if (pageid == undefined)
                var designeditor = { icon: "edit", name: 'Editor', url: "/setup/template/" + id + "/editor", buttonaction: true }
            else
                var designeditor = { icon: "edit", name: 'Editor', url: "/setup/template/" + id + "/editor/" + pageid, buttonaction: true }
            
            var linkedineditor = { icon: "edit", name: 'Editor', url: "/setup/template/" + id + "/linkedin", buttonaction: true }
            var internalplaybookeditor = { icon: "edit", name: "Internalplaybookeditor", url: "/internaladminplaybook/" + id }
            var permission = { icon: "share-alt", name: 'Sharing', url: "/setup/sharing/newversion/" + 100 + "/" + id + "/null?iscompanyuserlist=" + options.isCompanyUserList, buttons: ["save"] }
            var report = { icon: "chart-bar", name: 'Report', url: "/setup/asset/report/" + id, iconprefix: "far" }
            var reportViewTemplate = "";
            if (typeof (options.issetuptemplatereport) != "undefined" && options.issetuptemplatereport == true) {
                if (options.linktoid != null)
                    reportViewTemplate = "?linktoid=" + options.linktoid + "&linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption
                else
                    reportViewTemplate = "?linktype=" + options.linktype
                        + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption
                report = { icon: "chart-bar", name: 'Report', url: "/setup/asset/report/" + id + "" + reportViewTemplate + "", iconprefix: "far" }
            }
            if (options.templatetype == 262144)//Added by Lalita, for certification report
            {
                var parameters;
                if (options.linktoid != null)
                    parameters = "linktoid=" + options.linktoid + "&linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption + "&groupType=" + options.grouptype + "&usergroupid=" + options.usergroupid + "&usergroupviewoption=" + options.usergroupviewoption;
                else
                    parameters = "linktype=" + options.linktype + "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption + "&groupType=" + options.grouptype + "&usergroupid=" + options.usergroupid + "&usergroupviewoption=" + options.usergroupviewoption;

                report = { icon: "chart-bar", name: 'Report', url: "/collateral/questionnaire/" + id + "/report?" + parameters, iconprefix: "far" }
            }

            var question = { icon: "question-circle", name: 'Input', url: "/setup/template/" + id + "/questions", buttons:["save"] }
            /*var feedbackrating = { icon: "star", name: 'Rating', url: "/feedback/" + id + "/1/rating" }*/ // 1 is for template feedback type
            var feedbackratingv5 = { icon: "star", name: 'Feedback and Rating', url: "/feedback/" + id + "/1/rating/comment", iconprefix: "fas" } // 1 is for template feedback type
            /*var feedbackcomment = { icon: "comments", name: 'Comments', url: "/feedback/" + id + "/1/comment", iconprefix: "far"  }*/ // 1 is for template feedback type
            //Added by lalita for bugfix #4442, to display template in Views dropdown
            var webtemplates = { icon: "file-alt", name: 'Use in Template', url: "/setup/templates/selectwebtemplate/" + id }

            var pptManageSlides = { icon: "tasks", name: 'Manage Slides', url: "/collateral/presentation/" + id + "/reordering", buttons: ["save"]};
            var pptView = { icon: "search", name: 'View', url: "/collateral/presentation/" + id + "/view" };

            var playbookcompanylist = { icon: "users", name: 'Map Company List', url: "/internalplaybook/companysmartlists/"+id }; 
            var plabookmdflist = {icon: "money", name: 'Associate MDF', url: "/marketingmdfplan/"+id }; 
            var expiration = { icon:"ban",name: 'Expiration', url: "/setup/template/" + id + "/expiration", buttons:["save"]}
            //Modify by lalita to get the template type text
            var templateVersion = { icon: "history", name: 'Versions', url: "/setup/template/" + id + "/version" };

            var viewimages = { icon: "image", name: 'Images', url: "/collateral/faq/" + id + "/viewimages", iconprefix: "far"};
            var viewvideos = { icon: "file-video", name: 'Videos', url: "/collateral/faq/" + id + "/viewvideos", iconprefix: "far"};
            var viewdocs = { icon: "file", name: 'Documents', url: "/collateral/faq/" + id + "/viewdocs" };

            if (options.canshare) {
                if (options.templatetype == 16384) {
                    editviews = [pptView, settings, pptManageSlides, info]; // Kindly refrain from removing this, as it is intended for the PowerPoint presentation view.
                }
                else if (options.templatetype == 512) {
                    editviews = [designeditor, info, settings, report, webtemplates];
                }
                else if (options.templatetype == 131072) {
                    editviews = [designeditor, info, report];
                }
                else if (options.templatetype == 16777216  || options.templatetype == 536870912) {
                    if (options.canedit && options.IsScormCourse) {
                        var scormFileEdit = { icon: "edit", name: 'Update SCORM File', url: "/setup/template/" + id + "/scorm" }
                        editviews = options.isscormedit ? [scormFileEdit, info, settings, report] : [info, settings, scormFileEdit, report];
                    }
                    else 
                        editviews = [info, settings, report];
                }
                else if (options.templatetype == 33554432) {
                    editviews = [linkedineditor, info];
                }
                else if (options.templatetype == 268435456) {
                    editviews = [designeditor, info, settings];
                }
                else if (options.templatetype == 1073741824) {
                    editviews = [designeditor, info, settings, viewimages, viewdocs, viewvideos]
                }
                else if (options.templatetype == 3145728) {
                    if (options.hasquestionnaire)
                        editviews = [designeditor, info, settings, question]
                    else
                        editviews = [designeditor, info, settings]
                }
                else if (options.templatetype == 8388608) {
                    if (options.hasquestionnaire)
                        editviews = [designeditor, info, settings, question, report]
                    else
                        editviews = [designeditor, info, settings,report]
                }
                else if (options.hasquestionnaire == true || options.hasquestionnaire == "true") {
                    editviews = [designeditor, info, settings, question,report];
                }
                else if (options.templatetype == 262144) {
                    editviews = [designeditor, info, settings, expiration, report, /*feedbackrating,*/ feedbackratingv5/*, feedbackcomment*/];
                }
                else {
                    if (options.templatetype == 262144 && (options.taken == 0||options.taken==undefined))
                        editviews = [designeditor, info, settings];
                    else if (options.templatetype == parseInt("1024"))
                        editviews = [designeditor, info, settings];
                    else if (options.subtype)
                        editviews = [designeditor, info, settings];
                    else
                        editviews = [designeditor, info, settings, report];
                }

                if (options.showpermission) {//check rights to add sharing page
                    editviews.push(permission);
                }
            }
             else {
                 if (options.templatetype == 512) {
                     editviews = [designeditor, info, settings, webtemplates];                
                 }
                 else if (options.templatetype == 131072) {
                     editviews = [designeditor, info];
                 }            
                 else if (options.templatetype == 16777216 || options.templatetype == 536870912) {
                     if (options.canedit && options.IsScormCourse) {
                         var scormFileEdit = { icon: "edit", name: 'Update SCORM File', url: "/setup/template/" + id + "/scorm" }
                         editviews = options.isscormedit ? [scormFileEdit, info, settings] : [info, settings, scormFileEdit];
                     }
                     else
                         editviews = [info, settings];
                 }
                 else if (options.templatetype == 33554432) {
                     editviews = [linkedineditor, info];
                 }
                 else if (options.templatetype == 268435456) {
                     editviews = [designeditor, info, settings]
                 }
                 else if (options.templatetype == 1073741824) {
                     editviews = [designeditor, info, settings, viewimages, viewdocs, viewvideos]
                 }
                 else if (options.hasquestionnaire) {
                     editviews = [designeditor, info, settings, question];
                 }
                 else if (options.templatetype == 16384) {
                     editviews = [pptView, settings, pptManageSlides, info];
                 }
                 else if (options.templatetype == 8388608) {
                     if (options.hasquestionnaire)
                         editviews = [designeditor, info, question]
                     else
                         editviews = [designeditor, info]
                 }
                 else {
                     editviews = [designeditor, info, settings];
                }
                 if (options.showpermission) {//check rights to add sharing page
                     editviews.push(permission);
                 }
             }

            if (options.templatetype != 262144) {//Added by Lalita, since rating and comments has been removed from certification 
                if (options.allowrating) {//check rating permission
                    /*editviews.push(feedbackrating);*/
                    editviews.push(feedbackratingv5);
                    /*editviews.push(feedbackcomment);*/
            }
            }
            //#43734 - to remove "Map Company List" in view dropdown of created courses, curriculum and Scorm package.
            if (options.templatetype == 16777216)
                editviews.push(playbookcompanylist);

            if (options.templatetype == 16777216 && options.personalization == '0' && options.isMDFPlanner && options.isMDFAdmin && options.hasmarketingoverviewaccess)
                editviews.push(plabookmdflist);
            //added for #17774 - show template versions in views
            if (options.templatetype == parseInt("16") || options.templatetype == parseInt("128") || options.templatetype == parseInt("32") || options.templatetype == parseInt("36864")) {
                if (options.templateVersionPermission)
                    editviews.push(templateVersion);
            }
            var $content = $("<div>");
            var $span = ' (<b><i>' + options.name + '</i></b>)';
            $content.append($span);
            var title = getTemplateTypetext(options.templatetype) + 'Template > ' + editviews[0].name + $content.html();
            if (options.templatetype == (parseInt("134217728")) || (parseInt("128"))) //#30590 #67985
            {
                var templateSubType = "";
                if (options.subtype == parseInt("1") || options.subtype == parseInt("3")) 
                    templateSubType = 'External ';               
                if (options.subtype == parseInt("2") || options.subtype == parseInt("4"))
                    templateSubType = 'Internal '; 

                title = templateSubType + title;
            }
            if (options.templatetype == parseInt("16777216") && options.personalization == parseInt("9") ) //#30590
            {
                title = 'Journey' + ' Template > ' + editviews[0].name + $content.html();
            }
            modal.show({ title: title, views: editviews, locked: true, preventClose: true });
        },
        showWebTemplatePages: function (option, callback) {
            var templateID = option.webtemplateid;
            var formID = option.formid;
            var views = [{ icon: "", name: "", url: "/webtemplatepage/" + formID + "/" + templateID,buttons:["save"] }];
            modal.show({ title: option.title, views: views, callback: callback });
        },
        showEmailTemplateEditor: function (options, callback) {
            var isDripMedia = false;
            if (options.ismedia)
                isDripMedia = true;
            var isDrip = false;
            if (options.isdrip)
                isDrip = true;

            var title = options.title + getTemplateTypetext(options.templatetype) + options.templateheader + ' (<b><i>' + options.name + '</i></b>)';
            var views = [{ icon: "edit", name: options.viewname, url: "/setup/template/" + options.id + "/editor?isdripmedia=" + isDripMedia + "&isdrip=" + isDrip, buttonaction: true, buttons:["save"] }];
            modal.show({ title: title, views: views, locked: true, preventClose: true, callback: callback });
        },
        showPartnerWizard: function (partner, options) {
            $.extend({
                canUserCreate: false,
                canUserEdit: false,
                canOrgCreate: false,
                canOrgEdit: false
            })
            var partnerid = partner.id;
            var info = { icon: "database", name: 'Info', url: "/setup/partner/" + partnerid };
            var user = { icon: "user", name: 'User', url: "/setup/user/0?partnerid=" + partnerid };
            var organization = { icon: "edit", name: 'Organization', url: "/setup/organization/info/0?partnerid=" + partnerid };
            var _wizdata = {
                name: 'Create Sales Team Member',
                steps: [info]
            };

            if (options.canUserEdit)
                _wizdata.steps.push(user);
            if (options.canOrgEdit)
                _wizdata.steps.push(organization);

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showTemplateApprovalAction: function (options) {
            var views = [];
            if (options.history == 1)
                 views = [{ icon: "", name: "", url: "/approval/templates/approval-action/" + options.id + "/" + options.type + "/" + options.history }];
            else
                views = [{ icon: "", name: "", url: "/approval/templates/approval-action/" + options.id + "/" + options.type + "/" + options.history, buttons:["save"] }];

           modal.show({ title: options.title, views: views });
        },
        showDatabaseApprovalAction: function (options) {
            var views = [];
            if (options.action)
                views = [{ icon: 'history', name: 'Approval', url: `/approval/database-records/action/${options.assettypeid}/${options.id}?action=${options.action}`, buttons: ['save'] }];
            else
                views = [{ icon: 'history', name: 'Approval History', url: `/approval/database-records/action/${options.assettypeid}/${options.id}` }];
            modal.show({ title: options.title, views: views });
        },
        showContactToUserConversionWizard: function (contactid, userid, options) {
            $.extend({
                hasOrganizationEditaccess: false,
                isUserCreate: false,
                canShowGroup: false,
                isSuperAdmin: false,
                canViewRole: false
            })
            var userInfo = { icon: "user", name: 'Info', url: "/setup/user/" + userid + "?contactid=" + contactid };
            var organization = { icon: "users", name: 'Organization', url: "/setup/organization/addremove/" + userid + "?isusercreate=" + options.isUserCreate + "&iscreateuser=" + options.isCreateUser + "&contactid=" + contactid + "&ismultiplecontactconversion=" + options.isMultipleContactConversion};
            var _wizdata = {
                name: 'Convert into User',
                steps: []
            };
            if (!(options.isMultipleContactConversion != undefined ? options.isMultipleContactConversion : false)) {
                _wizdata.steps.push(userInfo);
            }
            if (options.canShowGroup)
                _wizdata.steps.push({ icon: "users", name: 'User Groups', url: "/setup/user/groups/" + userid + "?isusercreate=" + options.isUserCreate + "&ismultiplecontactconversion=" + options.isMultipleContactConversion + "&contactid=" + contactid });
            if (options.hasOrganizationEditaccess)
                _wizdata.steps.push(organization);
            _wizdata.steps.push({ icon: "users", name: 'Summary', url: "/setup/users/activate/" + userid + "?contactid=" + contactid+ "&ismultiplecontactconversion=" + options.isMultipleContactConversion });
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        }, 
        showTemplateWizard: function (template) {
            var templateid = template.id;
            var ttype = template.templatetype;           
            var personalize = template.personalization;
            var playbookcreated = false;
            if (template.playbookcreated)
                playbookcreated = true;

            if (ttype == parseInt("32"))
            var options = template.subtype;
            var info = { name: 'Info', url: "/setup/template/" + templateid + "/info" }
            var Settings = { name: 'Settings', url: "/setup/template/" + templateid + "/data" }
            var designeditor = { name: `${getTemplateTypetext(ttype, options)}Editor`, url: `/setup/template/${templateid}/editor?isstepprocess=true&playbookcreated=${playbookcreated}`, wizardclose: true};
            var smseditor = { name: getTemplateTypetext(ttype, options) + 'Editor', url: "/setup/template/" + templateid + "/sms", wizardclose: true }
            var linkedineditor = { name: getTemplateTypetext(ttype, options) + 'Editor', url: "/setup/template/" + templateid + "/linkedin", wizardclose: true }
            var question = { name: '\'Input\' Configurator', url: "/setup/template/" + templateid + "/questions" }
            //Added by Lalita to add step 3 wizard in form template
            var formcontainer = { name: 'Use in Template', url: "/setup/templates/selectwebtemplate/" + templateid }          
            //upto here 
            
            var sharing = { name: 'Sharing', url: `/setup/sharing/newversion/100/${templateid}/null?iscompanyuserlist=true&iscreateassets=true&playbookcreated=${playbookcreated}`};

            var expiration = { name: 'Expiration', url: `/setup/template/${templateid}/expiration?playbookcreated=${playbookcreated}`,wizardclose: true};

            if (ttype == parseInt("65536")) {
                var _wizdata = {
                    name: "Create " + getTemplateTypetext(ttype) + " Template",
                    steps: [info, smseditor]
                };
            } else if (ttype == parseInt("16777216") || ttype == parseInt("536870912")) {
                if (personalize == parseInt("10")) {
                    var zipChooseFile = { name: 'Choose file', url: "/gallery/document/v5/" + parseInt("8288") + "/" + templateid + "?isdocumentimport=true&isscorm=true&singleselect=true" };
                    var _steps = [];
                    _steps[0] = info;
                    _steps[1] = Settings;
                    _steps[2] = zipChooseFile;
                    if (template.hasuserviewaccess)
                        _steps[3] = sharing;

                    var _wizdata = {
                        name: 'Create' + getTemplateTypetext(ttype, template),
                        steps: _steps
                    };
                }
                else {
                    var _wizdata = {
                        name: 'Create' + getTemplateTypetext(ttype, template) + ' Template',
                        steps: [info, Settings]
                    };
                }
            }
                //Modify by Lalita to add step 3 wizard in form template
            else if (ttype == parseInt("512")) {
                var _steps = [];
                _steps[0] = info;
                _steps[1] = Settings;
                _steps[2] = designeditor;
                _steps[3] = formcontainer;
                if (template.hasuserviewaccess)
                    _steps[4] = sharing;
                
                var _wizdata = {
                    name: 'Create' + getTemplateTypetext(ttype) + ' Template',
                    steps: _steps
                };
            }
            else if (ttype == parseInt("131072")) {
                var _wizdata = {
                    name: 'Create' + getTemplateTypetext(ttype) + ' Template',
                    steps: [info, designeditor]
                };
            }
            else if (ttype == parseInt("33554432")) {
                var _wizdata = {
                    name: 'Create' + getTemplateTypetext(ttype) + ' Template',
                    steps: [info, linkedineditor]
                };
            }
            else if (ttype == parseInt("67108864") || ttype == parseInt("268435456") || ttype == parseInt("1073741824")) {
                if (ttype == parseInt("1073741824"))
                    designeditor = { name: ' FAQs ' + 'Editor', url: "/setup/template/" + templateid + "/editor?isstepprocess=true", wizardclose: true }
                var _steps = [];
                _steps[0] = info;
                _steps[1] = Settings;
                _steps[2] = designeditor;
                if (template.hasuserviewaccess)
                    _steps[3] = sharing;
                var _wizdata = {
                    name: 'Create' + getTemplateTypetext(ttype) + ' Template',
                    steps: _steps
                };
            }
            else if (ttype == parseInt("16384")) {
                var pptInfo = { name: 'Info', url: "/collateral/presentation/" + templateid + "/info" };
                var pptSettings = { name: 'Settings', url: "/setup/template/" + templateid + "/data" };
                var pptManageSlides = { name: 'Manage Slides', url: `/collateral/presentation/${templateid}/reordering?playbookcreated=${playbookcreated}` , disableprevbutton: "1" };
                var _steps = [];
                _steps[0] = pptInfo;
                _steps[1] = pptSettings;
                if (template.action == "copy") {
                    _steps[2] = pptManageSlides;
                    if (template.hasuserviewaccess)
                        _steps[3] = sharing;
                }
                else {
                    var pptChooseFile = { name: 'Choose file', url: `/gallery/document/v5?isdocumentimport=true&ft=8209&tid=${templateid}&singleselectwithattach=true` };
                    _steps[2] = pptChooseFile;
                    _steps[3] = pptManageSlides;
                    if (template.hasuserviewaccess)
                        _steps[4] = sharing;
                }
                var _wizdata = {
                    name: 'Create' + getTemplateTypetext(ttype) + ' Template',
                    steps: _steps
                };
            }
            else if (ttype == parseInt("134217728")) {
                var templateSubType = "";
                if (template.subtype == parseInt("1"))
                    templateSubType = 'External';
                if (template.subtype == parseInt("2"))
                    templateSubType = 'Internal';

                var _steps = [];
                _steps[0] = info;
                _steps[1] = Settings;
                _steps[2] = designeditor;
                if (template.hasuserviewaccess)
                    _steps[3] = sharing;

                var _wizdata = {
                    name: 'Create ' + templateSubType+" "+ getTemplateTypetext(ttype) + ' Template',
                    steps: _steps
                };
            }
            else if (personalize == 0 || personalize == 1 || personalize == 5) {               
                //Modify by lalita, for web template and certification name change
                if (ttype == parseInt("262144"))//for certification, added by lalita
                {
                    designeditor = {name: `${getTemplateTypetext(ttype)}Editor`,url: `/setup/template/${templateid}/editor?playbookcreated=${playbookcreated}`};
                    tempName = 'Create Certification';
                    var _wizdata = {
                        name: tempName,
                        steps: [info, Settings, designeditor,expiration]
                    };
                }
                else {
                    var tempName = 'Create' + getTemplateTypetext(ttype,options) + ' Template';
                    if (ttype == parseInt("128") && template.subtype != undefined) {//for internal and external web without input configurator
                        if (template.subtype == parseInt("3"))
                        templateSubType = 'External';
                        if (template.subtype == parseInt("4"))
                        templateSubType = 'Internal';
                        var tempName = 'Create ' + templateSubType + " " + getTemplateTypetext(ttype) + ' Template';
                    }
                    var _steps = [];
                    _steps[0] = info;
                    _steps[1] = Settings;
                    _steps[2] = designeditor;
                    if (template.hasuserviewaccess)
                        _steps[3] = sharing;

                    var _wizdata = {
                        name: tempName,
                        steps: _steps
                    };
                }
                //upto here
            }
            else {
                //for certification, added by lalita
                var tempName1 = 'Create' + getTemplateTypetext(ttype,options) + ' Template';
                if (ttype == parseInt("128")) //for internal and external web with  input configurato
                    var tempName1 = 'Create ' + 'External' + " " + getTemplateTypetext(ttype) + ' Template';//since only externa web banner can have input congigurator
                if (ttype == 262144)//for certification
                    tempName1 = 'Create Certification';
                var _wizdata = {
                    name: tempName1,
                    steps: [info, Settings, question, designeditor, sharing]
                };
            }
            _wizdata["preventClose"] = false;
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },

        //Added by lalita
        showFormWizard: function (templateid) { 
            var _wizdata = {
                name: 'Create Form Template',
                steps: [
                        { name: 'Info', url: "/setup/template/" + templateid + "/info" },
                        { name: 'Form Editor', url: "/setup/template/" + templateid + "/formeditor" }
                ]
            };

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        //upto here
        showCreateFundRequest: function (options, callback) {
            var views = [{ icon: "image", name: "", url: "/manage/mdf/requestfund", buttons: ["saveasdraft","submitforapproval"], iconprefix: "far" }];
            if (options!= undefined && options.isMarketingPlaybook != undefined )
                views = [{ icon: "image", name: "", url: `/manage/mdf/requestfund?fundid=${options.fundid}&ismarketingplaybook=${options.isMarketingPlaybook}`, buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: 'Create Fund Request', views: views, callback: callback });
        },
        showUpdateFundRequest: function (data, requestStatus) {
            var buttons = [];
            if (data.canedit && requestStatus != "draft")
                buttons.push("save");
            else if (data.canedit) {
                buttons.push("saveasdraft");
                buttons.push("submitforapproval");
            }     
            var updateRequestTitle = data["header"] + " (<b><i>" + data.orgName + " - " + data.fundname + " - " + data.activity.trim() + "</i></b>)";
            if (requestStatus == "new" || requestStatus == "pending" || requestStatus == "approved" || requestStatus == "partial" || requestStatus == "reimburserequest" || requestStatus == "onhold") {
                var views = [
                    { icon: "", name: 'Info', url: "/manage/mdf/funds/requestinfo/" + data.id, buttons: buttons }
                ];
                modal.show({ title: updateRequestTitle, views: views });
            }
            else if (requestStatus == "draft"){
                var views = [{ icon: "", name: 'Info', url: `/manage/mdf/requestfund?isdraftrequest=${true}&requestid=${data.id}` ,buttons: buttons },  ];
                modal.show({ title: updateRequestTitle, views: views });
            }
            else{
                var views = [
                    { icon: "", name: 'Info', url: "/manage/mdf/funds/requestinfo/" + data.id}
                ];
                modal.show({ title: updateRequestTitle, views: views });
            }
        },
        showCreateFundPlans: function (options) {
            var info = { name: 'Info', url: `/manage/mdf/fundplanning/${options.fundid}/info` }
            var activity = { name: 'Activities', url: `/manage/mdf/fundplanning/${options.fundid}/activity` }
            var fields = { name: 'Fields', url: "/manage/mdf/fundplanning/" + options.fundid + "/fields" }
            if (options.isuserinorg) {
                var company = { name: 'Organizations', url: "/manage/mdf/fundplanning/" + options.fundid + "/company/" + options.companyorgcount }
                var suppliers = { name: 'Associate Supplier', url: "/manage/mdf/fundplanning/" + options.fundid + "/suppliers" }
            }
            else {
                if (options.companyorgcount != 0)
                    var company = { name: 'Organizations', url: "/manage/mdf/fundplanning/" + options.fundid + "/company/" + options.companyorgcount }
                else
                    var company = { name: 'Companies', url: "/manage/mdf/fundplanning/" + options.fundid + "/company/" + options.companyorgcount }
                var suppliers = { name: 'Associate Supplier', url: "/manage/mdf/fundplanning/" + options.fundid + "/suppliers" }
            }
            var wizardTitle = options.fundType == 2 ? 'Create Pooled Fund Plan' : 'Create Fund  Plans';
            var _wizdata = {
                name: wizardTitle,
                steps: [info, activity, company]
            };
            if (options.ismarketplaceenabled && !options.ismdfcustfields) {
                _wizdata = {
                    name: wizardTitle,
                    steps: [info, activity, company, suppliers]
                };
            }
            else if (options.ismdfcustfields && !options.ismarketplaceenabled) {
                _wizdata = {
                    name: wizardTitle,
                    steps: [info, fields, activity, company]
                };
            }
             else if (options.ismdfcustfields && options.ismarketplaceenabled) {
                _wizdata = {
                    name: wizardTitle,
                    steps: [info, fields, activity, company, suppliers]
                };
            }
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showCreateCoOPFundWizard: function (options) {
            var info = { name: 'Info', url: "/manage/coop/info/" + options.fundid };
            var organization = { name: 'Organizations', url: "/manage/coop/organization/" + options.fundid }; 
            var activity = { name: 'Activities', url: "/manage/coop/activitylist/" + options.fundid };
            
            var _wizdata = {
                name: 'Create Fund  Plans',
                steps: [info, organization, activity]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showMdfOrganizationsAttachmentDetails: function (options) {
            var views = [
                { icon: "tasks", name: 'Activities', url: `/coop/organizations/${options.folder}?isMdf=${options.ismdf}&showopportunities=${options.showopportunities}&showallpartners=${options.showallpartners}&fundtype=${options.fundtype}`}
            ];
            var title = 'Organizations' + " > " + options.title;
            modal.show({ title: title, views: views });
        },
        showCreateCoOPActivity: function (fundId, activityID) {
            if (activityID == undefined)
                activityID = 0;
            var views = [
                { icon: "", name: 'Info', url: "/manage/coop/updateactivity/" + fundId + "/" + activityID, buttons: ["save"] }
            ];
            modal.show({ title: 'Update New Fund Request', views: views });
        },
        showUpdateFundPlans: function (id, options, activity) {
            $.extend({
                hascompanyaccess: false
            }, options);
            if (!options.iscoop) {
               var views = [
                    { icon: "tasks", name: 'Activities', url: "/manage/mdf/fundplanning/" + id + "/activity" },
                    { icon: "info-circle", name: 'Info', url: "/manage/mdf/fundplanning/" + id + "/info" + "/" + getTimeStamp(), buttons: ["save"] }
                ];
                if (!options.ispooledfund)
                    views.push({ icon: "chart-bar", name: 'Report', url: "/manage/mdf/fundplans-report/" + id + "/" + false, iconprefix: "far" });
                if (options.hascompanyaccess && options.isuserinorg) {
                    views.push({ icon: "share-alt", name: 'Assignment', url: "/manage/mdf/fundplanning/" + id + "/company/" + options.companyorgcount +"?isUpdate=true",  iconprefix: "far"});
                }
                else {
                    if (options.companyorgcount != 0)
                        views.push({ icon: "share-alt", name: 'Assignment', url: "/manage/mdf/fundplanning/" + id + "/company/" + options.companyorgcount + "?isUpdate=true",  iconprefix: "far" });
                    else
                        views.push({ icon: "", name: 'Companies', url: "/manage/mdf/fundplanning/" + id + "/company/" + options.companyorgcount + "?isUpdate=true" });
                }
                if (options.ismarketplaceenabled) //check if marketplace is enabled for company
                    views.push({ icon: "fa-fw fa-building", name: 'Suppliers', url: `/manage/mdf/fundplanning/${id}/suppliers`, buttons: ["save"], iconprefix: "far" });
                if (options.ismdfcustfields == true) {
                    views.push({ icon: "money-check-edit-alt", name: 'Fields', url: "/manage/mdf/fundplanning/" + id + "/fields", buttons: ["save"] });
                }
            }
            else {
                var views = [
                    { icon: "tasks", name: 'Activities', url: "/manage/coop/activitylist/" + id },
                    { icon: "info-circle", name: 'Info', url: "/manage/coop/info/" + id },
                    { icon: "chart-bar", name: 'Report', url: "/manage/coop/report/" + id, iconprefix: "far" }
                ]
            }
            var title = 'Manage Fund Plans > ' + views[0].name + " (<b><i>" + activity + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        showExpiredFundReport:function(id, _title){
            var views = [ 
                          { icon: "", name: 'Report', url: "/manage/mdf/fundplans-report/" + id + "/" + true }
            ];
            modal.show({ title: _title, views: views });
        },
        showPartnersForFund: function (id, options, callback) {
            var views = [
                { icon: "", name: 'Partners', url: `/manage/mdf/requestfund/partner/${id}`, buttons: ["save"] }
            ];
            modal.show({ title: options.fundname + '> Add Organizations', views: views, callback: callback });
        },
        showCreateUpdateFundPlansActivity: function (data) {
            var views = [
                { icon: "", name: "", url: `/manage/mdf/fundplanning/activityform/${data.fundid}/${data.id}/${getTimeStamp()}?isPooledFund=${options.isPooledFund}`, buttons: ["save"] }
            ];
            modal.show({ title: 'Manage/Create Activity', views: views });
        },
        showtemplateslinks: function (callback, id) {
            var views = [
                { icon: "database", name: 'Email Links', url: "/leadscoringrule/manageitems/links/" + id, buttons: ["done"] }];
            modal.show({ title: 'Links In Template', views: views, callback:callback });
        },

        showModifyFundRequest: function (id, requestStatus, data) {
            var updateRequestTitle = 'MDF Request';
            if (data != undefined && data!=null)
                updateRequestTitle = 'MDF Request > Update (<b><i>' + data.orgName + ' - ' + data.fundName + ' - ' + data.activityName.trim() + '</i></b>)';
            if (requestStatus == "new") {
                var views = [
                    { icon: "", name: 'Update Request', url: "/manage/mdf/updaterequest/" + id, buttons: ["save"] }
                ];
                modal.show({ title: updateRequestTitle, views: views });
            }
            else if (requestStatus == "pending") {
                var views = [
                    { icon: "", name: 'Update Request', url: "/manage/mdf/updaterequest/" + id +"?statFlag=false" }
                ];
                modal.show({ title: updateRequestTitle, views: views });
            }
            else if (requestStatus == "approved") {
                var views = [
                    { icon: "", name: 'Update Request', url: "/manage/mdf/approverequest/" + id}
                ];
                modal.show({ title: updateRequestTitle, views: views });
            }
            else if (requestStatus == "rejected") {
                var views = [
                    { icon: "", name: 'Rejected Request', url: "/manage/mdf/rejected/" + id }
                ];
                modal.show({ title: updateRequestTitle, views: views });
            }
            else if (requestStatus == "partial") {
                var views = [
                    { icon: "", name: 'Update Request', url: "/manage/mdf/preimburserequest/" + id, buttons: ["save"] }
                ];
                modal.show({ title: updateRequestTitle, views: views });
            }
            else if (requestStatus == "total") {
                var views = [
                    { icon: "", name: '{$ui.dripeditor.TotalReimburse}', url: "/manage/mdf/reimburserequest/" + id }
                ];
                modal.show({ title: updateRequestTitle, views: views });
            }
            else if (requestStatus == "reimburserequest") {
                var views = [
                    { icon: "", name: '{$ui.dripeditor.TotalReimburse}', url: "/manage/mdf/approverequest/" + id, buttons: ["save"]}
                ];
                modal.show({ title: updateRequestTitle, views: views });
            }
            else if (requestStatus == "onhold") { //#79779 to add on hold status in req details
                var views = [
                    { icon: "", name: 'On Hold', url: `/manage/mdf/updaterequest/${id}`, buttons: ["save"] }
                ];
                modal.show({ title: updateRequestTitle, views: views });
            }
        },
        showActivityBreakdown: function (data) {
            var views = [{ icon: "", name: "", url: "/fundplans-partner/" + data.id }];
            modal.show({ title: 'Activity-wise break down (' + data.activity + ')', views: views });
        },
        showActivityBreakdownForSupplier: function (data) {
            var views = [{ icon: "", name: "", url: "/widgets/mdffundplansdetailforsupplier/" + data.id }];
            modal.show({ title: 'Activity-wise break down (' + data.activity + ')', views: views });
        },
        showChildRequests: function (id) {
            var views = [{ icon: "", name: "", url:`/manage/mdf/viewchildrequests/${id}`}];
            modal.show({ title: 'MDF Request > Update', views: views });
        },
        contactStatsEdit: function (id) {
            var views = [
                { icon: "database", name: "", url: "/connections/contact/" + id, buttons: ["save"] }
            ];
            modal.show({ title: 'Modify Contact', views: views });
        },
        contactStatsViewCompany: function (companyid, companyname, isshared) {
            var info = { icon: "info-circle", name: 'Info', url: "/setup/contact/company/info/" + companyid + "/" + isshared, buttons: ["save"] }
            var contact = { icon: "user", name: 'Contact, Deals, Opportunities', url: "/setup/contact/company/" + companyid };
            var views = [info, contact];
            var title = 'Contact Data'
            if (document.URL.indexOf('connections/contacts') > 0) {
                title = 'Account > Contacts  (<b><i>' + companyname +'</i></b>)';
            };
            modal.show({ title: title, views: views });
        },
        newassetscreatetemp: function (newMedia,ispartner) {
            var view = [];
            if (typeof (newMedia.templateid) == "undefined")
                views = [{ icon: "database", name: 'Info', url: "/communicate/email/0?emailtemplateid=" + newMedia.id + "&ispartner=" + ispartner, buttons: ["finish"] }];
            else
                views = [{ icon: "database", name: 'Info', url: "/communicate/email/" + newMedia.id + "&ispartner=" + ispartner, buttons: ["finish"]}];
            modal.show({ title: 'Send ' + newMedia.name, views: views });
       },
        newassetssentppt: function (id) {
            var views = [{ name: 'Send', url: "/collateral/presentation/" + id + "/send", buttons: ["finish"] }];
            modal.show({ title: 'Send Presentation', views: views });
       },
        newassetssentppttopartner: function (id, linkids, isSmartlist, isUserGrid, name) {
            if (linkids != null && linkids != "")
                var views = [{ icon: "envelope", name: 'Info', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true" + "&isSmartlist=" + isSmartlist + "&ispartner=" + true + "&isUser=" + isUserGrid + "&linkids=" + linkids, buttons:["save"] }];
            else
                var views = [{ icon: "view", name: 'Send', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true" + "&ispartner=" + true, buttons: ["finish"] }];
            var title = name != undefined ? 'Send Presentation' + ' - ' + name : 'Send Presentation';
            modal.show({ title: title, views: views });
       },
        newassetssentebook: function (id) {
            views = [{ icon: "view", name: 'View', url: "/collateral/ebook/" + id + "/view" }, ];
            modal.show({ title: 'View of ' + templatedata.name, views: views });
       },
        assetusagewebview: function (id) {
           var views = [{ icon: "users", name: 'Contacts', url: "/manage/campaigns/website/" + id + "/interestbycontact" }];
           modal.show({ title: 'Contacts', views: views });
       },
        assetusageformpageview: function (formid, templateid) {
           var views = [
               { icon: "file", name: 'Page Views', url: "/forms/" + formid + "/" + templateid + "/effectivenessbyuse/views" }
           ];

           modal.show({ title: 'Contacts who viewed asset having the form', views: views });
       },
        assetusageformcontactview: function (formid, templateid) {
           var views = [
               { icon: "file", name: 'Page Contacts', url: "/forms/" + formid + "/" + templateid + "/effectivenessbyuse/signups" }
           ];
           modal.show({ title: 'Contacts who have filled this form in this asset', views: views });
        },
        ssoFieldMappingModal: function (options) {
            var views = [
                { icon: "file", name: 'SSO Field Mapping', url: "sa/sso/mapping/" + options.ssoid }
            ];
            modal.show({
                title: 'SSO Field Mapping', views: views });
        },
        idpFieldMappingModal: function (options) {
            var views = [
                { icon: "file", name: 'IDP Field Mapping', url: "sa/idp/mapping/" + options.id }
            ];
            modal.show({
                title: 'IDP Field Mapping', views: views
            });
        },

        ShowAssetUsageView: function (record) {
            var isCustomized = false;
            if (record.iscustomized)
                isCustomized = true;
            if (record.linktoid != null) {
                var views = [
                    {
                        icon: "signal", name: record.viewheader, url: "/widgets/assetusage/" + record.id + "?linktoid=" + record.linktoid + "&linktype=" + record.linktype
                            + "&viewoption=" + record.viewoption + "&orgviewoption=" + record.orgviewoption + "&groupviewoption=" + record.groupviewoption + "&format=" + record.format + "&selectedrange=" + options.selectedrange + "&iscustomized=" + isCustomized
                    }
                ];
            }
            else {
                var views = [
                    {
                        icon: "signal", name: record.viewheader, url: "/widgets/assetusage/" + record.id + "?linktype=" + record.linktype
                            + "&viewoption=" + record.viewoption + "&orgviewoption=" + record.orgviewoption + "&groupviewoption=" + record.groupviewoption + "&format=" + record.format + "&selectedrange=" + options.selectedrange + "&iscustomized=" + isCustomized
                    }
                ];
            }
            if (options.startdate != null && options.startdate != "") {
                parameters += "&startdate=" + options.startdate;
            }
            if (options.enddate != null && options.enddate != "") {
                parameters += "&enddate=" + options.enddate;
            }
            modal.show({ title: record.title + " - " + record.name, views: views });
       },
        ShowSocialHealthErrorsForUser: function (userData) {
            var views = [
                      { icon: "signal", name: 'Report', url: "/sa/socialhealth/user/details/" + userData.id }
            ];
            modal.show({ title: 'Error Details for user : ' + userData.name , views: views });
        },
        ShowSocialHealthErrorsForDay: function (date) {
            var views = [
                      { icon: "signal", name: 'Report', url: "/sa/socialhealth/details/" + date }
            ];
            modal.show({ title: 'Error Details for day : ' + date, views: views });
        },
        ShowSSOErrorsForDay: function (date) {
            var views = [
                { icon: "signal", name: 'Report', url: "/sso/exceptions/details/" + date }
            ];
            modal.show({ title: 'Error Details for day : ' + date, views: views });
        },
        ShowSSOHealthErrorsForUser: function (userData) {
            var views = [
                { icon: "signal", name: 'Report', url: "/sso/exceptions/user/details/" + userData.id }
            ];
            modal.show({ title: 'Error Details for user : ' + userData.name, views: views });
        },

        ShowOrphanDeals: function (userData) {
            var views = [
                { icon: "signal", name: 'Report', url: "/assigndealsorphan/" + userData.id + "/" + userData.contactid }
            ];
            modal.show({ title: 'Error Details for user : ' + userData.name, views: views });
        },

        ShowOrphanOpportunity: function (userData) {
            var views = [
                { icon: "signal", name: 'Report', url: "/assignopportunityorphan/" + userData.id + "/" + userData.projectid + "/" + userData.projecttypeid }
            ];
            modal.show({ title: 'Error Details for user : ' + userData.name, views: views });
        },
        showpresentationforcustomize: function (templatedata) {
            var wizardStepInfo = { icon: "info-circle", name: 'Info', url: "/collateral/presentation/" + templatedata.id + "/info", buttons: ["save"]};
            var wizardStepQuestionnaire = { name: 'Input', url: "/collateral/presentation/" + templatedata.id + "/questions", buttons: ["save"]};
            var wizardStepAssetPicker = { name: 'AssetPicker', url: "/collateral/presentation/" + templatedata.id + "/assetpicker", buttons: ["save"] };
            var wizardStepReordering = { icon: "tasks", name: 'Manage Slides', url: "/collateral/presentation/" + templatedata.id + "/reordering", buttons: ["save"] };
            var wizardStepView = { icon: "search", name: 'View', url: "/collateral/presentation/" + templatedata.id + "/view"};
            var wizardStepData = { icon: "database", name: 'Data', url: "/setup/template/" + templatedata.id + "/data", buttons: ["save"]}
            var wizardSteps = [];

            if (templatedata.hasquestionnaire && templatedata.usedatasource == "1")
                wizardSteps = [wizardStepInfo, wizardStepData, wizardStepAssetPicker, wizardStepReordering];
            else if (templatedata.hasquestionnaire)
                wizardSteps = [wizardStepInfo, wizardStepData, wizardStepReordering, wizardStepView];
            else if (templatedata.usedatasource == "1")
                wizardSteps = [wizardStepInfo, wizardStepData, wizardStepAssetPicker, wizardStepReordering];
            else
                wizardSteps = [wizardStepView, wizardStepData, wizardStepInfo, wizardStepReordering];

            var title = 'Presentation > ' + wizardSteps[0].name + ' (<b><i> ' + templatedata.name + '</i></b>)';
            modal.show({ title: title, views: wizardSteps });
        },
        editContact: function (id, options) {
            $.extend({
                canShare: false,
                listAccess: false,
                programAccess: false,
                assetAccess: false,
                canSendEmail: false,
                canSendSMS: false
            }, options);

            var url = document.URL;
            var title = 'Create Contact';
            var info = { icon: "info-circle", name: 'Info', url: "/connections/contact/" + id,buttons:["save"] }
            var filter = { icon: "filter", name: 'Filters', url: "/connections/contacts/filters/" + id, buttons: ["save"] }
            var report = { icon: "chart-bar", name: 'Report', url: "/connections/contacts/stats/" + id, iconprefix: "far" }
            var sharing = { icon: "share-alt", name: 'Sharing', url: "/connections/contacts/sharing/" + id }
            var lists = { icon: "list", name: 'Lists', url: "/connections/contacts/lists/" + id }
            var program = { icon: "file-alt", name: 'Add to Drip', url: "/connections/contacts/programs/" + id }
            var database = { icon: "database", name: 'Database', url: "/connections/contacts/asset/" + id }
            var download = { icon: "download", name: 'Export', url: "/connections/contacts/export/null/null?linkids=" + id + "&isSmartlist=null", buttons: ["save"] }
            var sendAsset = { icon: "file", name: 'Send Asset', url: "/sendassets/assets?linkids=" + id + "&isSmartlist=null" }
            
            var sendEmail = { icon: "envelope", name: 'Send Email', url: "/communicate/newemail/0?linkids=" + id + "&isSmartlist=null" }
            var addtoplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks?linkids=" + id + "&isSmartlist=null" }
            var views = '';
            views = [info];

            if (id > 0) {


                views.push(info);
                views.push(report);
                views.push(filter);
                if (options.canShare) views.push(sharing);
                if (options.listAccess) views.push(lists);
                if (options.programAccess) views.push(program);
                if (options.assetAccess) views.push(database);
                views.push(download);
                if (options.canSendEmail) views.push(sendAsset);
                
                if (options.canSendEmail) views.push(sendEmail);

                views.push(addtoplaybook);
                title = 'Contact > '+views[0].name+'';
            }
            modal.show({ title: title, views: views });
        },
        editContactDeals: function (id, options) {
            $.extend({
                canShare: false,
                listAccess: false,
                programAccess: false,
                assetAccess: false,
                canSendEmail: false,
                canSendSMS: false
            }, options);

            var url = document.URL;
            var title = 'Create Contact';
            var info = { icon: "info-circle", name: 'Info', url: "/connections/contact/" + id, buttons: [] }
            var filter = { icon: "filter", name: 'Filters', url: "/connections/contacts/filters/" + id, buttons: [] }
            var report = { icon: "chart-bar", name: 'Report', url: "/connections/contacts/stats/" + id, iconprefix: "far" }
            var sharing = { icon: "share-alt", name: 'Sharing', url: "/connections/contacts/sharing/" + id }
            var lists = { icon: "list", name: 'Lists', url: "/connections/contacts/lists/" + id }
            var program = { icon: "file-alt", name: 'Add to Drip', url: "/connections/contacts/programs/" + id }
            var database = { icon: "database", name: 'Database', url: "/connections/contacts/asset/" + id }
            var download = { icon: "download", name: 'Export', url: "/connections/contacts/export/null/null?linkids=" + id + "&isSmartlist=null", buttons: [] }
            var sendAsset = { icon: "file", name: 'Send Asset', url: "/sendassets/assets?linkids=" + id + "&isSmartlist=null" }

            var sendEmail = { icon: "envelope", name: 'Send Email', url: "/communicate/newemail/0?linkids=" + id + "&isSmartlist=null" }
            var addtoplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks?linkids=" + id + "&isSmartlist=null" }
            var views = '';
            views = [info];

            if (id > 0) {


                views.push(info);
                views.push(report);
                views.push(filter);
                if (options.canShare) views.push(sharing);
                if (options.listAccess) views.push(lists);
                if (options.programAccess) views.push(program);
                if (options.assetAccess) views.push(database);
                views.push(download);
                if (options.canSendEmail) views.push(sendAsset);

                if (options.canSendEmail) views.push(sendEmail);

                views.push(addtoplaybook);
                title = 'Contact > ' + views[0].name + '';
            }
            modal.show({ title: title, views: views });
        },
        showContact: function (id, options, callback) {
            $.extend({
                canShare: false,
                listAccess: false,
                programAccess: false,
                projectAccess: false,
                assetAccess: false,
                canSendEmail: false,
                canSendSMS: false,
                canPrintSend: false,
                canPlaybookSend: false,
                caneBookSend: false,
                isAnonymous: false,
            }, options);
            var isNotification = false;
            if (options.isNotification == true)
                isNotification = true;
            var url = document.URL;
            var isContactPage = options.isContactPage != undefined ? options.isContactPage : false;
            var showContactReport = options.showContactReport != undefined ? options.showContactReport : true;
            var isContactNotification = options.isContactNotification != undefined ? options.isContactNotification : false;
            var isTodoNotification = options.isTodoNotification != undefined ? options.isTodoNotification : false;
            if (hasShareAccess == undefined || hasShareAccess == null)
                hasShareAccess = false;
            if (options.isNewContact == undefined)
                options.isNewContact = false;

            var title = 'Create Contact';
            var info = { icon: "info-circle", name: 'Info', url: "/connections/contact/" + id + "/" + getTimeStamp() + "/" + options.isNewContact + "?isContactpage=" + isContactPage, buttons: ["save"] }
            var filter = { icon: "filter", name: 'Filters', url: "/connections/contacts/filters/" + id }
            var report = { icon: "chart-bar", name: 'Report', url: "/connections/contacts/stats/" + id + "/true/" + getTimeStamp() + "?isNotification=" + isNotification, iconprefix: "far" }
            var sharing = { icon: "share-alt", name: 'Sharing', url: "/connections/contacts/sharing/" + id, buttons: ["save"], iconprefix: "far" }
            var lists = { icon: "users", name: 'Lists', url: "/connections/contacts/lists/" + id, buttons:["save"] }
            var database = { icon: "database", name: 'Database', url: "/connections/contacts/asset/" + id, buttons: ["save"] }
            var project = { icon: "cubes", name: 'Opportunities', url: "/connections/contacts/project/" + id,buttons:["save"] }
            var offline = { icon: "male", name: 'Offline Activity', url: "/connections/contacts/offline/" + id }
            var phone = { icon: "phone-alt", name: 'Phone Activity', url: "/connections/contacts/phone/" + id }
            var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + id + "&isSmartlist=null&source=contact&view=1" };
            var sendimage = { icon: "image", name: 'Images', url: "/sendassets/file?linkids=" + id + "&isSmartlist=null&isContactcompany=null&isContactPage=" + isContactPage+"", iconprefix: "far" }
            var senddoc = { icon: "file", name: 'Documents', url: "/sendassets/doc?linkids=" + id + "&isSmartlist=null&isContactcompany=null&isContactPage=" + isContactPage + "" }
            var overview = { icon: "telescope", name: 'Overview', url: "/manage/leads/overview/" + id+"?iscontact=true", iconprefix: "far" };

            if (options.todoId == undefined)
                var todos = { icon: "check-circle", name: 'To-dos', url: "/connections/contacts/todos/" + id, iconprefix: "far" }
            else
                var todos = { icon: "check-circle", name: 'To-dos', url: "/connections/contacts/todos/" + id + "/" + options.todoId, iconprefix: "far"  }
            if (_isMobileBrowser == false)
                var sendEmail = { icon: "envelope", name: 'Send Email', url: "/communicate/newemail/0?linkids=" + id + "&isSmartlist=null&isContactcompany=null" }
            else
                var sendEmail = { icon: "envelope", name: 'Send Email', url: "/mobile/importtemplate/?linkids=" + id + "&isSmartlist=null&isContactcompany=null" }
            var views = [];
            var isContactCentric = false;
            if (typeof (options.isContactCentric) !== "undefined")
                isContactCentric = options.isContactCentric;

            if (options.showOverviewHideInfo == true)
                info = overview;

            if (id == 0 ||(url.indexOf('connections/contacts') > 0 || ((url.indexOf('internalplaybook/') > 0 && isContactCentric ) || url.indexOf('manage/campaigns/drip') > 0 && id === 0)) && (url.indexOf('connections/contacts/summary') < 0)) {
                views.push(info);
            }
            else {
                views.push(report);
            }

            if (id > 0) {
                if (isContactNotification) {
                    views = [report];
                    views.push(info);
                }
                else if (isTodoNotification) {
                    views = [todos];
                    views.push(info);
                    views.push(report);
                }
                else {
                    if (options.showContactReport != undefined && showContactReport) {
                        views = [info];
                        views.push(report);
                    }
                    else {
                        views = [report];
                        views.push(info);
                    }
                }

                if (options.projectAccess && options.hasOpportunityShare && !options.isAnonymous) views.push(project);
                views.push(filter);
                if (hasShareAccess) views.push(sharing);
                if (options.listAccess) views.push(lists);
                if (options.assetAccess) views.push(database);

                if (options.canSendEmail) {
                    views.push(viewasset);
                    views.push(sendimage);
                    views.push(senddoc);
                }
                views.push(offline);
                if (isTwilioEnabled) views.push(phone);
                if(!isTodoNotification)views.push(todos);
            }

            //begin actions, needs to happen after views have been built
            var actions = [];
            if (id > 0) {
                var exportDetails = {};
                exportDetails.linkids = [id];
                exportDetails.gridtype = "";
                exportDetails.ispartner = false;
                exportDetails.name = 'Contact Record';
                exportDetails.linktype = 1;
                var download = { icon: "download", actionmethod: function () { modal.showExportWizard(exportDetails)}, name: 'Export', }
                
                var sendEmail = { icon: "envelope", name: 'Send Email', url: "/communicate/newemail/0?linkids=" + id + "&isSmartlist=null&isContactcompany=null" }
                if (_isMobileBrowser)
                    sendEmail = { icon: "envelope", name: 'Send Email', url: "/mobile/importtemplate/?linkids=" + id + "&isSmartlist=null&isContactcompany=null" }
                var addtoplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks?linkids=" + id + "&isSmartlist=null&isContactcompany=null" }
                var program = { icon: "sitemap", name: 'Add to Drip', url: "/connections/contacts/programs/" + id }

                if (hasContactExportAccess) {
                    actions.push(download);
                }
                
                if (options.programAccess) actions.push(program);
                
                if (options.canSendEmail) {
                    actions.push(sendEmail);
                };
                if (hasIntPlaybookAccessG)
                    actions.push(addtoplaybook);               
                if (options.cstatus == 3)
                    title = (options.cemail != "" && options.cemail != null && options.cemail != undefined) ? 'User (<b><i>' + options.cemail + '</i></b>)' : 'User';
                else { 
                        title = (options.cemail != "" && options.cemail != null && options.cemail != undefined) ? 'Contact' + ' > ' + views[0].name + ' (<b><i>' + options.cemail + '</i></b>)' : 'Contact > ' + views[0].name + '';
                }
            }
                var isNew = (options.isNewContact != undefined) ? options.isNewContact : true;
                if (showContactReport) {
                    if (typeof callback != 'undefined')
                        modal.show({ title: title, views: views, callback: callback, subactions: actions, preventClose: true });
                    else {
                        modal.show({ title: title, views: views, subactions: actions, preventClose: true });
                    }
                }
                else {
                    if (isNew) {// to open contact 'report' on Save for contact creation modal
                        modal.close();
                        setTimeout(function () {
                            if (typeof callback != 'undefined')
                                modal.show({ title: title, views: views, callback: callback, subactions: actions, preventClose: true });
                            else
                                modal.show({ title: title, views: views, subactions: actions, preventClose: true });
                        }, 500);
                    }
                    else
                        saveAndLoadView(1); //to open 'report' view on Save while editing contact
                }
        },

        showContactRecipientList: function (contactids) {
            if (contactids.length == 0)
                contactids = null;
            var project = {
                icon: "users", name: 'Add To List', url: "/connections/recipientlist/" + contactids};
            var views = [project];
            modal.show({ title: views[0].name + "", views: views });
        },

        makeCall: function (twillioCallResult, contactId, contactFullName, callTo, disconnectCallback) {
            activeTwilioCall = true;
            callTo = callTo.replace(/[^0-9,+]+/g, '');  // to get only number value from phone string.
            var replacer = { "1": "+1", "+1": "+1", "001": "+1", "+91": "+91", "0091": "+91", "+44": "+44", "0044": "+44" }; // replacer depening on different prefix value
            var arr = [];
            for (var key in replacer) {
                if (replacer.hasOwnProperty(key))
                    arr.push(key.replace('+', '\\+'));
            }
            var regexVal = "^(" + arr.join('|') + ")";
            var regex = new RegExp(regexVal);
            var match = callTo.match(regex);
            var numberLength = 10; // by default number length is 10  
            if (match !== null && match.length > 0) {
                var prefix = replacer[match[0]];
                callTo = callTo.replace(match[0], prefix).substring(0, numberLength + prefix.length);
            }
            else {
                callTo = "+1" + callTo.replace(/[^0-9]+/g, '').substring(0, numberLength); // if no replacer found
            }
            console.log(callTo);
            var callMade = false;
            var callConnected = false;
            var callDisconnected = false;
            var isMuted = false;
            if (twillioCallResult.success == true && twillioCallResult.token.length > 0) {
                var twilioToken = twillioCallResult.token;
                userData = $.parseJSON(twillioCallResult.userData);
                Twilio.Device.setup(twilioToken);
                Twilio.Device.ready(function (device) {
                    if (!callMade) {
                        callMade = true;
                        $(".twilio-keypad-block").removeClass("hidden").show();
                        $(".twilio-keypad-block .controll-sec .name").html(contactFullName);
                        if ($(".twilio-keypad-block .keypad-msg-box .number").length != 0)
                            $(".twilio-keypad-block .keypad-msg-box .number").html(callTo);
                        else
                            $(".twilio-keypad-block .input-preview textarea").val(callTo);
                        var object = { "title": 'Calling... ' + contactFullName, "content": 'Device is ready..' };
                        ShowTwilioPopup(object);
                        var params = {
                            To: callTo,
                            From: twillioCallResult.fromNumber,
                            CallType: "contactcall"
                        };
                        Twilio.Device.connect(params);
                    }
                });
                Twilio.Device.error(function (error) {
                    var object = { "title": 'Twilio device error : ' + contactFullName, "content": error.message };
                    ShowTwilioPopup(object);
                });
                Twilio.Device.connect(function (conn) {
                    if (!callConnected) {
                        callConnected = true;
                        startCallTimer();
                        var object = { "title": 'Calling... ' + contactFullName, "content": 'Successfully established call' };
                        ShowTwilioPopup(object);
                        $(document).keypress(function (e) {
                            if (conn._status !== "closed") {
                                var keyVal = "";
                                var key = e.keyCode || e.charCode;
                                if ((key >= 48 && key <= 57) || (key >= 96 && key <= 105) && $.isNumeric(e.key)) {
                                    keyVal = e.key;
                                }
                                else if (e.key === "*" || e.key === "#") {
                                    keyVal = e.key;
                                }
                                if (keyVal !== "") {
                                    var $keypadInput = $(".twilio-keypad-block .input-preview textarea");
                                    var keyText = $keypadInput.val() + keyVal;
                                    $keypadInput.val(keyText);
                                    conn.sendDigits(String(keyVal));
                                }
                            }
                        });
                        $(".twilio-keypad-block").on('click', ".mute-toggle", function (e) {
                            e.stopPropagation();
                            if (!isMuted) {
                                isMuted = true;
                                Twilio.Device.activeConnection().mute(true);
                                $(this).find("i").removeClass("fa-microphone").addClass("fa-microphone-slash");
                            }
                            else {
                                isMuted = false;
                                Twilio.Device.activeConnection().mute(false);
                                $(this).find("i").removeClass("fa-microphone-slash").addClass("fa-microphone");
                            }
                        });
                        $(".twilio-keypad-block .keypad div").on("click", function () {
                            if (conn._status !== "closed") {
                                var $this = $(this);
                                var keyVal = $this.data("val");
                                var $keypadInput = $(".twilio-keypad-block .input-preview textarea");
                                var keyText = $keypadInput.val() + keyVal;
                                $keypadInput.val(keyText);
                                conn.sendDigits(String(keyVal));
                            }
                        });
                    }
                });
                Twilio.Device.disconnect(function (conn) {
                    if (!callDisconnected) {
                        callDisconnected = true;
                        var callSid = conn.mediaStream.callSid; // Current call Id
                        stopCallTimer();
                        $(".twilio-keypad-block").hide();
                        Twilio.Device.disconnectAll();
                        var object = { "title": 'Calling... ' + contactFullName, "content": 'Call ended' };
                        ShowTwilioPopup(object);
                        Twilio.Device.destroy(function (conn) {
                        });
                        if (callSid != null) {
                            api.call("GetAndSaveTwilioCallRecord", { callSid: callSid, id: contactId, callID: userData.id, date: userData.createdon }, function (r) {  //get full details of current call and save in table
                                activeTwilioCall = false;
                                if (typeof disconnectCallback != "undefined")
                                    disconnectCallback();
                                if (r.result) {
                                    var object = { "title": 'Calling... ' + contactFullName, "content": 'Call record is saved' };
                                    callSaved(object);
                                };
                            });
                        }
                    }
                });
                $(".twilio-keypad-block").on('click', ".btn-phone,.btn-call-end", function (e) {
                    e.stopPropagation();
                    Twilio.Device.disconnectAll();
                });
                $(".twilio-keypad-block").on('click', ".fa-minus", function (e) {
                    $(this).closest(".twilio-keypad-block").toggleClass("hidden");
                });
                var callTimer;
                var callseconds = 0, callminutes = 0, callhours = 0;
                function callingTime() {
                    callseconds++;
                    if (callseconds >= 60) {
                        callseconds = 0;
                        callminutes++;
                        if (callminutes >= 60) {
                            callminutes = 0;
                            callhours++;
                        }
                    }
                    $(".twilio-keypad-block .call-timing").html((callminutes ? (callminutes > 9 ? callminutes : "0" + callminutes) : "00") + ":" + (callseconds > 9 ? callseconds : "0" + callseconds));
                    startCallTimer();
                }
                function startCallTimer() {
                    callTimer = setTimeout(callingTime, 1000);
                }
                function stopCallTimer() {
                    callseconds = 0, callminutes = 0, callhours = 0;
                    $(".twilio-keypad-block .call-timing").html("00:00");
                    $(".twilio-keypad-block .input-preview textarea").val("");
                    clearTimeout(callTimer);
                }
            }
            else {
                $.smallBox({
                    title: 'Connection error ',
                    content: 'Error retrieving token',
                    color: "#659265",
                    iconSmall: "fa fa-check fa-2x fadeInRight animated",
                    timeout: 4000
                });
            };
        },
                      

        showOpportinutiesToAssociate: function (id, callback) {
            var project = { icon: "cubes", name: 'Opportunities', url: "/connections/contacts/project/" + id, buttons: ["save"] };
            var views = [project];
            modal.show({ title: views[0].name + "", views: views, callback: callback});
        },
        registerDeal: function (id, callback) {
            var info = { icon: "info-circle", name: 'Info', url: "/connections/contact/" + id + "/" + getTimeStamp() + "?deal=true", buttons:["save"]};
            var views = [ info ];
            modal.show({ title: 'Create New Deal', views: views, callback: callback });
        },

        viewRegisteredDeal: function (data) {
            var isDealApproval = false;
            var hasShareAccess = false;
            if (data.isdealapproval != undefined && data.isdealapproval != null)
                isDealApproval = data.isdealapproval;
            if (data.hasShareAccess != undefined && data.hasShareAccess != null)
                hasShareAccess = data.hasShareAccess;
            var info = { icon: "info-circle", name: 'Info', url: "/connections/contact/" + data.contactid + "/" + getTimeStamp() + "?deal=true" ,buttons:["save"]};
            var view = { icon: "chart-bar", name: 'History', url: "/manage/leads/leadhistory/" + data.id + "/2", iconprefix: "far" };
            var overview = { icon: "telescope", name: 'Overview', url: "/manage/leads/overview/" + data.id, iconprefix: "far" };
            var filter = { icon: "filter", name: 'Filters', url: "/manage/leads/filters/" + data.id+"?isdealapproval=" + isDealApproval}
            var sharing = { icon: "share-alt", name: 'Sharing', url: "/manage/leads/sharing/" + data.id + "/" + data.sharetype };
            var views = [overview];
            data.showInfoOption == true ? views.push(info, filter) : views.push(filter);
            if ((data.currentUserID == data.ownedBy || data.currentUserID== data.createdby) && hasShareAccess )
                views.push(sharing);
            modal.show({ title: 'Deal details'+ ' > ' + views[0].name + ' (<b><i>' + data.name + '</i></b>)',  views: views });
        },
        
        showPartnerStats: function (id, options) {
            $.extend({
                canShare: false,
                listAccess: false,
                programAccess: false,
                assetAccess: false,
                canSendEmail: false,
                canSendSMS: false,
                edit: false,
                canUserView: false,
                canOrgView: false
            }, options);
            
            var url = document.URL;
            var info = { icon: "info-circle", name: 'Info', url: "/setup/partner/info/" + id + "/" + id , buttons:["save"]}
            var report = { icon: "chart-bar", name: 'Report', url: "/setup/partner/stats/" + options.id, iconprefix: "far"}
            var lists = { icon: "list", name: 'Lists', url: "/connections/contacts/lists/partner/" + id }
            //var download = { icon: "download", name: "Export", url: "/connections/contacts/export/null/null?linkids=" + id + "&isSmartlist=null" }
            var sendAsset = { icon: "file", name: 'Send Asset', url: "/sendassets/assets?linkids=" + id + "&isSmartlist=null&ispartner=true", buttons: ["finish"]}
            
            var sendEmail = { icon: "envelope", name: 'Send Email', url: "/communicate/email/0/partner?linkids=" + id + "&isSmartlist=null" }
            //var addtoplaybook = { icon: "book", name: "Add to Playbook", url: "/sendassets/intplaybooks?linkids=" + id + "&isSmartlist=null" }
            var breakdown = { icon: "signal", name: 'Internal Usage', url: "/setup/partner/" + id + "/breakdown" };
            var user = { icon: "user", name: 'Associate User', url: "/setup/partner/users/" + options.id };
            var organization = { icon: "users", name: 'Associate Organization', url: "/setup/partner/organizations/" + options.id };
            var views = [];

            views.push(report);
            if (options.edit)
                views.unshift(info);
            else
                views.push(info);
                
                views.push(breakdown);
                if (options.listAccess) views.push(lists);
                //views.push(download);
                if (options.canSendEmail) views.push(sendAsset);
                
                if (options.canSendEmail) views.push(sendEmail);
                if (options.canUserView); 
                    views.push(user);
                if (options.canOrgView);
                    views.push(organization);
                //views.push(addtoplaybook);
            var title = 'Sales Team Member > '+views[0].name+'';
            modal.show({ title: title, views: views });
        },
        showStatusHistoryContact: function (type, daterange) {
            var header = 'Contacts'
            switch (type) {
                case "visitors":
                    header = 'Visitors (Not Sure + Others)';
                    break;
                case "leads":
                    header = 'Leads (Low)';
                    break;
                case "mql":
                    header = 'Marketing Qualified Leads (Medium)';
                    break;
                case "sql":
                    header = 'Sales Qualified Leads (High)';
                    break;
                case "srl":
                    header = 'Sales Ready Leads (Hot)';
                    break;
                case "customers":
                    header = 'Customers';
                    break;
            }
            var views = [{ icon: "user", name: header, url: "/widgets/prospectconversioncontacts/" + type + "/" + daterange }];
            modal.show({ title: header, views: views });
        },
        showAccountContacts: function (id, type, options) {
            if (options.linktoid != null) {
           
                var urlParam = "";               
                if (id != undefined)
                     urlParam += urlParam != "" ? "&id=" + id : "?id=" + id;                                        
                if (type != undefined)
                    urlParam += urlParam != "" ? "&type=" + type : "?type=" + type;               
                if (options != undefined) {
                    if (options.selectedrecord != undefined)
                        urlParam += urlParam != "" ? "&selectedrecord=" + options.selectedrecord : "?selectedrecord=" + options.selectedrecord;
                    if (options.linktoid != undefined)
                        urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.selectedrecord;
                    if (options.iscontactgrid != undefined)
                        urlParam += urlParam != "" ? "&iscontactgrid=" + options.iscontactgrid : "?iscontactgrid=" + options.iscontactgrid;
                }
                var views = [
                    { icon: "user", name: options.contacts, url: "/setup/contact/company/" + urlParam , iconprefix: "far" },
                   { icon: "info-circle", name: options.info, url: "/setup/contact/company/info/" + id + "/" + options.isshared, buttons: ["save"] },
                ];
                    
            }
            else { 
            var views = [
                { icon: "user", name: options.contacts, url: "/setup/contact/company/" + id  + "/" + type, iconprefix: "far" },
                { icon: "info-circle", name: options.info, url: "/setup/contact/company/info/" + id + "/" + options.isshared, buttons: ["save"] },
            ];
        }
            if (options.name != undefined) 
                var title = 'Contacts (<b><i>' + options.name + '</i></b>)';
             else               
                var title = 'Contacts';
             
            modal.show({ title: title, views: views });
        },
        showAccountContactsStat: function (id, type, options) {
            var title = "";
            var views = [
                { icon: "user", name: "Contacts, Deals & Contact\'s Opps", url: "/setup/contact/company/" + id + "/" + type, iconprefix: "far" },
                { icon: "info-circle", name: options.info, url: "/setup/contact/company/info/" + id + "/" + options.isshared, buttons: ["save"] },
            ];
            if (options.name != undefined) {
                title = "Account > Contacts (<b><i>" + options.name + "</i></b>)";
            } else {
                title = "Account > Contacts";
            }

            if (!(options.name == undefined && options.id == 0)) {
                var overview = { icon: "telescope", name: 'Account Overview', url: "/connections/accounts/overview/" + options.id, iconprefix: "far" }
                views.push(overview);
            }

            if (options.showPermission != undefined && options.showPermission == true) {
                views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + options.id + "/" + options.shareType + "/null", buttons: ["save"] });
            }
            
            var optingReport = { icon: "sign-in", name: 'Opting Report', url: "/connections/accounts/optingreport/" + options.id };
            var id = options.isaccountlist == false ? options.id : options.accountlistid;
            if (options.isoptin || options.isapproved && options.iscreator)
                views.push(optingReport);
            if (options.notificationstatus)
                views.push({ icon: "bullhorn", name: options.notifications, url: "/connections/accounts/notification/" + id + "/" + options.isaccountlist, buttons: ["save"] });


            modal.show({ title: title, views: views });
        },
        showPlaybookAccountContacts: function (id, type) {
            var views = [
                { icon: "user", url: "/setup/contact/company/" + id + "/" + type, iconprefix: "far" },
            ];
            var title = "Account > Contacts";

            modal.show({ title: title, views: views });
        },
        showAccountPiechartContacts: function (id, type, options) {
            var views = [
                { icon: "user", name: options.contacts, url: "/widgets/custom/accountpiechartcontacts/" + id + "/" + type + "/" + options.selectedrange + "/" + encodeURIComponent(options.startdate) + "/" + encodeURIComponent(options.enddate), iconprefix: "far" },
                { icon: "info-circle", name: options.info, url: "/widgets/custom/accountpiechartcontacts/info/" + id + "/" + options.isshared, buttons: ["save"] },
            ];
            if (options.name != undefined) {
                var title = 'Account > Contacts (<b><i>' + options.name + '</i></b>)';
            } else {
                var title = 'Account > Contacts';
            }

            modal.show({ title: title, views: views });
        },
        showAccountInfo: function (options, callback) {
            var isshared = false;
            var views = [];
            var title = "";
            var opaassociation = false;

            if(options.isopportunityassociation != undefined)
                opaassociation = options.isopportunityassociation;
            if (options.isshared != undefined)
                isshared = options.isshared;
            var info = { icon: "info-circle", name: options.info, url: "/setup/contact/company/info/" + options.id + "/" + isshared + "?isoppassociation=" + opaassociation, buttons: ["save"] }
            if (options.type == 'known') {
                views = [info];
            }

            if (options.create == true) {
                var contact = { icon: "user", name: 'Contacts, Deals & Contact\'s Opps', url: "/setup/contact/company/" + options.id + "/" + options.type, iconprefix: "far" }
                views.push(contact);
            }
            if (options.create == true) {
                var project = { icon: "cubes", name: 'Associated Opportunities', url: "/connections/account/project/" + options.id, iconprefix: "fa" }
                views.push(project);
            }
            if (options.name == undefined && options.id == 0) {
                title = "Create Account";
            }
            else {
                if (options.showPermission != undefined && options.showPermission==true) {
                      views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + options.id + "/" + options.shareType + "/null", buttons: ["save"] });
                }
               title = "Account > Info (<b><i>" + options.name + "</i></b>)";
            }
            var optingReport = { icon: "sign-in", name: 'Opting Report', url: "/connections/accounts/optingreport/" + options.id };
            var id = options.isaccountlist == false ? options.id : options.accountlistid;
            if (options.isoptin || options.isapproved && options.iscreator)
                views.push(optingReport);
            if (options.notificationstatus)
                views.push({ icon: "bullhorn", name: options.notifications, url: "/connections/accounts/notification/" + id + "/" + options.isaccountlist, buttons: ["save"] });

            if (!(options.name == undefined && options.id == 0)) {
                var overview = { icon: "telescope", name: 'Account Overview', url: "/connections/accounts/overview/" + options.id, iconprefix: "far" }
                views.push(overview);
            }

            modal.show({ title: title, views: views, callback: callback });
        },

        showAccountOverview: function (options, callback) {
            var isshared = false;
            var views = [];
            var title = "";

            if (options.isshared != undefined)
                isshared = options.isshared;
            var info = { icon: "info-circle", name: options.info, url: "/setup/contact/company/info/" + options.id + "/" + isshared, buttons: ["save"] }
            //if (options.type == 'known' && options.editPermission) {
            //    views.push(info);
            //}
            //else if ((options.name == undefined && options.id == 0)) {
                views.push(info);
            //}

            if (!(options.name == undefined && options.id == 0)) {
                var overview = { icon: "telescope", name: 'Account Overview', url: "/connections/accounts/overview/" + options.id, iconprefix: "far" }
                views.push(overview);
            }

            if (options.create == true) {
                var contact = { icon: "user", name: 'Contacts, Deals & Contact\'s Opps', url: "/setup/contact/company/" + options.id + "/" + options.type, iconprefix: "far" }
                views.push(contact);
            }

            var project = { icon: "cubes", name: 'Associated Opportunities', url: "/connections/account/project/" + options.id, iconprefix: "fa"}
            views.push(project);

            if (options.name == undefined && options.id == 0) {
                title = "Create Account";
            }
            else {
                if (options.showPermission != undefined && options.showPermission==true) {
                      views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + options.id + "/" + options.shareType + "/null", buttons: ["save"] });
                }
                title = "Account > "+ options.info +" (<b><i>" + options.name + "</i></b>)";
            }
            var optingReport = { icon: "sign-in", name: 'Opting Report', url: "/connections/accounts/optingreport/" + options.id };
            var id = options.isaccountlist == false ? options.id : options.accountlistid;
            if (options.isoptin || options.isapproved && options.iscreator)
                views.push(optingReport);
            if (options.notificationstatus)
                views.push({ icon: "bullhorn", name: options.notifications, url: "/connections/accounts/notification/" + id + "/" + options.isaccountlist, buttons: ["save"] });


            modal.show({ title: title, views: views, callback: callback });
        },
        showAccountOverviewDefault: function (options, callback) {
            var isshared = false;
            var views = [];
            var title = "";

            if (options.isshared != undefined)
                isshared = options.isshared;

            if (!(options.name == undefined && options.id == 0)) {
                var overview = { icon: "telescope", name: 'Account Overview', url: "/connections/accounts/overview/" + options.id, iconprefix: "far" }
                views.push(overview);
            }

            var info = { icon: "info-circle", name: options.info, url: "/setup/contact/company/info/" + options.id + "/" + isshared, buttons: ["save"] }
            views.push(info);

            if (options.create == true) {
                var contact = { icon: "user", name: 'Contacts, Deals & Contact\'s Opps', url: "/setup/contact/company/" + options.id + "/" + options.type, iconprefix: "far" }
                views.push(contact);
            }
            if (options.create == true) {
                var project = { icon: "cubes", name: 'Associated Opportunities', url: "/connections/account/project/" + options.id, iconprefix: "fa" }
                views.push(project);
            }
            if (options.name == undefined && options.id == 0) {
                title = "Create Account";
            }
            else {
                if (options.showPermission != undefined && options.showPermission == true) {
                    views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + options.id + "/" + options.shareType + "/null", buttons: ["save"] });
                }
                title = "Account > Account Overview (<b><i>" + options.name + "</i></b>)";
            }
            var optingReport = { icon: "sign-in", name: 'Opting Report', url: "/connections/accounts/optingreport/" + options.id };
            var id = options.isaccountlist == false ? options.id : options.accountlistid;
            if (options.isoptin || options.isapproved && options.iscreator)
                views.push(optingReport);
            if (options.notificationstatus)
                views.push({ icon: "bullhorn", name: options.notifications, url: "/connections/accounts/notification/" + id + "/" + options.isaccountlist, buttons: ["save"] });


            modal.show({ title: title, views: views, callback: callback });
        },
        showLeadRequestAccountContacts: function (options) {            
            var views = [
                { icon: "file-image", name: 'Contacts', url: "/setup/leadrequest/company/" + options.leadRequestID + "/", iconprefix: "far"}
            ];
            modal.show({ title: options.AccountName, views: views });
        },
        showAccountsOpportunity: function (id) {
            var views = [
                { icon: "New", name: 'Opportunity', url: "/setup/opportunity/company/" + id }
            ];
            modal.show({ title: 'Opportunities', views: views });
        },
        showManageOpportunitiesGridForAccount: function (accountID) {
            var statsParam = "";
            if (accountID == 0)
                statsParam = "&isaccountstats=true";
            hideActions = true;
            var views = [{ name: 'Opportunity', url: "/manage/opportunity-records/account/" + accountID + "?hideactions=" + hideActions + statsParam }];
            modal.show({ title: 'Opportunities', views: views });
        },
        showNotification: function () {
            var views = [{ icon: "New", name: 'Info', url: "/connections/notifications" }];
            modal.show({ title: 'Notification Manager', views: views });
        },
        showChangeUser: function () {
            var views = [{ icon: "user", name: 'Users', url: "/setup/users/change", buttons: ["switch"]}];
            modal.show({ title: 'Switch User', views: views });
        },
        showChangeCompany: function () {
            var views = [{ icon: "users", name: 'Companies', url: "/setup/companies/change", buttons: ["switch"] }];
            modal.show({ title: 'Switch Company', views: views});
        },
        showContactFields: function () {
            var views = [{ icon: "image", name: "Contact Fields", url: "/editorsettings/formcontainer/contactfields", buttons: ["done"], iconprefix: "far" }];
            modal.show({ title: "Contact Fields", views: views});
        },
        //Added by lalita for form template model window
        showWebTemplates: function (callback) {
            var views = [{ icon: "", name: 'Web Forms', url: "/setup/templates/selectformtemplate?showcreate=true" }];
            modal.show({ title: 'Forms', views: views });
        },
        //Added by lalita to show banner templates      
        showBannerTemplates: function (callback) {
            var views = [{ icon: "image", name: 'Banner', url: "/collateral/banner", buttons: ["done"], iconprefix: "far" }];
            modal.show({ title: 'Banner', views: views, callback: callback });            
        },
        showSelectImage: function (callback, showbannertemplate) {
            var _showbannertemplate  = false;
            if (typeof (showbannertemplate) !== "undefined")
                _showbannertemplate  = showbannertemplate;
            var views = [{ icon: "", name: 'Images', url: "/gallery/images/v5?showbannertemplate=" + _showbannertemplate + "&saveondblclick=true&singleselect=true", buttons: ["addselected"] }];         //saveondblclick added for #13196
            modal.show({ title: 'Images', views: views,  callback: callback, fixedheight: 'true' });
        },
        showImageSelect: function (callback, options) {//Added for single image select
            $.extend({
                singleselect: false
            })

            var title = 'Images';
            var isPlaybook = false;
            if (typeof (options.isPlaybook) !== "undefined")
                isPlaybook = options.isPlaybook;

            var showWebBanner = false;
            if (typeof (options.showWebBanner) !== "undefined")
                showWebBanner = options.showWebBanner;
            
            var isEmbed = false;
            if (typeof (options.isembed) != "undefined")
                isEmbed = options.isembed;

            var showBannerTemplate = false;
            if (typeof (options.showbannertemplate) !== "undefined")
                showBannerTemplate = options.showbannertemplate;

            //#40549 - UI issues in playbook for webbanner
            var isSetup = false;
            if (typeof (options.issetup) !== "undefined")
                isSetup = options.issetup;

            var title = 'Images';
            if (isPlaybook && showWebBanner) {
                title = 'Web Banner';
            }

            var isBadge = false;
            if (typeof options.isBadge != "undefined" && options.isBadge) {
                isBadge = options.isBadge;
                title = 'Badges';
            }
            var isAnnouncement = false;
            if (options.isAnnouncement)
                isAnnouncement = true;

            var isEventCalendar = false;
            if (options.isEventCalendar)
                isEventCalendar = true;

            var isSmartList = false;
            if (options.isSmartList)
                isSmartList = true;

            //saveondblclick added for #13196
            views = [{ icon: "", name: 'Images', url: "/gallery/images/v5?singleselect=" + options.singleselect + "&saveondblclick=true&isplaybook=" + isPlaybook + "&showWebBanner=" + showWebBanner + "&isembed=" + isEmbed + "&showbannertemplate=" + showBannerTemplate + "&issetup=" + isSetup + "&isbadge=" + isBadge + "&isannouncement=" + isAnnouncement + "&iseventcalendar=" + isEventCalendar + "&issmartlist=" + isSmartList, buttons: ["addselected", "cancel"] }];
            
            
            modal.show({ title: title, views: views, callback: callback, fixedheight: 'true', locked: true, isCancel: true, isitemNull: options.itemNotnull });
        },
        showScormGal: function (callback, id, closeCallback) {//Added for single image select
            var views = [{ icon: "", name: 'Choose file', url: "/gallery/document/v5/" + parseInt('8288') + "/" + id + "?isdocumentimport=true&isscorm=true&singleselect=true", buttons: ["save"] }];
            modal.show({ title: 'SCORM File', views: views, callback: callback, closeCallback: closeCallback, fixedheight: 'true' });
        },
        showImageV5: function (callback, options, closeCallback) {//Added for single image select
            $.extend({
                singleselect: false
            })

            var title = 'Images';
            var isPlaybook = false;
            if (typeof (options.isPlaybook) !== "undefined")
                isPlaybook = options.isPlaybook;

            var isEmbed = false;
            if (typeof (options.isembed) != "undefined")
                isEmbed = options.isembed;

            var isBadge = false;
            if (typeof options.isBadge != "undefined" && options.isBadge) {
                isBadge = options.isBadge;
                title = 'Badges';
            }

            var showBannerTemplate = false;
            if (typeof (options.showbannertemplate) !== "undefined")
                showBannerTemplate = options.showbannertemplate;

            var isSelectBannerAction = false;
            if (options.isselectbanneraction != undefined)
                isSelectBannerAction = options.isselectbanneraction;

            var views = [{ icon: "", name: 'Images', url: "/gallery/images/v5?singleselect=" + options.singleselect + "&saveondblclick=true&isplaybook=" + isPlaybook + "&isembed=" + isEmbed + "&isbadge=" + isBadge + "&showbannertemplate=" + showBannerTemplate + "&isselectbanneraction=" + isSelectBannerAction, buttons: ["addselected", "cancel"] }];
            modal.show({ title: title, views: views, callback: callback, fixedheight: 'true', locked: true, isCancel: true, isitemNull: options.itemNotnull, closeCallback: closeCallback });
        },
        showTemplatePageList: function (callback, options) {//Added for template page list for web and print editor.
            $.extend({
                singleselect: false
            })
            var views = [{ icon: "", name: "", url: "/designeditor/templatepageslist" }];
            modal.show({ title: options.pageListTitle, views: views, callback: callback, fixedheight: 'true' });
        },
        showContractPages: function (templateID, callback) {
            var views = [{ icon: "", name: "", url: "/contracts/templatepages/" + templateID, buttons:["select"] }];
            modal.show({ title: 'Page List (s)', views: views, callback: callback, fixedheight: 'true'});
        },
        showContractFieldChooser: function (callback){
            var views = [{ icon: "image", name: "", url: "https://partner-marketing.bitdefender.com/setup/fieldchooser/" + 2, buttons: ["save"], iconprefix: "far"}];
            modal.show({ title: 'Select Fields', views: views, callback: callback });
        },
        showFormFields: function (callback, options) {//Added for form fields for form editor.
            $.extend({
                singleselect: false
            })
            var views = [{ icon: "", name: "", url: "/designeditor/formfields"}];
            modal.show({ title: "", views: views, callback: callback, fixedheight: 'true' });
        },
        showDataroomTrackingLink: function (callback, options) {//Added for track link for dataroom editor.
            $.extend({
                singleselect: false
            })
            var views = [{ icon: "", name: "", url: "/designeditor/tracklink" }];
            modal.show({ title: "", views: views, callback: callback, fixedheight: 'true' });
        },
        showSelectAssetType: function (callback, options) {//Added for select asset for editors
             $.extend({
                singleselect: false
             })
            var views = [{ icon: "", name: "", url: `/designeditor/selectasset?objID=${options.id}&templateid=${options.templateid}&pageid=${options.pageid}`, buttons: ["save","cancel"]}];
             modal.show({ title: options.title, views: views,callback: callback, fixedheight: 'true' });
        },
        showEmailTemplates: function () {
            var views = [{ icon: "inbox", name: "", url: "/designeditor/emailtemplates", buttons:["save"] }];
            modal.show({ title: 'Email Templates', views: views });
        },
        showEmailCTAStepProcess: function (options) {
            var views = [{ icon: "inbox", name: "", url: "/designeditor/emailctastepprocess?templateid=" + options.templateid, buttons: ["save"] }];
            modal.show({ title: 'Call To Action Properties', views: views});
        },
        showDivPrograms: function (callback, options) {//Added for divPrograms for form container in web.
             $.extend({
                 singleselect: false
             })
            var views = [{ icon: "", name: "", url: "/designeditor/divprograms", buttons: ["save"] }];
             modal.show({ title: options.title, views: views, callback: callback, fixedheight: 'true' });
        },
        showDivRecipients: function (callback, options) {//Added for divRecipients for form container in web.
            $.extend({
                singleselect: false
            })
            var views = [{ icon: "", name: "", url: "/designeditor/divrecipientlists", buttons: ["save"]}];
            modal.show({ title: options.title, views: views, callback: callback, fixedheight: 'true' });
        },
        showEditorLinkManager: function (options, callback) {
            var views = [{ icon: "", name: "", url: "/designeditor/linkmanager?templateid=" + options.templateid + "&objtype=" + options.objecttype, buttons: ["save"]}];
            modal.show({ title: 'Hyperlink Manager', views: views, callback: callback });
        },
        showWireFramePageThumb: function (callback, options) {//Added for wireframe page thumbnails for editors
             $.extend({
                  singleselect: false
             })
             var views = [{ icon: "", name: "", url: "/designeditor/wireframepagethumb"}];
                modal.show({ title:"", views: views, callback: callback, fixedheight: 'true' });
        },
        showGeneralObjProperties: function (options) {
            var views = [{ icon: "", name: "", url: "/editors/generalobjectproperties/" + options.templateid + "/" + options.objtype ,buttons:["save"]}];
            modal.close();
            setTimeout(function () {
                modal.show({title: 'Formatting', views: views});
            }, 500);
        },
        updateImgAndLinkTo: function (options) {
            var views = [{ icon: "database", name: "", url: "/editors/objectproperty", buttons: ["save"] }];
            modal.show({ title: 'Update Image & Link To', views: views });
        },
        showLinkSites: function (callback) {
            var views = [{ icon: "image", name: 'External Links & Sites', url: hostPath + "/tracking/links_sites", buttons: ["done"], iconprefix: "far" }];
            modal.show({ title: 'External Links & Sites', views: views, callback: callback, buttons: ["done"] });
        },
        showNavigationLinkSites: function (callback) {
            var views = [{ icon: "image", name: 'External Links & Sites', url: hostPath + "/designeditor/navigation/quicklinks", buttons: ["done"], iconprefix: "far" }];//to open Navigation/Quick Links modal
            modal.show({ title: 'Navigation/Quick Links', views: views, callback: callback, buttons: ["done"] });
        },
        showLinkCampaign: function (callback) {
            var views = [{ icon: "image", name: 'External Links & Sites', url: hostPath + "/manage/linkmanagercampaigns", iconprefix: "far"}];
            modal.show({ title: 'Campaigns', views: views, callback: callback, buttons: ["done"] });
        },
        createtrackinglink: function (callback) {
            var views = [{ icon: "image", name: 'External Links & Sites', url: hostPath + "/manage/externaltracking/links/create-track-link", buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: 'Track Links', views: views, callback: callback });
        },
        createtrackingsite: function (callback) {
            var views = [{ icon: "image", name: 'External Links & Sites', url: hostPath + "/manage/externaltracking/links/create-track-site", buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: 'Track Sites', views: views, callback: callback });
        },
        showLinksOfCampaign: function (options, callback) {
            var views = [{ icon: "image", name: 'External Links & Sites', url: hostPath + "/manage/linkmanagercampaigns/tracklinks/" + options.campaignid, iconprefix: "far" }];
            var title = " (<b><i>" + options.campaignname + "</i></b>)";
            modal.show({ title: title, views: views, callback: callback, buttons: ["done"] });
        },
        showSourceOfLinks: function (data, callback) {
            var views = [{ icon: "image", name: 'External Links & Sites', url: hostPath + "/manage/linkmanagercampaigns/source/" + data.id, buttons: ["done"], iconprefix: "far" }];
            var title = views[0].name + " (<b><i>" + data.name + "</i></b>)";
            modal.show({ title: title, views: views, callback: callback, buttons: ["done"] });
        },
        showRecordPicker: function (options) {//Added for select asset/webinar for editors
            $.extend({
                singleselect: false
            })
            var views = [{ icon: "", name: "", url: "/designeditor/recordpicker?hasDatabase=" + options.hasDatabase + "&hasWebinar=" + options.hasWebinar + "&pageId=" + options.pageId + "&hasOpportunity=" + options.hasOpportunityAttached + "&templateId=" + options.templateId, buttons: ["save"]}];
            modal.show({ title: options.title, views: views, preventClose: true, backdrop: 'static', show: true });
        },
        showImportTemplate: function (callback,options) {
            var modalTitle = 'Select an existing wireframe, import your HTML or create your own design.';
            if (options.isResponsiveWeb){
                var views = [{ icon: "", name: 'Template', url: "/import/template?isResponsiveWeb=true" }];
                modalTitle = 'Select an existing wireframe, import your HTML or create your own design.';
            }
            else
                var views = [{ icon: "", name: 'Template', url: "/import/template"}];
            modal.show({ title: modalTitle, views: views, callback: callback });// done button removed for -#9077
        },
        showImportTemplateAiBridge: function (options, callback) {
            var views = [{ icon: "", name: 'Template', url: "/import/template?isAiBridge=" + options.isAiBridge, wizardclose: true }];

            var inputStep = { name: 'input', url: "/editor/media/questionpicker/2245344", wizardclose: true };
            var outputStep = { name: 'output', url: "/communicate/email/3207662?isAiBridge=" + options.isAiBridge, wizardclose: true };
            views.push(inputStep);
            views.push(outputStep);

            var _wizdata = {
                name: 'Customize Personalization Data',
                steps: views
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },

        showQuestionMediaAiBridge: function (options, callback) {
            var views = [{ name: 'input', url: "/editor/media/questionpicker/" + options.id + "?isAiBridge=" + options.isAiBridge, wizardclose: true }];
            var outputStep={};
            var editor ={};
            var modalTitle = 'Customize Personalization Data';

            if (options.templatetype == 16){
                views.push({ name: getTemplateTypetext(16) + options.editor, url: "/collateral/pdf/" + options.id + "/editor?ispersonalized=" + options.ispersonalized + "&isAiBridge=true", wizardclose: true, buttons: ["finish"] });
                views.push({ name: 'output', url: "collateral/pdf/" + options.id + "/view?isprintmedia=false&isAiBridge=true", wizardclose: true });

            }            
            else if (options.templatetype == 128){
                views.push({ name: getTemplateTypetext(128), url: "/manage/landingpage/" + options.id + "/editor?canEmailSend=" + options.send + "&isAiBridge=true", wizardclose: true });
                views.push({ name: 'output', url: "manage/landingpage/" + options.id + "/view", wizardclose: true, buttons: ["finish"] });
            }                 
            else if (options.templatetype == 36864){
                views.push({ name: getTemplateTypetext(36864) + options.editor, url: "/collateral/data-room/" + options.id + "/editor" + "?canEmailSend=" + options.send + "&isAiBridge=true", wizardclose: true });
                views.push({ name: 'output', url: "collateral/data-room/" + options.id + "/view", wizardclose: true });
            }
            else if (options.templatetype == 3145728) {
                views.push({ name: getTemplateTypetext(3145728) + 'Editor', url: "/contracts/editor/" + options.id });
                views.push({ name: 'View & Sign', url: "/contracts/signature/" + options.id + "?isAiBridge=true" });
                views.push({ name: 'Contract', url: "/contracts/send/" + options.id + "/" + options.ispartner + "?isAiBridge=true" });
            } 
            else
            { 
                views.push({ name: getTemplateTypetext(32) + 'Editor', url:`/communicate/email/${options.id}/ ${options.emailid}/webinareditor/0?isAiBridge=true` });
                views.push({ name: 'output', url: `communicate/email/${options.emailid}?linkids=&isstepprocess=true&isSmartlist=&isContactcompany=&ispartner=False&isAiBridge=${options.isAiBridge}`, wizardclose: true, buttons: ["send", "finish"] });
            }

            if (options.cardviewemailOutput)
            {
                modalTitle = 'Email Send';
                views = [];
                outputStep = outputStep = { name: 'output', url: "communicate/email/" + options.emailid + "?linkids=&isstepprocess=true&isSmartlist=&isContactcompany=&ispartner=False", wizardclose: true, buttons: ["send"] };
                views.push(outputStep);               
            }
            var _wizdata = {
                name: modalTitle,
                steps: views
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },

        showTrainedAiDoc: function (options, callback) {
            var views = [{ icon: "", name: 'Template', url: `/ai/doc/trained?datasource=${options.datasource}&companydatasource=${options.companydatasource ?? false}&organizationdatasource=${options.organizationdatasource ?? false}&tabid=${options.tabid}&linktype=${options.linktype}&condition=${options.condition}`, buttons: [] }];
            modal.show({ title: "Trained Assets", views: views, hideCloseButton: options.hideaction }, function () {
                var previousModalTitle = $(".ai-sprinkler-view");
                if (previousModalTitle.length > 0) {
                    let titleContainer = previousModalTitle.closest('h4');
                    previousModalTitle.closest('a').remove();
                    if (titleContainer.length > 0)
                        titleContainer.html(titleContainer.html().replace('&gt;', ''));
                }
            });
        },
        showSendEmail: function (options, callback) {
            var views = [{
                icon: "", name: 'Template', url: "communicate/email/" + options.id + "?linkids=&isstepprocess=true&isSmartlist=&isContactcompany=&ispartner=False&isAiBridge=" + options.isAiBridge ?? false, buttons: ["send"] }];
            modal.show({ title: "Send Email", views: views, hideCloseButton: options.hideaction, callback: callback }, function () {
                var previousModalTitle = $(".ai-sprinkler-view");
                if (previousModalTitle.length > 0) {
                    let titleContainer = previousModalTitle.closest('h4');
                    previousModalTitle.closest('a').remove();
                    if (titleContainer.length > 0)
                        titleContainer.html(titleContainer.html().replace('&gt;', ''));
                }
            });
        },
        showSelectVideo: function (type, callback, options, isScheduled, isSocialOneOff) {
            var singleSelect = "0";
            if (isScheduled == undefined)
                isScheduled = false;
            if (isSocialOneOff == undefined)
                isSocialOneOff = false;
            if (options != undefined) {
                if (options.singleselect != undefined)
                    singleSelect = options.singleselect;
            }
            if (typeof (type) != "function") {
                var views = [{ icon: "", name: 'Videos', url: "/gallery/videos/" + type, buttons: ["done"]}];
                modal.show({ title: 'Videos', views: views, callback: callback });
            }
            else {
                var views = [{ icon: "", name: 'Videos', url: "/gallery/video/v5?singleselect=" + singleSelect + "&isScheduled=" + isScheduled + "&isSocialOneOff=" + isSocialOneOff, buttons: ["done"]}];
                modal.show({ title: 'Videos', views: views, callback: type });
            }
        },
        showVideoSelect: function (callback, options, isScheduled, isSocialOneOff) {//Added for single video select
            $.extend({
                singleselect: false
            })
            var isPlaybook = false;
            if (typeof (options.isPlaybook) !== "undefined")
                isPlaybook = options.isPlaybook;

            var selectedId = 0;
            if (typeof (options.selectedid) !== "undefined")
                selectedId = options.selectedid;

            if (typeof (isScheduled) == "undefined")
                isScheduled = false;

            if (isSocialOneOff == undefined)
                isSocialOneOff = false;

            var issetup = false;
            if (typeof (options.issetup) !== "undefined")
                issetup = options.issetup;
            
            var views = [{ icon: "", name: 'Videos', url: "/gallery/video/v5?singleselect=" + options.singleselect + "&isplaybook=" + isPlaybook + "&selected=" + selectedId + "&isScheduled=" + isScheduled + "&isSocialOneOff=" + isSocialOneOff + "&issetup=" + issetup + "&isstepwizard=false", buttons: ["addselected"]}];
            modal.show({ title: 'Add' + ' Video', views: views, callback: callback, locked: true });
        },
        showVideoV5: function (callback, options) {//Added for single video select
            $.extend({
                singleselect: false
            })
            var isPlaybook = false;
            var removeTabs = false;
            if (typeof (options.isPlaybook) !== "undefined")
                isPlaybook = options.isPlaybook;
            if (typeof (options.removeTabs) !== "undefined")
                removeTabs = options.removeTabs; // This is used to remove the extra tabs in video modal such as (draft, video template...)
            var views = [{ icon: "", name: 'Videos', url: "/gallery/video/v5?singleselect=" + options.singleselect + "&isplaybook=" + isPlaybook + "&isstepwizard=false" + "&removetabs=" + removeTabs, buttons: ["addselected"]}];
            modal.show({ title: 'Add' + ' Video', views: views, callback: callback, locked: true });
        },
        showVideoSelectForVideoEditor: function (videoType, callback, options) {//Added for single video select
            $.extend({
                singleselect: "0"
            })
            var isPlaybook = false;
            if (typeof (options.isPlaybook) !== "undefined")
                isPlaybook = options.isPlaybook;

            var selectedId = 0;
            if (typeof (options.selectedid) !== "undefined")
                selectedId = options.selectedid;

            if (typeof (isScheduled) == "undefined")
                isScheduled = false;

            if (typeof(isSocialOneOff) == "undefined")
                isSocialOneOff = false;

            var issetup = false;
            if (typeof (options.issetup) !== "undefined")
                issetup = options.issetup;

            var views = [{ icon: "", name: 'Videos', url: "/gallery/video/v5?singleselect=" + options.singleselect + "&isplaybook=" + isPlaybook + "&selected=" + selectedId + "&isScheduled=" + isScheduled + "&isSocialOneOff=" + isSocialOneOff + "&issetup=" + issetup + "&videotype=" + videoType + "&isstepwizard=false", buttons: ["addselected"] }];
            modal.show({ title: 'Add' + ' Video', views: views, callback: callback, locked: true });
        },
        showSelectDocument: function (type, callback, options, isdatabaserecord) {
            var singleSelect = false;
            if (options != undefined)
            {
                if (options.singleselect != undefined)
                    singleSelect = options.singleselect;
            }
            if (typeof (type) != "function") {
                if (isdatabaserecord == true) {
                    var views = [{ icon: "", name: 'Documents', url: "/gallery/documents/" + type + "/isdatabaserecord" + "?isdocumentimport=" + true, buttons: ["insert", "cancel"] }];
                }
                else if (options.addpdf == true) {
                    var views = [{ icon: "", name: 'Documents', url: "/gallery/document/v5?isdocumentimport=" + true + "&ft=" + type, buttons: ["addselected", "cancel"] }];
                }
                else {
                    var views = [{ icon: "", name: 'Documents', url: "/gallery/documents/" + type + "?isdocumentimport=" + true   , buttons: ["insert", "cancel"] }];
                }
                modal.show({ title: 'Documents', views: views, callback: callback });
            }
            else if(options != undefined){

                if (options.istracklink == true || options.iscampaignlink == true) {
                    var views = [{ icon: "", name: 'Documents', url: "/gallery/document/v5?singleselect=" + singleSelect + "&isdocumentimport=" + false, buttons: ["addselected", "cancel"] }];
                    modal.show({ title: 'Documents', views: views, buttons: '[Done]', callback: type });
                }
            }
            else {
                var views = [{ icon: "", name: 'Documents', url: "/gallery/documents?singleselect=" + singleSelect + "&isdocumentimport=" + true, buttons: ["insert", "cancel"] }];                
                modal.show({ title: 'Documents', views: views, buttons: '[Done]', callback: type });
            }
        },
        showDocumentSelect: function (type, options, callback) {//Added for single document select
            $.extend({
                singleselect: false
            })

            var isPlaybook = false;
            if (typeof (options.isPlaybook) !== "undefined")
                isPlaybook = options.isPlaybook;
            if (typeof (type) != "function") {
                var views = [{ icon: "", name: 'Documents', url: "/gallery/documents/" + type, buttons: ["insert","cancel"]}];
                modal.show({ title: 'Documents', views: views, callback: callback, locked: true });
            }
            else {
                var url = "/gallery/documents?singleselect=" + options.singleselect + "&isplaybook=" + isPlaybook +"&buttonaction="+options.buttonaction;
                if (typeof options.filetype !== "undefined")
                    url += "&ft=" + options.filetype;
                if (typeof (options.maxFiles) !== "undefined") {
                    url += "&maxfiles=" + options.maxFiles;
                }
                var views = [{ icon: "", name: 'Documents', url: url, buttons: ["insert","cancel"]}];
                modal.show({ title: 'Documents', views: views, callback: type, locked: true, preventClose: true });
            }
        },

        showDocumentv5: function (type, options, callback) {//Added for single document select
            $.extend({
                singleselect: false
            })
            var isPlaybook = false;
            if (typeof (options.isPlaybook) !== "undefined")
                isPlaybook = options.isPlaybook;
            if (typeof (type) != "function") {
                var views = [{ icon: "", name: 'Documents', url: "/gallery/document/v5?ft=" + type + "&isdocumentimport=true", buttons: ["addselected", "cancel"] }];
                modal.show({ title: 'Documents', views: views, callback: callback, locked: true });
            }
            else {
                var url = "/gallery/document/v5?singleselect=" + options.singleselect + "&isplaybook=" + isPlaybook + "&buttonaction=" + options.buttonaction;
                if (typeof options.filetype !== "undefined")
                    url += "&ft=" + options.filetype;
                var views = [{ icon: "", name: 'Documents', url: url, buttons: ["addselected", "cancel"] }];
                modal.show({ title: 'Documents', views: views, callback: type, locked: true, preventClose: true });
            }
        },

        showContractDocument: function (type, callback) {
            var views = [{ icon: "", name: 'Contracts', url: "/gallery/documents/" + type + "?singleselect=1", buttons: ["attach"]}];
            modal.show({ title: 'Contracts', views: views, callback: callback });
        },
        showEbookSelectDocument: function (type, callback) {//Added by lalita for ebook
            if (typeof (type) != "function") {
                var views = [{ icon: "", name: 'Documents', url: "/documents/ebook/" + type + "/1", buttons: ["done"]}];
                modal.show({ title: 'Documents', views: views, callback: callback });
            }
            else {
                var views = [{ icon: "", name: 'Documents', url: "/gallery/documents", buttons: ["insert"] }];
                modal.show({ title: 'Documents', views: views, callback: type });
            }
        },
        showSocialSelectImage: function (callback, isScheduled, isSocialOneOff) {//Added for single image select in web-v4u-routing xml file
            if (isScheduled == undefined)
                isScheduled = false;
            if (isSocialOneOff == undefined)
                isSocialOneOff = false;
            var views = [{ icon: "", name: 'Images', url: "/gallery/images/v5?saveondblclick=true&singleselect=true" + "&isScheduled=" + isScheduled + "&isSocialOneOff=" + isSocialOneOff, buttons: ["addselected"] }];      //saveondblclick added for #13196
            modal.show({ title: 'Images', views: views, callback: callback, fixedheight: 'true' });
        },
        showSocialDripSelectImage: function (callback) {//Added for single image select in web-v4u-routing xml file   
            var views = [{ icon: "", name: 'Images', url: "/gallery/images/v5?saveondblclick=true&issocialdrip=true&showBannerTemplate=true&isselectbanneraction=true&singleselect=true", buttons: ["addselected"] }];      //saveondblclick added for #13196
            modal.show({ title: 'Images', views: views, callback: callback, fixedheight: 'true' });
        },
        showSocialSelectDocument: function (callback, isScheduled, isSocialOneOff) {//Added for single image select in web-v4u-routing xml file
            if (isScheduled == undefined)
                isScheduled = false;
            if (isSocialOneOff == undefined)
                isSocialOneOff = false;
            var views = [{ icon: "", name: 'Documents', url: "/gallery/document/v5?singleselect=true" + "&isScheduled=" + isScheduled + "&isSocialOneOff=" + isSocialOneOff, buttons: ["addselected"] }];
            modal.show({ title: 'Documents', views: views, callback: callback });
        },
        showBridgeAiSelectDocument: function (callback, isUserPanel = false, hideAction = false) {//Added for single image select in web-v4u-routing xml file
            var views = [{ icon: "", name: 'Documents', url: `/gallery/ai/documents?isbridgeuserpanel=${isUserPanel}&singleselect=0&buttonaction=true`, buttons: ["insert"] }];
            modal.show({ title: "Documents", views: views, hideCloseButton: hideAction, callback: callback }, function () {
                var previousModalTitle = $(".ai-sprinkler-view");
                if (previousModalTitle.length > 0) {
                    let titleContainer = previousModalTitle.closest('h4');
                    previousModalTitle.closest('a').remove();
                    if (titleContainer.length > 0)
                        titleContainer.html(titleContainer.html().replace('&gt;', ''));
                }
            });
        },
        showPresetPrompts: function (userId, callback) {//Added for single image select in web-v4u-routing xml file
            var views = [{ icon: "", name: 'Prompts', url: "/ai/preset-prompts?userid=" + userId, buttons: [] }];
            modal.show({ title: 'User Prompts', views: views, callback: callback });
        },
        showBridgeAiDashboardStats: function (options) {
            var queryString = Object.entries(options).filter(([key, value]) => value !== undefined).map(([key, value]) => `${key}=${value}`).join('&');
            var views = [{ icon: "", name: 'Prompts', url: `/bridgeai/dashboard/stats?${queryString}`, buttons: [] }];
            modal.show({ title: 'Bridge AI Dashboard Stats', views: views});
        },
        //Modified for single image select in web-v4u-routing xml file 
        showDatabaseSelectImage: function (assettypeid, assetid, callback) {
            var views = [{ icon: "", name: 'Images', url: "/gallery/images/" + assettypeid + "/" + assetid + "?saveondblclick=true", buttons: ["insert"]}];       //saveondblclick added for #13196
            modal.show({ title: 'Images', views: views, callback: callback, fixedheight: 'true' });
        },
        //Modified for single document select in web-v4u-routing xml file
        showDatabaseSelectDocument: function (assettypeid, assetid, callback) {
            var views = [{ icon: "", name: 'Images', url: "/assets/documents/" + assettypeid + "/" + assetid, buttons: ["done"]}];
            modal.show({ title: 'Documents', views: views, callback: callback, fixedheight: 'true' });
        },
        showSocialSelectMedia: function (callback) {
            var views = [{ icon: "image", name: 'Media', url: "/gallery/media/" + Blogger, buttons: ["done"]}];
            modal.show({ title: 'Media', views: views, callback: callback });
        },
        showMediaGalleryForLink: function (callback) {
            var views = [{ icon: "image", name: 'Media', url: "/gallery/media/false?isemail=false", buttons: ["save","cancel"]}];
            modal.show({ title: 'Media', views: views, callback: callback });
        },
        showMediaForPlaybook: function (isContactCentric, callback) {
            var views = [{
                icon: "image", name: 'Add Internal Asset', url: `/data-room/dataroom-asset/0/false?iscontactcentic=${isContactCentric}&issingleselect=false`, buttons: ["addselected"] }];
            modal.show({ title: 'Add Internal Asset', views: views, callback: callback });
        },
        showMediaForPlaybookV5: function (isContactCentric, callback) {
            var views = [{
                icon: "image", name: 'Add Internal Asset', url: `/data-room/dataroom-asset/0/false?iscontactcentic=${isContactCentric}&isplaybookv5=true&issingleselect=false`, buttons: ["done"] }];
            modal.show({ title: 'Add Internal Asset', views: views, callback: callback });
        },
        showMediaForLMS: function (options, callback) {
            var url = "/gallery/media/false?iscontactcentic=true&issingleselect=false";
            if (typeof options.templatetype != "undefined" && options.islearningmanagement) {
                url = url + "&templatetype=" + options.templatetype;
            }
            var views = [{
                icon: "image", name: "Media", url: url, buttons: ["done"]
            }];
            modal.show({ title: options.title, views: views, callback: callback });
        },
        showTemplateAssets: function (options, callback) {
            let baseUrl = `/gallery/templateasset/${options.templatetype}`;
            let params = [];

            // Optional query parameters
            if (options.isassetlinks !== undefined)
                params.push(`isassetlinks=${options.isassetlinks}`, `singleselect=true`);

            if (options.contentsyndication !== undefined)
                params.push(`contentsyndication=${options.contentsyndication}`, `singleselect=true`);

            if (options.islearningmanagement){
                if (options.isSubChapter)
                    params.push(`islearningmanagement=${options.islearningmanagement}`, `singleselect=false`);
                else
                    params.push(`islearningmanagement=${options.islearningmanagement}`, `singleselect=true`);
            }

            if (!params.some(p => p.startsWith('singleselect'))) {
                params.push(`singleselect=${options.singleselect === false ? 'false' : 'true'}`);
            }

            if (options.isPlaybook !== undefined)
                params.push(`isPlaybook=${options.isPlaybook}`);

            if (options.playbookCreated)
                params.push(`playbookcreated=${options.playbookCreated}`);

            let url = baseUrl + (params.length ? `?${params.join('&')}` : '');

            var views = [{icon: "image",name: "Media",url: url,buttons: ["addselected"],iconprefix: "far"}];

            modal.show({ title: options.title, views: views, callback: callback });
        },
        showSocialMediaGallery: function (callback, isblogger, isScheduled,isSocialOneOff, isBridgeAi = false, templateType = 0, hideAction = false) {
            var title = 'Media';
            if (isScheduled == undefined)
                isScheduled = false;
            if (isSocialOneOff == undefined)
                isSocialOneOff = false;
            if (isBridgeAi)
                title ='Select a Template';
            var views = [{ icon: "image", name: 'Media', url: "/gallery/media/" + isblogger + "/false?isScheduled=" + isScheduled + "&isSocialOneOff=" + isSocialOneOff + "&isAiBridge=" + isBridgeAi + "&templatetype=" + templateType, buttons: ["done"] }];
            modal.show({ title: title, views: views, hideCloseButton: hideAction, callback: callback }, function () {
                var previousModalTitle = $(".ai-sprinkler-view");
                if (previousModalTitle.length > 0) {
                    let titleContainer = previousModalTitle.closest('h4');
                    previousModalTitle.closest('a').remove();
                    if (titleContainer.length > 0)
                        titleContainer.html(titleContainer.html().replace('&gt;', ''));
                }
            });
        },
        showTemplatesByType: function (callback, isblogger, isScheduled, isSocialOneOff, isBridgeAi = false, templateType = 0, hideAction = false, isAdminPanel = false) {
            var title = 'Media';
            if (isScheduled == undefined)
                isScheduled = false;
            if (isSocialOneOff == undefined)
                isSocialOneOff = false;
            if (isBridgeAi)
                title = 'Select a Template';
            var views = [{ icon: "image", name: 'Media', url: "/gallery/media/" + isblogger + "/false?isScheduled=" + isScheduled + "&isSocialOneOff=" + isSocialOneOff + "&isAiBridge=" + isBridgeAi + "&templatetype=" + templateType + "&isadminpanel=" + isAdminPanel, wizardclose: true }];
;

            modal.show({ title: title, views: views, hideCloseButton: hideAction, callback: callback }, function () {
                var previousModalTitle = $(".ai-sprinkler-view");
                if (previousModalTitle.length > 0) {
                    let titleContainer = previousModalTitle.closest('h4');
                    previousModalTitle.closest('a').remove();
                    if (titleContainer.length > 0)
                        titleContainer.html(titleContainer.html().replace('&gt;', ''));
                }
            });
        },
        showMedia: function (callback) {
            var views = [{ icon: "image", name: 'Media', url: "/gallery/media/false", buttons: ["done"] }];
            modal.show({ title: 'Media', views: views, callback: callback });
        },
        showSocialSelectMediaWithOutEmail: function (callback) {
            var views = [{ icon: "image", name: 'Media', url: "/gallery/media/" + Blogger + "/false/false/false", buttons: ["done"] }];
            modal.show({ title: 'Media', views: views, callback: callback });
        },
        showMediaForCertification: function (callback) {//Added by Lalita, to select print media
            var views = [{ icon: "image", name: 'Media', url: "/collateral/questionnaire/print", buttons: ["insert","cancel"] }];
            modal.show({ title: 'Print', views: views, callback: callback });
        },
        showEmailTemplate: function (callback) {
            var views = [{ icon: "image", name: 'Media', url: "/questionnaire/email", buttons: ["insert", "cancel"] }];
            modal.show({ title: 'Email', views: views, callback: callback });
        },
        showgalleryForMdf: function (callback, options) {
            var views = [{ icon: "file", name: 'Document Gallery', url: "/gallery/document/v5?singleselect=" + options.singleselect + "&isdocumentimport=true", buttons: ["addselected"] },
                { icon: "image", name: 'Image Gallery', url: "/gallery/images/v5?singleselect=" + options.singleselect + "&saveondblclick=true" + "&showbannertemplate=" + options.showbannertemplate, buttons: ["addselected", "cancel"] },      //saveondblclick added for #13196
            ];
            var title = 'Select Attachment > '+views[0].name+'';
            modal.show({ title: title, views: views, callback: callback });
        },
        showDatabaseImport: function (options) {

            var views = [{ icon: "database", name: 'Info', url: "/manage/database/import/" + options.assettypeid + "/0", buttons: ["save"]}];
            modal.show({ title: 'Import Record (<b>' + options.assettypename + '</b>)', views: views, gridobj: options._xobniobj });
        },
        showgalleryForDB: function (callback, options) {
            var listviews = [];
            var saveButton = []; //Added for #22996
            var infoAdditionalButtons = [];
            var underReview = options.assetunderreview != undefined ? options.assetunderreview : false;
            if (options.showSaveButton) {
                saveButton = ["save"];
                if (options.showSubmitForApproval) {
                    infoAdditionalButtons = ["submitforapproval"]
                }
            }
            var isGalleryImage = options.isGalleryImage != undefined ? options.isGalleryImage : false;
            var isiftParam = options.isIFT != undefined ? options.isIFT : false;
            if (options.type == "create") {
                if (options.orgID != undefined && options.orgID > 0)
                    listviews.push({ icon: "database", name: 'Info', url: `/manage/database/record/${options.assettypeid}/0/${options.orgID}/${getTimeStamp()}?isiftParam=${isiftParam}`, buttons: saveButton.concat(infoAdditionalButtons) });
                else 
                    listviews.push({ icon: "database", name: 'Info', url: `/manage/database/record/${options.assettypeid}/0/${getTimeStamp()}?isiftParam=${isiftParam}`, buttons: saveButton.concat(infoAdditionalButtons) });
                modal.show({ title: 'Create Record (<b>' + options.assettypename + '</b>)', views: listviews, callback: callback });
            }
            else {
                //added by Nikita for Enhancement-product-overview.
                if (options.showSaveButton) {
                    if (options.canEdit) { 
                        if (options.orgID != undefined && options.orgID>0)
                            listviews.push({ icon: "database", name: 'Info', url: `/manage/database/record/${options.assettypeid}/${options.assetid}/${options.orgID}/${getTimeStamp()}?isiftParam=${isiftParam}`, buttons: saveButton.concat(infoAdditionalButtons) });
                        else
                            listviews.push({ icon: 'database', name: 'Info', url: `/manage/database/record/${options.assettypeid}/${options.assetid}/${getTimeStamp()}?isiftParam=${isiftParam}`, buttons: saveButton.concat(infoAdditionalButtons) });
                        if (!options.isreward) {
                            listviews.push({ icon: "file-image", name: 'Image Gallery', url: "/assets/gallery/images/" + options.assettypeid + "/" + options.assetid + "?isGalleryImage=" + isGalleryImage + "&iswizard=true" });
                            listviews.push({ icon: 'file', name: 'Document Gallery', url: `/assets/gallery/documents/${options.assettypeid}/${options.assetid}?iswizard=true`, buttons: ['insert'] });
                            listviews.push({ icon: "file-video", name: 'Video Gallery', url: "/assets/gallery/videos/" + options.assettypeid + "/" + options.assetid + "?issetup=true" });
                            if (!underReview) {
                                listviews.push({ icon: 'user', name: 'Associate Contacts', url: `/manage/database-contacts/${options.assettypeid}/${options.assetid}`, buttons: saveButton });
                                listviews.push({ icon: "star", name: 'Rating', url: "/feedback/" + options.assettypeid + "/4/rating?productid=" + options.assetid }); // 4 is for asset rating type
                                listviews.push({ icon: 'comments', name: 'Comments', url: `/feedback/${options.assettypeid}/4/comment?productid=${options.assetid}`, iconprefix: 'far' }); // 4 is for comment feedback type
                            }
                        }
                    }
                    if (!options.ispublic && options.sharePermission)//#25535 database records enhancement
                        listviews.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + options.sharetype + "/" + options.assettypeid + "/" + options.assetid + "/null", buttons: saveButton });
                }

                if (options.assettyperecordtype == "5") {
                    listviews.push({ icon: "qrcode", name: 'Overview', url: `/manage/content-overview/${options.assettypeid}/${options.assetid}` });
                } else {
                    if (options.version == "1")
                        listviews.push({ icon: "qrcode", name: 'Overview', url: "/manage/database-product-overview/" + options.assettypeid + "/" + options.assetid, buttons: saveButton });
                    if (options.version == "2")
                        listviews.push({ icon: "qrcode", name: 'Overview', url: "/manage/product-overview-v2/" + options.assettypeid + "/" + options.assetid});
                }

                if (options.originalrecordid) {
                    if (options.assettyperecordtype == "5") {
                        listviews.push({ iconprefix: "fas", icon: "user-cowboy", name: 'Original Record', url: `/manage/content-overview/${options.assettypeid}/${options.originalrecordid}?skipapprovercheck=true` });
                    } else {
                        listviews.push({ iconprefix: "fas", icon: "user-cowboy", name: 'Original Record', url: `/manage/product-overview-v2/${options.assettypeid}/${options.originalrecordid}?skipapprovercheck=true` });
                    }
                }

                if (options.primaryField != "")
                    modal.show({ title: 'Product Database' + ' ' +listviews[0].name + ' > ' + options.assettypename + ' (<b>' + options.primaryField + '</b>)', views: listviews, callback: callback });
                else
                    modal.show({ title: 'Product Database'+' '+listviews[0].name + ' > ' + options.assettypename, views: listviews, callback: callback });
            }
            
        },
        showAddAttachementsForAssetTypeContent: function (callback, options) {
            let listviews = [];
            switch(options.type){
                case "images": 
                    listviews.push({ icon: "file-image", name: 'Image Gallery', url: `/assets/gallery/images/${options.assettypeid}/${options.assetid}?isGalleryImage=false&iswizard=true` });
                    break;
                case "documents":
                    listviews.push({ icon: 'file', name: 'Document Gallery', url: `/assets/gallery/documents/${options.assettypeid}/${options.assetid}?iswizard=true`, buttons: ['insert'] });
                    break;
                case "videos":
                    listviews.push({ icon: "file-video", name: 'Video Gallery', url: `/assets/gallery/videos/${options.assettypeid}/${options.assetid}?issetup=true` });
                break;
            }
            modal.show({ title: `${listviews[0].name}`, views: listviews, callback: callback });
        },
        showContentSharing: function (callback, options) {
            let listviews = [{ icon: "share-alt", name: 'Sharing', url: `/setup/sharing/permissions/${options.sharetype}/${options.assettypeid}/${options.assetid}/null`, buttons: ["save"] }];
            modal.show({ title: `${listviews[0].name}`, views: listviews, callback: callback });
        },
        showContentCreate: function (callback, options) {
            let listViews = [];
            if (options.type == "create") {
                let infoButtons = [];
                infoButtons.push("save");
                if (options.showsubmitforapproval) {
                    infoButtons.push("submitforapproval");
                }
                listViews.push({ icon: "database", name: 'Content', url: `/manage/content/record/${options.assettypeid}/0`, buttons: infoButtons });
                modal.show({ title: `Add Content (<b>${options.assettypename}</b>)`, views: listViews, callback: callback });
            }
            else {
                let infoButtons = [];
                if (options.originalrecordid) {
                    infoButtons.push("originalrecordpreview");
                }
                infoButtons.push("preview");
                if (options.showsavebutton) {
                    infoButtons.push("save");
                    if (options.showsubmitforapproval) {
                        infoButtons.push("submitforapproval");
                    }
                }
                if (options.canedit) {
                    listViews.push({ icon: 'database', name: 'Info', url: `/manage/content/record/${options.assettypeid}/${options.assetid}`, buttons: infoButtons });
                }
                if (options.primaryField)
                    modal.show({ title: `Content ${listViews[0].name} > ${options.assettypename} (<b>${options.primaryField}</b>)`, views: listViews, callback: callback });
                else
                    modal.show({ title: `Content ${listViews[0].name} > ${options.assettypename}`, views: listViews, callback: callback });
            }
        },
        showContentOverview: function (options) {
            let views = [{ icon: "qrcode", name: 'Overview', url: `/manage/content-overview/${options.assettypeid}/${options.assetid}` }];
            modal.show({ title: `${views[0].name}`, views: views });
        },
        showContentPreview: function (options) {
            let views = [];
            views.push({ icon: "qrcode", name: 'Preview', url: `/manage/content-overview/${options.assettypeid}/${options.assetid}` });
            if (options.canedit) {
                views.push({ icon: 'database', name: 'Info', url: `/manage/content/record/${options.assettypeid}/${options.assetid}`, buttons: ["save"] });
            }
            if (!options.ispublic && options.sharepermission) {
                views.push({ icon: "share-alt", name: 'Sharing', url: `/setup/sharing/permissions/${options.sharetype}/${options.assettypeid}/${options.assetid}/null`, buttons: ["save"] });
            }
            if (options.originalrecordid) {
                views.push({ iconprefix: "fas", icon: "user-cowboy", name: 'Original Record', url: `/manage/content-overview/${options.assettypeid}/${options.originalrecordid}?skipapprovercheck=true` });
            }
            modal.show({ title: `${views[0].name}`, views: views });
        },
        showContentOriginalRecordPreview: function (options) {
            let views = [{ iconprefix: "fas", icon: "user-cowboy", name: 'Original Record Preview', url: `/manage/content-overview/${options.assettypeid}/${options.originalrecordid}?skipapprovercheck=true` }];
            modal.show({ title: `${views[0].name}`, views: views });
        },
        showProductForPreview: function (options) {
            var views = [];
            if (options.assettyperecordtype == 5) { 
                views.push({ icon: "qrcode", name: 'Overview', url: `/manage/content-overview/${options.assettypeid}/${options.assetid}` });
                if (options.originalrecordid) {
                    views.push({ iconprefix: "fas", icon: "user-cowboy", name: 'Original Record', url: `/manage/content-overview/${options.assettypeid}/${options.originalrecordid}?skipapprovercheck=true` });
                }
            } else {
                views.push({ icon: "qrcode", name: 'Overview', url: `/manage/product-overview-v2/${options.assettypeid}/${options.assetid}` });
                if (options.originalrecordid) {
                    views.push({ iconprefix: "fas", icon: "user-cowboy", name: 'Original Record', url: `/manage/product-overview-v2/${options.assettypeid}/${options.originalrecordid}?skipapprovercheck=true` });
                }
            }
            if (options.showinfo) {
                views.push({ icon: "database", name: 'Info', url: `/manage/database/record/${options.assettypeid}/${options.assetid}`, buttons: ["save"] });
            }
            if (!options.ispublic && options.sharePermission)
                views.push({ icon: "share-alt", name: 'Sharing', url: `/setup/sharing/permissions/${options.sharetype}/${options.assettypeid}/${options.assetid}/null`, buttons: ["save"] });
            modal.show({ title: `Product Database ${views[0].name} > ${options.assettypename}`, views: views });
        },
        showProductForApproval: function (options) {
            var views = [];
            if (options.assettyperecordtype == 5) {
                views.push({ icon: "qrcode", name: 'Overview', url: `/manage/content-overview/${options.assettypeid}/${options.assetid}` });
                if (options.showinfo) {
                    views.push({ icon: "database", name: 'Info', url: `/manage/database/record/${options.assettypeid}/${options.assetid}`, buttons: ["save"] });
                }
                if (options.originalrecordid) {
                    views.push({ iconprefix: "fas", icon: "user-cowboy", name: 'Original Record', url: `/manage/content-overview/${options.assettypeid}/${options.originalrecordid}?skipapprovercheck=true` });
                }
            } else {
                views.push({ icon: "qrcode", name: 'Overview', url: `/manage/product-overview-v2/${options.assettypeid}/${options.assetid}` });
                if (options.showinfo) {
                    views.unshift({ icon: "database", name: 'Info', url: `/manage/database/record/${options.assettypeid}/${options.assetid}`, buttons: ["save"] });
                }
                if (options.originalrecordid) {
                    views.push({ iconprefix: "fas", icon: "user-cowboy", name: 'Original Record', url: `/manage/product-overview-v2/${options.assettypeid}/${options.originalrecordid}?skipapprovercheck=true` });
                }
            }
            modal.show({ title: `Product Database ${views[0].name} > ${options.assettypename}`, views: views });
        },
        showProductRequestInformation: function (options) {
            var views = [{ icon: "qrcode", name: 'Request Information', url: "/manage/product-requestinformation/" + options.assettypeid + "/" + options.assetid, buttons: ["save"]}];
            var title = views[0].name;
            if (options.assetname != undefined && options.assetname != "")
                title = title + ' > ' + options.assetname;
            modal.show({ title: title, views: views });
        },
        showProductRequestInfoSettings: function (options) {
            var views = [{ icon: "qrcode", name: 'Request Info Settings', url: "/manage/product-requestinfosettings/" + options.assettypeid, buttons: ["save"] }];
            var title = views[0].name;
           
            modal.show({ title: title, views: views });
        },
        showCertificationForInternalPB: function (callback, options, listActivity) {
            var url = "/collateral/questionnaire/" + options.mediaid + "/view/media";
            if (typeof options.playbookid != "undefined")
                url = url + "?playbookid=" + options.playbookid;
            var views = [{ icon: "search", name: 'View', url: url, buttons: ["done"] }];
            modal.show({ title: 'Training And Certification', views: views, callback: callback, locked: true, preventClose: true, closeButton: false });
        },

        showEmailDripCampaignModal(id, callback) {
            var userAction = [{ icon: "wrench", name: 'Actions', url: `/connections/emaildripcampaign/${id}`, buttons: ["save"] }];
            modal.show({ title: "(<b><i>{$ajax_socialusers.emailDripCampaign}</b></i>)", views: userAction });
            callback();
        },

        showWorkFlowList: function (id, options, workflowid, callback) {
            $.extend({
                customize: false,
                status: 1,
                hasUserViewAccess: false
            }, options);

            var partnerinfo = { icon: "info-circle fa-lg", name: options.info, url: "/setup/partners/communicate/" + id + "/info/"  + workflowid, buttons: ["save"]}
            var smartlisteditor = { icon: "list", name: options.conditions, url: "/connections/smartlist/" + id + "/" + workflowid, buttons: ["save"]}
            var useraction = { icon: "wrench", name: 'Actions', url: "/connections/useraction/" + id + "/" + workflowid, buttons: ["save"]}
            var orgaction = { icon: "wrench", name: 'Actions', url: "/connections/organizationaction/" + id, buttons: ["save"]};
            var notification = { icon: "users", name: options.notifications, url: "/connections/todos/smartlist/" + id +"/" + workflowid, buttons: ["save"]}
            var info = { icon: "info-circle fa-lg", name: options.info, url: "/connections/list/" + id + "/info/" + workflowid, buttons: ["save"] };
            var sharing = { icon: "share-alt", name: options.sharing, url: "/connections/list/usergroup/" + id + "/sharing", buttons: ["save"] }; 
            var orgnotification = { icon: "users", name: 'Notifications', url: "/connections/todos/smartlist/" + id + "/" + workflowid, buttons: ["save"] }
            var contactAction = { icon: "wrench", name: 'Actions', url: "/connections/contactaction/smartlist/" + id + "/" + workflowid, buttons: ["save"] }

            var projectinfo = { icon: "info-circle fa-lg", name: 'Info', url: "/connections/projectinfo/" + id + "/info/" + workflowid, buttons: ["save"] }
            var projectconditions = { icon: "list", name: 'Conditions', url: "/connections/projectlist/" + id + "/conditions/" + workflowid, buttons: ["save"] }
            var projectnotification = { icon: "users", name: 'Notification', url: "/connections/projectlist/" + id + "/notification/" + workflowid, buttons: ["save"] };
            var projectsharing = { icon: "share-alt", name: "Share List to", url: "/connections/projectlist/" + id + "/sharing/" + workflowid, buttons: ["save"] };
            var projectactions = { icon: "wrench", name: 'Action(s)', url: "/connections/projectlist/" + id + "/actions/" + workflowid, buttons: ["save"] };


            var mdfinfo = { icon: "info-circle fa-lg", name: 'Info', url: "/connections/mdflist/" + id + "/info/" + workflowid, buttons: ["save"] }
            var mdfconditions = { icon: "list", name: 'Conditions', url: "/connections/mdflist/" + id + "/conditions/" + workflowid, buttons: ["save"] }
            var mdfnotification = { icon: "users", name: 'Notification', url: "/connections/notofication/mdflist/" + id + "/" + workflowid, buttons: ["save"] };

            var dealsinfo = { icon: "info-circle fa-lg", name: 'Info', url: "/setup/registerdeal/info/" + id + "/" + workflowid, buttons: ["save"] }
            var dealsconditions = { icon: "list", name: 'Conditions', url: "/setup/registerdeal/condition/" + id + "/" + workflowid, buttons: ["save"] }
            var dealsnotification = { icon: "users", name: 'Notification', url: "/setup/registerdeal/notification/" + id + "/" + workflowid, buttons: ["save"] };
            var dealSharing = { icon: "share-alt", name: 'Sharing', url: "/connections/list/usergroup/" + id + "/sharing/" + workflowid, buttons: ["save"] }; 
            var dealAction = { icon: "wrench", name: 'Action(s)', url: "/connections/dealaction/smartlist/" + id, buttons: ["save"] }; 

            var accountlisteditor = { icon: "list", name: options.conditions, url: "/connections/accountsmartlist/" + id + "/" + workflowid, buttons: ["save"] }

            var smartlistviews = [smartlisteditor, useraction, partnerinfo, notification];
            if (options.ruletype == options.org) //org list
                smartlistviews = [smartlisteditor, orgaction, orgnotification, partnerinfo];
            else if (options.ruletype == options.contact)
                smartlistviews = [smartlisteditor, sharing, notification, info, contactAction];
            else if (options.ruletype == options.project) {
                if (!options.isPublic)
                    smartlistviews = [projectconditions, projectnotification, projectinfo, projectsharing, projectactions];
                else
                    smartlistviews = [projectconditions, projectnotification, projectinfo, projectactions];
            }
            else if(options.ruletype == options.mdf)   //mdf rules
                smartlistviews = [mdfconditions, mdfnotification, mdfinfo];
            else if (options.ruletype == options.deals)   //deals rules
                smartlistviews = [dealsconditions, dealsnotification, dealsinfo, dealAction, dealSharing];
            else if (options.ruletype == options.account)   //account rules
                smartlistviews = [accountlisteditor, notification, info, dealSharing];

            var title = "";
            if (options.ruletype == options.org)
                 title = 'Organization Workflow' + " > " + smartlistviews[0].name;
            else if (options.ruletype == options.user)
                title = 'User Workflow' + " > " + smartlistviews[0].name;
            else if (options.ruletype == options.contact)
                title = 'Contact Workflow' + " > " + smartlistviews[0].name;
            else if (options.ruletype == options.project)
                title = 'Opportunity Workflow' + " > " + smartlistviews[0].name;
            else if (options.ruletype == options.mdf)
                title = 'MDF Workflow' + " > " + smartlistviews[0].name;
            else if (options.ruletype == options.deals)
                title = 'Register Deal Workflow' + " > " + smartlistviews[0].name;
            else if (options.ruletype == options.account)
                title = 'Account WorkFlow' + " > " + smartlistviews[0].name;

            modal.show({ title: title + " (<b><i>" + options.name + "</b></i>)", views: smartlistviews, callback: callback });
           
        },
        showSmartList: function (id, options, option) {
            $.extend({
                customize: false,
                status: 1,
                hasUserViewAccess: false
            }, options);

            var smartlistviews = [];

            var info = { icon: "info-circle fa-lg", name: option.info, url: "/connections/list/" + id + "/info", buttons: ["save"]};
            var conditions = { icon: "list", name: option.conditions, url: "/connections/smartlist/" + id, buttons: ["save"] };
            var assetlisteditor = { icon: "list", name: option.conditions, url: "/lists/assetlists/" + id, buttons: ["save"] }
            var preview = { icon: "image", name: option.preview, url: "/connections/list/" + id + "/preview/" + getTimeStamp() + "?smart=true&isuser=" + options.isuser + "&type=" + option.isCompanyUserList, iconprefix: "far" };
            var sharing = { icon: "share-alt", name: option.sharing, url: "/connections/list/usergroup/" + id + "/sharing", buttons: ["save"] };
            var notification = { icon: "users", name: option.notifications, url: "/connections/todos/smartlist/" + id, buttons: ["save"]};

            var action = { icon: "wrench", name: 'Actions', url: "/connections/organizationaction/" + id, buttons: ["save"]};
            var assetaction = { icon: "wrench", name: 'Action(s)', url: "/assetlist/action/" + id, buttons: ["save"] };
            var Assetpreview = { icon: "image", name: 'Preview', url: "/assetlist/preview/" + id + "?isbridgeai=" + option.isBridgeAi};
            var AssetSharing = { icon: "share-alt", name: "Sharing", url: "/setup/sharing/permissions/" + id + "/" + 2000 + "/null?iscompanyuserlist=true", buttons: ["save"] };
            var assetNotification = { icon: "share-alt", name: 'Notifications', url: "/assetlist/todos/" + id, buttons: ["save"] };
            var partnerinfo = { icon: "info-circle fa-lg", name: option.info, url: "/setup/partners/communicate/" + id + "/info", buttons: ["save"], buttonaction: true };
            var useraction = { icon: "wrench", name: 'Action(s)', url: "/connections/useraction/" + id, buttons: ["save"] };
            if (options.customize)
                if (options.hasUserViewAccess && options.canContactShare)
                    smartlistviews = options.status == 1 ? [conditions, preview, sharing, notification, info] : option.isuseraction == true ? [conditions, preview, notification, partnerinfo, useraction]: [conditions, preview, notification, partnerinfo];
                else
                    smartlistviews = options.status == 1 ? [conditions, preview, notification, info] : option.isuseraction == true ? [conditions, preview, notification, partnerinfo, useraction]: [conditions, preview, notification, partnerinfo];
            else
                if (hasUserViewAccess && hasShareAccess && !option.isBridgeAi)
                    smartlistviews = options.status == 1 ? [preview, conditions, sharing, notification, info] : option.isuseraction == true ? [preview, conditions, notification, partnerinfo, useraction]:[preview, conditions, notification, partnerinfo];
                else
                    smartlistviews = options.status == 1 ? [preview, conditions, notification, info] : option.isuseraction == true ? [preview, conditions, notification, partnerinfo, useraction] : [preview, conditions, notification, partnerinfo];
            if (option.listActivity == option.companyUserList)
                smartlistviews = option.isuseraction == true ? [preview, conditions, notification, partnerinfo, useraction]:[preview, conditions, notification, partnerinfo];
            else if (option.listActivity == option.organizationList) {
                smartlistviews = [preview, conditions, action, notification, partnerinfo];
            }
            else if (option.listActivity == option.assetList)
                smartlistviews = [Assetpreview, assetlisteditor, AssetSharing, assetaction, assetNotification, partnerinfo]
            var title = "";
            if (option.status = 3 && option.listActivity == option.companyUserList)
                title = 'Company User Lists' + " > " + option.preview + "";
            else if (option.listActivity == option.organizationList)
                title = title = 'Organization Lists' + " > " + option.preview + "";
            else if (option.status = 3 && option.listActivity == option.assetList)
                title = 'Asset Lists' + " > " + smartlistviews[0].name + "";
            else
                title = options.status == 1 ? 'Smart List' + " > Contact " + option.preview + "" : 'User Smart List' + " > " + option.preview + "";
            if (option.isBridgeAi)
                smartlistviews = [Assetpreview];
            if (option.listActivity == option.organizationList)
                modal.show({ title: title + " (<b><i>" + options.name + "</b></i>)", views: smartlistviews });
            else
                modal.show({ title: title + " (<b>" + options.name + "</b>)", views: smartlistviews });
        },
        showWidgetSmartLists: function (id, options, option) {
            $.extend({
                customize: false,
                status: 1,
                hasUserViewAccess: false
            }, options);

            var smartlistviews = [];
            var info = { icon: "info-circle fa-lg", name: option.info, url: "/connections/list/" + id + "/info", buttons: ["save"] };
            var conditions = { icon: "list", name: option.conditions, url: "/connections/smartlist/" + id, buttons: ["save"] };
            var assetlisteditor = { icon: "list", name: option.conditions, url: "/lists/assetlists/" + id, buttons: ["save"] }
            var preview = { icon: "image", name: option.preview, url: "/connections/list/" + id + "/preview/" + getTimeStamp() + "?smart=true&isuser=" + options.isuser + "&type=" + option.isCompanyUserList, iconprefix: "far" };
            var sharing = { icon: "share-alt", name: option.sharing, url: "/connections/list/usergroup/" + id + "/sharing", buttons: ["save"] };
            var notification = { icon: "users", name: option.notifications, url: "/connections/todos/smartlist/" + id, buttons: ["save"] };

            var action = { icon: "wrench", name: 'Actions', url: "/connections/organizationaction/" + id, buttons: ["save"] };
            var assetaction = { icon: "wrench", name: 'Action(s)', url: "/assetlist/action/" + id, buttons: ["save"] };
            var Assetpreview = { icon: "image", name: 'Preview', url: "/assetlist/preview/" + id + "?isbridgeai=" + option.isBridgeAi };
            var AssetSharing = { icon: "share-alt", name: "Sharing", url: "/setup/sharing/permissions/" + id + "/" + 2000 + "/null?iscompanyuserlist=true", buttons: ["save"] };
            var assetNotification = { icon: "share-alt", name: 'Notifications', url: "/assetlist/todos/" + id, buttons: ["save"] };
            var partnerinfo = { icon: "info-circle fa-lg", name: option.info, url: "/setup/partners/communicate/" + id + "/info", buttons: ["save"], buttonaction: true };
            var useraction = { icon: "wrench", name: 'Action(s)', url: "/connections/useraction/" + id, buttons: ["save"] };
            smartlistviews = [Assetpreview];
            modal.show({ title: options.name, views: smartlistviews });
        },
        //#37495 - to add Content Syndication in Non-Contact and Linear playbook
        showContentSyndicationAddAsset: function (options, id, callback) {
            var url = "/manage/contentsyndication/" + [id] + "/addasset";
            var buttonText = "save";

            if (typeof options.isplaybook != "undefined" && options.isplaybook) {
                url += "?isplaybook=" + options.isplaybook;
                buttonText = "done";
            }
            
            var views = [{ icon: "", name: "", url: url, buttons: [buttonText] }];
            var modalOptions = { title: options.header, views: views };

            if (typeof callback != "undefined")
                modalOptions["callback"] = callback;

            modal.show(modalOptions);
        },
        showContentSyndicationWizard: function (option, result) {
            var info = { name: option.info, url: "/manage/contentsyndication/" + result.result.id + "/info?issingleselect=" + option.issingleselect };
            var template = { name: option.template, url: "/manage/contentsyndication/" + result.result.id + "/template" };
            var code = { name: option.code, url: "/manage/contentsyndication/" + result.result.id + "/code" };
            var report = { name: option.report, url: "/manage/contentsyndication/" + result.result.id + "/report" };
            var steps = [info, template, code];
            var _wizdata = {
                name: option.name,
                steps: steps
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showContentSyndicationInfo: function (options,id) {
            var info = { icon: "info-circle", name: options.info, url: "/manage/contentsyndication/" + id + "/info", buttons: ["save"] };
            var template = { icon: "th-list", name: options.templates, url: "/manage/contentsyndication/" + id + "/template" };
            var code = { icon: "code", name: options.code, url: "/manage/contentsyndication/" + id + "/code", buttons: ["save"] };
            views = [template, info, code];
            modal.show({ title:options.title, views: views});
        },
        showCustomObjects: function (option) {
            var products = { icon: "edit", name: ' Products ', url: `/interactivequestionnaire/products/${option.id}?islatestVersion=${option.isLatestVersion}`, buttons: ["save"] },
                views = [products];
            modal.show({ title: 'Custom Object', views: views });
        },
        showContenSyndicationCode: function (id, options) {
            var info = { icon: "info-circle", name: options.info, url: "/manage/contentsyndication/" + id + "/info", buttons: ["save"] };
            var template = { icon: "th-list", name: options.templates, url: "/manage/contentsyndication/" + id + "/template" };
            var code = { icon: "code", name: options.code, url: "/manage/contentsyndication/" + id + "/code", buttons: ["save"] };
            if (options.access) {
                buttons = ["save"];
                views = [code, info, template];
            } else
                views = [{ icon: "code", name: options.code, url: "/manage/contentsyndication/" + id + "/code"}];
            if (typeof (options.playbookid) != "undefined")//#40283 - Error when Get Syndication Code is clicked 
                code.url += "?playbookid=" + options.playbookid;
            modal.show({ title: options.title, views: views });
        },
        showContentSyndicationInfoPlaybook: function (id, options) {
            var info = { icon: "info-circle", name: options.info, url: "/manage/contentsyndication/" + id + "/info", buttons: ["save"] };
            var template = { icon: "th-list", name: options.templates, url: "/manage/contentsyndication/" + id + "/template" };
            var code = { icon: "code", name: options.code, url: "/manage/contentsyndication/" + id + "/code", buttons: ["save"] };
            if (options.access) {
                buttons = ["save"];
                views = [code, info, template];
            } else
                views = [{ icon: "code", name: options.code, url: "/manage/contentsyndication/" + id + "/code" }];
            if (typeof (options.playbookid) != "undefined") {//#40283 - Error when Get Syndication Code is clicked
                code.url += "?playbookid=" + options.playbookid;
                views = [code];
            }
            modal.show({ title: options.title, views: views });
        },
        showRecordPickerModal: function (options, callback) {
            url = "https://partner-marketing.bitdefender.com/manage/project/record/" + options.projectTypeId + "/0" + "/" + getTimeStamp();
            if (typeof (options.isEmail)!="undefined" && options.isEmail == true)
                url = url + "?isEmail=true";
            var views = [{ icon: "cubes", name: '{$options.info}', url: url, buttons: ["save"] }];
            modal.show({ title: 'Add Record  (<b>' + options.projectTypeName + '</b>)', views: views,callback:callback});
        },
        showAssetListWizard: function (id, options, option) {
            $.extend({
                status: 1,
                hasUserViewAccess: false
            }, options)
            var info = { name: option.info, url: "/lists/assetlists/" + id + "/info" }
            var smartlisteditor = { name: option.conditions, url: "/lists/assetlists/" + id }
            var TODO = { name: option.sharing, url: "/connections/list/usergroup/" + id + "/sharing" }
            var sharing = { name: option.notifications, url: "/connections/todos/smartlist/" + id }
            var categoryFilters = { name: "Action(s)", url: "/FilterManagement/CategoryFilters/" + id }
            var partnerinfo = { name: option.info, url: "/lists/assetlists/" + id + "/info" }

            var steps = [info, smartlisteditor, categoryFilters, sharing];
            if (options.hasUserViewAccess)
                steps = [info, smartlisteditor, categoryFilters, TODO, sharing];

            steps = options.status == 1 ? steps : [partnerinfo, smartlisteditor, categoryFilters, sharing];

            if (option.isCompanyUserList == option.companyUserList)
                steps = [partnerinfo, smartlisteditor, categoryFilters];
            var name = ""
            if (option.isCompanyUserList == option.companyUserList)
                name = option.companyusersmartlist;
            else
                name = options.status == 1 ? option.addlist : option.usersmartlist;

            var _wizdata = {
                name: name,
                steps: steps
            };

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showWorkFlowListWizard: function (id, options, workflowid) {
            $.extend({
                status: 1,
                hasUserViewAccess: false
            }, options)
            var info = { name: options.info, url: "/connections/list/" + id + "/info/" + workflowid }
            var partnerinfo = { name: options.info, url: "/setup/partners/communicate/" + id + "/info/" + workflowid }
            var smartlisteditor = { name: options.conditions, url: "/connections/smartlist/" + id + "/" + workflowid }
            var useraction = { name: 'Actions', url: "/connections/useraction/" + id + "/" + workflowid }
            var orgaction = { name: 'Actions', url: "/connections/organizationaction/" + id };
            var notification = { name: options.notifications, url: "/connections/todos/smartlist/" + id + "/" + workflowid }
            var sharing = { name: options.sharing, url: "/connections/list/usergroup/" + id + "/sharing" }
            var orgnotification = { name: 'Notifications', url: "/connections/todos/smartlist/" + id + "/" + workflowid }
            var contactAction = { name: 'Actions', url: "/connections/contactaction/smartlist/" + id + "/" + workflowid }
            
            var projectinfo = { name: 'Info', url: "/connections/projectinfo/" + id + "/info/" + workflowid }
            var projectconditions = { name: 'Conditions', url: "/connections/projectlist/" + id + "/conditions/" + workflowid }
            var projectnotification = { name: 'Notification', url: "/connections/projectlist/" + id + "/notification/" + workflowid };
            var projectactions = { name: 'Actions', url: "/connections/projectlist/" + id + "/actions/" + workflowid };
            var projectsharing = { icon: "share-alt", name: "Share List to", url: "/connections/projectlist/" + id + "/sharing/" + workflowid, buttons: ["save"] };


            var mdfinfo = { name: 'Info', url: "/connections/mdflist/" + id + "/info/" + workflowid }
            var mdfconditions = { name: 'Conditions', url: "/connections/mdflist/" + id + "/conditions/" + workflowid}
            var mdfnotification = { name: 'Notification', url: "/connections/notofication/mdflist/" + id + "/" + workflowid };

            var dealsinfo = { name: 'Info', url: "/setup/registerdeal/info/" + id + "/" + workflowid }
            var dealsconditions = { name: 'Conditions', url: "/setup/registerdeal/condition/" + id + "/" + workflowid }
            var dealsnotification = { name: 'Notification', url: "/setup/registerdeal/notification/" + id + "/" + workflowid };
            var dealSharing = { name: options.sharing, url: "/connections/list/usergroup/" + id + "/sharing/" + workflowid };
            var dealAction = { name: 'Actions', url: "/connections/dealaction/smartlist/" + id };

            var accountlisteditor = { name: options.conditions, url: "/connections/accountsmartlist/" + id + "/" + workflowid }

            var steps = [partnerinfo, smartlisteditor, useraction, notification];
            if (options.ruletype == options.org) //org rules
                steps = [partnerinfo, smartlisteditor, orgaction, orgnotification];
            else if (options.ruletype == options.contact)   //contact rules
                steps = [info, smartlisteditor, sharing, notification, contactAction];
            else if (options.ruletype == options.project) { //project rules
                if(!options.isPublic)
                    steps = [projectinfo, projectconditions, projectsharing, projectnotification, projectactions];
                else
                    steps = [projectinfo, projectconditions, projectnotification, projectactions];
            }   
            else if (options.ruletype == options.mdf)   //mdf rules
                steps = [mdfinfo, mdfconditions, mdfnotification];
            else if (options.ruletype == options.deals)   //deals rules
                steps = [dealsinfo, dealsconditions, dealsnotification, dealAction, dealSharing];
            else if (options.ruletype == options.account)   //account rules
                steps = [info, accountlisteditor, dealSharing, notification];

            var name = ""
            if (options.ruletype == options.user)
                name = options.usersmartlist;
            else if (options.ruletype == options.org)
                name = options.organizationlist;
            else if (options.ruletype == options.contact)
                name = options.contactsmartlist;
            else if (options.ruletype == options.project)
                name = options.projectlist;
            else if (options.ruletype == options.mdf)
                name = options.mdflist;
            else if (options.ruletype == options.deals)
                name = options.dealslist;
            else if (options.ruletype == options.account)
                name = options.accountlist;

            var _wizdata = {
                name: name,
                steps: steps
            };

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showContactsSharingWizard: function (id, options, workflowid, callback) {
            $.extend({
                status: 1,
                hasUserViewAccess: false
            }, options)

            var views;
            if (options.ruletype == options.contact)
                views = [{ name: 'Contact Workflow' + " > " + 'Sharing(' + options.sharing + ")", url: `/connections/list/usergroup/${id}/sharing`, buttons: ["save"]}];
            else if (options.ruletype == options.project)
                views = [{ icon: "share-alt", name: 'Opportunity Workflow' + " > " + 'Sharing(' + options.sharing + ")", url: `/connections/projectlist/${id}/sharing/${workflowid}`, buttons: ["save"] }];
            else if (options.ruletype == options.deals)
                views = [{ icon: "share-alt", name: 'Deals Workflow' + " > " + 'Sharing(' + options.sharing + ")", url: `/connections/list/usergroup/${id}/sharing/${workflowid}`, buttons: ["save"] }];

            modal.show({ title: views[0].name, views: views, callback: callback });

        },
        showSmartListWizard: function (id, options, option) {
            $.extend({
                status: 1,
                hasUserViewAccess: false
            }, options)
            var info = { name: option.info, url: "/connections/list/" + id + "/info" }
            var smartlisteditor = { name: option.conditions, url: "/connections/smartlist/" + id }
            var assetlisteditor = { name: option.conditions, url: "/lists/assetlists/" + id }
            var assetlistsharing = { name: option.sharing, url: "/setup/sharing/permissions/" + id + "/" + 2000 + "/null?iscompanyuserlist=true" }
            var TODO = { name: option.sharing, url: "/connections/list/usergroup/" + id + "/sharing" }
            var sharing = { name: option.notifications, url: "/connections/todos/smartlist/" + id }

            var partnerinfo = { name: option.info, url: "/setup/partners/communicate/" + id + "/info" }

            var action = { icon: "users", name: 'Actions', url: "/connections/organizationaction/" + id };
            var assetaction = { name: option.action, url: "/assetlist/action/" + id }
            var assetNotification = { icon: "share-alt", name: option.notifications, url: "/assetlist/todos/" + id };
            var useraction = { icon: "wrench", name: "Action(s)", url: "/connections/useraction/" + id, buttons: ["save"] };
            var steps = [info, smartlisteditor, sharing];
            if (options.hasUserViewAccess)
                steps = [info, smartlisteditor, TODO, sharing];
            steps = options.status == 1 ? steps : option.isuseraction == true ? [partnerinfo, smartlisteditor, useraction, sharing]: [partnerinfo, smartlisteditor, sharing];
            if (option.listActivity == option.organizationList)
                steps = [partnerinfo, smartlisteditor, action, sharing];
            else if (option.listActivity == option.assetList)
                steps = [partnerinfo, assetlisteditor, assetlistsharing, assetNotification, assetaction];
            var name = ""
            if (option.listActivity == option.companyUserList)
                name = option.companyusersmartlist;
            else if (option.listActivity == option.organizationList)
                name = option.organizationlist;
            else if (option.listActivity == option.assetList)
                name = option.addeassetlist;
            else
                name = options.status == 1 ? option.addlist : option.usersmartlist;
            
            var _wizdata = {
                name: name,
                steps: steps
            };

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showProjectViewList: function (id, projectId, views) {
            $.extend({
                status: 1
            }, views)
            var options;
            api.call("HasOpportunitySharingAccess",{projecttypeid: projectId, projectid: id}, function (msg) {
                
                sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid="+projectId+"&projectid="+id; 

                var buttons = views.hasOpportunityEditAccess != undefined && views.hasOpportunityEditAccess ? ["save"] : [];
                if(_isMobileBrowser == true)
                    sendEmailUrl = "/mobile/importtemplate/opportunity/"+projectId+","+id;

                var info = { icon: "database", name: 'Info', url: "/manage/project/record/" + projectId + "/" + id, buttons: buttons };
                var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + id + "&isSmartlist=null&source=opportunity&isproject=true&assettype=" + projectId + "&assetid=" + id };
                var associate = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + projectId + "/" + id + "?isstepprocess=" + views.usestepwizard, buttons: buttons};
                var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + projectId + "/" + id, buttons: buttons };
                var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + projectId + "/" + id, iconprefix: "far" };
                var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + projectId + "&assetid=" + id + "&isproject=true" };
                var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + projectId + "/" + id };
                var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + id + "/" + projectId, buttons: buttons };
                var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + id + "?isproject=" + true + "&projectid=" + id + "&projecttype=" + projectId };
                var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + projectId + "/" + id };
                if (views.usestepwizard)//to show opportunity in step process
                {
                    options = views.iscurrent ? [preview, report] : [report];
                    if (buttons.length > 0 && views.iscurrent)
                        options.splice(1, 0, associate, database);
                }
                else
                    options = views.iscurrent ? [info, report, viewasset] : [report];

                if (views.hascontactaccess && !views.usestepwizard && buttons.length > 0)
                    options.push(associate);

                if (options.hasProductAccess && !options.usestepwizard && buttons.length > 0)
                    projViews.push(database);

                options.push({ icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + projectId + "/" + id + "/true?iswizard=true", buttons: buttons, iconprefix: "far" });
                options.push({ icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + projectId + "/" + id + "/true?iswizard=true", buttons: buttons, iconprefix: "far" });

                if (views.hasuseraccess == true && views.sharePermission && !views.isPublic)
                    options.push(permission);

                if (views.hasemailsendaccess && !views.usestepwizard)
                    options.push({ icon: "envelope", name: 'Send Email', url: sendEmailUrl });

                options.push(offline);
                if (views.hasownershipaccess && !views.usestepwizard)//user permission to change ownership
                    options.push(ownership);
                if (views.hasinternalplaybookaccess)
                    options.push(intplaybook);
                views._xobniobj.deselectAll();
                modal.show({ title: 'Modify Record > ' + options[0].name +' (<b>' + views.projectname + '-' + views.opportunityname + '</b>)', views: options, gridobj: views._xobniobj });
        });
        },
        showDataroomAssets: function (options, callback) {
            var views = [{ icon: "", name: "", url: `/data-room/dataroom-asset/${options.isSingleselect}/${options.isEmail}`, buttons: ["addselected"] }];
            modal.show({ title:options.name,views:views,callback:callback });
        },
        showHyperlinkManager: function (options, callback) {
            var selectedText = "";
            var isCalander =false;
            var isAnnouncement = false;
            var isSmartList = false;
            if (options.selectedText != "" && options.selectedText != undefined)
                selectedText = encodeURIComponent(options.selectedText);
            if (options.isCalander != "" && options.isCalander != undefined)
                isCalander = options.isCalander;
            if (options.isAnnouncement != "" || options.isAnnouncement != undefined)
                isAnnouncement = options.isAnnouncement;
            if (options.isSmartList != "" || options.isSmartList != undefined)
                isSmartList = options.isSmartList;
            var views = [{ icon: "", name: "", url: "/blogposteditor/hyperlinkmanager?selectedtext=" + selectedText + "&iscalander=" + isCalander + "&isannouncement=" + isAnnouncement + "&issmartlist=" + isSmartList, buttons: ["save"] }];
            modal.show({ title: options.name, views: views, callback: callback });
        },

        showWebinarEmail: function (options) {
            var webinar = { icon: "fa-puzzle", name: options.title, url: options.sendEmailUrl };
            var webinarViews = [webinar];
            modal.show({ title: options.title, views: webinarViews });
        },
        showWebinarForm: function (options) {
            var webinar = {
                icon: "fa-puzzle", name: options.title, url: "/info/webinar/landingpage/" + options.id
            };
            var webinarViews = [webinar];
            modal.show({ title: options.title, views: webinarViews });
        },
        showWebinars:function(options)
        {
            if (options.wid > 0)
            {
                var report = { icon: "chart-bar", name: options.name.report, url: "/manage/webinarrecord/report/" + options.wid, iconprefix: "far"};
                var contacts = { icon: "user", name: options.name.associatecontact, url: "/manage/webinar-contacts/" + options.wid + "/" + options.type };
                var webinarViews = [];
                if(options.ishistoric){
                    webinarViews = [report];
                    modal.show({ title: options.title, views: webinarViews});
                }           
                else{
                    webinarViews = [report, contacts];
                    modal.show({ title: options.title, views: webinarViews});
                }
                
            }
            else
            {
                var webinar = { icon: "fa-puzzle", name: options.title, url: "/report/webinarlist/"+options.ishistoric+"/"+options.isall};
                var webinarViews = [webinar];
                modal.show({ title: options.title, views: webinarViews});
            }
        },
		showWebinarContacts: function (options) {
			var name = {};
			name["info"] = 'Info';
			name["report"] = 'Report'
			name["associatecontact"] = 'Associate Contacts';
            var contacts = { icon: "user", name: name, url: "/webinar/contacts/" + options.wid + "/" + options.type };
            if(options.showByMonth)
                contacts = { icon: "user", name: name, url: "/webinar/contacts/" + options.wid + "/" + options.type + "/"+options.month };
            var webinarViews = [contacts];
            modal.show({ title: options.title, views: webinarViews });
        },
        showWebinarQuestions:function(options){
            var questions = { icon: "question", name: 'Input', url: "/webinar/questions/" + options.wid + "/" + options.cid };
            var questionViews = [questions];
            modal.show({ title: options.title, views: questionViews});
        },
        showProjects: function (pID,pTypeID, options) {
            $.extend({
                customize: false,
            }, options);

            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid="+pTypeID+"&projectid="+pID; 

            if(options.ismobilebrowser == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/"+pTypeID+","+ pID;

            var info = { icon: "database", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp , buttons:["save"]};
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + pTypeID + "/" + pID, iconprefix: "far" };
            var viewasset = { icon: "file", name: 'View Assets',  url: "/sendassets/mediaassets?linkids=" + pID +"&isSmartlist=null&source=opportunity&isproject=true&assettype=" + pTypeID + "&assetid=" + pID};
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + pID + "/" + pTypeID, buttons:["save"] };
            var contacts = { icon: "user", name: 'Associate Account/Contacts',  url: "/manage/project-contacts/"+pTypeID+"/"+pID, buttons:["save"]};
            var imagegal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + pTypeID + "/" + pID + "/true?iswizard=true", buttons: ["save"], iconprefix: "far" };
            var docgal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + pTypeID + "/" + pID + "/true?iswizard=true", buttons: ["save"], iconprefix: "far" };
            var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + pTypeID + "&assetid=" + pID + "&isproject=true&linkids=" + pID + "&source=opportunity" };
            var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + pTypeID + "/" + pID , buttons:["save"] }
            var email = { icon: "envelope", name: 'Send Email',  url:sendEmailUrl };
            var associate = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard };//#32431 - Remove "Save" button since contacts are directly added on "add"
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID };
            var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + pID + "?isproject=" + true + "&projectid=" + pID + "&projecttype=" + pTypeID };
            var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + pTypeID + "/" + pID };
            var projViews;
            
            if (options.usestepwizard)//to show opportunity in step process
                projViews = options.iscurrent ? [preview, report] : [report];
            else
                projViews = options.iscurrent ? [info, report, viewasset] : [report];

                if (options.iscurrent) {
                    if (options.hasuseraccess == true && options.sharePermission && !options.isPublic)
                        projViews.push(permission);

                    if (options.hascontactaccess && !options.usestepwizard)
                        projViews.push(associate);

                    if (options.hasProductAccess)
                        projViews.push(database);

                    projViews.push(imagegal, docgal);

                    if (options.hasemailsendaccess && !options.usestepwizard)
                        projViews.push(email);
                    if (options.hasinternalplaybookaccess)
                        projViews.push(intplaybook);
            }
            projViews.push(offline);
                if (options.hasownershipaccess && !options.usestepwizard)//user permission to change ownership
                    projViews.push(ownership);
                var filter = { icon: "filter", name: 'Filters', url: "/manage/leads/filters/" + pTypeID + "?projectid=" + pID };
                projViews.push(filter);

            var title = 'Opportunity ' + projViews[0].name;
            if (typeof options.opportunityname != "undefined" && options.opportunityname != "")
                title = title + ' (<b>' + options.opportunityname + '</b>)';//opportunity name in title
            modal.show({ title: title, views: projViews });
        },
        showAssociatedContactsForProject: function (pID, pTypeID, options) {
            var projViews = [{ icon: "user", name: 'Associated Contacts', url: "/manage/project-contacts/" + pTypeID + "/" + pID + "?viewassociatedcontacts=true" }];

            var title = 'Opportunity ' + projViews[0].name;
            if (typeof options.opportunityname != "undefined" && options.opportunityname != "")
                title = title + ' (<b>' + options.opportunityname + '</b>)';//opportunity name in title

            modal.show({ title: title, views: projViews });
        },
        showAccessibleProjects: function (pID, pTypeID, options) {
            $.extend({
                customize: false,
            }, options);

            var buttons = options.hasOpportunityEditAccess != undefined && options.hasOpportunityEditAccess ? ["save"] : [];

            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid=" + pTypeID + "&projectid=" + pID;

            if (options.ismobilebrowser == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/" + pTypeID + "," + pID;

            // this is added to select default tab on opportunity tab page.
            var defaultTab = "";
            if (options.defaulttab != null && options.defaulttab != '' && options.defaulttab != undefined) {
                defaultTab = "&defaulttab=" + options.defaulttab;
            }

            var info = { icon: "info-circle", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp + "?isassociated=" + options.associated, buttons: buttons };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + pTypeID + "/" + pID, iconprefix: "far" };
            var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + pID + "&isSmartlist=null&source=opportunity&isproject=true&assettype=" + pTypeID + "&assetid=" + pID };
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + pID + "/" + pTypeID, buttons: buttons };
            var contacts = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/project-contacts/" + pTypeID + "/" + pID, buttons: buttons };
            var imagegal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + pTypeID + "/" + pID + "/true", buttons: buttons, iconprefix: "far" };
            var docgal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + pTypeID + "/" + pID + "/true?iswizard=true", buttons: buttons, iconprefix: "far" };
            var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + pTypeID + "&assetid=" + pID + "&isproject=true&linkids=" + pID + "&source=opportunity" };
            var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + pTypeID + "/" + pID, buttons: buttons }
            var email = { icon: "envelope", name: 'Send Email', url: sendEmailUrl };
            var associate = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard, buttons: buttons };
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID + "?isassociated=" + options.associated + defaultTab };
            var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + pID + "?isproject=" + true + "&projectid=" + pID + "&projecttype=" + pTypeID };
            var associateopportunity = { icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + pTypeID + "/" + pID + "?projectid=" + pID + "&projecttype=" + pTypeID + "&sharelevel=" + options.shareLevel };
            var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + pTypeID + "/" + pID };
            var projViews;
            
            if (options.usestepwizard)//to show opportunity in step process
            {
                projViews = options.iscurrent ? [preview, report] : [report];
                if (buttons.length > 0 && options.iscurrent)
                    projViews.splice(1, 0, associate,associateopportunity,database);
            }
            else
                projViews = options.iscurrent ? [info, report, viewasset] : [report];

            if (options.iscurrent) {
                if (options.hasuseraccess == true && options.sharePermission && !options.isPublic)
                    projViews.push(permission);

                if (options.hascontactaccess && !options.usestepwizard && buttons.length > 0)
                    projViews.push(associate);

                if (options.hascontactaccess && !options.usestepwizard && buttons.length > 0)
                    projViews.push(associateopportunity);

                if (options.hasProductAccess && !options.usestepwizard && buttons.length > 0)
                    projViews.push(database);

                projViews.push(imagegal, docgal);

                if (options.hasemailsendaccess && !options.usestepwizard)
                    projViews.push(email);
                if (options.hasinternalplaybookaccess)
                    projViews.push(intplaybook);
            }
            projViews.push(offline);
            if (options.hasownershipaccess && !options.usestepwizard)//user permission to change ownership
                projViews.push(ownership);

            var title = 'Opportunity ' + projViews[0].name + '' + ' > ' ;
            if (typeof options.projecttypename != "undefined" && options.projecttypename != "")
                title = title + ' '+options.projecttypename;
            if (typeof options.opportunityname != "undefined" && options.opportunityname != "")
                title = title + ' (<b>' + options.opportunityname + '</b>)';//opportunity name in title          
            modal.show({ title: title, views: projViews });
        },
        showProjectList: function (id, projectTypeID, options) {
            $.extend({
                customize: false,
                status: 1
            }, options);

            var smartlistviews = [];

            var info = { icon: "info-circle fa-lg", name: 'Info', url: "/connections/projectinfo/" + id + "/info", buttons:["save"] };
            var conditions = { icon: "list", name: 'Conditions', url: "/connections/projectlist/" + id, buttons: ["save"]};
            var preview = { icon: "image", name: 'Preview', url: "/connections/projectlist/" + id + "/preview/" + getTimeStamp() + "?smart=true", iconprefix: "far" };
            var notification = { icon: "users", name: 'Notifications & ToDo', url: "/connections/projectlist/" + id + "/notification", buttons: ["save"]};
            var actions = { icon: "wrench", name: 'Action(s)', url: "/connections/projectlist/" + id + "/actions", buttons: ["save"] };
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + id + "/" + projectTypeID + "/list", buttons: ["save"]};
            var listshare = { icon: "share-alt", name: 'Share List to', url: "/project/sharing/" + id + "/" + projectTypeID + "/list", buttons: ["save"]};
            var partnerinfo = { icon: "info-circle fa-lg", name: 'Info', url: "/setup/partners/communicate/" + id + "/info" };

            if (options.customize)
                smartlistviews = options.status == 1 ? [conditions, preview, info] : [conditions, preview, partnerinfo];
            else
                smartlistviews = options.status == 1 ? [preview, conditions, info] : [preview, conditions, partnerinfo];

            var listview;
            if (options.hasuseraccess == true && !options.isPublic && options.status != 80)
                smartlistviews = options.status == 1 ? [preview, info, conditions, permission] : [preview, partnerinfo, conditions, permission];
            else if (options.hasuseraccess == true && options.iscompanyopportunitieslists == true)
                smartlistviews = [conditions, info, listshare];
            else
                smartlistviews = options.status == 1 ? [preview, info, conditions] : [preview, partnerinfo, conditions];  

            smartlistviews.push(notification);
            if (options.hasuseraccess == true && options.iscompanyopportunitieslists == true)
                smartlistviews.push(actions);
            if (options.hasuseraccess == true && options.isusercmplist == true)
                smartlistviews = [preview];
            var title = "";
            if (options.iscompanyopportunitieslists == true)
                title = 'Company Opportunities List ' + ' > ' + smartlistviews[0].name + '(<b>' + options.name + '</b>)';//list name in title;
            else if (options.isusercmplist == true)
                title = 'Company Opportunities List ' + '(<b>' + options.name + '</b>)';//list name in title;
            else
                title = 'Opportunity List ' + ' > ' + smartlistviews[0].name + '(<b>' + options.name + '</b>)';//list name in title;
            modal.show({ title: title, views: smartlistviews, preventClose: true, subactions: [], preventClose:true, isEditor: false });
        },
        showProjectListStatsWidgets: function (id, projectTypeID, options) {
            $.extend({
                customize: false,
                status: 1
            }, options);

            var smartlistviews = [];
            var preview = { icon: "image", name: 'Preview', url: "/connections/projectlist/" + id + "/preview/" + getTimeStamp() + "?smart=true", iconprefix: "far" };         
            smartlistviews = [preview];
            modal.show({ title: options.name, views: smartlistviews, preventClose: true, subactions: [], preventClose: true, isEditor: false });
        },
        showProjectListWizard: function (id, projectTypeID, options) {
            $.extend({
                status: 1
            }, options)

            var steps = [];
            var info = { name: 'Info', url: "/connections/projectinfo/" + id + "/info" }
            var smartlisteditor = { name: 'Conditions', url: "/connections/projectlist/" + id }
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + id + "/" + projectTypeID + "/list"};
            var listshare = { icon: "share-alt", name: 'Share List to', url: "/project/sharing/" + id + "/" + projectTypeID + "/list"};
            var notification = { name: 'Notification', url: "/connections/projectlist/" + id + "/notification"}         
            var actions = { name: 'Action(s)', url: "/connections/projectlist/" + id + "/actions" }         
            var partnerinfo = { name: 'Info', url: "/setup/partners/communicate/" + id + "/info" }
            var listview;            
            if (options.hasuseraccess == true && !options.isPublic && options.status != 80)
                steps = options.status == 1 ? [info, smartlisteditor, permission, notification] : [partnerinfo, smartlisteditor, permission, notification];
            else if (options.hasuseraccess == true && options.iscompanyopportunitieslists == true)
                steps = [info, smartlisteditor, listshare, notification, actions]; 
            else
                steps = options.status == 1 ? [info, smartlisteditor, notification] : [partnerinfo, smartlisteditor, notification]; 
            if (options.iscompanyopportunitieslists == true) {
                var _wizdata = {
                    name: 'Create Company Opportunities List',
                    steps: steps
                };
            }
            else {
                var _wizdata = {
                    name: 'Create Opp. Search List',
                    steps: steps
                };
            }

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showBudgetPlanListWizard: function (id, fundId, isCompanyList) {
            $.extend({
                status: 1
            }, options)

            var steps = [];
            var info = { name: 'Info', url: "/connections/mdflist/" + id + "/info" } 
            var conditions = { name: 'Conditions', url: "/connections/mdflist/" + id + "/conditions" } 
            var permission = { icon: "share-alt", name: "Sharing", url: "/setup/sharing/permissions/" + id + "/" + 2800, buttons: ["save"] }
            var notification = { name: 'Notification', url: "/connections/notofication/mdflist/" + id };
            steps = [info, conditions, notification];
            if (isCompanyList==true)
                steps = [info, conditions,permission,notification];

            var _wizdata = {
                name: 'Create Fund Search List',
                steps: steps
            };

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showBudgetPlanListModal: function (id, fundId, options) {
            var preview = { icon: "image", name: 'Preview', url: "/connections/mdflist/" + id + "/" + fundId + "/preview" }
            var conditions = { icon: "list",  name: "Conditions", url: "/connections/mdflist/" + id + "/conditions", buttons: ["save"] }
            var info = { icon: "info-circle fa-lg",  name: "Info", url: "/connections/mdflist/" + id + "/info", buttons: ["save"]}
            var notification = { icon: "users", name: "Notification", url: "/connections/notofication/mdflist/" + id, buttons: ["save"] };
            var permission = { icon: "share-alt", name: "Sharing", url: "/setup/sharing/permissions/" + id + "/" + options.shareType, buttons: ["save"] }  //MdfCompanyList : 2800

            var budgetListViews = [];
            if (options.isShared || !options.isCompanyList)
                budgetListViews.push(preview);
            if (!options.isShared) {
                budgetListViews.push(conditions);
                budgetListViews.push(info);
                if (options.isCompanyList)
                    budgetListViews.push(permission);
                budgetListViews.push(notification);
            }
            
            var title = "Edit Fund Search List > " + " (<b><i>" + options.name + "</i></b>)";
            if (options.isCompanyList)
                title = "Edit Company MDF List > " + " (<b><i>" + options.name + "</i></b>)";
            if (options.isShared)
                title = title = "Company MDF List > " + " (<b><i>" + options.name + "</i></b>)";
            modal.show({ title: title, views: budgetListViews, preventClose: true, locked:true});
        },
        showWidgetsBudgetPlanListModal: function (id, fundId, options) {
            var preview = { icon: "image", name: 'Preview', url: "/connections/mdflist/" + id + "/" + fundId + "/preview" }
            var budgetListViews = [];
            budgetListViews.push(preview);
            modal.show({ title: options.name, views: budgetListViews, preventClose: true, locked: true });
        },

        showList: function (id, options,option,callback) {
            $.extend({
                customize: false,
                status: 1,
                showAddContacts : false
            }, options);

            var listviews = [];
            var info = { icon: "info-circle fa-lg", name: option.info, url: "/connections/list/" + id + "/info", buttons:["save"] };
            var contact = { icon: "user", name: 'Add/Remove Contacts', url: "/connections/list/" + id };
            var preview = { icon: "fa fa-eye", name: option.preview, url: "/connections/list/" + id + "/preview/" + getTimeStamp() + "?smart=false&isuser=" + options.isuser + "&isSharedList=" + options.isSharedList, iconprefix: "far" };
            var todo = { icon: "share-alt", name: 'Sharing', url: "/connections/list/usergroup/" + id + "/sharing", buttons: ["save"] }
            var partner = { icon: "user-alt", name: 'Add/Remove Users', url: "/setup/partners/communicate/list/" + id};
            var partnerinfo = { icon: "info-circle fa-lg", name: option.info, url: "/setup/partners/communicate/" + id + "/info", buttons: ["save"] };
            var accountinfo = { icon: internalModules.AccountsReport.icon, name: 'Add/Remove Accounts', url: "/connections/list/" + id + "/accounts"};

            var accountListShare = { icon: "share-alt", name: option.sharing, url: "/connections/list/usergroup/" + id + "/sharing", buttons: ["save"] };
            var accountListNotification = { icon: "users", name: option.notifications, url: "/connections/todos/smartlist/" + id, buttons: ["save"]};
            var accountListCondition = { icon: "users", name: option.conditions, url: "/connections/accountsmartlist/" + id, buttons: ["save"]};

            if (options.customize) 
                listviews = options.status == 1 ? [contact, preview, info, todo] : [partner, preview, partnerinfo];
            else if (options.showAddContacts)
                listviews = options.status == 1 ? [contact] : [partner];
            else if (options.isSharedList)
                listviews = [preview];
            else
                listviews = options.status == 1 ? [preview, contact, info, todo] : [preview, partner, partnerinfo];
            if (options.isAccountList) {
                title = 'Account Static Lists' + ' > ' + option.preview + '';
                listviews = [preview, accountinfo, info, todo]
            }
            else if(options.isAccountSmartList){
                title = 'Account Smart Lists' + ' > ' + option.preview + '';
                listviews = [preview, info, accountListCondition,accountListShare, accountListNotification]
            }
            else
                title = options.status == 1 ? 'Recipient List' + ' > ' + option.preview + '' : 'User List' + ' > ' + option.preview + '';

            if (options.isUserListActions)
                listviews.push({ icon: "bullhorn", name: 'Notification', url: "/connections/accounts/notification/" + id + "/"+ true, buttons: ["save"] });

            modal.show({ title: title + " (<b>" + options.name + "</b>)", views: listviews, callback: callback });
        },
        showWidgetsList: function (id, options, option, callback) {
            $.extend({
                customize: false,
                status: 1,
                showAddContacts: false
            }, options);

            var listviews = [];
            var previews = { icon: "fa fa-eye", name: option.preview, url: "/connections/list/" + id + "/preview/" + getTimeStamp() + "?smart=true&isuser=true&type=5", iconprefix: "far" };
            listviews = [previews];           
            modal.show({ title: options.name , views: listviews, callback: callback });
        },
        showWidgetsSmartList: function (id, options, option, callback) {
            $.extend({
                customize: false,
                status: 1,
                showAddContacts: false
            }, options);

            var listviews = [];
            var preview = { icon: "fa fa-eye", name: option.preview, url: "setup/companysmartlists/" + id + "/preview/?showanonymous=false&distributionID=" + option.dlistid, iconprefix: "far" };
            listviews =  [preview];

            
            modal.show({ title: options.name, views: listviews, callback: callback });
        },
        showListForImport: function (id, status) {
            var views = [];
            var info = { icon: "user", name: 'Info', url: "/connections/list/" + id + "/info?import=true;", buttons: ["save","cancel"] }
            var partnerinfo = { name: 'Info', url: "/setup/partners/communicate/" + id + "/info?import=true&amp;ispartner=true;", buttons: ["save"] }

            if (status == 1)
                views.push(info);
            else
                views.push(partnerinfo);

            modal.show({ title: 'Create List', views: views });
        },
        showListWizard: function (id, options) {
            $.extend({
                status: 1
            })
            var info = { name: 'Info', url: "/connections/list/" + id + "/info" }
            var listeditor = { name: 'Contacts', url: "/connections/list/" + id }
            var todo = { name: 'Sharing', url: "/connections/list/usergroup/" + id + "/sharing" }
            var partnerinfo = { name: 'Info', url: "/setup/partners/communicate/" + id + "/info" }
            var partnereditor = { name: 'Users', url: "/setup/partners/communicate/list/" + id }

            var steps = options.status == 1 ? [info, listeditor, todo] : [partnerinfo, partnereditor];

            var name = options.status == 1 ? 'Create Recipient List' : 'Create User List';          

            var _wizdata = {
                name: name,
                steps: steps,
                isCreate: true
            };

            var _wizard = new wizard(_wizdata);
            _wizard.show();

        },
        showAccountStaticListWizard: function (id, options) {
            $.extend({
                status: 1
            })
            var info = { name: 'Info', url: "/connections/list/" + id + "/info" };
            var accounts = { name: 'Accounts', url: "/connections/list/" + id + "/accounts" };
            var sharing = { name: 'Sharing', url: "/connections/list/usergroup/" + id + "/sharing" };

            var steps = [info, accounts, sharing];

            var name = 'Create Account Static List';

            var _wizdata = {
                name: name,
                steps: steps,
                isCreate: true
            };

            var _wizard = new wizard(_wizdata);
            _wizard.show();

        },
        showAccountSmartListWizard: function (id, options, option) {
            $.extend({
                status: 1,
                hasUserViewAccess: false
            }, options)
            var info = { name: 'Info', url: "/connections/list/" + id + "/info" };
            var smartlisteditor = { name: option.conditions, url: "/connections/accountsmartlist/" + id }
            var sharing = { name: 'Sharing', url: "/connections/list/usergroup/" + id + "/sharing" };
            var notifications = { name: option.notifications, url: "/connections/todos/smartlist/" + id }

            var name = 'Create Account Smart List';

            steps = [info, smartlisteditor, sharing, notifications];

            var _wizdata = {
                name: name,
                steps: steps
            };

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showCategoryWizard: function (id, creating, type, closeCallback) {
            $.extend({
                status: 1
            })
            var info = { name: 'Category Info', url: "/FilterManagement/CategoryInfo/" + id + "/" + type }
            var categoryFilters = { name: 'Add Filters', url: "/FilterManagement/CategoryFilters/" + id + "/" + creating + "/" + type }

            var steps = [info, categoryFilters];

            var _wizdata = {
                name: 'Create Filter Category',
                steps: steps,
                closeaction: closeCallback
            };

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showWorkflowWizard: function (option) {
            var WorkFlowViews = [];
            var info = { icon: "info-circle fa-lg", name: 'Info', url: "/setup/automationmanager/info/" + option.id, buttons: ["save"] };
            var permission = { icon: "users", name: 'Assignment', url: "/setup/automationmanager/sharing/" + option.id, buttons: ["save"] };
            var report = { icon: "chart-bar", name: 'Report', url: "/setup/automationmanager/report/" + option.id};
            WorkFlowViews = [info];
            var title = 'Create/Edit Workflow';
            if (typeof option.name != "undefined" && option.name != "")
                title = 'WorkFlow' +">" + WorkFlowViews[0].name + ' (<b>' + option.name + '</b>)';
            
            if (option.rulecount > 0) {
                WorkFlowViews.push(permission); 
            }
            if (option.usercount > 0) {
                WorkFlowViews.push(report);
            }
            
            modal.show({ title: title, views: WorkFlowViews });
          
        },
        editWorkFlowInfo: function (callback, options) {
            var url = "";
            if (options.workflowtype == options.mdf)
                url = "/connections/mdflist/" + options.id + "/info/" + options.workflowid;
            else if (options.workflowtype == options.project)
                url = "/connections/projectinfo/" + options.id + "/info/" + options.workflowid;
            else if (options.workflowtype == options.user || options.workflowtype == options.org || options.workflowtype == options.contact || options.workflowtype == options.deals)
                url = "/setup/partners/communicate/" + options.id + "/info/" + options.workflowid;

            var smartListTitle = "";
            if (options.isnewlist) {
                if (options.workflowtype == options.org)
                    smartListTitle = 'Organization Workflow Rule' + " > Info";
                else if (options.workflowtype == options.user)
                    smartListTitle = 'User Workflow Rule' + " > Info";
                else if (options.workflowtype == options.contact)
                    smartListTitle = 'Contact Workflow Rule' + " > Info";
                else if (options.workflowtype == options.project)
                    smartListTitle = 'Opportunity Workflow Rule' + " > Info";
                else if (options.workflowtype == options.mdf)
                    smartListTitle = 'MDF Workflow Rule' + " > Info";
                else if (options.workflowtype == options.deals)
                    smartListTitle = 'Deals Workflow Rule' + " > Info";
            }
            else {
                if (options.workflowtype == options.org)
                    smartListTitle = 'Organization Workflow Rule' + " > Info (" + options.listname + ")";
                else if (options.workflowtype == options.user)
                    smartListTitle = 'User Workflow Rule' + " > Info (" + options.listname + ")";
                else if (options.workflowtype == options.contact)
                    smartListTitle = 'Contact Workflow Rule' + " > Info (" + options.listname + ")";
                else if (options.workflowtype == options.project)
                    smartListTitle = 'Opportunity Workflow Rule' + " > Info (" + options.listname + ")";
                else if (options.workflowtype == options.mdf)
                    smartListTitle = 'MDF Workflow Rule' + " > Info (" + options.listname + ")";
                else if (options.workflowtype == options.deals)
                    smartListTitle = 'Deals Workflow Rule' + " > Info (" + options.listname + ")";
            }

            var views = [{ icon: "", name: 'Documents', url: url, buttons: ["save"] }];
            modal.show({ title: smartListTitle, views: views, callback: callback });
        },
        showWorkflowShareWizard: function (option) {
            var WorkFlowViews = [];
            var permission = { icon: "users", name: 'Assignment', url: `/setup/automationmanager/sharing/${option.id}`, buttons: ["save"] };
            WorkFlowViews = [permission];
            var title = 'Assignment';
            if (typeof option.name != "undefined" && option.name != "")
                title = 'WorkFlow' + ">" + WorkFlowViews[0].name + ' (<b>' + option.name + '</b>)';

            modal.show({ title: title, views: WorkFlowViews });
        },
        showWorkflowShareWizard: function (option) {
            var WorkFlowViews = [];
            var permission = { icon: "users", name: 'Assignment', url: `/setup/automationmanager/sharing/${option.id}`, buttons: ["save"] };
            WorkFlowViews = [permission];
            var title = 'Assignment';
            if (typeof option.name != "undefined" && option.name != "")
                title = 'WorkFlow' + ">" + WorkFlowViews[0].name + ' (<b>' + option.name + '</b>)';

            modal.show({ title: title, views: WorkFlowViews });
        },
        showWorkflowShareWizard: function (option) {
            var workFlowViews = [];
            var permission = { icon: "users", name: 'Assignment', url: `/setup/automationmanager/sharing/${option.id}`, buttons: ["save"] };
            workFlowViews = [permission];
            var title = 'Assignment';
            if (typeof option.name != "undefined" && option.name != "")
                title = `WorkFlow>${workFlowViews[0].name} (<b>${option.name}</b>)`;

            modal.show({ title: title, views: workFlowViews });
        },

        showAddedFilters: function (id,name, creating,type,isTemplate) {
            var associateCategoryViews = [];
            var associateFilters = { icon: "fas fa-fw fa-filter", name: 'Added Filters', url: "/FilterManagement/CategoryFilters/" + id + "/" + creating + "/" + type };
            var info = { icon: "info-circle fa-lg", name: 'Info', url: "/FilterManagement/CategoryInfo/" + id + "/" + type, buttons: ["save"] };
            var assignedAssets = { icon: "list", name: 'Assigned Assets', url: "/FilterManagement/AssetsForFilterGrid/" + id + "/" + isTemplate + "/" + type };

            associateCategoryViews = [associateFilters, info, assignedAssets];
            var title = 'Category > ' + associateCategoryViews[0].name + ' (<b><i>' + name + '</i></b>)';
            modal.show({ title: title, views: associateCategoryViews });
        },

        showCategoryList: function (id, name, creating, istemplate, type, callback){
            var associateCategoryViews = [];
            var info = { icon: "info-circle fa-lg", name: 'Info', url: "/FilterManagement/CategoryInfo/" + id + "/" + type, buttons: ["save"] };
            var associateFilters = { icon: "fas fa-fw fa-filter", name: 'Added Filters', url: "/FilterManagement/CategoryFilters/" + id + "/" + creating + "/" + type };

            var viewName = type == 1 ? 'Assigned Solution(s)' : type == 2 ? 'Assigned Organization(s)' : type == 3 ? 'Assigned Product(s)' : type == 4 ? 'Assigned LMS' : 'Assigned Assets';
            var iconType = type == 1 ? 'fas fa-project-diagram' : type == 2 ? 'far fa-fw fa-building' : type == 3 ? 'fas fa-database' : 'list';
            var assignedAssets = { icon: iconType, name: viewName, url: "/FilterManagement/AssetsForFilterGrid/" + id + "/" + istemplate + "/" + type };

            var categoryType = type == 1 ? 'Solution Filter Category' : type == 2 ? 'Organization Filter Category' : type == 3 ? 'Product Filter Category' : type == 4 ? 'LMS Filter Category' : 'Asset Filter Category'

            associateCategoryViews = type == 0 ? [info, associateFilters, assignedAssets] : [info, assignedAssets];
            var title = categoryType + '(<b><i>' + name +'</i></b>) > ' + associateCategoryViews[0].name;
            modal.show({ title: title, views: associateCategoryViews, callback: callback });
        },

        createSocialSyndicationCategory: function () {
            var socialSyndicationCategoryViews = [{ icon: "info-circle fa-lg", name: 'Info', url: "/FilterManagement/SocialSyndicationCategoryInfo", buttons: ["save"] }];
            modal.show({ title: 'Create Social Syndication Category', views: socialSyndicationCategoryViews });
        },

        showSocialSyndicationCategory: function (id) {
            var views = [{ icon: "info-circle fa-lg", url: "/FilterManagement/SocialSyndicationCategoryInfo?id=" + id, buttons: ["save"] }];
            modal.show({ title: 'Category > Info', views: views });
        },

        showSocialPreferenceOptedUsers: function (options) {
            var views = [{ icon: "user", name: options.name, url: "/FilterManagement/SocialSyndicationOptedUsers?groupid=" + options.groupid }];
            modal.show({ title: 'Edit Social Syndication Category > Opted Users (<b><i>' + options.name + '</i></b>)', views: views });
        },

        showSocialSyndicationTemplates: function (options) {
            var views = [{ icon: "user", name: options.name, url: "/FilterManagement/SocialSyndicationTemplates?categoryid=" + options.categoryid }];
            modal.show({ title: 'Social Drip > Templates (<b><i>' + options.name + '</i></b>)', views: views });
        },

        showCompanySmartList: function (id, options) {
            $.extend({
                customize: false,
                hasUserViewAccess: false
            }, options);

            var smartlistviews = [];
            if (options.customize) {
                smartlistviews.push({ icon: "list", name: 'Conditions', url: "/connections/smartlist/" + id ,buttons:["save"]});
                if (options.hasUserViewAccess)
                    smartlistviews.push({ icon: "share-alt", name: 'Sharing', url: "/connections/list/usergroup/" + id + "/sharing", buttons: ["save"] });
                smartlistviews.push({ icon: "users", name: 'Notifications & ToDo', url: "/connections/todos/smartlist/" + id, buttons: ["save"]});
                //smartlistviews.push({ icon: "image", name: "Preview", url: "/setup/companysmartlists/" + id + "/preview" });
            }
            else {
                //smartlistviews.push({ icon: "image", name: "Preview", url: "/setup/companysmartlists/" + id + "/preview" });
                smartlistviews.push({ icon: "users", name: 'Notifications & ToDo', url: "/connections/todos/smartlist/" + id, buttons: ["save"]});
                if (options.hasUserViewAccess)
                    smartlistviews.push({ icon: "share-alt", name: 'Sharing', url: "/connections/list/usergroup/" + id + "/sharing", buttons: ["save"]});
                smartlistviews.push({ icon: "list", name: 'Conditions', url: "/connections/smartlist/" + id, buttons: ["save"]});
            }

            smartlistviews.push({ icon: "info-circle", name: 'Info', url: "/setup/companysmartlists/" + id + "/info", buttons: ["save"]});
            var title = 'Company Smart List > ' + smartlistviews[0].name + '';
            modal.show({ title: title, views: smartlistviews });
        },

        showCompanySmartListWizard: function (id, options) {
            var info = { name: options.info, url: "/setup/companysmartlists/" + id + "/info" }
            var smartlisteditor = { name: options.conditions, url: "/connections/smartlist/" + id }
            var sharing = { name: options.sharing, url: "/connections/list/usergroup/" + id + "/sharing" }           
            var notification = { name: options.notifications, url: "/connections/todos/smartlist/" + id }
            var steps = [info, smartlisteditor, sharing, notification];
            if (!options.hasUserViewAccess)
                steps = [info, smartlisteditor, notification];            
            var _wizdata = {
                name: options.name,
                steps: steps
            };

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },

        showIncentiveWizard: function (id,isManual) {
            $.extend({
                status: 1
            })
            var steps = [];
            var info = { name: 'Info', url: "/incentive/incentiveinfo/" + id + "/info/" + isManual+"/"+0 }
            var incentiveeditor = { name: 'Data', url: "/incentive/incentivedata/" + id + "/data" }
            var incentiverule = { name: 'Program Rules', url: "/incentiverule/" + id + "/create" }
            var incentiveassignment = { name: 'Assignment', url: "/incentiveassignment/" + id +"/false" }
            steps = [info, incentiverule, incentiveassignment];
            if (isManual)
                steps = [info, incentiveassignment];
            var _wizdata = {
                name: 'Create Incentive Program',
                steps: steps
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },

        showIncentiveList: function (id, name, isManual, points, isExpired) {
            $.extend({
                customize: false,
                status: 1
            })
            var steps = [];
            var info = { icon: "info-circle fa-lg", name: 'Info', url: "/incentive/incentiveinfo/" + id + "/info/" + isManual + "/"+ points, buttons: ["save"] }
            var incentiveeditor = { icon: "image", name: 'Data', url: "/incentive/incentivedata/" + id + "/data", buttons: ["save"], iconprefix: "far"}
            var incentiverule = { icon: "database", name: 'Program Rules', url: "/incentiverule/" + id + "/create", buttons: ["save"] }
            var incentiveassignment = { icon: "users", name: 'Assignment', url: "/incentiveassignment/" + id + "/" + isExpired, buttons: ["save"] }
            var incentivereport = { icon: "trophy", name: 'Report', url: "/incentive/programreport/" + id, buttons: ["save"] }
            steps = [incentiverule, info, incentiveassignment, incentivereport];
            if (isManual)
                steps = [info, incentiveassignment, incentivereport];
            modal.show({ title: 'Edit Incentive Program (<b><i>' + name + '</i></b>)', views: steps });
        },

        showIncentiveModelRule: function (incentiveID, id, ispartner) {
            if (id != null)
                var views = [{ icon: "database", name: 'Incentive Model Rules', url: "/incentivemodelrule/edit/" + id + "/" + getTimeStamp(), buttons: ["save"] }];
            else
                var views = [{ icon: "database", name: 'Incentive Model Rules', url: "/incentivemodelrule/" + incentiveID + "/create/" + getTimeStamp(), buttons: ["save"] }];

            modal.show({ title: 'Incentive Model Rules', views: views });
        },

        showIncentiveRecord: function (options) {
            var views = [{ icon: "trophy", name: 'Incentive Programs', url: "/incentive/incentiverecord/" + options.id }];
            modal.show({ title: 'Incentive Programs (<b><i>' + options.name + '</i></b>)', views: views });
        },
        showWorkflowRecord: function (options) {
            var views = [{ icon: "trophy", name: 'Incentive Programs', url: "/setup/automationmanager/users/" + options.id + "/" + options.list + "/" + options.iscmp }];
            var title = 'User Details';
            if (options.isorg == true)
                title = 'Organization Details';
            if (options.isCon == true)
                title = 'Contact Details';
            if (options.isOpp == true)
                title = 'Opportunity Details';
            if (options.isDeals == true)
                title = 'Deals Details';
            if (options.isAccount == true)
                title = 'Account';
            if (options.isTitle)
                title = 'WorkFlow' + ">" + title;
            if (typeof options.name != "undefined" && options.name != "")
                title += ' (<b>' + options.name + '</b>)';
            modal.show({ title: title, views: views });
        },
        showAssetsharedRecord: function (options) {
            var views = [{ icon: "trophy", name: 'Incentive Programs', url: "/setup/sharing/userdetails/" + options.id + "/" + options.sharetype + "/" + options.type }];
            var title = 'User Details';
            modal.show({ title: title, views: views });
        },

        showIncentiveReport: function (options) {
            var views = [{ icon: "trophy", name: 'Report', url: "/incentive/programreport/" + options.id }];
            modal.show({ title: 'Report for Incentive Program (<b><i>' + options.name + '</i></b>)', views: views });
        },
        showIncentiveApproval: function (options) {
            var views = [{ icon: "trophy", name: 'Incentive Approval', url: "/incentive/approval/" + options.id, buttons: ["approve"] }];
            modal.show({ title: 'Incentive Approval (<b><i>' + options.name + '</i></b>)', views: views });
        },
        showIncentiveUserReport: function (callback) {
            var views = [{ icon: "trophy", name: 'Incentive Report', url: "/incentive/userreport/" }];
            modal.show({ title: 'Report for Incentive Program', views: views });
        },
        showIncentveUser: function (options) {
            var strParam = "";
            if (options.linktoid != undefined && options.linktoid != null)
                strParam += "&linktoid=" + options.linktoid;
            if (options.linktype != undefined)
                strParam += "&linktype=" + options.linktype;
            if (options.orgviewoption != undefined)
                strParam += "&orgviewoption=" + options.orgviewoption;
            if (options.orggroupviewoption != undefined)
                strParam += "&groupviewoption=" + options.orggroupviewoption;
            var views = [{ icon: "trophy", name: 'Incentive User', url: "/incentive/userdetails?id=" + options.id + "&type=" + options.type + strParam }];
            modal.show({ title: 'Report for Incentive Program', views: views });
        },

        showGoogleCalendarAddOnWizard: function (callback) {
            var calendarsList = { name: 'Calendars list', url: "/googlecalendarslist" };
            var syncSettings = { name: 'Sync Settings', url: "/setup/synctime/" + "21" };
            var viewsArr = [calendarsList, syncSettings]
            var _wizdata = { name: 'Add-On Settings', steps: viewsArr};
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },

        showGoogleDriveAddOnWizard: function (callback) {
            var isDrive = true;
            var driveList = { name: 'Google Drive', url: "/googledrivefolders/" + callback };
            var drivePermission = { name: 'Permissions', url: "googledrive/permissions/" + callback };
            var viewsArr = [driveList, drivePermission]
            var _wizdata = { name: 'Add-On Settings', steps: viewsArr };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },

        showGoogleDriveAddOnModal: function (callback) {
            var views = [
                { icon: "database", name: 'Google Drive', url: "/googledrivefolders/" + callback, buttons: ["save"] },
                { icon: "database", name: 'Permissions', url: "googledrive/permissions/" + callback, buttons: ["save"] },
            ];
            modal.show({ title: 'Add-On Settings', views: views });
        },

        showGoogleCalendarSettings: function (id, options, option) {
            $.extend({
                customize: false
            }, options);

            var crmviews = [];
            crmviews.push({ icon: "cog", name: 'Sync Settings', url: "/setup/synctime/" + id, buttons: ["save"] });
            modal.show({ title: 'Add-On Settings', views: crmviews });
        },

        showDynamicsLogin: function (id,from) {
            var views = [{ url: "/setup/dynamics/" + id + "/" + from,buttons:["save"]}];
            modal.show({ title: 'Dynamics CRM Login', views: views});
        },

        showZohoLogin: function (id) {
            var views = [{ url: "/setup/zoho/" + id, buttons: ["save"] }];
            modal.show({ title: 'Zoho CRM Login', views: views });
        },

        showOpportunityReportMapping: function (options) {
            var view = { name: options.name, url: "/setup/opportunityreportmapping/" + options.crmid + "/" + options.projecttypeid,buttons:["save"]};
            modal.show({ title: options.name, views: [view], locked: true, preventClose: true, closeButton: options.closebutton });
        },
        showOpportunityCurrencyMapping: function (options) {
            var view = { name: options.name, url: "/setup/opportunitycurrencymapping/" + options.crmid + "/" + options.projecttypeid, buttons: ["save"] };
            modal.show({ title: options.name, views: [view], locked: true, preventClose: true, closeButton: options.closebutton });
        },
        showOrganizationGoalWidget: function (id) {
            var title = 'Business Planning' + " > " + 'Manage Goals';
            var views = [];
            views.push({ icon: "bullseye", name: 'Manage Goals', url: "/setup/goalwidget/" + id+"?isedit=true", buttons: ["save"] })

            modal.show({ title: title, views: views });
        },
        showCRMwizard: function (id, option) {

            var mapfields = "";
            var viewsArr = [];
            var credentails = { name: 'Credentials', url: "/setup/crms/" + id + "/info" }
          
            if (option.showfieldmapping) {
                if (id == 15 || id == 13)  //addons
                    mapfields = { name: 'Map Fields', url: "/setup/fieldmappingaddons/" + id }
                else if (id == 1 || id == 3 || id == 4 || id == 5 || id == 7 || id == 2 || id == 14 || id == 29 || id == 8 || id == 18 || id == 23 || id == 31 || id== 33 || id== 35|| id== 45|| id == 50|| id == 51|| id == 70)
                    mapfields = { name: 'Map Fields', url: "/setup/fieldmapcrm/" + id }
                else
                    mapfields = { name: 'Map Fields', url: "/setup/fieldmappingcrm/" + id }
            }
            var synctime = "";
            if (id == 1 || id == 3 || id == 4 || id == 5 || id == 7 || id == 2 || id == 14 || id == 29 || id == 8 || id == 18 || id == 23 || id == 31|| id == 50 || id == 33 ||  id == 35||  id == 52|| id == 51|| id == 70)
                synctime = { name: 'Sync Settings', url: "/setup/syncsettings/" + id }
            else if (id != 45)
                synctime = { name: 'Sync Settings', url: "/setup/synctime/" + id }
            
            var _wizdata;

            if (id == 1 || id == 3 || id == 4 || id == 29|| id == 31|| id == 51) {
                if (option.showfieldmapping)
                    viewsArr.push(mapfields);
            }
            else if (id == 24 || id == 54)
                viewsArr.push(credentails);

            else if (id != 13 && id != 45) {
                viewsArr.push(credentails);
                if (option.showfieldmapping)
                    viewsArr.push(mapfields);
            }
            if (id == 45 && option.showfieldmapping) {
                 viewsArr.push(mapfields);
            }
            if (id != 45) {
                viewsArr.push(synctime);
            }
            if (id == 57) {
                viewsArr = [];
                viewsArr.push(credentails);
            }
            if (id == 59) {
                viewsArr = [];
                viewsArr.push(credentails);
                viewsArr.push({ icon: "cog", name: 'Sync Settings', url: "/googledrivefolders/" + id, buttons: ["save"] });
                viewsArr.push({ icon: "user-cog", name: 'Permissions', url: "googledrive/permissions/"+id, buttons: ["save"] });
            }
            if (id == 61) {
                viewsArr = [];
                viewsArr.push(credentails);
                viewsArr.push({ icon: "database", name: 'Sync Settings', url: "/googledrivefolders/" + id, buttons: ["save"] });
            }
            if (id == 70) {
                viewsArr = [];
                viewsArr.push(synctime);
                viewsArr.push(mapfields);
            }
            if (id == 13 || id == 15 || id == 24 || id == 54 || id == 59 || id == 61){
                _wizdata = {
                    name: 'Add-On Settings',
                    steps: viewsArr
                };
            }
            else {
                _wizdata = {
                    name: 'CRM Settings',
                    steps: viewsArr
                };
            }
            var _wizard = new wizard(_wizdata);
            _wizard.show();

        },       
        ShowCRM: function (id, options, option) {
            $.extend({
                customize: false
            }, options);

            var crmviews = [];
            if (id != 1 && id != 3 && id != 13 && id != 21 && id != 29&& id != 31) {
                if (id == 4 && option.isOnPrem)
                {
                    crmviews.push({
                        icon: "edit", name: 'Credentials', url: "/setup/dynamics/" + id + "/" + option.flag, buttons: ["save"] });
                }
                else if(id != 4)
                    crmviews.push({ icon: "edit", name: 'Credentials', url: "/setup/crms/" + id + "/info", buttons: ["save"] });
            }
            if (option.showfieldmapping) {
                if (id == 15 &&( id != 24 ||id != 54))  //addons
                    crmviews.push({ icon: "info-circle", name: 'Map Fields', url: "/setup/fieldmappingaddons/" + id, buttons: ["save"] });
                else if (id == 1 || id == 3 || id == 4 || id == 5 || id == 7 || id == 2 || id == 14 || id == 29 || id == 8 || id == 18 || id == 23 || id == 31 || id == 33 || id == 35|| id == 51)
                    crmviews.push({ icon: "info-circle", name: 'Map Fields', url: "/setup/fieldmapcrm/" + id, buttons: ["save"] });
                else if (id != 13 && id != 24 && id != 54)
                    crmviews.push({ icon: "info-circle", name: 'Map Fields', url: "/setup/fieldmappingcrm/" + id , buttons: ["save"]});
            }
            if (id == 1 || id == 3 || id == 4 || id == 5 || id == 7 || id == 2 || id == 14 || id == 29 || id == 8 || id == 18 || id == 23 || id == 31 || id== 33|| id == 35|| id == 51)
                crmviews.push({ icon: "cog", name: 'Sync Settings', url: "/setup/syncsettings/" + id, buttons: ["save"] });
            else if (id == 57) {
                crmviews = [];
                crmviews.push({ icon: "edit", name: 'Credentials', url: "/setup/crms/" + id + "/info", buttons: ["save"] });
            }
            if (id == 59) {
                crmviews = [];
                crmviews.push({ icon: "cog", name: 'Sync Settings', url: "/googledrivefolders/" + id, buttons: ["save"] });
                crmviews.push({ icon: "user-cog", name: 'Permissions', url: "googledrive/permissions/"+id, buttons: ["save"] });
            }
            if (id == 61) {
                crmviews = [];
                crmviews.push({ icon: "database", name: 'Sync Settings', url: "/googledrivefolders/" + id, buttons: ["save"] });
            }
            else if (id != 14 && id != 59)
                crmviews.push({ icon: "cog", name: 'Sync Settings', url: "/setup/synctime/" + id , buttons: ["save"]});
            if (id == 70) {
                crmviews = [];
                crmviews.push({ icon: "cog", name: 'Sync Settings', url: "/setup/syncsettings/" + id, buttons: ["save"] });
                crmviews.push({ icon: "info-circle", name: 'Map Fields', url: "/setup/fieldmapcrm/" + id, buttons: ["save"] });
            }
            if (id == 21 || id == 23 || id == 24 || id == 13 || id == 54 || id == 59 || id == 61) {
                modal.show({ title: 'Add-On Settings (<b><i>' + option.name + ' - ' + option.username + '</i></b>)', views: crmviews });
            }
            else {
                modal.show({ title: 'CRM Settings (<b><i>' + option.name + ' - ' + option.username + '</i></b>)', views: crmviews });
            }

        },
        showSfdcCRMwizard: function (id, option) {

            var mapfields = "";
            var viewsArr = [];
            var credentails = { name: "Credentials", url: "/setup/crms/" + id + "/info" }

            if (id == 5 || id == 7 || id == 5 || id == 2 || id == 32|| id == 50|| id == 52 || id == 14) {
                viewsArr.push(credentails);
            }  
            var synctime = "";
            if (id == 1 || id == 3 || id == 4 || id == 5 || id == 7 || id == 2 || id == 14 || id == 29 || id == 8 || id == 18 || id == 23 || id == 31|| id == 50 || id == 32 || id == 41 || id == 42|| id == 52 || id == 55|| id == 51|| id == 14|| id == 64)
                synctime = { name: "Sync Settings", url: "/setup/syncsettings/" + id + "?iswizard=true" }
            else
                synctime = { name: "Sync Settings", url: "/setup/synctime/" + id }
            
            if (option.showfieldmapping) {
                mapfields = { name: 'Map Fields', url: "/setup/fieldmapcrm/" + id}
            }
            var _wizdata;
            if (id == 1 || id == 3 || id == 4 || id == 5 || id == 7 || id == 2 || id == 14 || id == 29 || id == 8 || id == 18 || id == 23 || id == 31|| id == 50 || id == 32 || id == 41 || id == 42|| id == 52 || id == 55|| id == 51|| id == 14|| id == 64) {
                    viewsArr.push(synctime);
            }

            if (option.showfieldmapping)
                viewsArr.push(mapfields);
            _wizdata = {
                name: 'CRM Settings',
                steps: viewsArr
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();

        },
        ShowSfdcCRM: function (id, options, option) {
            $.extend({
                customize: false
            }, options);

            var crmviews = [];
            if (id != 1 && id != 3 && id != 13 && id != 21 && id != 29 && id != 5 && id != 31 && id != 41 && id != 42 && id != 45 && id != 55&& id != 51) {
                if (id == 4 && option.isOnPrem) {
                    crmviews.push({
                        icon: "edit", name: "Credentials", url: "/setup/dynamics/" + id + "/" + option.flag, buttons: ["save"]
                    });
                }
                else if (id != 4 && id != 64)
                    crmviews.push({ icon: "edit", name: "Credentials", url: "/setup/crms/" + id + "/info", buttons: ["save"] });
            }
            if (id == 1 || id == 3 || id == 4 || id == 5 || id == 7 || id == 2 || id == 31 ||id == 50 || id == 32 || id == 41 || id == 42|| id == 52 || id == 55|| id == 51)
                crmviews.push({ icon: "cog", name: "Sync Settings", url: "/setup/syncsettings/" + id, buttons: ["save"] });
            else if (id == 64)
                crmviews.push({ icon: "cog", name: 'Sync Settings', url: "/setup/syncsettings/" + id, buttons: ["save"] });
            else if (id != 45)
                crmviews.push({ icon: "cog", name: 'Sync Settings', url: "/setup/synctime/" + id, buttons: ["save"] });

            if (option.showfieldmapping) {
                if (id == 1 || id == 3 || id == 4 || id == 5 || id == 7 || id == 2 || id == 31 || id == 32 || id == 42|| id == 45 || id == 50|| id == 52|| id == 51)
                    crmviews.push({ icon: "info-circle", name: "Map Fields", url: "/setup/fieldmapcrm/" + id, buttons: ["save"] });
                else if (id != 13 && id != 24)
                    crmviews.push({ icon: "info-circle", name: 'Map Fields', url: "/setup/fieldmappingcrm/" + id, buttons: ["save"] });
            }
            if (id == 5) {
                crmviews.push({ icon: "edit", name: "Credentials", url: "/setup/crms/" + id + "/info", buttons: ["save"] });
            }
            if ((id == 1) && option['customobject']) {
                crmviews.push({ icon: "info-circle", name: "Custom Tab Settings", url: "/setup/custommapping", buttons: ["save"] });
                crmviews.push({ icon: "cog", name: "Custom Sync Settings", url: "/setup/customsyncsettings", buttons: ["save"] });
                crmviews.push({ icon: "info-circle", name: "Custom Map Fields", url: "/setup/customfieldmapping", buttons: ["save"] });
            }
            if (id == 21 || id == 23 || id == 24 || id == 13 || id == 55 || id == 64) {
                modal.show({ title: 'Add-On Settings (<b><i>' + option.name + " - " + option.username + "</i></b>)", views: crmviews });
            }
            else {
                modal.show({ title: 'CRM Settings (<b><i>' + option.name + " - " + option.username + "</i></b>)", views: crmviews });
            }

        },
        showCompanyList: function (id, options) {
            var views = [{ icon: "image", name: 'Preview', url: "/setup/companysmartlists/" + id + "/preview?showanonymous=" + options.showanonymous + "&distributionID=" + options.distributionid, iconprefix: "far", buttons: ["save"] }];
            modal.show({ title: 'Company List (<b><i>' + options.name + '</i></b>)', views: views });
        },
        showDripCampaign: function (options) {
            var timingandactionUrl = `/manage/campaigns/drip/timingandaction/${options.id}`;
            if (options.isplaybook) {
                timingandactionUrl += `?isplaybook=${options.isplaybook}`;
            }
            var views = [
                { icon: "clock", name: 'Timing & Action', url: timingandactionUrl },
                { icon: "user", name: options.contactsandlists, url: `/manage/campaigns/drip/${options.id}/contacts`},
                { icon: "pen-square", name: 'Quick Editor', url: "/manage/campaigns/drip/" + options.id + "/editor?isquickview=1", buttonaction: true },
            ];

            if (!options["hideflowchart"]) {
                views.push({ icon: "edit", name: 'Flow Chart Editor', url: `/manage/campaigns/drip/${options.id}/editor?isquickview=0` });
            }

            views.push(
                { icon: "info-circle", name: options.info, url: "/manage/campaigns/drip/" + options.id + "/info" + "/" + getTimeStamp(), buttons: ["save"] },
                { icon: "chart-bar", name: options.report, url: "/drip/breakdown/" + options.id, iconprefix: "far" }
            );


            var title = options.title;
            if (options.name != null || options.name != undefined)
                title = options.title + ' > ' + "" + views[0].name + "" + ' (<b><i>' + options.name + '</i></b>)';
            modal.show({ title: title, views: views, preventClose: true, locked: true, isDripEditor: true, isEditor: true });
        },

        showDripCampaignPreview: function (options) {

            var views = [
                { icon: "pen-square", name: 'Quick Editor', url: "/manage/campaigns/drip/" + options.id + "/editor?isquickview=1&ispreview=1" }
            ];

            var title = options.title;
            if (options.name != null || options.name != undefined)
                title = options.title + ' (<b><i>' + options.name + '</i></b>)';
            modal.show({ title: title, views: views });
        },

        showEnrolledCourse: function (options) {

            var views = [
                { icon: "pen-square", name: options.title, url: "/setup/learning/"+ options.id }
            ];

            var title = options.title;
            if (options.name != null || options.name != undefined)
                title = options.title + ' (<b><i>' + options.name + '</i></b>)';
            modal.show({ title: title, views: views });
        },
        showDripScheduleCampaign: function (options) {
            var title = options.title;
            var timingandactionUrl = `/manage/campaigns/drip/timingandaction/${options.id}`;
            if (options.isplaybook) {
                timingandactionUrl += `?isplaybook=${options.isplaybook}`;
            }
            var views = [		
                  { icon: "clock", name: 'Timing & Action', url: timingandactionUrl },
                  { icon: "user", name: options.contactsandlists, url: `/manage/campaigns/drip/${options.id}/contacts`},
                  { icon: "pen-square", name: 'Quick Editor', url: `/manage/campaigns/drip/${options.id}/editor?isquickview=1`, buttonaction: true },
            ];

            if (!options["hideflowchart"]) {
                views.push({ icon: "edit", name: 'Flow Chart Editor', url: "/manage/campaigns/drip/" + options.id + "/editor?isquickview=0" });
            }

            views.push(
                { icon: "info-circle", name: options.info, url: "/manage/campaigns/drip/" + options.id + "/info" + "/" + getTimeStamp(), buttons: ["save"] },
                { icon: "chart-bar", name: options.report, url: "/drip/breakdown/" + options.id, iconprefix: "far" }
            );

            if (options.name != null || options.name != undefined)
                title = options.title + ' > ' + views[0].name+''+' (<b><i>' + options.name + '</i></b>)';
            else
                title = options.title + ' > ' + views[0].name + '';
            modal.show({ title: title, views: views, preventClose: true, isDripEditor: true, isEditor: true, locked: true });
        },
        showSystemEventModal: function (programTemplateID)
        {
            var views = [{ icon: "image", name: 'Media', url: "/manage/drip/editor/system?programid=" + programTemplateID, buttons: ["submit"], iconprefix: "far" }];
            modal.show({ title: 'System Event', views: views });
        },
        showDripWizard: function (data) {
            var _wizdata = {
                name: data.name,
                steps: [
                    { name: data.infotitle, url: `/manage/campaigns/drip/${data.id}/info` },
                    { name: data.editortitle, url: `/manage/campaigns/drip/${data.id}/editor?isquickview=1` },
                    { name: data.title, url: `/manage/campaigns/drip/${data.id}/contacts` },
                ]
            };
            
            var timingandactionUrl = `/manage/campaigns/drip/timingandaction/${data.id}?issetup=1`;
            if (data.isplaybook) {
                timingandactionUrl += `&isplaybook=${data.isplaybook}`;
            }
            _wizdata.steps.push({ name: 'Timing & Action', url: timingandactionUrl });
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showScheduledrip: function (id, callback) {
            var views = [
                { icon: "clock", name: "schedule", url: "/manage/campaigns/drip/" + id + "/schedule", buttons: ["schedule"], iconprefix: "far" },
            ];
            modal.show({ title: 'Schedule Drip', views: views});
        },
        showScheduledripForPlaybook: function (options) {
            var views = [
                { icon: "clock", name: "schedule", url: `/manage/campaigns/drip/${options.id}/schedule?isplaybook=true`, buttons: ["schedule"], iconprefix: "far" },
            ];
            modal.show({ title: 'Schedule Drip', views: views });
        },
        showDripTemplate: function (options) {
            var name = options.name;
            var title = options.title;

            $.extend({
                showpermission: false
            }, options);
            var views = [
                { icon: "edit", name: 'Editor', url: "/setup/drip/editor/" + options.id },
                { icon: "info-circle", name: 'Info', url: "/setup/drip/info/" + options.id + "/" + getTimeStamp(),buttons:["save"] }
                //{ icon: "cog", name: "Permissions", url: "/setup/sharing/permissions/" + id + "/" + 300 + "/null" } //{share:true} TYPE_DRIP_TEMPLATES = 300
                //{ icon:"user", name: "Contacts", url: "https://partner-marketing.bitdefender.com/manage/campaigns/drip/" + data.id + "/contacts"},
            ];
            if (options.showpermission)
                views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + options.id + "/" + 300 + "/null", buttons: ["save"] });//{share:true} TYPE_DRIP_TEMPLATES = 300
            if (name != null || name != undefined)
                title = options.title + ' > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            else
                title = options.title + ' > ' + views[0].name + '';
            modal.show({ title: title, views: views });
        },
        showDripTemplateWizard: function (id) {
            var _wizdata = {
                name: 'Create Drip',
                steps: [
                    { name: 'Info', url: `/setup/drip/info/${ id }` },
                    { name: 'Editor', url: `/setup/drip/editor/${ id }` },
                    { name: 'Sharing', url: `/setup/sharing/permissions/${ id }` + "/" + 300 + "/null" },
                ],
            };

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showSocialDripTemplate: function (callback, data) {
            $.extend({
                showpermission: false
            }, data);

            var views = [
                    { icon: "edit", name: 'Message', url: "/setup/social/" + data.id + "/template"},
                    { icon: "info-circle", name: 'Info', url: "/setup/socialdrip/" + data.id + "/info" + "/" + getTimeStamp(), buttons: ["save"] }
            ];

            if (data.hasoldmapping == false)
                views.push({ icon: "cog", name: 'Settings', url: "/social/settings/" + data.id, buttons: ["save"]});

            if (data.showpermission)
                views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + data.id + "/" + data.sharetype + "/null", buttons: ["save"] });

            modal.show({ title: 'Social Template > '+views[0].name+'', views: views, callback: callback });
        },
        showSocialDripTemplateWizard: function (callback, data) {
            var _wizdata = {
                name: 'Setup Social Drip',
                steps: [
                    { name: 'Info', url: "/setup/socialdrip/" + data.id + "/info" + "/" + getTimeStamp() },
                    { name: 'Settings', url: "/social/settings/" + data.id },
                    { name: 'Data', url: "/setup/social/" + data.id + "/template" },
                    { name: 'Sharing', url: "/setup/sharing/permissions/" + data.id + "/" + data.sharetype + "/null" }

                ],
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showSocialDripPublishingsWizard: function (callback, data) {
            var _wizdata = {
                name: 'Setup Social Drip',
                steps: [
                    { name: 'Info', url: "/manage/campaigns/socialdrip/info/" + data.id + "/" + getTimeStamp() }
                ],
            };
            if (data.hasoldmapping == false) {
                _wizdata.steps.push({ name: 'Select Social Sites', url: "/social/settings/" + data.id });
            }
            _wizdata.steps.push({ name: 'Messages And Timing', url: "/manage/campaigns/socialdrip/edit/" + data.id + "/publishings/" + data.creating });
            if (data.enablesocialdirector) {
                _wizdata.steps.push({ name: 'Social Director', url: "/manage/campaigns/socialdrip/socialdirector/" + data.id + "/false" });
                //_wizdata.steps.push({ name: "Summary", url: "/manage/campaigns/socialdrip/summary/" + data.id });
            }
            
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showScheduleSocialDrip: function (data, callback) {
            views = [{ icon: "edit", name: 'Data', url: "/setup/socialdrip/" + data.id + "/schedule", buttons: ["schedule"] }];
            modal.show({ title: 'Schedule Drip', views: views, callback: callback });
        },
        showSocialDripMessagesPreview: function (options) {            
            var url = "/social/messagespreview/" + options.id;
            if (typeof options.playbookid != "undefined") {//#40976 - social drip preview issue when Non contact playbook is added to Linear playbook
                url += "?playbookid=" + options.playbookid;
                if (typeof options.linearplaybookid != "undefined")
                    url += "&linearplaybookid=" + options.linearplaybookid;
            }
            views = [{ icon: "edit", name: options.name, url: url }];
            modal.show({ title: options.title + " > " + options.name, views: views });
        },
        showSocialDripCompletedUsers: function (options) {
            var urlParam = "";
            if (options.intereststatus != undefined)
                urlParam += urlParam != "" ? "&intereststatus=" + encodeURIComponent(options.intereststatus) : "?intereststatus=" + encodeURIComponent(options.intereststatus);
            if (options.date_range_index_activity != undefined)
                urlParam += urlParam != "" ? "&date_range_index_activity=" + encodeURIComponent(options.date_range_index_activity) : "?date_range_index_activity=" + encodeURIComponent(options.date_range_index_activity);
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + encodeURIComponent(options.startdate) : "?startdate=" + encodeURIComponent(options.startdate);
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
            if (options.linktoId != null)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoId : "?linktoid=" + options.linktoId;
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.grouptype != null)
                urlParam += urlParam != "" ? "&grouptype=" + options.grouptype : "?grouptype=" + options.grouptype;
            if (options.usergroupviewoption != null)
                urlParam += urlParam != "" ? "&usergroupviewoption=" + options.usergroupviewoption : "?usergroupviewoption=" + options.usergroupviewoption;
            if (options.usergroupid != null)
                urlParam += urlParam != "" ? "&usergroupid=" + options.usergroupid : "?usergroupid=" + options.usergroupid;
            if (options.id != null)
                urlParam += urlParam != "" ? "&templateid=" + options.id : "?templateid=" + options.id; 
            if (options.processedon != null)
                urlParam += urlParam != "" ? "&processedon=" + options.processedon : "?processedon=" + options.processedon;
            if (options.name != null)
                urlParam += urlParam != "" ? "&name=" + encodeURIComponent(options.name) : "?name=" + encodeURIComponent(options.name);

            var views = [
                { icon: "", name: options.title, url: "/widgets/socialdripcompletedusers" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showSocialDrip: function (callback, data) {
            views = [
                { icon: "edit", name: 'Messages And Timing', url: "/setup/social/" + data.id + "/publishings"},
                    { icon: "info-circle", name: 'Info', url: "/setup/socialdrip/" + data.id + "/info" + "/" + getTimeStamp() ,buttons:["save"]},
            ];
            if (data.hasoldmapping == false) {
                views.push({ icon: "cog", name: 'Select Social Sites', url: "/social/settings/" + data.id, buttons:["save","cancel"] });
            }
            if (data.enablesocialdirector)
            {
                views.push({ icon: "fa-lg fa-users", name: 'Social Director', url: "/manage/campaigns/socialdrip/socialdirector/" + data.id + "/true", buttons: ["save"] });
                if(data.childcount > 0)
                    views.push({ icon: "chart-bar", name: 'Social Report', url: "/manage/campaigns/socialdrip/report/" + data.id, iconprefix: "far" });
            }
            //modal.show({ title: "Social Drip" + " <span class='label' id='status' onClick='toggleDrip(this)' style='cursor:pointer;font-size:11px;'> </span>" + " <span class='label label-warning' onClick='restartDrip()' style='cursor:pointer;font-size:11px;'> <i class='fa fa-play-circle'></i> restart </span>", views: views, buttons: "[Save]", callback: callback });
            var name = data.name;
            if (name != null && name != undefined)
                name = " (<b><i>" + data.name + "</i></b>)";
            else
                name = "";
            modal.show({ title: 'Social Drip > Messages And Timing' + name, views: views, callback: callback });
        },
        showSocialDripForPlaybook: function (closeCallback, data) {
            views = [
                { icon: "edit", name: 'Messages And Timing', url: `/setup/social/${data.id}/publishings` },
                { icon: "info-circle", name: 'Info', url: `/setup/socialdrip/${data.id}/info/${getTimeStamp()}`, buttons: ["save"] },
            ];
            if (data.hasoldmapping == false) {
                views.push({ icon: "cog", name: 'Select Social Sites', url: `/social/settings/${data.id}`, buttons: ["save", "cancel"] });
            }
            if (data.enablesocialdirector) {
                views.push({ icon: "fa-lg fa-users", name: 'Social Director', url: `/manage/campaigns/socialdrip/socialdirector/${data.id}/true`, buttons: ["save"] });
                if (data.childcount > 0)
                    views.push({ icon: "chart-bar", name: 'Social Report', url: `/manage/campaigns/socialdrip/report/${data.id}`, iconprefix: "far" });
            }
            var name = data.name;
            if (name != null && name != undefined)
                name = " (<b><i>" + data.name + "</i></b>)";
            else
                name = "";
            modal.show({ title: 'Social Drip > Messages And Timing' + name, views: views, closeCallback: closeCallback });
        },
        showSocialDripIndividualReport: function (data, options) {
            views = [{ icon: "edit", name: options.data, url: "/report/socialdrip/" + data.id }];
            modal.show({ title: options.title, views: views});
        },
        showSocialDripPostWiseReport: function (options, data, isDripReport = false) { 
            var id = data.originalpublishingid != null ? data.originalpublishingid : data.id ;
            views = [{
                icon: "chart-bar", name: 'Social Report', url: `/manage/campaigns/socialdrip/report/${id}?isdripreport=${isDripReport}&totallikes=${data.totallikes}&totalcomments=${data.totalcomments}&totalshares=${data.totalshares}&linkToId=${options.linkToId}&viewOption=${options.viewOption}&linkType=${options.linkType}&orgViewOption=${options.orgViewOption}&groupViewOption=${options.groupViewOption}&userGroupId=${options.userGroupId}&userGroupViewOption=${options.userGroupViewOption}&groupType=${options.groupType}&selectedRange=${options.selectedRange}&startDate=${encodeURIComponent(options.startDate)}&endDate=${encodeURIComponent(options.endDate)}&isReportUserFlag=${options.isReportUserFlag}`, iconprefix: "far"
            }];
            modal.show({ title: options.title, views: views });
        },
        showSummarySocialDrip: function (id) {
            views = [
                { icon: "edit", name: 'Summary', url: "/manage/campaigns/socialdrip/summary/" + id }
                    
            ];
            modal.show({ title: 'Social Summarization', views: views });
        },
        showDataForSocialDrip: function (id) {
            views = [
                    { icon: "edit", name: 'Data', url: "/setup/social/" + id + "/publishings" },
                    
            ];
            modal.show({ title: 'Social Summarization', views: views });
        },
        showSocialUsersBySocialSites: function (id, type, flag) {
            views = [
                { icon: "users", name: 'Social Users', url: "/manage/campaigns/socialdrip/socialusers/" + id + "/" + type + "/" + flag }

            ];
            modal.show({ title: 'Social Users', views: views });
        },
        editSocialListening: function (data) {
            var views = [
                { icon: "edit", name: 'Data', url: "/manage/campaigns/sociallistening/" + data.id + "/edit",buttons:["save"] },
                { icon: "image", name: 'Info', url: "/manage/campaigns/sociallistening/" + data.id + "/info" + "/" + getTimeStamp(), buttons: ["save"], iconprefix: "far" }];
            var title = '{$ajax_sociallistening.Header} > ' + views[0].name + "" + ' <span id = "togglelistening" class="label" onClick="toggleDrip(this)" style="cursor:pointer;font-size:11px;"> </span>' + ' <span class="label label-warning" onClick="restartDriplistening()" style="cursor:pointer;font-size:11px;"> <i class="fa fa-play-circle"></i> restart </span>';
            modal.show({ title: title, views: views });
        },
        createsocialTemplate: function (callback, data) {
            var views = [{ icon: "image", name: 'Media', url: "/setup/socialtemplate/create/" + data.isspecific, buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: data.name, views: views, callback: callback });
        },
        createsocialTemplate2: function (callback, data) {
            var views = [{ icon: "image", name: 'Media', url: "/setup/socialtemplate/message/create/" + data.id + "/" + data.isspecific + "/" + (data.isrichtext ? "1" : "0"), buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: data.name, views: views, callback: callback });
        },
        addPublishingMessage: function (data, callback) {
            var views = [{ icon: "image", name: 'Media', url: "/setup/socialtemplate/message/create/" + data.publishingid + "/" + data.isspecific, buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: data.name, views: views, callback: callback });
        },
        editsocialTemplate: function (callback, data) {
            var views = [{ icon: "image", name: 'Media', url: "/setup/socialtemplate/edit/" + data.id + "/" + data.isspecific, buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: data.name, views: views, callback: callback });
        },
        editsocialTemplate2: function (callback, data) {
            var views = [{ icon: "image", name: 'Media', url: "/setup/socialtemplate/message/edit/" + data.id + "/" + data.isspecific + "/" + (data.isrichtext ? "1" : "0"), buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: data.name, views: views, callback: callback });
        },
        editPublishingMessage: function (data, callback) {
            var views = [{ icon: "image", name: 'Media', url: "/setup/socialtemplate/message/edit/" + data.publishingid + "/" + data.messageid + "?isrestricteddrip=" + data.isrestricteddrip, ...(!data.isrestricteddrip || data.istemplate ? { buttons: ["save"], iconprefix: "far" } : {}) }];
            modal.show({ title: data.name, views: views, callback: callback });
        },

        showAssociatedRoles: function (options) {
            var views = [];
            var title = "";
            views.push({
                icon: "eye", name: 'Associated Roles', url: "/widgets/custom/rolesassociatedpersona?persona=" + options.persona + "&personaName=" + options.personaName + "&personaOption=" + options.personaOption
});
            title = views[0].name;
            modal.show({ title: title, views: views });
        },  


        showCompany: function (id, options) {
            $.extend({
                showpermission: false,
                allcompanies: true,
                canviewrole: false,
                companyName: ""
            }, options);
            var _title = 'Company';
            
            if (id != null) {
                var views = [{ icon: "edit", name: 'Info', url: "/setup/company/" + id + "/" + getTimeStamp(), buttons: ["save"] }];
                if (options.showpermission)//will do it in next change
                    views.push({ icon: "user-secret", name: 'Roles', url: "/setup/company/role/" + id + "/" + getTimeStamp() });

                if (!options.allcompanies) {
                    if (options.showpermission)
                        views.push({ icon: "user", name: 'Permissions', url: "/setup/sharing/permissions/" + id + "/" + 500, buttons: ["save"]});

                    views.push({ icon: "tachometer-alt", name: 'Manage Portal', url: "/setup/portal/company/" + id, buttons: ["save"]});
                }
                if (options.companyName != "")
                    _title = 'Company > ' + views[0].name + ' (<b><i>' + options.companyName + '</i></b>)';
            }
            else {
                var views = [{ icon: "edit", name: 'Info', url: "/setup/company/create/" + getTimeStamp() ,buttons:["save"]}];
                _title = 'Create Company';
            }

            modal.show({ title: _title, views: views });
        },
        showOrganizationUsers: function (userid, option) {
            if (option.isOrgCertificationUser == undefined) {
                option.isOrgCertificationUser = null;
            }
            if (option.isorganizationgrid == undefined) {
                option.isorganizationgrid = false;
            }
            
            $.extend({
                islocked: false
            }, option)
            var isOrgGrid = false;
            if (option.isorggrid != undefined && option.isorggrid)
                isOrgGrid = true;
            var views = [];
            var title = option.name;
            if (option.organizationname != undefined) {
                title = 'Organization > ' + option.name + ' (<b><i>' + option.organizationname + '</i></b>)'
            }
            if ((userid <= 0) && (option.orgid <= 0 || typeof (option.orgid) == "undefined")) 
                views.push({ icon: "user", name: option.name, url: "/setup/users?organizationgroupID=" + option.groupid + "&canCreateUser=" + option.cancreate + "&isorganizationgrid=" + option.isorganizationgrid  });

            else if ((option.groupid <= 0))
                views.push({
                    icon: "user", name: option.name, url: "/setup/dashboarduserslist?isReport=false&isPartnerEngagement=true&isOrgReport=true&organizationid=" + option.orgid});
                else
                views.push({ icon: "user", name: option.name, url: "/setup/users?organizationid=" + option.orgid + "&canCreateUser=" + option.cancreate + "&isorganizationgrid=" + option.isorganizationgrid});

            modal.show({ title: title, views: views, locked: option.islocked });
        },
        showGroupUsers: function (option) {
            var views = [];
            var title = option.name;
            if (option.usergroupname != undefined) {
                title = 'User Group > ' + option.name + ' (<b><i>' + option.usergroupname + '</i></b>)'
            }

            views.push({ icon: "user", name: option.name, url: "/setup/users?usergroupid=" + option.usergroupid +"&isorganizationgrid=true"  });
        
            modal.show({ title: title, views: views });
        },
        showRegisteredLeads: function (orgid) {
            var views = [{ icon: "user", name: 'Deal Requests', url: "/setup/leads/leadrequests?organizationid=" + orgid }];

            modal.show({ title: 'Deal Requests', views: views });
        },
        showRegisteredLeadsForUser: function (userid,isRegisterReport) {
            var views = [{ icon: "user", name: 'Deal Requests', url: "/setup/leads/leadrequests?userid=" + userid + "&isregisterreport="+ isRegisterReport }];

            modal.show({ title: 'Deal Requests', views: views });
        },
        showRegisteredLeadsForUserGrid: function (userid) {
            var views = [{ icon: "user", name: 'Deal Requests', url: "/setup/leads/leadrequests?reportuserid=" + userid }];

            modal.show({ title: 'Deal Requests', views: views });
        },
        showRegisteredLeadsForOrganization: function (options) {
            var urlParam = "";
            if (options.isdashboard != undefined)
                urlParam += "&isdashboard=" + options.isdashboard;
            var views = [{ icon: "user", name: 'Deal Requests', url: "/setup/leads/leadrequests?organizationid=" + options.orgid + "&format=" + options.format + "&indexdiff=" + options.indexdiff + urlParam }];

            modal.show({ title: 'Deal Requests', views: views });
        },
        showEvents: function (options) {
            var views = [{ name: options.name, url: "/manage/calendar/eventscalendar?isquickllink=" + options.isquickllink }];
            modal.show({ title: options.name, views: views });
        },
        createEvents: function (options) {
            var isWidget = options.isWidget != undefined ? options.isWidget : false;
            var _wizdata = {
                name: options.title,
                steps: [
                    { icon: "user", name: options.info, url: "/manage/calendar/editevents/" + options.eventid, buttons: ["save"] },
                    isWidget==true?
                        { icon: "share-alt", name: options.sharing, url: "/setup/sharing/permissions/" + options.eventid + "/" + options.sharetype + "/null" + "?isedit=" + options.isedit + "&requestid=" + options.requestid + "&isversionV5=" + options.isVersion5 +"&isWidget=" +options.isWidget, buttons: ["save"] }:
                      { icon: "share-alt", name: options.sharing, url: "/setup/sharing/permissions/" + options.eventid + "/" + options.sharetype + "/null", buttons: ["save"] }

                    ],
                };
                var _wizard = new wizard(_wizdata);
                _wizard.show();
        },
        createEventSetting: function (options) {
            var views = [{ id: options.UserID, name: options.title, url: "/manage/calendar/settingevents/" + options.UserID, buttons: ["save"]}];
            modal.show({ title: options.title, views: views});
        },
        viewEventsList: function (options) {
            var views = [];
            var title = "";
            views.push({ icon: "eye", name: 'View Event', url: "/calendarevent/view/" + options.eventid});
            title = views[0].name + ' (<b><i>' + options.name + '</b></i>)';
            modal.show({ title: title, views: views });
        },      
        editEvents: function (options) {
            var isWidget = options.isWidget != undefined ? options.isWidget : false;
            var views = [];
            var title = "";
            if (options.isedit) {
                views.push({ icon: "eye", name: 'View Event', url: "/calendarevent/view/" + options.eventid });
                if (isWidget){
                    views.push({ icon: "user", name: 'Edit Event', url: "/manage/calendar/editevents/" + options.eventid + "?isedit=" + options.isedit + "&requestid=" + options.requestid + "&isversionV5=" + options.isVersion5, buttons: ["save"] });
                }
                else{
                    views.push({ icon: "user", name: 'Edit Event', url: "/manage/calendar/editevents/" + options.eventid + "?isedit=" + options.isedit, buttons: ["save"] });

                }
              
                if (options.hassharingpermission) {
                    views.push({ icon: "share-alt", name: options.sharing, url: "/setup/sharing/permissions/" + options.eventid + "/" + options.sharetype + "/null", buttons: ["save"] });
                }
                title = 'Event > ' + views[0].name + ' (<b><i>' + options.name + '</b></i>)';
            }
            else {
                views.push({ icon: "eye", name: 'View Event', url: "/calendarevent/view/" + options.eventid });
                title = views[0].name + ' (<b><i>' + options.name + '</b></i>)';
            }
            
            modal.show({ title: title, views: views });
        },
        showSocialOrganization: function (organizationid, publishingid) {
            var views = [{ icon: "users", name: 'Users', url: "/manage/campaigns/socialdrip/orgusers/" + organizationid + "/" + publishingid, buttons: ["save"] }
                         ];

            modal.show({ title: 'Organization', views: views });
        },
        showOrganizationUsersForOrgGrid: function (id, options) {
            var views = [];
            var title = options.title;
            views.push({ icon: "user-alt", name: 'Users', url: "/setup/organization/users/" + id + "?isorgusergrid=true" });
            if (options.name != null && options.name != undefined)
                title = options.title + " > " + views[0].name + " (<b><i>" + options.name + "</i></b>)";
            else
                title = options.title + " > " + views[0].name + "";
            modal.show({ title: title, views: views, locked: true, show: true });
        },


        showUserForDealAssignmentGrid: function (contactid, options) {
            var views = [];
            var title = options.title;
            views.push({ icon: "user-alt", name: 'Users', url: "/setup/organization/assignment/" + contactid + "?isorgusergrid=true&maptypeid=" + options.mappingtype + "&projecttypeid=" + 0 });
            title = options.title + " (<b><i>" + options.name + "</i></b>) to User";
            
            modal.show({ title: title, views: views, locked: true, show: true });
        },
        showUserForOpportunityAssignmentGrid: function (projectid, projecttypeid, options) {
            var views = [];
            var title = options.title;
            views.push({ icon: "user-alt", name: 'Users', url: "/setup/organization/assignment/" + projectid + "?isorgusergrid=true&maptypeid=" + options.mappingtype + "&projecttypeid=" + projecttypeid });
            title = options.title + " (<b><i>" + options.name + "</i></b>) to User";

            modal.show({ title: title, views: views, locked: true, show: true });
        },

        showOrganization: function (id, options) {
            var views = [];
            var documents;
            var title = options.title;
            if (options.isShowFundReport == null)
                options.isShowFundReport = false;
            var fundreport = { icon: "chart-bar", name: options.fundreporttitle, url: "/mdf/fundreport?orgid=" + options.orgid + "&fundstatusval=" + options.fundstatusval + "&selectedrange=" + options.selectedrange + "&basedon=" + options.basedon, iconprefix: "far" };
            var report = { icon: "chart-bar", name: options.reports, url: "/setup/organization/stats/" + id, iconprefix: "far" };
            var user = { icon: "user-alt", name: 'Add/Remove Users', url: "/setup/organization/users/" + id };
            var info = { icon: "info-circle", name: options.info, url: "/setup/organization/info/" + id + "/" + getTimeStamp() + "?isorgedit=" + options.isorgedit, buttons: ["save"] };
            var filter = { icon: "filter", name: options.filters, url: "/setup/organization/filters/" + id + "/" + getTimeStamp(), buttons: ["save"] };
            if (options.isSiteOrSuperAdmin)
                var roles = { icon: "user-secret", name: options.roles, url: "/setup/organization/role/" + id};

            if (typeof (options.documents) != "undefined")
                documents = { icon: "file", name: 'Document Gallery', url: "/setup/organization/document/" + id, iconprefix: "far" };
            else
                documents = { icon: "file", name: 'Document Gallery', url: "/setup/organization/document/" + id, iconprefix: "far" };
            var score = { icon: "archive", name: 'Score Card', url: "/orgscorecard/" + id };
            var database = { icon: "database", name: 'Database', url: "/connections/contacts/asset/" + id + "?isorganization=" + true};
            //var incentives = { icon: "money-bill-alt", name: "Fund Intensive Earned", url: "/setup/organization/fundincentive/" + id, buttons: ["save"] };
            var image = { icon: "image", name: 'Image Gallery', url: "/setup/organization/gallery/image/" + id + "?at=0" };
            if (typeof (options.issetup) == "undefined")
                options.issetup = false;
            var overview = { icon: "telescope", name: 'Overview', iconprefix: "far", url: "/setup/organization/overview/" + id + "/" + options.issetup };
            var solution = { icon: "project-diagram", name: 'Solutions', iconprefix: "fas", url: "/setup/solution/records?orgid=" + id };
            var video = { icon: "video", name: 'Video Gallery', url: "/setup/organization/gallery/video/" + id + "?issetup=true" };
            var partneradmin = { icon: "user-circle", name: 'Partner Admin(s)', url: "/setup/organization/partneradmin/" + id, iconprefix: "far" };
            if (options.isShowFundReport)
               views.push(fundreport);
            if (options.isdocument) {
                if (!options.isSiteOrSuperAdmin) {
                   
                    views.push(documents);
                    views.push(overview);
                        views.push(report);
                    if (options.canAddOrgainizationUsers) {
                        views.push(user);
                    }
                    views.push(info);
                    if (options.canaddpartneradminusers)
                        views.push(partneradmin);
                    views.push(image);
                    if (options.hasVideoAccess)
                        views.push(video);
                    if (options.hasDatabaseAccess)
                        views.push(database);
                    if (options.hasSolutionsAccess)
                        views.push(solution);
                    }
                else {
                    views.push(documents);
                    views.push(overview);
                   
                        views.push(report);
                    if (options.canAddOrgainizationUsers) {
                        views.push(user);
                    }
                    views.push(info);
                    if (options.canaddpartneradminusers)
                        views.push(partneradmin);
                    views.push(image);
                    if (options.hasVideoAccess)
                        views.push(video);
                    if (options.hasDatabaseAccess)
                        views.push(database);
                    if (options.hasSolutionsAccess)
                        views.push(solution);
                    }
            }
            else if (options.canUserView) {
                if (!options.isSiteOrSuperAdmin) {
                    if (options.canAddOrgainizationUsers) {
                        views.push(user);
                    }
                    views.push(overview);
                    views.push(report);
                    views.push(info);
                    if (options.canaddpartneradminusers)
                        views.push(partneradmin);
                    views.push(image);
                    if (options.hasVideoAccess)
                        views.push(video);
                    views.push(documents);
                    if (options.hasDatabaseAccess)
                        views.push(database);
                    if (options.hasSolutionsAccess)
                        views.push(solution);
                } else {
                    if (options.canAddOrgainizationUsers) {
                        views.push(user);
                    }
                    views.push(overview);
                    views.push(report);
                    views.push(info);
                    if (options.canaddpartneradminusers)
                        views.push(partneradmin);
                    views.push(image);
                    if (options.hasVideoAccess)
                        views.push(video);
                    views.push(documents);
                    if (options.hasDatabaseAccess)
                        views.push(database);
                    if (options.hasSolutionsAccess)
                        views.push(solution);
                    }
            }
            else {
                if (!options.isSiteOrSuperAdmin) {
                    views.push(overview);
                        views.push(report);
                    if (options.canAddOrgainizationUsers) {
                        views.push(user);
                    }
                    views.push(info);
                    if (options.canaddpartneradminusers)
                        views.push(partneradmin);
                    views.push(image);
                    if (options.hasVideoAccess)
                        views.push(video);
                    views.push(documents);
                    if (options.hasDatabaseAccess)
                        views.push(database);
                    if (options.hasSolutionsAccess)
                        views.push(solution);
                    }
                else {
                    views.push(overview);
                        views.push(report);
                    if (options.canAddOrgainizationUsers) {
                            views.push(user);
                        }
                    views.push(info);
                    if (options.canaddpartneradminusers)
                        views.push(partneradmin);
                    views.push(image);
                    if (options.hasVideoAccess)
                        views.push(video);
                    views.push(documents);
                    if (options.hasDatabaseAccess)
                        views.push(database);
                    if (options.hasSolutionsAccess)
                        views.push(solution);
                    }
            }
            //if (options.issiteadmin && options.iscoopenabled)
            //    views.push(incentives);
            if (options.canAddFilter)
                views.push(filter);
            if (options.isSiteOrSuperAdmin) {
                views.push(roles);
            }
            if (options.isOrgScoringEnabled)
            views.push(score);
            if (options.hasgroupaccess) {
                views.push({ icon: "hospital", name: 'Organization Groups', url: "/organization/groups/addremove/" + id, iconprefix: "far" })
            }
            if (isPartnerRegistrationEnabled) {
                views.push({ icon: "compass", name: 'Registration', url: "/setup/organization/registration/" + id + "/" + getTimeStamp(), buttons: ["save"]})
            }
            if (options.organizationgoalenabled != undefined) {
                if (options.organizationgoalenabled == true) {
                    views.push({ icon: "bullseye", name: 'Organization Goals', url: "/setup/organizationgoals/" + id, iconprefix: "far" })
                }
            }
            if (options.name != null && options.name != undefined)
                title = options.title + " > "+views[0].name+" (<b><i>" + options.name + "</i></b>)";
            else
                title = options.title + " > " + views[0].name + "";
            modal.show({ title: title, views: views, locked: true, show: true });
        },
        ShowOrganizationOverview: function (options) {
            var views = [];
            var overview = { icon: "telescope", name: 'Overview', iconprefix: "far", url: "/setup/organization/overview/" + options.id + "/" + options.issetup };
            views.push(overview);
            var title = options.title;
          
            if (options.name != null && options.name != undefined)
                title = views[0].name + " (<b><i>" + options.name + "</i></b>)";
                
            modal.show({ title: title, views: views, locked: true, show: true });
        },
        showOrganizationView: function (id, options) {
            var title = options.title;
            if (options.name != null && options.name != undefined)
                title = options.title + " (<b><i>" + options.name + "</i></b>)";
            var views = [];
            views.push({ icon: "chart-bar", name: options.reports, url: "/setup/organization/stats/" + id, iconprefix: "far" });
            if (options.canSaveEnabled)
                views.push({ icon: "info-circle", name: options.info, url: "/setup/organization/info/" + id + "/" + getTimeStamp(), buttons: ["save"] });
            else
                views.push({ icon: "info-circle", name: options.info, url: "/setup/organization/info/" + id + "/" + getTimeStamp() });

            if (options.isOrgScoringEnabled)
                views.push({ icon: "archive", name: 'Score Card', url: "/orgscorecard/" + id });
            var overview = { icon: "archive", name: 'Overview', url: "/setup/organization/overview/" + id + "/" + options.issetup };
            views.push(overview);
            modal.show({ title: title, views: views });
        },
        showOrganizationWizard: function (id, options) {
            var _wizdata = {
                name: 'Create Organization',
                steps: [
                        { name: 'Info', url: "/setup/organization/info/" + id }
                        
                ],
            };
            if (options.canAddOrgainizationUsers)
                _wizdata.steps.push({ name: 'Add Users', url: "/setup/organization/users/" + id + "?isorgcreate=" + true });

            if (options.isSiteOrSuperAdmin)
                _wizdata.steps.push({ name: 'Roles', url: "/setup/organization/role/" + id });

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        createOrganizationWizard: function (id, options) {
            var _wizdata = {
                name: options.title,
                steps: [
                    { name: options.info, url: "/setup/organization/info/" + id },
                    { name: options.roles, url: "/setup/organization/role/" + id }
                ],
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showOrganizationReport: function (id) {
            var views = [{ icon: "chart-bar", name: 'Report', url: "/setup/organization/stats/" + id, iconprefix: "far" }];
            modal.show({ title: 'Organization Report', views: views });
        },
        showOrganizationPreview: function (options) {
            var title = options.title;
            if (options.name != null && options.name != undefined)
                title = options.title + " (<b><i>" + options.name + "</i></b>)";
            var views = [];
            var overview = { icon: "archive", name: 'Overview', url: "/setup/organization/overview/" + options.id + "/" + options.issetup };
            views.push(overview);
            modal.show({ title: title, views: views });
        },
        showGoalImport: function (options) {
            var views = [{ icon: "database", name: 'Info', url: "/manage/database/import/" + options.assettypeid + "/0", buttons: ["save"] }];
            modal.show({ title: 'Import Record (<b>' + options.assettypename + '</b>)', views: views, gridobj: options._xobniobj });
        },
        showGoalValuesPage: function (options) {
            var views = [
                { icon: "bullseye", name: 'Goal Value', url: "/setup/organizationgoals/" + options.id + "/" + options.orgid + "/goalvalue", buttons: ["save"] },
                { icon: "bar-chart", name: 'Report', url: "/setup/organizationgoals/" + options.id + "/report" }
            ];
            var title = "Organization Goals > " + views[0].name + " (<b><i>" + options.name + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        showGoalEditPage: function (options) {
            var views = [
                { icon: "info-circle", name: 'Info', url: "/setup/organizationgoals/" + options.id + "/info", buttons: ["save"] },
                { icon: "cogs", name: 'Settings', url: "/setup/organizationgoals/" + options.id + "/data?isedit=" + options.isedit, buttons: ["save"] },
                { icon: "key", name: 'Lock/Unlock Period', url: "/setup/organizationgoals/" + options.id + "/lockunlock" }, 
                { icon: "chart-bar", name: 'Report', url: "/setup/organizationgoals/" + options.id + "/report" },
                { icon: "share-alt", name: "Sharing", url: `/setup/organizationgoals/${options.id}/sharing?isupdate=${true}` },
                
            ];
            var title = "Organization Goals > " + views[0].name + " (<b><i>" + options.name + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        showGoalsWizard: function (id, name) {
            var info = { name: 'Info', url: "/setup/organizationgoals/" + id + "/info" }
            var settings = { name: 'Settings', url: "/setup/organizationgoals/" + id + "/data" }
            var sharing = { name: "Assignment", url: "/setup/organizationgoals/" + id + "/sharing" };
            var goalName = "Create " + name;
            var _wizdata = {
                name: goalName,
                steps: [info, settings, sharing]
            };
            _wizdata["preventClose"] = false;
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },

        showTierGoalsWizard: function (id, name) {
            var info = { name: 'Info', url: "/setup/organizationgoals/" + id + "/info" }
            var settings = { name: 'Settings', url: "/setup/organizationgoals/" + id + "/data" ,buttons: ["save"] }            
            var goalName = "Create A " + name;
            var _wizdata = {
                name: goalName,
                steps: [info, settings]
            };
            _wizdata["preventClose"] = false;
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showCreatedTierGoals: function (id, name) { 
            var views = [{ icon: "chart-bar", name: 'Settings', url: "/setup/organizationgoals/" + id + "/data", iconprefix: "far" }];
            modal.show({ title: 'Settings', views: views });
        },

        showPartnerReport: function (id) {
            var views = [{ icon: "chart-bar", name: 'Report', url: "/setup/partner/stats/" + id, iconprefix: "far" }];
            modal.show({ title: 'Sales Team Members Report', views: views });
       
        },
        showUser: function (id, options) {
            $.extend({
                hasOrganizationCreateAccess: false,
                canShowGroup: false,
                isSuperAdmin: false,
                canViewRole: false,
                CanAddOrganization: false,
                isSiteOrSuper : false
            }, options);
            if (id != null) {
                var views = [{ icon: "user", name: options.info, url: "/setup/user/" + id + "/" + getTimeStamp(), buttons: ["save"]}];
                var title = 'Edit User';
                modal.show({ title: title, views: views });
            }
            else {
                var title = options.titleAddUser;
                var _wizdata = {
                    name: options.titleCreateUser,
                    steps: [
                        { icon: "user", name: options.info, url: "/setup/user/" + options.userid.toString() + "/" + getTimeStamp(), buttons: ["save"] },
                    ],
                };
                if (options.CanAddOrganization) {
                    _wizdata.steps.push({ icon: "building", name: options.organization, url: "/setup/organization/addremove/" + options.userid.toString() + "?isusercreate=" + options.isUserCreate + "&iscreateuser=" + options.isCreateUser });
                    if (options.canShowGroup)
                        _wizdata.steps.push({ icon: "users", name: 'User Groups', url: "/setup/user/groups/" + options.userid.toString() + "?isusercreate=" + options.isUserCreate });
                }
                _wizdata.steps.push({ icon: "users", name: 'Summary', url: "/setup/users/activate/" + options.userid });
                var _wizard = new wizard(_wizdata);
                _wizard.show();
            }

        },
        showUserStats: function (id, email, ispartner) {
            var views = [
                { icon: "user", name: 'Info', url: "/setup/user/" + id +"?ispartner="+ispartner, buttons:["save"]},
                { icon: "signal", name: 'Report', url: "/setup/user/stats/" + id + "?ispartner=" + ispartner }
            ];
            var title = 'User' + ' > ' + '' + views[0].name + '' + ' (<b><i>' + email + '</i></b>)';
            modal.show({ title: title, views: views, preventClose:true});
        },
        showOpportunityUserStats: function (id) {
            var views = [
   
                { icon: "signal", name: 'Report', url: "/setup/user/stats/"+id}
            ];
            var title = 'User' + ' > ' + '' + views[0].name;
            modal.show({ title: title, views: views, preventClose: true });
        },
        showUserStatsSales: function (id, email, ispartner) { 
            var views = [                
                { icon: "signal", name: 'Report', url: "/setup/user/stats/" + id + "?ispartner=" + ispartner }, { icon: "user", name: 'Info', url: "/setup/user/" + id + "?ispartner=" + ispartner, buttons: ["save"] },
            ];
            var title = 'User' + ' > ' + '' + views[0].name + '' + ' (<b><i>' + email + '</i></b>)';
            modal.show({ title: title, views: views, preventClose: true });
        },
        showLeadUserStats: function (id, email, ispartner) {
            var views = [
                { icon: "signal", name: 'Report', url: "/setup/user/stats/" + id + "?ispartner=" + ispartner }
            ];
            var title = 'User' + ' > ' + '' + views[0].name + '' + ' (<b><i>' + email + '</i></b>)';
            modal.show({ title: title, views: views, preventClose: true });
        },
        showNavigationLayout: function (item, isDefaultModuleLoaded, isInstallModule, isSelectedModule, isGroup, isDashboardQuickLink, callback) {
            var moduleTitle = "";
            var views = [];
            if (item.key == null) {
                if (isGroup) moduleTitle = 'Create New Group';
                else if (isDashboardQuickLink) moduleTitle = 'Create Dashboard Quick Link';
                else moduleTitle = 'Create Custom Module';
                views.push({ icon: "info-circle", name: "Info", url: `sa/navigationlayout/edit/0?isGroup=${isGroup}&isInstallModule=${isInstallModule}&isSelectedModule=${isSelectedModule}&isDashboardQuickLinkModule=${isDashboardQuickLink}`, buttons: ["save"] });
            }
            else {
                if (isSelectedModule == false) {
                    views.push({ icon: "info-circle", name: 'Info', url: "sa/navigationlayout/edit/" + item.key + "?isGroup=" + isGroup + "&isInstallModule=" + isInstallModule + "&isSelectedModule=" + isSelectedModule, buttons: ["save"] });
                } else {
                    views.push({ icon: "info-circle", name: 'Info', url: "sa/navigationlayout/edit/" + item.key + "?isGroup=" + isGroup + "&isInstallModule=" + isInstallModule + "&isSelectedModule=" + isSelectedModule, buttons: ["save"] });
                    if (!isDefaultModuleLoaded)
                        views.push({ icon: "cogs", name: 'Settings', url: "/sa/navigation/settings/" + item.key, buttons: ["save"] });
                    views.push({ icon: "align-left", name: 'Description', url: "/sa/navigation/details/" + item.key + "?desc=true&isSelectedModule=" + isSelectedModule, buttons: ["save"] });
                    views.push({ icon: "link", name: 'Related Links', url: "/sa/navigation/details/" + item.key + "?desc=false&isSelectedModule=" + isSelectedModule, buttons: ["save"] });
                }
                moduleTitle = (isGroup ? 'Edit Group > ' : 'Edit Module > ') + views[0].name + ' (<b><i>' + unescape(item.name) + '</i></b>)';
            } 
            modal.show({ title: moduleTitle , views: views, callback: callback});
        },
        showDashboardLinkModule: function (item, isInstallModule, isSelectedModule, isGroup, callback) {
            var views = [];
            views.push({ icon: "info-circle", name: 'Info', url: `sa/navigationlayout/edit/${item.key}?isGroup=${isGroup}&isInstallModule=${isInstallModule}&isSelectedModule=${isSelectedModule}&isDashboardQuickLinkModule=true`, buttons: ["save"] });
            views.push({ icon: "cogs", name: 'Settings', url: "/sa/navigation/settings/" + item.key, buttons: ["save"] });
            views.push({ icon: "align-left", name: 'Description', url: "/sa/navigation/details/" + item.key + "?desc=true&isSelectedModule=" + isSelectedModule, buttons: ["save"] });
            var moduleTitle = 'Edit Dashboard Quick Link > ' + views[0].name + ' (<b><i>' + unescape(item.name) + '</i></b>)';
            modal.show({ title: moduleTitle, views: views, callback: callback });
        },
        showDashboardLinkModuleSettings: function (item, isInstallModule, isSelectedModule, isGroup, callback) {
            var views = [];
            views.push({ icon: "cogs", name: 'Settings', url: "/sa/navigation/settings/" + item.key, buttons: ["save"] });
            views.push({ icon: "align-left", name: 'Description', url: "/sa/navigation/details/" + item.key + "?desc=true&isSelectedModule=" + isSelectedModule, buttons: ["save"] });
            views.push({ icon: "info-circle", name: 'Info', url: `sa/navigationlayout/edit/${item.key}?isGroup=${isGroup}&isInstallModule=${isInstallModule}&isSelectedModule=${isSelectedModule}&isDashboardQuickLinkModule=true`, buttons: ["save"] });
            var moduleTitle = 'Edit Dashboard Quick Link > ' + views[0].name + ' (<b><i>' + unescape(item.name) + '</i></b>)';
            modal.show({ title: moduleTitle, views: views, callback: callback });
        },
        showNavigationLayoutModuleSettings: function (item, isInstallModule, isSelectedModule, isGroup, callback) {
            var moduleTitle = "";
            var views = [];
            views.push({ icon: "cogs", name: 'Settings', url: "/sa/navigation/settings/" + item.key, buttons: ["save"] });
            views.push({ icon: "info-circle", name: 'Info', url: "sa/navigationlayout/edit/" + item.key + "?isGroup=" + isGroup + "&isInstallModule=" + isInstallModule + "&isSelectedModule=" + isSelectedModule, buttons: ["save"] });
            views.push({ icon: "align-left", name: 'Description', url: "/sa/navigation/details/" + item.key + "?desc=true&isSelectedModule=" + isSelectedModule, buttons: ["save"] });
            views.push({ icon: "link", name: 'Related Links', url: "/sa/navigation/details/" + item.key + "?desc=false&isSelectedModule=" + isSelectedModule, buttons: ["save"] });
            moduleTitle = (isGroup ? 'Edit Group > ' : 'Edit Module > ') + views[0].name + ' (<b><i>' + unescape(item.name) + '</i></b>)';
            modal.show({ title: moduleTitle, views: views, callback: callback });
        },
        showNavigationLayoutPreview: function (callback) {
            var views = [];
            var moduleTitle = 'Preview Navigation Layout';
            views.push({ icon: "eye", name: "Preview", url: "/setup/navigationlayout/preview" });
            modal.show({ title: moduleTitle, views: views, callback: callback });
        },
        showModuleGroupDetails: function (key) {
            var moduleTitle = "";
            var views = [];
            
            moduleTitle = 'Edit Group (' + unescape(key) + ')';

            views.push({ icon: "cogs", name: 'Description', url: "/sa/navigation/details?modulename=" + escape(key) + "&desc=true&ismodule=false", buttons: ["save"] });
            views.push({ icon: "cogs", name: 'Related Links', url: "/sa/navigation/details?modulename=" + escape(key) + "&desc=false&ismodule=false", buttons: ["save"] });

            modal.show({ title: moduleTitle, views: views });
        },
        showAssetTabPermissionSetting: function (options, callback) {
            var views = [{
                icon: "database", name: 'tab setting',
                url: "/setup/assets/tabsetting?tabname=" + options.tabname + "&assetTabId=" + options.assetTabId + "&ts=" + getTimeStamp(), buttons: ["save"]
            }];
            if (options.v5) 
                modal.show({ title: 'Setting for Folder (' + unescape(options.tabname) + ')', views: views, callback: callback });
            else
               modal.show({ title: 'Setting for Tab (' + unescape(options.tabname) + ')', views: views, callback: callback });
        },
        showCustomWebBanners: function (callback, options) {
            var views = [{ icon: "chart-bar", url: "/sa/navigation/select?moduleid=" + options.moduleId, iconprefix: "far", buttons: ["save"] }];
            modal.show({ title: options.title, views: views, callback: callback });
        },
        showUserStatsReport: function (id, options, ispartner,xobni) {
            $.extend({
                hasOrganizationCreateAccess: false,
                canShowGroup: false,
                isSuperAdmin: false,
                canViewRole: false,
                canSave: false,
                CanAddOrganization: false,
                isSiteAdminTab : false
            }, options);
            var views = [];
            var actions = [];
            if (id > 0) {
                var exportDetails = {};
                exportDetails.linkids = [id];
                exportDetails.gridtype = "";
                exportDetails.ispartner = false;
                exportDetails.name = 'Contact Record';
                exportDetails.linktype = 1;
                if (options.isUserCreate != undefined && options.isUserCreate != null && options.isUserCreate) {
                    if (xobni != undefined) { 
                    exportDetails.dbfields = xobni.settings.fields;
                    var defaultfields = [];
                    var theads = xobni.dom.tablewrap.find("#inbox-table th:not('.inbox-table-icon,.not-to-export')").filter(":visible").filter(function () {
                                if ($(this).text().trim() != "") return this; //check the trimmed TD content - will make it ignore all white space
                            });
                            theads.each(function () {
                                var fieldName = $(this).text();
                                    fieldName = fieldName == 'User' ? 'User Name' : fieldName;
                                if (defaultfields.indexOf(fieldName) == -1)
                                    defaultfields.push(fieldName);
                                if (fieldName == 'User Name') {
                                    if (defaultfields.indexOf(fieldName) != -1) {
                                        exportDetails.dbfields[defaultfields.indexOf(fieldName)] = "name";
                                    }
                                }
                            });
                    if (xobni.settings.removeExportFields !== undefined) {
                                $.each(xobni.settings.removeExportFields, function (i, item) {
                                    if (defaultfields.indexOf(item) != -1)
                                        defaultfields.splice(defaultfields.indexOf(item), 1);
                                });
                            }
                    if (xobni.settings.extraexportfields !== undefined) {
                                $.each(xobni.settings.extraexportfields, function (n, i) {
                                    $.each(this, function (key, value) {
                                        if (defaultfields.indexOf(key) == -1)
                                            defaultfields.splice(value, 0, key);
                                        else {
                                            if (defaultfields.indexOf(key) != value) {
                                                defaultfields.splice(defaultfields.indexOf(key), 1);
                                                defaultfields.splice(value, 0, key);
                                            }
                                        }
                                    });
                                });
                    }
                    exportDetails.linktype = 2;
                    exportDetails.name = 'Setup-User';
                    exportDetails.gridtype = "User";
                    exportDetails.defaultfields = defaultfields;
                    exportDetails.api = xobni.settings.api;
                    exportDetails.apidata = xobni.apidata;
                    exportDetails.ascending = false;
                    }
                }
                var isUserGrid = false;
                if (options.isUserCreate != undefined && options.isUserCreate != null && options.isUserCreate)
                    isUserGrid = true;
                var download = { icon: "download", actionmethod: function () { modal.showExportWizard(exportDetails) }, name: 'Export', }
                var sendEmail = { icon: "envelope", name: 'Send Email', url: "/communicate/newemail/0?linkids=" + id + "&isSmartlist=null&isContactcompany=null&isusergrid="+isUserGrid }
                var addtoplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks?linkids=" + id + "&isSmartlist=null&isContactcompany=null&isusergrid="+isUserGrid  }
                var program = { icon: "sitemap", name: 'Add to Drip', url: "/connections/contacts/programs/" + id + "?isusergrid=" + isUserGrid }

                if (hasContactExportAccess)
                    actions.push(download);

                if (options.programAccess) actions.push(program);
                if (options.canSendEmail) 
                        actions.push(sendEmail);
                if (!isUserGrid) {
                    if (hasIntPlaybookAccessG)
                        actions.push(addtoplaybook);
                }
            }
            if (options.isSiteAdminTab) {
                views.push({ icon: "user", name: 'Info', url: "/setup/user/" + id + "?ispartner=" + ispartner + "&fromsiteadmin=true", buttons: ["save", "cancel"] });
                views.push({ icon: "signal", name: 'Report', url: "/setup/user/stats/" + id + "?ispartner=" + ispartner });
            }
            else {
                views.push({ icon: "signal", name: 'Report', url: "/setup/user/stats/" + id + "?ispartner=" + ispartner });
                if (options.canSave)
                    views.push({ icon: "user", name: 'Info', url: "/setup/user/" + id + "?ispartner=" + ispartner, buttons: ["save", "cancel"] });
                else
                    views.push({ icon: "user", name: 'Info', url: "/setup/user/" + id + "?ispartner=" + ispartner});
            }
            views.push({ icon: "filter", name: 'Filters', url: "/setup/users/filters/" + id });
            if (options.CanAddOrganization)
                views.push({ icon: "building", name: 'Organization', url: "/setup/organization/addremove/" + id + "?isusercreate=" + options.isUserCreate + "&iscallfrommodal=true" });
            if (options.canShowGroup)
                views.push({ icon: "users", name: 'User Groups', url: "/setup/user/groups/" + id + "?isusercreate=" + options.isUserCreate + "&isedituser=" + true });
            if (options.isSiteOrSuper)
                views.push({ icon: "user-secret", name: 'Roles', url: "/setup/user/roles/" + id + "?isusercreate=" + options.isUserCreate });
            if (options.isSiteOrSuper || options.hasuserorganizationcreateacess)
                views.push({ icon: "user-circle", name: 'Channel Manager', url: "/organization/groups/addremove/" + id + "?isusercreate=" + options.isUserCreate, iconprefix: "far" });
            if (options.isSiteOrSuper || options.hasusergroupcreateacess)
                views.push({ icon: "user-circle", name: 'Group Manager', url: "/setup/groupmanager/addremove/" + id});
            if (options.partnercontactid != undefined)
                views.push({ icon: "male", name: 'Offline Activity', url: "/connections/contacts/offline/" + options.partnercontactid + "?isPartnerUser=" + true });
            if (options.isSiteOrSuper)
                views.push({ icon: "user-plus", name: 'Assigned Roles', url: "/setup/user/assignedroles/" + id});
            var title =  'User > ' + views[0].name + '' + ' (<b><i>' + options.email + '</i></b>)';
            modal.show({ title: title, views: views,subactions: actions,  preventClose:true });
        },
        showUserReport: function (id, userEmail, options) {
            var views = [];
            views.push({ icon: "signal", name: 'Report', url: "/setup/user/stats/" + id });
            if (options.skipInfo == false) {
                if (options != null && options.canSave != null && options.canSave != undefined && options.canSave == true)
                    views.push({ icon: "user", name: 'Info', url: "/setup/user/" + id, buttons: ["save"] });
                else
                    views.push({ icon: "user", name: 'Info', url: "/setup/user/" + id });
            }

            var title = ""
            if (userEmail != 'undefined' && userEmail != null)
                title = 'User Report' + ' (<b><i>' + userEmail + '</i></b>)';
            else
                title = 'User Report';

            modal.show({ title: title, views: views });
        },
        showContactReportData: function (options,userEmail) {
            var views = [];
            var urlParam = "";
            if (options != undefined) {
                if (options.id != undefined)
                    urlParam += urlParam != "" ? "&userid=" + options.id : "?userid=" + options.id;
                if (options.maxGroupNo != undefined)
                    urlParam += urlParam != "" ? "&maxGroupNo=" + options.maxGroupNo : "?maxGroupNo=" + options.maxGroupNo;
                if (options.contactGroupNo != undefined)
                    urlParam += urlParam != "" ? "&contactGroupNo=" + options.contactGroupNo : "?contactGroupNo=" + options.contactGroupNo;
                if (options.isaccountgrid != undefined)
                    urlParam += urlParam != "" ? "&isaccountgrid=" + options.isaccountgrid : "?isaccountgrid=" + options.isaccountgrid;
                if (options.linktoid != undefined)
                    urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
                if (options.linktype != undefined)
                    urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
                if (options.viewoption != undefined)
                    urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
                if (options.orgviewoption != undefined)
                    urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
                if (options.groupviewoption != undefined)
                    urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
                if (options.selectedrange != undefined)
                    urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
                if (options.enddate != undefined)
                    urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);

            }
 
            views.push({ icon: "signal", name: 'Report', url: "/widgets/setupaccountreport/" + urlParam });

            title = 'User Accounts';

            modal.show({ title: title, views: views });
        },
        showUserLeadReport: function (id, userEmail) {
            var views = [];
            views.push({ icon: "signal", name: 'Report', url: "/setup/user/stats/" + id });

            var title = ""
            title = 'User Report' + ' (<b><i>' + userEmail + '</i></b>)';

            modal.show({ title: title, views: views });
        },
        showUserReportEdit: function (id, canedit) {
            if (!canedit) {
                var views = [
                    { icon: "signal", name: 'Report', url: "/setup/user/stats/" + id }
                ];
            }
            else {
                var views = [
               { icon: "signal", name: 'Report', url: "/setup/user/stats/" + id }, 
               { icon: "user", name: 'Info', url: "/setup/user/" + id, buttons: ["save"] },              
                ];
            }
            var title = 'User Report > '+views[0].name+'';
            modal.show({ title: title, views: views });
        },
        showOrgReport: function (id) {
            var views = [
                { icon: "chart-bar", name: 'Report', url: "/setup/organization/stats/" + id,iconprefix: "far", },
            ];
            var title = 'Organization Report';
            modal.show({ title: title, views: views });
        },
        showPartnerSummary: function (userid, username) {
            var views = [{ icon: "user", name: 'Info', url: "/setup/partner/" + userid + "/breakdown" }];
            modal.show({ title: username, views: views });
        },
        showClickedEmails: function (id, emailId) {
            var views = [{ icon: "chart-bar", name: 'Click', url: "/communicate/email/clicks/" + emailId + "/" + id, iconprefix: "far" }];
            modal.show({title: 'Clicked On', views: views});
        },
        showOpenedEmails: function (id, emailId) {
            var views = [{ icon: "chart-bar", name: 'Open', url: "/communicate/email/opens/" + emailId + "/" + id, iconprefix: "far" }];
            modal.show({ title: 'Opened On', views: views });
        },
        showSocialGroup: function (groupid, publishingid) {
            //type: social director-0,social summary-1
            var views = [{ icon: "users", name: 'Group Users', url: "/manage/campaigns/socialdrip/groupusers/" + groupid + "/" + publishingid, buttons: ["save"]},
                        ];

            modal.show({ title: 'Group Users', views: views });
        },
        showGroup: function (id, options) {
            $.extend({
                canviewrole: false,
                canaddusers: false,
                canAddUsersGroupManager: false,
                isSiteOrSuperAdmin: false
            }, options);

            var title = options.editgroup;
            var views = [];
            if (options.canaddusers)
                views.push({ icon: "user-alt", name: options.users, url: "/setup/group/" + id});
                views.push({ icon: "info-circle", name: options.info, url: "/setup/group/info/" + id + "/" + getTimeStamp(), buttons: ["save"] });
            if (options.canAddUsersGroupManager)
                views.push({ icon: "far fa-user-circle", name: options.groupmanager, url: "/setup/groupmanager/" + id });
            if (options.isSiteOrSuperAdmin)
                views.push({ icon: "user-secret", name: options.roles, url: "/setup/group/role/" + id + "/" + getTimeStamp() + "?iscreate=false" });

            if (options.name != null && options.name != undefined)
                title = options.editgroup + " > "+views[0].name+""+" (<b><i>" + options.name + "</i></b>)";
            else
                title = options.editgroup + " > " + "" + views[0].name + "" + " (<b><i>" + options.name + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        showOrganizationGroup: function (id, groupName, options) {
            $.extend({
                canViewRole: false,
                canEdit: false,
                canSeeManagers: true,
                isSiteOrSuperAdmin: false
            }, options);
            var views = [];

            var roleLinkType = parseInt("60000");

            if (options.canEdit)
                views.push({ icon: "info-circle", name: 'Info', url: "/setup/organizations/group/info/" + id, buttons: ["save"] });
            else
                views.push({ icon: "info-circle", name: 'Info', url: "/setup/organizations/group/info/" + id});

            if (options.canSeeManagers) {
                views.push({ icon: "building", name: 'Add/Remove Organizations', url: "/setup/organization/edit/" + id, buttons: ["save"], iconprefix: "far" });
                views.push({ icon: "user-circle", name: 'Channel Manager(s)', url: "/setup/organization/organizationgroupusers/" + id, buttons: ["save"], iconprefix: "far" });
            }
            else
                views.push({ icon: "building", name: 'Add/Remove Organizations', url: "/setup/organization/edit/" + id, iconprefix: "far" });

            if (options.isSiteOrSuperAdmin)
                views.push({ icon: "user-secret", name: "Roles", url: "/setup/group/role/" + id + "/" + getTimeStamp() + "?rolelinktype=" + roleLinkType });

            var title = 'Organization Group > ' + views[0].name +' (<b><i>' + groupName + '</i></b>)';

            modal.show({ title: title, views: views});
        },
        showAddOrganization: function (id, groupName, iscnlmgr) {
            if (!iscnlmgr) {
                var views = [{ icon: "building", name: 'Add/Remove Organizations', url: "/setup/organization/edit/" + id, iconprefix: "far" }];
                var title = 'Organization Group > Organizations (<b><i>' + groupName + '</i></b>)';
            }
            else {
                var views = [{ icon: "building", name: 'Add/Remove Organizations', url: "/setup/organization/edit/" + id, iconprefix: "far" }];
                var title = 'Organization Group > ' + views[0].name + ' (<b><i>' + groupName + '</i></b>)';
            }
            modal.show({ title: title, views: views });
        },
        showAddChannelManagers: function (id, groupName, isadded) {
            var views = [{ icon: "user-circle", name: 'Channel Manager(s)', url: "/setup/organization/organizationgroupusers/" + id + "?isadded=" + isadded, iconprefix: "far" }];
            var title = 'Organization Group > ' + views[0].name + ' (<b><i>' + groupName + '</i></b>)';

            modal.show({ title: title, views: views });
        },
        showAdvancedOrganizationGroup: function (id, groupName) {
            
            var views = [{ icon: "eye", name: 'Preview', url: "/connections/list/" + id + "/preview/" + getTimeStamp() + "?smart=false&isuser=true&type=5" },
                { icon: "list", name: 'Conditions', url: "/setup/advanced/organization/condition/" + id, buttons: ["save"] },
                { icon: "user-circle", name: 'Channel Manager(s)', url: "/setup/advanced/organization/organizationgroupusers/" + id, buttons: ["save"] },
                { icon: "info-circle", name: 'Info', url: "/setup/advanced/organizations/group/info/" + id, buttons: ["save"] },          
            ];

            var title = 'Advanced Organization Group > ' + views[0].name + " (<b><i>" + groupName + "</i></b>)";

            modal.show({ title: title, views: views });
        },

        showOrganizations: function (id, name) {
            var views = [{ icon: "info-circle", name: 'Info', url: "/setup/organization/list/" + id }];

            if (name != null)
                modal.show({ title: 'Organization Group Name > Report' + ' (<b><i>' + name + '</i></b>)', views: views });
            else
                modal.show({ title: 'Organizations Report', views: views });
        },

        showGroupWizard: function (id, options) {
            var _wizdata = {
                name: 'Create User Group',
                steps: [
                        { name: 'Info', url: "/setup/group/info/" + id + "/" + getTimeStamp() + "?isusergroupcreate=" + true }
                ],
            };

            if (options.canaddusers)
                _wizdata.steps.push({ name: 'Add Users', url: "/setup/group/" + id + "/" + getTimeStamp() + "?isusergroupcreate=" + true });
            if (options.canAddUsersGroupManager)
                _wizdata.steps.push({ name: 'Group Manager(s)', url: "/setup/groupmanager/" + id + "?isusergroupcreate=" + true });

            if (options.isSiteOrSuperAdmin)
                _wizdata.steps.push({ name: 'Roles', url: "/setup/group/role/" + id + "/" + getTimeStamp() + "?iscreate=" + true });

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showOrganizationGroupWizard: function (id) {
            var _wizdata = {
                name: 'Create Organization Group',
                steps: [
                        { name: 'Info', url: "/setup/organizations/group/info/" + id },
                        { name: 'Add Organizations', url: "/setup/organization/edit/" + id + "?isorggroupcreate=" + true },
                        { name: 'Assign to Channel Manager(s)', url: "/setup/organization/organizationgroupusers/" + id + "?isorggroupcreate=" + true }
                ],
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showAdvancedOrganizationGroupWizard: function (id) {
            var _wizdata = {
                name: 'Create Advanced Organization Group',
                steps: [
                    { name: 'Info', url: "/setup/advanced/organizations/group/info/" + id },
                    { name: 'Conditions', url: "/setup/advanced/organization/condition/" + id },
                    { name: 'Assign Channel Manager', url: "/setup/advanced/organization/organizationgroupusers/" + id + "?isorggroupcreate=" + true }
                ],
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showAddGroupManagers: function (id, groupName, isadded) {
            var views = [{ icon: "user-circle", name: 'Group Manager(s)', url: "/setup/groupmanager/" + id + "?isadded=" + isadded, iconprefix: "far" }];
            var title = 'User Group > ' + views[0].name + ' (<b><i>' + groupName + '</i></b>)';

            modal.show({ title: title, views: views });
        },
        showRegisterDealListsWizard: function (id) {
            var _wizdata = {
                name: 'Create Register Deal List',
                steps: [
                    { name: 'Info', url: "/setup/registerdeal/info/" + id },
                    { name: 'Conditions', url: "/setup/registerdeal/condition/" + id },
                    { name: 'Notifications & ToDo', url: "/setup/registerdeal/notification/" + id },
                    { name: 'Sharing', url: "/connections/list/usergroup/" + id + "/sharing" },
                ],
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showRegisterDealLists: function (id, groupName) {

            var views = [
                { icon: "eye", name: 'Preview', url: "/setup/registerdeal/preview/" + id },
                { icon: "list", name: 'Conditions', url: "/setup/registerdeal/condition/" + id, buttons: ["save"] },
                { icon: "info-circle", name: 'Info', url: "/setup/registerdeal/info/" + id, buttons: ["save"] },
                { icon: "users", name: 'Notifications & ToDo', url: "/setup/registerdeal/notification/" + id, buttons: ["save"] },
                { icon: "share-alt", name: 'Sharing', url: "/connections/list/usergroup/" + id + "/sharing", buttons: ["save"] },
            ];

            var title = 'Register Deal List' + " > " + views[0].name + " (<b><i>" + groupName + "</i></b>)";

            modal.show({ title: title, views: views });
        },
        showWidgetsRegisterDealLists: function (id, groupName) {

            var views = [
                { icon: "eye", name: 'Preview', url: "/setup/registerdeal/preview/" + id },
            ];
            modal.show({ title: groupName, views: views });
        },
        showRole: function (id, options) {
            var title = options.editroles;
            if (!options.isRolePreset) {
                var views = [{ icon: "user-cog", name: options.roles, url: "/setup/role/" + id + "/" + getTimeStamp(), buttons: ["save"] },
                { icon: "user", name: options.info, url: "/setup/role/info/" + id + "/" + getTimeStamp(), buttons: ["save"] },
                { icon: "users-crown", name: options.assignment, url: "/setup/role/AssignedTo/" + id }];
            } else {
                var views = [{ icon: "user-cog", name: options.roles, url: "/setup/role/" + id + "/" + getTimeStamp(), buttons: ["save"] },
                    { icon: "user", name: options.info, url: "/setup/role/info/" + id + "/" + getTimeStamp(), buttons: ["save"] }];
            }

            if(options.issiteorsuperadmin)
                views.push({ icon: "history", name: "History", url: "/setup/roles/" + id + "/history"});
            if (options.name != null && options.name != undefined)
                title = options.editroles + " > " + views[0].name + "" + " (<b><i>" + options.name + "</i></b>)";
            else
                title = options.editroles + " > " + views[0].name + "" + " (<b><i>" + options.name + "</i></b>)";
            modal.show({ title: title, views: views, preventClose:true });
        },
        showRoleHistory: function(options){
            var views = [];
            views.push({ icon: "user-cog", name: "Roles History", url: "/setup/roles/" + options.roleid + "/history/" + options.id });
            modal.show({ title: "", views: views, preventClose: true });
        },
        showRoleWizard: function (data) {
            var url = '';
            var isPresetRoles = true;
            var presetroleid = data.rolespresetid;
            
            if (data.rolespresetid != null && data.rolespresetid != undefined)
                isPresetRoles = false;

            if (isPresetRoles)
                url = "/setup/role/info/" + data.id + "?presetrole=" + isPresetRoles;
            else 
                url = "/setup/role/info/" + data.id + "?rolespresetid=" + presetroleid + "&presetrole=" + isPresetRoles ;

            var info = { name: 'Info', url: url  }
            var editRole = { name: 'Roles', url: "/setup/role/" + data.id  };
            var shareRole = { name: 'Assignment', url: "/setup/role/AssignedTo/" + data.id + "?isrolecreate=" + true };
            var steps = [info, editRole];
            if (!isPresetRoles)
                steps.push(shareRole);
            
            var _wizdata = {
                name: 'Create Role',
                steps: steps,
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showCategoryInfo: function (id,title) {
            var views = [{ icon: "user-cog", name: 'Info', url: "/setup/collaboration/categories/info/" + id, buttons: ["save"] }];
            modal.show({ title: title, views: views });
        },
        showCollaboration: function (data) {
            var title = data.isnew == "New" ? data.type + " ( New Request )" : data.type + " ( Total Collaboration )";
            var views = [{ icon: "", name: 'Info', url: "/collaboration?type=" + data.type + "&index=" + data.index +"&isnew="+  data.isnew }];
            modal.show({ title: title.toUpperCase(), views: views });
        },
        showPreset: function (id, isCreate, shareType, canShare) {
            if (isCreate) {
                var _wizdata = {
                    name: 'Create Social Preset',
                    steps: [
                        { name: 'Info', url: "/setup/publishing/" + id + "/edit" + "/" + getTimeStamp(), buttons: ["next"] },
                        { name: 'Sharing', url: "setup/sharing/permissions/" + id + "/" + shareType + "/", buttons: ["save"]}
                    ],
                };
                var _wizard = new wizard(_wizdata);
                _wizard.show();
            }
            else {
                var views = [{ icon: "cog", name: "edit", url: "/setup/publishing/" + id + "/edit" + "/" + getTimeStamp() +"?isedit=true", buttons: ["save"] },
                ];
                var title = 'Presets (edit & manage)';
                if(canShare == true)
                {
                    views.push({
                            icon: "share-alt",
                            name: "Sharing",
                            url: "setup/sharing/permissions/" + id + "/" + shareType + "/",
                            buttons: ["save"]
                    });
                }
                modal.show({ title: title, views: views });
            }
        },
        showBrand: function (id, options) {
            $.extend({
                brandname: 'Brand'
            }, options);
            var views = [
                { icon: "adjust", name: 'Theme Types', url: "/brand/" + id + "/themes" },
                { icon: "file-image", name: 'Image Types', url: "/brand/" + id + "/images", iconprefix: "far" },
                { icon: "file", name: 'Doc Types', url: "/brand/" + id + "/documents" },
                { icon: "drupal", name: 'Palettes', url: "/brand/" + id + "/palettes", iconprefix: "fab" },
                { icon: "edit", name: 'Signatures', url: "/brand/" + id + "/signatures" },
                { icon: "file-alt", name: 'Content Types', url: "/brand/" + id + "/content" }
            ];
            var title = options.brandname + " > " + ""+views[0].name+"";
            modal.show({ title: title, views: views });
        },
        showBrandImage: function (id, brandId) {
            if (id != null)
                var views = [{ icon: "adjust", name: 'Image', url: "/brand/image/" + brandId + "/" + id + "/fileEdit" + "/" + getTimeStamp(), buttons: ["save"]}];
            else
                var views = [{ icon: "adjust", name: 'Image', url: "/brand/image/" + brandId + "/0/fileEdit", buttons: ["save"] }];

            modal.show({ title: 'Image', views: views });
        },
        showBrandDocument: function (id, brandId) {
            if (id != null)
                var views = [{ icon: "adjust", name: 'Document', url: "/brand/document/" + brandId + "/" + id + "/fileEdit" + "/" + getTimeStamp(), buttons: ["save"] }];
            else
                var views = [{ icon: "adjust", name: 'Document', url: "/brand/document/" + brandId + "/0/fileEdit", buttons: ["save"]}];

            modal.show({ title: 'Document', views: views });
        },
        showBrandTheme: function (id, brandId) {
            if (id != null)
                var views = [{ icon: "adjust", name: 'Edit', url: "/brand/" + brandId + "/" + id + "/themeEdit" + "/" + getTimeStamp(), buttons: ["save"] }];
            else
                var views = [{ icon: "adjust", name: 'Create', url: "/brand/" + brandId + "/0/themeEdit", buttons: ["save"] }];

            modal.show({ title: 'Theme', views: views });
        },
        showBrandThemeV5: function (id, brandId) {
            if (id != null)
                var views = [{ icon: "adjust", name: 'Edit', url: `/brand/${brandId}/${id}/themeEditv5/${getTimeStamp()}`, buttons: ["save"] }];
            else
                var views = [{ icon: "adjust", name: 'Create', url: `/brand/${brandId}/0/themeEditv5`, buttons: ["save"] }];

            modal.show({ title: 'Theme', views: views });
        },
        showBrandPalette: function (id, brandId) {
            if (name != null && name != undefined)
                var views = [{ icon: "adjust", name: 'Palette', url: "/brand/" + brandId + "/" + escape(id) + "/paletteEdit", buttons: ["save"] }];
            else
                var views = [{ icon: "adjust", name: 'Palette', url: "/brand/" + brandId + "/paletteCreate", buttons: ["save"] }];

            modal.show({ title: 'Palette', views: views });
        },
        showBrandContent: function (id, brandId) {
            if (id != null)
                var views = [{ icon: "adjust", name: 'Content', url: "/brand/content/" + brandId + "/" + id + "/contentEdit" + "/" + getTimeStamp(), buttons: ["save"] }];
            else
                var views = [{ icon: "adjust", name: 'Content', url: "/brand/content/" + brandId + "/0/contentEdit", buttons: ["save"] }];

            modal.show({ title: 'Content', views: views });
        },
        showBrandSignature: function (id, brandId) {
            if (id != null)
                var views = [{ icon: "adjust", name: 'Signature', url: "/brand/signature/" + brandId + "/" + id + "/contentEdit" + "/" + getTimeStamp(), buttons: ["save"] }];
            else
                var views = [{ icon: "adjust", name: 'Signature', url: "/brand/signature/" + brandId + "/0/contentEdit", buttons: ["save"] }];

            modal.show({ title: 'Signature', views: views });
        },
        showContactNotification: function (id) {
            var views = [{ icon: "list", name: "list-edit", url: "/connections/notification/" + id, buttons: ["done"] }];
            modal.show({ title: 'Notification Message', views: views });
        },
        showOrgCategory: function (id,mId,mruleId) {
            var views = [{ icon: "list", name: "list-edit", url: "/organizationscore/category/" + id + "/" + mId + "/" + mruleId, }];
            modal.show({ title: 'Category Report', views: views });
        },
        showNotificationDeleteSetting: function () {
            var views = [{ icon: "list", name: "list-edit", url: "/connections/notificationdelete", buttons: ["save"] }];
            modal.show({ title: 'Notification Delete Setting', views: views });
        },
        showTrackingLink: function () {
            var views = [{ icon: "chart-bar", name: 'Links', url: "/tracking/links_sites/modify", iconprefix: "far", buttons: ["save"] }];
            modal.show({ title: 'Create Tracking Link', views: views });
        },
        importOpportunityHandler: function(options) {
            var views = [
                { icon: "database", name: "Info", url: "/manage/database/import/" + options.projecttyeid + "/0" },
            ];
            modal.show({ title: 'Import Record (<b>' + options.projecttypename + "</b>)", views: views, buttons: "[Save]", gridobj: options.gridobj });
        },
        showTrackingCode: function (options) {
            var views = [{ icon: "chart-bar", name: 'Report', url: "/trackingcode/" + options.key + "/" + options.link, iconprefix: "far" }];
            var title = "";
            if (options.name != "")
                title = 'Tracking Code :' + (options.name);
            else
                title = 'Tracking Code :';
            modal.show({ title: title, views: views });
        },
        showInternalActions:function(icon, modalName, url, title) {
            var views = [{ icon: icon, name: modalName, url: url }];
            modal.show({ title: title, views: views });
        },
        savedKeyword: function (id) {
            var views = [{ icon: "", name: 'Add Keywords', url: "sites/" + id + "/addkeywords", buttons: ["save"] }];
            modal.show({ title: 'Add Keywords', views: views });
        },
        moveDocument: function (id) {
            var views = [{ icon: "image", name: "", url: "/gallery/documents/" + id + "/move/edit", buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: 'Change Destination Of Document', views: views });
        },
        editDocument: function (option) {
            var views = [];
            if (option.encryptedid != null && option.encryptedid != undefined){
                if (option.foldertype != undefined && option.foldertype != null)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + option.encryptedid + "/edit/edit/" + getTimeStamp() + "/encrypt?issetup=" + option.isSetup + "&foldertype=" + option.foldertype + "&isbookmark=" + option.isbookmark + "&types=" + option.types, buttons: ["save", "cancel"] });
                else
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + option.encryptedid + "/edit/edit/" + getTimeStamp() + "/encrypt?issetup=" + option.isSetup, buttons: ["save", "cancel"] });
            }else{
                if (option.foldertype != undefined && option.foldertype != null)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + option.id + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + option.isSetup + "&foldertype=" + option.foldertype + "&isbookmark=" + option.isbookmark + "&types=" + option.types, buttons: ["save", "cancel"] });
                else
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + option.id + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + option.isSetup, buttons: ["save", "cancel"] });
            }
            if(option.file==true){
                //var previewUrl = option.previewurl != undefined ? option.previewurl.replace("{0}", option.id) : "/collateral/pdf/document/" + option.id + "/view";
                views.push({ icon: "info-circle", name: "Info", url: "/collateral/pdf/document/" + option.id + "/view" })
            }

            if (option.singleselect != true && option.singleselect != undefined) {
                if (option.isarchived == true) {
                    if (option.showPermission) {
                        views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/newversion/" + option.shareType + "/" + option.id, buttons: ["save"] })
                    }
                    if (!option.isrestricted){
                    if (option.canSendEmail) {
                        views.push({ icon: "envelope", name: "Send Email", url: "/communicate/email/0?templates=" + null + "&files=" + option.id + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                        views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?templates=" + null + "&files=" + option.id + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, buttons: ["finish"] });
                    }
                    views.push({ icon: "database", name: 'Data Room', url: "/collateral/datarooms/" + option.id + "/" + 2 })
                    if (option.hasversionaccess == true && option.hasversionaccess != undefined) {
                        views.push({ icon: "history", name: 'Versions', url: "/gallery/file/versions/" + option.types + "/" + option.id + "?issetup=" + option.isSetup + "&iswizard=" + option.iswizard })
                        }
                    }
                }
                if (option.rating) {                    
                    views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + option.id + "/" + 2 + "/rating/comment", iconprefix: "fas" });                    
                }
            }
            var title = " Document " + " > " +views[0].name +" (<b><i>" + option.displayname + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        showFileVersion: function (option) {
            var views = [];
            views.push({ icon: "history", name: "Versions", url: "/gallery/file/versions/" + option.filetype + "/" + option.id + "?issetup=" + option.isSetup + "&iswizard=" +option.iswizard, buttons: ["cancel"] }); 

            if (option.encryptedid != null && option.encryptedid != undefined) {
                if (option.foldertype != undefined && option.foldertype != null)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + option.encryptedid + "/edit/edit/" + getTimeStamp() + "/encrypt?issetup=" + option.isSetup + "&foldertype=" + option.foldertype + "&isbookmark=" + option.isbookmark + "&types=" + option.types, buttons: ["save", "cancel"] });
                else
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + option.encryptedid + "/edit/edit/" + getTimeStamp() + "/encrypt?issetup=" + option.isSetup, buttons: ["save", "cancel"] });
            } else {
                if (option.foldertype != undefined && option.foldertype != null)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + option.id + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + option.isSetup + "&foldertype=" + option.foldertype + "&isbookmark=" + option.isbookmark + "&types=" + option.types, buttons: ["save", "cancel"] });
                else
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + option.id + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + option.isSetup, buttons: ["save", "cancel"] });
            }

            if (option.singleselect != true && option.singleselect != undefined) {
                if (option.isarchived == true) {
                    if (option.showPermission) {
                        views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + option.id + "/" + option.sharetype + "/" + option.id, buttons: ["save"] })
                    }
                    if (!option.isrestricted) {
                        if (option.canSendEmail) {
                            views.push({ icon: "envelope", name: "Send Email", url: "/communicate/email/0?templates=" + null + "&files=" + option.id + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                            views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?templates=" + null + "&files=" + option.id + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, buttons: ["finish"] });
                        }
                        views.push({ icon: "database", name: 'Data Room', url: "/collateral/datarooms/" + option.id + "/" + 2 })
                        if (option.hasversionaccess == true && option.hasversionaccess != undefined) {
                            views.push({ icon: "history", name: 'Versions', url: "/gallery/file/versions/" + option.types + "/" + option.id + "?issetup=" + option.isSetup + "&iswizard=" + option.iswizard })
                        }
                    }
                }
                if (option.rating) {
                    views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + option.id + "/" + 2 + "/rating/comment", iconprefix: "fas" });
                }
            }

            var title = " Document " + " > " + views[0].name + " (<b><i>" + option.displayname + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        importeditDocument: function (option) {
            var views = [];
            views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + option.encryptedid + "/edit/edit/" + getTimeStamp() + "/encrypt?issetup=" + option.isSetup + "&ispublic=" + option.ispublic, buttons: ["save", "cancel"] });

            var title = " Document " + " > " + views[0].name + " (<b><i>" + option.displayname + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        uploadDocuments: function (assetid, assettypeid, filetypes, options, isproject, isCase, ispublic, isscorm, closeCallback) {
            $.extend({
                uploadHeader: "",
                gallerytype: "my",
                isCase: false
            }, options);

            if (isscorm === undefined)
                isscorm = false;
            if (ispublic === undefined)
                ispublic = false;

            var url = "/gallery/documents/upload/" + options.gallerytype + "/" + assetid + "/" + assettypeid + "/" + filetypes + "/" + isproject + "/" + ispublic + "/" + isscorm;
            if (isCase)
                url = url + "?iscase=" + isCase;
            else if (typeof options.islms != "undefined")
                url = url + "?islms=" + options.islms;//#42018 - LMS: text should only specified with pdf's
            else if (options.linktype != undefined)
                url = url + "?linktype=" + options.linktype;
            else if (options.isbridgeai != undefined)
                url = url + "?isbridgeai=" + options.isbridgeai;
            if (options.isversion != undefined && options.fileid != undefined)
            {
                url = url + "?isversion=" + options.isversion + "&linkid=" + options.fileid;
            }

            var views = [{ icon: "upload", name: "", url: url }];
            modal.show({ title: options.uploadHeader, views: views, closeCallback: closeCallback},function(){
                var previousModalTitle = $(".ai-sprinkler-view");
                if (previousModalTitle.length > 0) {
                    let titleContainer = previousModalTitle.closest('h4');
                    previousModalTitle.closest('a').remove();
                    if (titleContainer.length > 0)
                        titleContainer.html(titleContainer.html().replace('&gt;', ''));
                }
            });

        },
        uploadImage: function (assetid, assettypeid, options, isproject, isCase, closeCallback) {
            $.extend({
                uploadHeader: "",
                gallerytype: "my",
                isCase:false
            }, options);
            var url = "/gallery/images/upload/" + options.gallerytype + "/" + assetid + "/" + assettypeid + "/" + isproject;
            if (isCase)
                url = url + "?iscase=" + isCase;

            if (typeof options.isBadge != "undefined")//#37340 - Added to show badges in image gallery
                url = url + "?isbadge=" + options.isBadge;

            var views = [{ icon: "upload", name: "", url: url }];
            if (options.uploadHeader == undefined) {
                modal.show({ title: 'Upload Images',views: views, closeCallback: closeCallback });

            } else {
            modal.show({ title: 'Upload Images' + ' ' + options.uploadHeader, views: views, closeCallback: closeCallback });
            }

        },
        moveImage: function (id) {
            var views = [{ icon: "image", name: "", url: "/gallery/images/" + id + "/move/edit", buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: 'Change Destination Of Image', views: views });
        },
        editImage: function (data, callback) {
            var views = [];
   
            if (data.encryptedid != null && data.encryptedid != undefined) {
                if (data.foldertype != undefined && data.foldertype != null)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/images/" + data.encryptedid + "/edit/edit" + "/" + getTimeStamp() + "/encrypt?foldertype=" + data.foldertype + "&isbookmark=" + data.isbookmark + "&issetup=" + data.issetup, buttons: ["save"] });
                else
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/images/" + data.encryptedid + "/edit/edit" + "/" + getTimeStamp() +"/encrypt?issetup=" + data.issetup, buttons: ["save"] });
            } else {
                if (data.foldertype != undefined && data.foldertype != null)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/images/" + data.id + "/edit/edit" + "/" + getTimeStamp() + "?foldertype=" + data.foldertype + "&isbookmark=" + data.isbookmark + "&issetup=" + data.issetup, buttons: ["save"] });
                else
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/images/" + data.id + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + data.issetup, buttons: ["save"] });

            }

            views.push({ icon: "info-circle", name: "Info", url: "/gallery/images/" + data.id + "/view?istemplate=" + data.istemplate});
            if (data.saveOnDblClick != true && data.saveOnDblClick != undefined) {
                if (data.showPermission)
                    views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/newversion/" + data.shareType + "/" + data.id, buttons: ["save"] });
                if (!data.isrestricted) {
                if (data.canSendEmail) {
                    views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?templates=null" + "&files=" + data.id + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                    views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?templates=" + null + "&files=" + data.id + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, buttons: ["finish"] });
                }
                if (data.publish) {
                    views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + data.id, buttons: ["publish"] });
                }
                }
                if (data.rating) {
                    views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + data.id + "/" + 2 + "/rating/comment", iconprefix: "fas" });                }
            }
            var title = 'Image > ' + views[0].name + ' (<b><i>' + data.displayname + '</i></b>)';
           modal.show({ title: title, views: views, callback: callback });
        },
        viewImage: function (data, options){
            var options = $.extend({
                hideimportcustomize: true,
                customsendmodal: true,
                isarchived: true
            }, options);
            var views = [{ icon: "image", name: 'View', url: "/gallery/images/" + data.id + "/view", iconprefix: "far" }];
            if (options.isarchived) {
                if (options.CanEdit) {
                    views.push({ icon: "edit", name: 'Edit', url: "/gallery/images/" + data.id + "/edit/edit" + "/" + getTimeStamp(), buttons: ["save"] });
                }
                if (options.showPermission)
                    views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + data.id + "/" + options.shareType + "/null", buttons: ["save"] });
                if (options.canSendEmail)
                    views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?templates=null" + "&files=" + data.id + "&isMultipleAssetEmail=true&customsendmodal=" + options.customsendmodal + "&hideimportcustomize=" + options.hideimportcustomize, buttons: ["finish"] });
                if (options.canAutoPublish)
                    views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + data.id, buttons: ["publish"] });
                if (options.canSendPartner)
                    views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?templates=null" + "&files=" + data.id + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + options.customsendmodal + "&isSmartlist=" + null + "&isContactcompany=" + null + "&hideimportcustomize=" + options.hideimportcustomize, buttons: ["finish"] });
            }
            if (options.hasRatingAccess) {
                views.push({ icon: "users", name: 'Ratings', url: "/feedback/" + data.id + "/" + options.type + "/rating" });
                views.push({ icon: "comments", name: 'Comments', url: "/feedback/" + data.id + "/" + options.type + "/comment", iconprefix: "far" });
            }
            var title = "";
            if (data.filename != undefined) {
                title = 'Image > ' + views[0].name + ' (<b><i>' + data.filename + '</i></b>)';
            }
            else
                title = 'Image > ' + views[0].name + '';
            modal.show({ title: title, views: views });
        },
        viewBannerImage: function (data, options, isSmartlist, isContactcompany) {
            var options = $.extend({
                hideimportcustomize: true,
                customsendmodal: true,
            }, options);
            var views = [{ icon: "image", name: 'View', url: "/gallery/images/" + data.id + "/view/?istemplate=true", iconprefix: "far" }];
           
            if (options.CanEdit && !options.output) {
                    views.push({ icon: "edit", name: 'Edit', url: "/collateral/banner/" + data.id + "/editor" });
            }
             
            if (options.canSendEmail) {
                views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?templates=" + data.id + "&files=" + null + "&isMultipleAssetEmail=true&customsendmodal=" + options.customsendmodal + "&hideimportcustomize=" + options.hideimportcustomize, buttons: ["finish"] });
            }

            if (options.canAutoPublish && options.canPublish) {
                views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/true/" + data.id, buttons: ["save"] });
            }

            if (options.canSendPartner) {
                views.push({ icon: "user-plus", name: 'Send To Users', url: "/communicate/email/0?templates=" + data.id + "&files=" + null + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + options.customsendmodal + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&hideimportcustomize=" + options.hideimportcustomize, buttons: ["finish"] });
            }

            if (!options.output) {
                if (options.showPermission) {
                views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + data.id + "/" + 100 + "/null?iscompanyuserlist=" + options.isCompanyUserList, buttons: ["save"] });
                }
            }

            if (options.hasRatingAccess) {
            views.push({ icon: "star", name: 'Rating', url: "/feedback/" + data.id + "/1/rating" }); // 1 is for template feedback type
            views.push({ icon: "comments", name: 'Comments', url: "/feedback/" + data.id + "/1/comment", iconprefix: "far" }); // 1 is for template feedback type
            }

            if (data.name != undefined) {
                title = 'Image > ' + views[0].name + ' (<b><i>' + data.name + '</i></b>)';
            }
            else
                title = 'Image > ' + views[0].name + '';
            modal.show({ title: title, views: views });
        },
        cropImage: function (id) {
            var views = [{ icon: "image", name: "", url: "/gallery/images/" + id + "/crop/edit", iconprefix: "far" }];
            modal.show({ title: 'Crop Image', views: views });
        },
        cropImageForEditor: function (fromEditor,id) {
            var views = [{ icon: "image", name: "", url: "/gallery/images/" + id + "/crop/edit?fromEditor=" + fromEditor, iconprefix: "far" }];
            modal.show({ title: 'Crop Image', views: views });
        },
        editVideo: function (id) {
            modal.show({ title: "Edit Video", views: [{ icon: "picture-o", name: "", url: "/gallery/video/" + id + "/edit", buttons: ["save"] }] });
        },
        editVideoWithOptions: function (data, callback) {
            var views = [];
            if (data.encryptedid != null || data.encryptedid != undefined) {
                if (data.foldertype != undefined && data.foldertype != null)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + data.encryptedid + "/edit/encrypt?ispersonalizedvideo=" + data.ispersonalizedvideo + "&foldertype=" + data.foldertype + "&isbookmark=" + data.isbookmark + "&orgid=" + data.orgid + "&issetup=" + data.issetup, buttons: ["save"] });
                else
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + data.encryptedid + "/edit/encrypt?ispersonalizedvideo=" + data.ispersonalizedvideo + "&orgid=" + data.orgid + "&issetup=" + data.issetup, buttons: ["save"] });
            }else{
                if (data.foldertype != undefined && data.foldertype != null)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + data.id + "/edit?ispersonalizedvideo=" + data.ispersonalizedvideo + "&foldertype=" + data.foldertype + "&isbookmark=" + data.isbookmark + "&orgid=" + data.orgid + "&issetup=" + data.issetup, buttons: ["save"] });
                else
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + data.id + "/edit?ispersonalizedvideo=" + data.ispersonalizedvideo + "&orgid=" + data.orgid + "&issetup=" + data.issetup, buttons: ["save"] });
            }
            views.push({ icon: "info-circle", name: "Info", url: "/collateral/video/" + data.id + "/view?ispersonalizedvideo=" + data.ispersonalized })
            if (data.singleselect != 1 && data.singleselect != undefined) {
                if (data.showPermission) {
                    views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/newversion/" + data.shareType + "/" + data.id, buttons: ["save"] });
                }
                if(!data.isrestricted){
                if (data.cansendemail) {
                    views.push({ icon: "paper-plane", name: "Send Email", url: "/communicate/email/0?templates=" + null + "&files=" + data.id + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                }
                if (data.cansendtopartner == true) {
                    views.push({ icon: "paper-plane", name: 'Send Email To Users', url: "/communicate/email/0?templates=" + null + "&files=" + data.id + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, iconprefix: "far", buttons: ["finish"] });
                }
                if (data.publish) {
                    views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + data.id, buttons: ["publish"] });
                }
                }
                if (data.rating) {                    
                    views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + data.id + "/" + 2 + "/rating/comment", iconprefix: "fas" });
                }
            }
            var title = "Video" + " > " + views[0].name + " (<b><i>" + data.displayname + "</i></b>)";
            modal.show({ title: title, views: views, callback: callback });
        },
        showFeedback: function (data) {
            var views = [];
            if (data.filetype != undefined) {
                views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + data.id + "/" + 2 + "/rating/comment", iconprefix: "fas" });
            } 
            if (data.singleselect != 1 && data.singleselect != undefined) {
                if (data.canedit) {
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + data.id + "/edit" + "?issetup=" + data.issetup, buttons: ["save"] });
                }
                if (data.showPermission) {
                    views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/video/permissions/" + data.id + "/" + 900 + "/" + data.id, buttons: ["save"] });
                }
                if (data.cansendemail && data.templatetype != '8388608' && !data.isrestricted) {
                    views.push({ icon: "paper-plane", name: "Send Email", url: "/communicate/email/0?templates=" + null + "&files=" + data.id + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                }
                if (data.cansendtopartner == true && data.templatetype != '8388608' && !data.isrestricted) {
                    views.push({ icon: "paper-plane", name: 'Send Email To Users', url: "/communicate/email/0?templates=" + null + "&files=" + data.id + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, iconprefix: "far", buttons: ["finish"] });
                }
                if (data.publish && data.templatetype != '8388608' && !data.isrestricted) {
                    views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + data.id, buttons: ["publish"] });
                }
            }
            var title = "Video" + " > " + views[0].name + " (<b><i>" + data.displayname + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        uploadVideo: function (options, cb) {
            var views = [{ icon: "image", name: "", url: "/gallery/video/0/edit", buttons: ["save"], iconprefix: "far" }];
            if (options != undefined) {
                if (options.orgid != undefined && options.orgid > 0 && options.isorganization)
                    views = [{ icon: "image", name: "", url: "/gallery/video/0/edit?orgid=" + options.orgid + "&isorganization=true", buttons: ["save"], iconprefix: "far" }];
                if (options.producttypeid != undefined && options.productid != undefined) {
                    if (options.producttypeid > 0 && options.productid > 0)
                        views = [{ icon: "image", name: "", url: "/gallery/video/0/edit?producttypeid=" + options.producttypeid + "&productid=" + options.productid, buttons: ["save"], iconprefix: "far" }];
                }
                if (options.projecttypeid != undefined && options.projectid != undefined) {
                    if (options.projecttypeid > 0 && options.projectid > 0)
                        views = [{ icon: "image", name: "", url: "/gallery/video/0/edit?projecttypeid=" + options.projecttypeid + "&projectid=" + options.projectid + "&isproject=" + options.isproject,  buttons: ["save"], iconprefix: "far" }];
                }
            }

            modal.show({ title: 'Upload Video', views: views, callback: cb });
        },
        uploadExtVideos: function (options, closeCallback) {
            var url = "/gallery/documents/upload/" + options.gallerytype + "/0/0/" + parseInt("16400") + "/false/true";
            if (options.gallerytype == "organization" && options.orgid != undefined && options.orgid > 0)
                url = "/gallery/documents/upload/" + options.gallerytype + "/" + options.orgid+"/0/" + parseInt("16400") + "/false/true";
            if (options.gallerytype == "asset" && options.producttypeid != undefined && options.productid != undefined) {
                if (options.producttypeid > 0 && options.productid>0)
                    url = "/gallery/documents/upload/" + options.gallerytype + "/" + options.productid + "/" + options.producttypeid +"/" + parseInt("16400") + "/false/true";
            }
            if (options.gallerytype == "project" && options.projecttypeid != undefined && options.projectid != undefined) {
                if (options.projecttypeid > 0 && options.projectid > 0)
                    url = "/gallery/documents/upload/" + options.gallerytype + "/" + options.projectid + "/" + options.projecttypeid + "/" + parseInt("16400") + "/true/true";
            }
            var views = [{ icon: "upload", name: 'Choose file', url: url }];
            modal.show({ title: 'Upload Video', views: views, closeCallback: closeCallback });
        },
        videoWizard: function (options, closeCallback) {
            var info = { name: 'Info', url: "/gallery/video/" + options.id + "/edit" };
            var videoUplaod = { name: 'Sharing', url: "/setup/sharing/newversion/" + options.sharetype + "/" + options.id, buttons: ["save"], wizardclose: true };
            var steps = [];
            steps = [info, videoUplaod];
            var _wizdata = {
                name: 'Upload Video',
                steps: steps,
                closeaction: closeCallback
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        uploadVideoWizard: function (options, closeCallback) {
            var uploadUrl = "/gallery/documents/upload/" + options.gallerytype + "/0/0/" + options.mp4filetypeval + "/false/true" + "?fileid=" + options.fileuploadid + "&issetup=true&iswizard=true&ismultiplefiles=true";
            if (options.gallerytype == "organization" && options.orgid != undefined && options.orgid > 0)
                url = "/gallery/documents/upload/" + options.gallerytype + "/" + options.orgid + "/0/" + options.mp4filetypeval + "/false/true";
            if (options.gallerytype == "asset" && options.producttypeid != undefined && options.productid != undefined) {
                if (options.producttypeid > 0 && options.productid > 0)
                    url = "/gallery/documents/upload/" + options.gallerytype + "/" + options.productid + "/" + options.producttypeid + "/" + options.mp4filetypeval + "/false/true";
            }
            var videoUplaod = { name: 'Upload', url: uploadUrl, wizardclose: true }
            var editVideo = { name: 'Attributes', url: "/gallery/video/" + 0 + "/edit" + "?issetup=" + options.isSetup + "&ismp4=true&fileuploadid=" + options.fileuploadid };
            var shareVideo = { name: 'Sharing', url: "/setup/sharing/newversion/" + options.sharetype + "/" + options.fileuploadid + "?isbulkupload=true&iswizard=true", buttons: ["save"], wizardclose: true };
            var steps = [];
            if (options.gallerytype == 'my')
                steps = [videoUplaod, editVideo, shareVideo];

            var _wizdata = {
                name: 'Upload Video',
                steps: steps,
                closeaction: closeCallback
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        sendAssets: function (val, linkids, isSmartlist, isContactcompany, ispartner, isUserGrid) {
            var views = [];
            if (isUserGrid != "" && isUserGrid != null && isUserGrid !=undefined && !isUserGrid) {
                if (linkids.length > 1)
                    linkids = null;            
                views.push({ icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + linkids + "&issmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&ispartner=" + ispartner });
            }else{
                var searchText = "";
                views.push({ icon: "database", name: 'Assets', url: "/search?isshowninmodal=true&isUser=" + isUserGrid + "&linkids=" + linkids + "&text=" + searchText + "&issmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany});                
            }

            modal.show({ title: 'View Assets', views: views });
        },
        addToDrip: function (linkids, isSmartlist, isContactcompany, isUser) {
            var views = [{ icon: "file-alt", name: 'Add to Drip', url: "/connections/contacts/programs/null?linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&isUser=" + isUser}];
            modal.show({ title: 'Add To Drip', views: views });
        },
        showListCustomCharts: function (linkids, linkType) {
            var views = [{ icon: "fa fa-chart-area txt-color-darken", name: 'Custom Chart Report', url: "/v4u/ajax/lists/contact-smartlist-chart.cshtml?linkids=" + linkids + "&linkType=" + linkType }];
            modal.show({ title: 'Custom Chart Report', views: views });
        },
        sendEmail: function (linkids, isSmartlist, isContactcompany) {
            modal.createNSendEmail(linkids, isSmartlist, isContactcompany, false);
            return;

            if (_isMobileBrowser == false) {
            //modal.createNSendEmail(linkids, isSmartlist, isContactcompany);
            var views = [{ icon: "database", name: 'Info', url: "/communicate/newemail/0?linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany,buttons:["save"] }];
            modal.show({ title: 'Email <span class="label txt-color-white draft" id="lblWhatIsIt">NEW</span>', views: views });
            }
            else {
                var views = [{ icon: "database", name: 'Info', url: "/mobile/importtemplate?linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany, buttons: ["save"] }];
                modal.show({ title: 'Email <span class="label txt-color-white draft" id="lblWhatIsIt">NEW</span>', views: views});
            }
        },
        createNSendEmail: function (linkids, isSmartlist, isContactcompany, ispartner,isUser, contactListId=null) {
            modal.closeall();
            var email = [];
            email.linkids = linkids;
            email.isSmartlist = isSmartlist;
            email.isContactcompany = isContactcompany;
            email.ispartner = ispartner;
            var sendEmailLink = "?linkids=" + linkids + "&isstepprocess=true&isSmartlist=" + isSmartlist + "&isContactcompany=" + isContactcompany + "&ispartner=" + ispartner + "&contactlistid=" + contactListId;
            if (isUser != null)
                sendEmailLink += "&isuser=" + isUser;
            api.call("CreateTemporaryMedia", { templateid: 0, templatename: "new media" }, function (result) {
                var _emailID = result.result.email.id;
                var _templateID = result.result.template.id;
                var _wizdata = {
                    name: 'Send EMAIL',
                    steps: [
                        { name: 'Select Template', url: "/communicate/email/selecttemplate/" + _templateID + "/" + _emailID + sendEmailLink },
                        { name: 'Email Editor', url: "/communicate/email/" + _templateID + "/editor" },
                        { name: 'Send Email', url: "/communicate/email/" + _emailID + sendEmailLink, wizardclose: true }
                    ]
                };

                var _wizard = new wizard(_wizdata);
                _wizard.show();
            });
        },
        sendWebinarEmail: function (tempateData, webinarid) {
            modal.closeall();
            var email = [];
            email.linkids = null;
            email.isSmartlist = null;
            email.isContactcompany = null;
            email.ispartner = false;
            var sendEmailLink = "?linkids=" + null + "&isstepprocess=true&isSmartlist=" + null + "&isContactcompany=" + null + "&ispartner=" + false;
            api.call("CreateTemporaryMedia", { templateid: tempateData.id, templatename: tempateData.name, webinarid: webinarid  }, function (result) {
                var _emailID = result.result.email.id;
                var _templateID = result.result.template.id;
                var _wizdata = {
                    name: "Send EMAIL",
                    steps: [
                        { name: "Email Editor", url: "/communicate/email/" + _templateID+ "/webinareditor/" + webinarid },
                        { name: "Send Email", url: "/communicate/email/" + _emailID + sendEmailLink, lastStepName: 'Send',wizardclose: true }
                    ]
                };

                var _wizard = new wizard(_wizdata);
                _wizard.show();
            });
        },
        
        addToPlaybook: function (linkids, isContactcompany) {
            var views = [{ icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks?linkids=" + linkids + "&isSmartlist="+(isContactcompany ? false : "null")+"&isContactcompany=" + isContactcompany }];
            modal.show({ title: 'Execute Play', views: views });
        },
        showPlaybookSolutionInModal: function (title, tptUrl, contentheight) {
            var isAnnouncementPopup = $('.announcement-pop-modal').css('display') !== 'none' && $('.announcement-pop-modal').css('display') != undefined;;
            if (isAnnouncementPopup) {
                window.open(tptUrl, '_blank');
            }
            var views = [{icon: "book", name: title, url: tptUrl }];
            modal.show({ title: title, views: views });
        },
        showCallRecording: function (option) {
            var views = [{ icon: "headphones", name: 'Call Recording', url: "/connections/contacts/recording/" + option.contactId + "/" + option.callId }];
            modal.show({ title: 'Call to ' + option.email + ' at ' + shortDateWithTimeFromUTC(option.time), views: views});
        },
        showSelfServe: function (options) {
            var userinfo = { name: options.user, url: "/newselfserve/user" }
            var companyinfo = { name: options.company, url: "/newselfserve/company" }
            var organizationinfo = { name: options.organization, url: "/newselfserve/organization" }
            var trackinginfo = { name: options.tracking, url: "/newselfserve/tracking" }
            var steps;
            if (options.hasorganizationprofileaccess == true && options.hasorganizationaccess == true && options.hascompanyaccess == true && options.cancreateexternalsites == true) {
                steps = [userinfo, companyinfo, organizationinfo, planningInfo, trackinginfo]
            }
            else if (options.hascompanyaccess == true && options.hasorganizationaccess == false && options.cancreateexternalsites == true) {
                steps = [userinfo, companyinfo, trackinginfo]
            }
            else if (options.hasorganizationprofileaccess == true && options.hasorganizationaccess == true && options.hascompanyaccess == false && options.cancreateexternalsites == true) {
                steps = [userinfo, organizationinfo, trackinginfo]
            }
            else if (options.hasorganizationprofileaccess == true && options.hasorganizationaccess == true && options.hascompanyaccess == true && options.cancreateexternalsites == false) {
                steps = [userinfo, organizationinfo, companyinfo]
            }
            else if (options.hasorganizationprofileaccess == true && options.hasorganizationaccess == true && options.hascompanyaccess == false && options.cancreateexternalsites == false) {
                steps = [userinfo, organizationinfo]
            }
            else if (options.hasorganizationaccess == false && options.hascompanyaccess == true && options.cancreateexternalsites == false) {
                steps = [userinfo, companyinfo]
            }
            else if (options.hasorganizationaccess == false && options.hascompanyaccess == false && options.cancreateexternalsites == true) {
                steps = [userinfo, trackinginfo]
            }
            else {
                steps = [userinfo]
            }
            var _wizdata = {
                name: options.name,
                cancelaction: false,
                steps: steps
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showMarketingSelfServe: function (hasBrandTabAccess, hasCompaniesAccess) {
            var userinfo = { name: 'User', url: "/selfserve/user" }
            var companyinfo = { name: 'Company', url: "/selfserve/companyinfo" }
            var companytheme = { name: 'Brand Theme', url: "/selfserve/brandtheme" }
            var companydetails = { name: 'Brand Details', url: "/selfserve/brandspecs" }
            var steps;

            if (typeof (hasBrandTabAccess) === "undefined" || hasBrandTabAccess == true && hasCompaniesAccess == true || (hasCompaniesAccess) === "undefined") {
                steps = [userinfo, companyinfo, companytheme, companydetails]
            }
            else
                if (typeof (hasBrandTabAccess) === "undefined" || hasBrandTabAccess == false && hasCompaniesAccess == true || (hasCompaniesAccess) === "undefined") {
                    steps = [userinfo, companyinfo]
                }
           else
                    if (typeof (hasBrandTabAccess) === "undefined" || hasBrandTabAccess == true && hasCompaniesAccess == false || (hasCompaniesAccess) === "undefined") {
                        steps = [userinfo, companytheme, companydetails]
               }
                    else {
                   steps = [userinfo]
               }

            var _wizdata = {
                name: 'SelfServe',
                steps: steps
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showSalesSelfServe: function (hasCompaniesAccess) {
            var userinfo = { name: 'Personal Info', url: "/selfserve/sales/user" }
            var companyinfo = { name: 'Company Info', url: "/selfserve/sales/company" }
            var socialinfo = { name: 'Social Info', url: "/selfserve/sales/social" }
            var steps;

            if (typeof (hasCompaniesAccess) === "undefined" || hasCompaniesAccess == true) {
                steps = [userinfo, companyinfo, socialinfo]
            }
            else {
                steps = [userinfo, socialinfo]
            }

            var _wizdata = {
                name: 'SelfServe',
                steps: steps
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showEmailABTestContacts: function (id, options) {
            
            var views = [
                { icon: "", name: "", url: "/communicate/email/abtests/" + id + "/" + options.type + "/contacts" }
            ];
            modal.show({ title: options.name, views: views });
        },
        showFeedbackComments: function (itemid, type, options) {
            var views = [];
            if (options.templatetype != undefined) {                                
                views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + itemid + "/" + type + "/rating/comment", iconprefix: "fas" });
            }
            var title = 'Feedback > ' + views[0].name + '';
            if (options != undefined && options.showViews == true) {
                if (options.cansendemail && !options.isrestricted) {
                    views.push({ icon: "paper-plane", name: "Send Email", url: "/communicate/email/0?templates=" + null + "&files=" + itemid + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                }
                if (options.cansendtopartner == true && !options.isrestricted) {
                    views.push({ icon: "paper-plane", name: 'Send Email To Users', url: "/communicate/email/0?templates=" + null + "&files=" + itemid + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, iconprefix: "far", buttons: ["finish"] });
                }
                if (options.templatetype == '1048576') {
                    if (options.showPermission)
                        views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + itemid + "/" + options.shareType + "/null", buttons: ["save"] });
                    if (options.publish && !options.isrestricted) {
                        views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + itemid, buttons: ["publish"] });
                    }
                    if (options.canedit) {
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/images/" + itemid + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + options.issetup, buttons: ["save"] });
                    }
                    title = 'Image > ' + views[0].name + ' (<b><i>' + options.displayname + '</i></b>)';

                }
                else if (options.templatetype == '2097152') {
                    if (options.permission) {
                        views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + itemid + "/" + options.sharetype + "/" + itemid, buttons: ["save"] })
                    }
                    if (options.canedit)
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/documents/" + itemid + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + options.isSetup, buttons: ["save", "cancel"] })
                    if (!options.isrestricted){
                    views.push({ icon: "database", name: 'Data Room', url: "/collateral/datarooms/" + itemid + "/" + 2 });
                    }
                    if (options.canedit && options.hasversionaccess == true && options.hasversionaccess != undefined && !options.isrestricted) {
                        views.push({ icon: "history", name: 'Versions', url: "/gallery/file/versions/" + options.filetype + "/" + itemid + "?issetup=" + options.isSetup + "&iswizard=" + options.iswizard })
                    }
                    title = " Document " + " > " + views[0].name + " (<b><i>" + options.displayname + "</i></b>)";
                }
                else if (options.templatetype == '8388608') {
                    if (options.showPermission) {
                        views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/video/permissions/" + itemid + "/" + 900 + "/" + itemid, buttons: ["save"] });
                    }
                    if (options.publish && !options.isrestricted) {
                        views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + itemid, buttons: ["publish"] });
                    }
                    if (options.canedit)
                        views.push({ icon: "edit", name: "Edit", url: "/gallery/video/" + itemid + "/edit" + "?issetup=" + options.issetup, buttons: ["save"] });
                    title = "Video" + " > " + views[0].name + " (<b><i>" + options.displayname + "</i></b>)";
                }
            }
            modal.show({ title: title, views: views });
        },
        showPortal: function (id) {
            var views = [
                { icon: "share-alt", name: 'Settings', url: "/setup/portal/company/" + id, buttons: ["save"] },
                { icon: "sign-in ", name: 'Custom Login', url: "/setup/company/domain/editor/" + id, buttons: ["save"] }
            ];
            modal.show({ title: 'Manage Portal (<b><i>' + views[0].name + '</i></b>)', views: views });
        },
        showWelcomePage: function (options, callback) {
            var views = [{ icon: "image", name: options.title, url: "/selfserve/welcomepage/" + options.persona + "/" + options.personaopt, buttons: ["save"], iconprefix: "far" }, ];
            modal.show({ title: options.title + " (<b>" +options.name + "</b>)", views: views, callback: callback });
        },
        showImageGallery: function () {
            var views = [{ icon: "image", name: 'Image Gallery', url: "/gallery/images/v5?saveondblclick=true&iscompanyprofile=true" }, ];
            modal.show({ title: 'Image Gallery', views: views });
        },
        showDocGallery: function () {
            var views = [{ icon: "paste", name: 'Document Gallery', url: "/gallery/document/v5?iscompanyprofile=true" }, ];
            modal.show({ title: 'Document Gallery', views: views });
        },
        showInsperity: function () {
            var views = [{ icon: "image", name: 'Insperity', url: "/setup/insperity/company", buttons: ["save"], iconprefix: "far" },];
            modal.show({ title: 'Insperity', views: views });
        },
        showSlackConfiguration: function (id) {
            var views = [
                { icon: "share-alt", name: 'Slack', url: "/setup/configure/slack", buttons: ["save"] }
            ];
            modal.show({ title: 'Slack Configuration (<b><i>' + views[0].name + '</i></b>)', views: views });
        },
        showCreatePPT: function (templateId,option) {
            var _wizdata = {
                //Modify by lalita, to get media text type
                name: option.createppt,
                steps: [
                    { name: option.info, url: "/collateral/presentation/" + templateId + "/info/1" },
                    { name: option.choosefile, url: "/gallery/documents/8209/" + templateId + "?isdocumentimport=" + true + "&singleselectwithattach=" + true},
                    { name: option.manageslides, url: "/collateral/presentation/" + templateId + "/reordering", disableprevbutton: "1" }
                ]
            };

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showDocumentFieldMapping: function (id) {
            var views = [{ icon: "", name: 'Field Mapping', url: "/import/fieldmapping/" + id, buttons: ["finish"] }];
            modal.show({ title: 'Field Mapping', views: views });
        },
        showListsRefImport: function (status, callback) {
            var views = [{ icon: "", name: "", url: "/import/reference/" + status, buttons: ["select","cancel"] }];
            var title = (status == 3) ? 'Account Static Lists' : 'Recipient Lists';
            modal.show({ title: title, views: views, callback: callback });
        },
        showImportWizard: function (type, taskid,options) {
            var document = { name: options.selectfile, url: "/gallery/documents/" + type + "/" + taskid };
            var fieldmapping = { icon: "", name: options.fieldmapping, url: "/import/fieldmapping/" + taskid };

            var _wizdata = {
                name: "",
                steps: [document, fieldmapping]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showImportGmailContactWizard: function (taskid) {
            var gmail = { name: 'Gmail contact import', url: "/connections/import/gmail/" + taskid };
            var lists = { icon: "", name: 'Recipient lists', url: "/import/contact/lists/" + taskid };

            var _wizdata = {
                name: "",
                steps: [gmail, lists]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showImportEmailContactWizard: function (taskid, options) {
            var email = { name: 'Email contact import', url: "/connections/import/email/" + taskid + "?isdocumentimport=" + true + "&linktype=" + options.linktype };
            var lists = { icon: "", name: 'Recipient lists', url: "/import/contact/lists/" + taskid};

            var listsQueryParams = [];
            if (!isNaN(options.linktype) && typeof options.linktype !== "undefined")
                listsQueryParams.push("linktype=" + options.linktype);

            if (!isNaN(options.linkid) && typeof options.linkid !== "undefined")
                listsQueryParams.push("linkid=" + options.linkid);

            if (typeof options.playbookstepid !== "undefined")
                listsQueryParams.push("playbookstepid=" + options.playbookstepid);

            if (typeof options.playbookstepdelay !== "undefined")
                listsQueryParams.push("playbookstepdelay=" + options.playbookstepdelay);
            if (typeof options.ismdf !== "undefined" && options.ismdf)
                listsQueryParams.push("mdfRequestId=" + options.linkid);

            // Append query string if any parameters were added
            if (listsQueryParams.length > 0) {
                lists.url += "?" + listsQueryParams.join("&");
            }
            var _wizdata = {
                name: 'Import by Email',
                steps: [email, lists]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showRecipientList: function (id) {
            var views = [{ icon: "list", name: 'Recipient Lists', url: "/manage/campaigns/drip/" + id + "/list", buttons:["submit"],buttonaction:true }];
            modal.show({ title: 'Add From List', views: views });
        },
        showSocialPresets: function (options, callback) {
            var views = [
                { icon: "image", name: options.media, url: "/social/presets", buttons: ["use"], iconprefix: "far" },
            ];
            modal.show({ title: options.title, views: views, callback: callback });
        },
        showDocumentFieldMapping: function (id,options) {
            var views = [{ icon: "", name: options.fieldmapping, url: "/import/fieldmapping/" + id, buttons: ["finish"]}];
            modal.show({ title: options.fieldmapping, views: views });
        },
        showImportWizard: function (type, taskid,options) {
            var document = { name: options.selectfile, url: "/gallery/document/v5/import/" + type + "/" + taskid + "?isdocumentimport=" + true };
            var fieldmapping = { icon: "", name: options.fieldmapping, url: "/import/fieldmapping/" + taskid };

            var _wizdata = {
                name: "",
                steps: [document, fieldmapping]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showImportAccountWizard: function (type, taskid, options) {
            var document = { name: options.selectfile, url: "/gallery/document/v5?singleselect=true" + "&ft=" + type + "&taskid=" + taskid + "&isdocumentimport=" + true + "&ismoreactions=" + true };
            var fieldmapping = { icon: "", name: options.fieldmappinglists, url: "/import/account/fieldmapping/" + taskid };
            var sharing = { icon: "", name: options.sharing, url: "/setup/sharing/permissions/" + options.accountid + "/" + options.sharetype + "/" + null + "/" + null + "/" + taskid, buttons: ["save"] };

            var _wizdata = {
                name: 'Import Accounts',
                steps: [document, fieldmapping, sharing]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showImportEventCalendarWizard: function (type, taskid, options) {
            var document = { name: options.selectfile, url: "/gallery/document/v5?singleselect=true" + "&ft=" + type + "&taskid=" + taskid + "&isdocumentimport=" + true };
            var fieldmapping = { icon: "", name: options.fieldmapping, url: "/import/calendarevent/fieldmapping/" + taskid };
            var sharing = { name: options.sharing, url: "/setup/sharing/permissions/" + options.eventid + "/" + options.sharetype + "/" + null + "/" + null + "/" + taskid, buttons: ["save"] };
            var _wizdata = {
                name: 'Import Calendar Events',
                steps: [document, fieldmapping, sharing]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showImportContactWizard: function (type, taskid, options) {
            var document = { name: options.selectfile, url: "/gallery/document/v5?singleselect=true" + "&ft=" + type + "&taskid=" + taskid + "&isdocumentimport=" + true};
            var fieldmapping = { icon: "", name: options.fieldmappinglists, url: "/import/contact/fieldmapping/" + taskid };
            var fieldmappingQueryParams = [];

            if (typeof options.cstatus !== "undefined") {
                fieldmappingQueryParams.push("cstatus=" + options.cstatus);
            } 
            else if (typeof options.ishardbouncedimport !== "undefined") {
                fieldmappingQueryParams.push("isharbounceimport=" + options.ishardbouncedimport);
            }

            if (!isNaN(options.linktype) && typeof options.linktype !== "undefined") {
                fieldmappingQueryParams.push("linktype=" + options.linktype);
                document.url += "&linktype=" + options.linktype;
            }

            if (!isNaN(options.linkid) && typeof options.linkid !== "undefined")
                fieldmappingQueryParams.push("linkid=" + options.linkid);

            if (typeof options.playbookstepid !== "undefined")
                fieldmappingQueryParams.push("playbookstepid=" + options.playbookstepid);

            if (typeof options.playbookstepdelay !== "undefined")
                fieldmappingQueryParams.push("playbookstepdelay=" + options.playbookstepdelay);
            if (typeof options.ismdf !== "undefined" && options.ismdf)
                fieldmappingQueryParams.push("mdfRequestId=" + options.linkid);

            // Append query string if any parameters were added
            if (fieldmappingQueryParams.length > 0) {
                fieldmapping.url += "?" + fieldmappingQueryParams.join("&");
            }

            var _wizdata = {
                name: 'Import Contacts',
                steps: [document, fieldmapping]
            };

            if (typeof (options.IsImportDeal) != "undefined" && options.IsImportDeal)
                _wizdata.name = 'Import Deals';

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showImportContactOfflineWizard: function (type, taskid, options) {
            var document = { name: options.selectfile, url: "/gallery/document/v5?singleselect=true" + "&ft=" + type + "&taskid=" + taskid + "&isdocumentimport=" + true };
            var fieldmapping = { icon: "", name: options.fieldmappinglists, url: "/import/contact/offlineactivity/fieldmapping/" + taskid };

            if (typeof (options.cstatus) != "undefined")
                fieldmapping.url += "?cstatus=" + options.cstatus;

            var _wizdata = {
                name: 'Import Contact Offline Activities',
                steps: [document, fieldmapping]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showImportSalesDataUserWize: function (type, taskid, options) {
            var document = { name: options.selectfile, url: "/gallery/document/v5/import/" + type + "/" + taskid + "?isimportsalesdatarecord=" + true };
            var fieldmapping = { icon: "", name: options.fieldmappinglists, url: "/incentive/importsalesdata/fieldmapping/" + taskid + "?importtype=" + options.importType };

            var _wizdata = {
                name: "",
                steps: [document, fieldmapping]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showImportSalesData: function (type, taskid, options) {
            var document = { name: options.selectfile, url: "/gallery/document/v5/import/" + type + "/" + taskid + "?isimportsalesdatarecord=" + true + "&isdocumentimport=" + true};
            var fieldmapping = { icon: "", name: options.fieldmappinglists, url: "/incentive/importsalesdata/fieldmapping/" + taskid + "?importtype=" + options.importType };

            var _wizdata = {
                name: options.headername,
                steps: [document, fieldmapping]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showImportRenewalSalesData: function (options) {
            var views = [{ name: options.selectfile, url: "/gallery/document/v5/import/" + options.importtype + "?isimportrenewalsalesdata=" + true + "&isdocumentimport=" + true , buttons: ["import"] }];
            modal.show({ title: options.title, views: views});
        },
        showImportSalesDataLock: function (options, callback) {
            var views = [{ name: options.name, url: "/incentive/importlockunlocknotification", buttons: ["send"] }];
            modal.show({ title: options.title, views: views, callback: callback });
        },
        showProductSalesData: function (options) {
            var views = [{ name: options.name, url: "/incentive/productsalesdata?taskid=" + options.taskid + "&status=" + options.status }];
            var title = options.name + " > " + options.title;
            modal.show({ title: title, views: views });
        },
        showImportUserWizard: function (type, taskid, options) {
            var document = { name: 'Select File', url: "/gallery/document/v5?singleselect=true" + "&ft=" + type + "&taskid=" + taskid + "&isdocumentimport=" + true };
            var fieldmapping = { icon: "", name: 'Field Mapping', url: "/import/users/fieldmapping/" + taskid };
            var organization = { icon: "", name: 'Organization', url: "/setup/user/organization/" + taskid + "?iscreateuser=" + true };
            var group = { icon: "", name: 'User Groups', url: "/setup/user/groups/" + taskid };
            var ChannelManager = { icon: "user-circle", name: 'Assign as Manager', url: "/organization/groups/addremove/" + taskid+"?isuserimport=true", iconprefix: "far" };
            var wizardSteps = [];
            if (options.issiteorsuper || (options.haveorganizationcreatepermission && options.haveusercreatepermission)) {
                wizardSteps = [document, fieldmapping, group, organization, ChannelManager];
            }
            else {
                wizardSteps = [document, fieldmapping, group, organization];
            }

            var _wizdata = {
                name: 'Import Users',
                steps: wizardSteps
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showImportOrgWizard: function (type) {
            var document = { name: 'Select File', url: "/gallery/document/v5/import/" + type + "?isdocumentimport=" + true+"&isimport="+true };
            var fieldmapping = { name: 'Field Mapping', url: "/import/organization/fieldmapping"};
            var orggroup = { name: 'Organization Groups', url: "/setup/org/import/orggroup" };

            var _wizdataorg = {
                name: 'Import Organizations',
                steps: [document, fieldmapping, orggroup]
            };

            var _wizard = new wizard(_wizdataorg);
            _wizard.show();
        },
        showImportServices: function (gmail) {
            var fieldmapping = { icon: "", name: 'Field Mapping & Lists', url: "/import/services/" + gmail };

            var _wizdata = {
                name: "",
                steps: [fieldmapping]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showUsageEmail: function (templateID, acitivity) {
            var views = [{ icon: "", name: 'Contacts', url: "/setup/emails/" + templateID + "?activity=" + acitivity }];
            modal.show({ title: 'Contacts', views: views });
        },
        showTrackingLinks: function(options, callback){
            var views = [{ icon: "image", name: options.name, url: "/tracking/links_sites", buttons: ["done"], iconprefix: "far"}];
            modal.show({ title: options.title, views: views, callback: callback });
        },
        showDataroomUsers: function (data) {
            var views = [{ icon: "image", name: options.name, url: "/report/dataroom/users/" + data.id, iconprefix: "far" }];
            modal.show({ title: 'Data Rooms - '+data.name, views: views });
        },
        showEmailEmoji: function (jData, callback) {
            var views = [{ icon: "", name: 'Insert Emoji', url: "/emailemoji?isemaileditor" + jData.isEmailEditor,buttons:["insert"] }];
            modal.show({ title: 'Insert Emoji', views: views, callback: callback });
        },
        showWireFrame: function (id, companyID, callback) {
            var views = [{ icon: "image", name: 'Manage Portal', url: "/company/login/wireframes?id=" + id + "&companyid=" + companyID, buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: 'Custom Login Page Wireframes', views: views, callback: callback });
        },
        showEngagementLevel: function (options) {
            var views = [{ icon: "chart-bar", name: 'Report', url: "/engagement-message?widgetname=" + options.widgetname + "&linktype=" + options.linktype + "&linktoid=" + options.linktoid + "&configurationname=" + options.configurationname + "&personatype=" + options.personatype + "&personaoptiontype=" + options.personaoptiontype }];
            var title = options.title;
            modal.show({ title: title, views: views });
        },
        islocked: function (e) {
            if (modalstack.length > 0) {
                var selected = modalstack.length - 1;
                var mdata = modalstack[selected];
                var currentView = mdata.settings.currentViewIndex;
                if (e.target.attributes.pagemodal == undefined) { 
                if (mdata.locked === true) {//if current selected modal is locked
                    for (var i = 0; i < modalstack.length; i++) {
                        if (modalstack[i].locked === true) {
                            if (isDivModal)
                                return false;
                            else
                                return true;
                        }
                    }
                }
                else {
                    if (modalstack[selected].settings.views[currentView].buttons != undefined) {
                        return true;
                    }
                    else {
                        if (isDivModal)
                            return false;
                        else
                            return true;
                    }
                }
                }
            }
        },
        iscloseTab: function () {
            var mdata = modalstack[modalstack.length - 1];
            if (mdata.settings.closeTab)
                return true;
            
            return false;
        },
        returnModalStackLength: function () {
            return modalstack.length;
        },
        closeall: function () {
            if (isDivModal) {
                isDivModal = false;
                return true;
            }
            
            isLoading = false;
            while (modalstack.length > 0)
                modal.close();
            return true;
        },
        close: function (id, callback) {
            //this is to communicate between salesforce and AMP for closing the send email modal opened in saleforce lightning community
            if (postmessage != '' && (postmessage = "CloseViewAssetModalInSFDC" || window.location.href.indexOf('sf-handler.cshtml') > -1 || evtdata == "SendAMPEmail" || evtdata == "PublishSocialTemplate"))//checking if the modal is opened in the sf handler used in lightning components in salesforce
                window.parent.postMessage(postmessage, "*");
            $("#modalDialog").removeClass("modal-overflow-sf");
            //postmessage used in salesforce
            if (modalstack.length == 1) {
                postmessage = "sfiFrameMinimize";
                window.parent.postMessage(postmessage, "*");
            }
            //priyanka - for #7488
            if (typeof (emailTableEditor) != "undefined") {
                if (emailTableEditor.importWindowOpen != null && emailTableEditor.importWindowOpen != undefined) {
                    if (emailTableEditor.importWindowOpen == true) {
                        //added By Nikita for lock the design
                        if (editor.islock==false)
                        {
                            emailTableEditor.showHideInsertObjectsModal();
                        }
                        emailTableEditor.importWindowOpen = false;
                    }
                }
            }

            isLoading = false;
            //console.debug('close modal');
            if (modalstack.length == 0)
                return;

            if (id === undefined)
                id = modalstack[modalstack.length - 1].id;

            var $modal = $("#modalDialog");
            var $header = $modal.find(".modal-header");
            var $body = $modal.find(".modal-body");
            var $footer = $modal.find(".modal-footer");
            var index = -1;
            for (var i = 0 ; i < modalstack.length; i++) {
                if (modalstack[i].id == id) {
                    index = i;
                    break;
                }
            }

            for (var i = modalstack.length - 1; i >= index; i--) {
                var mdata = modalstack[i];

                if (mdata.settings.closeCallback !== undefined)
                    mdata.settings.closeCallback();

                $body.find("> div[data-modal-id='" + mdata.id + "']").remove();
                $footer.find("[data-modal-id='" + mdata.id + "']").remove();

                modalstack.pop();
                zIndexModalWizard.popElement(); //remove entry of this modal from the stack maintained for z-indexes,#24734 fixed issue for mutiple modal opened
            }
            var callbackCalled = false;
            if (modalstack.length == 0) {
                if (mdata.settings.closeTab && !windowChange) {
                    window.close();
                    windowChange = false;
                }
                else {
                    if (callback !== undefined) {
                        $modal.bind('hidden.bs.modal', function () {
                            callback();
                            $modal.unbind('hidden.bs.modal');
                        });
                        callbackCalled = true;
                    }
                    $modal.modal("hide");
                    windowChange = false;
                    windowWizardChange = false;
                }
            }
            else {
                var mdata = modalstack[modalstack.length - 1];
                updateView(mdata.settings.currentViewIndex);
                updateHeader($header);
                $body.find("> div[data-modal-id='" + mdata.id + "']").show();
            }
            Dformatval = -1;
            if (callback !== undefined && !callbackCalled)
                callback();
            //for salesforce
            if (FROMTPAPP) {
                $(".modal.fade.in").removeClass("in");
                $('.modal-backdrop').removeClass('in');
                FROMTPAPP = false;
            }
            
        },
        show: function (settings, callback) {
            var originalSettings = $.extend(true, {}, settings);
            if (isLoading) return;
            isLoading = true;
            settings = $.extend({
                title: "Dialog",
                url: "",
                views: [],
                subactions:[],
                NormalButton: undefined,
                ActiveButton: undefined,
                callback: undefined,
                closeCallback: undefined,
                locked: false,
                gridobj: null,
                currentViewIndex: 0,
                closeAction: false,
                preventClose: false,
                closeTab: false,
                closeButton: true,
                smallModal: false,
                isEditor: true,
                isDripEditor: false,
                hideCloseButton: false,//#24749 this flag is used to remove close/cancel button from modal 
                isCancel: false,
                isitemNull: undefined,
                size: "xg",
            }, settings);

            var $modal = $("#modalDialog");
            if (!init) {
                init = true;
                var $modalBack = $modal.find(".modalBack");
                $modalBack.hide();
                $modalBack.find(".btn").on("click", function () {
                    modal.close();
                    
                });
            }

            var $header = $modal.find("> .modal-dialog > .modal-equal > .modal-content > .modal-header");
            var $body = $modal.find("> .modal-dialog > .modal-equal > .modal-content > .modal-body");
            var $footer = $modal.find("> .modal-dialog > .modal-equal > .modal-content > .modal-footer");
            //$("#modalDialog").css('overflow-x', 'hidden');
            $header.find(".dropdown-lang").remove();//#24723 Language drop down button removed.
            var mdata = {};
            mdata.id = getUniqueTime();
            mdata.content = $("<div data-modal-id='" + mdata.id + "'><h1 class='loading-section'><i class='fa fa-spinner fa-spin'></i> Loading...</h1></div>");
            mdata.locked = settings.locked;

            if (settings.NormalButton == undefined) {
                settings.NormalButton = "#232323";
            }

            if (settings.ActiveButton == undefined) {
                settings.ActiveButton = "#ed145b";
            }
            
            //for managing model size
            if (settings.size != undefined && settings.size != "") {
                $modal.find(".modal-dialog").removeClass("modal-xg modal-lg modal-md modal-sm");
                $modal.find(".modal-dialog").addClass("modal-" + settings.size);
            }

            mdata.settings = settings;
            $body.append(mdata.content);

            mdata.originalSettings = originalSettings;
            modalstack.push(mdata);

            //views
            updateView(settings.currentViewIndex);

            if (modalstack.length == 1) {
                //console.debug({ backdrop: (settings.closeOnClick ? "" : "static") });
                $('#modalDialog').modal({ show: true, keyboard: false })
            } else {
                for (var i = 0; i < modalstack.length - 1; i++)
                    modalstack[i].content.hide();
            }

            //updateHeader($header);

            mdata.content.load(mdata.settings.views[0].url, null, function () {

                isLoading = false;
                if (mdata.settings.views[0].buttonaction != undefined)
                    mdata.settings.closeAction = mdata.settings.views[0].buttonaction;
                if (callback !== undefined)
                    callback();
            });
            zIndexModalWizard.pushElement(mdata.id); //add modal id in stack maintained for z-indexes
            $modal.css("z-index", zIndexModalWizard.getHighestZIndex()); //set highest index to current modal
            //postmessage used in salesforce
            var urls = getUrlVars();
            var data = typeof(urls["issendpostmessage"]) == "undefined" || urls["issendpostmessage"] == 'false' ? false : true;
            if (data) {
                postmessage = "sfiFrameMaximize";
                window.parent.postMessage(postmessage, "*");
            }
        },
        getLink: function () {
            var stack = [];
            for (var i = 0; i < modalstack.length; i++)
                stack.push(modalstack[i].originalSettings);

            var location = window.location.href;
            var rawstring = JSON.stringify({ url: location, modals: stack });
            var compressed = LZString.compressToEncodedURIComponent(rawstring);
            return compressed;
        },
        openLink: function (compressedString) {
            modal.closeall();

            setTimeout(function () {
                var rawstring = LZString.decompressFromEncodedURIComponent(compressedString);
                var object = JSON.parse(rawstring);

                window.location.href = object.url;

                var openNext = function (i) {
                    if (i >= object.modals.length)
                        return;
                    modal.show(object.modals[i], function () { openNext(i + 1) });
                }

                openNext(0);
            }, 1000);
        },
        showAssetsRelatedToFilters: function (id, isTemplate, widgetHeader, isUsedAsset) {
            var views = [{ icon: "view", name: 'View', url: `/FilterManagement/AssetsForFilters/${id.trim()}/${isTemplate}?isusedasset=${isUsedAsset}` }, ];
            modal.show({ title: widgetHeader, views: views });
        },
        showAssetsRelatedToFiltersInGrid: function (id, isTemplate, widgetHeader, type) {
            var views = [{ icon: "list", name: 'Assigned Assets', url: "/FilterManagement/AssetsForFilterGrid/" + id + "/" + isTemplate + "/" + type },
                         { icon: "info-circle fa-lg", name: 'Info', url: "/FilterManagement/CategoryInfo/" + id + "/" + type, buttons: ["save"] },
                         { icon: "fas fa-fw fa-filter", name: 'Added Filters', url: "/FilterManagement/CategoryFilters/" + id + "/" + false + "/" + type }];
            modal.show({ title: widgetHeader, views: views });
        },
        showUserProfile: function () {
            var views = [{ icon: "view", name: '{$widgets.announcementmodal.quicklinks.marketing.View}', url: "/user/profile?" + getTimeStamp(), buttons: ["save"] }];
            modal.show({ title: '{$widgets.announcementmodal.quicklinks.marketing.Title}', views: views });
        },
        showOpportunityWizard: function (ProjectTypeID, Options) {
            var _wizdata = {
                name: Options.headername,
                steps: [
                    { name: Options.info, url: "/project/" + ProjectTypeID + "/info"},
                    { name: Options.fields, url: "/project/" + ProjectTypeID + "/fields" },
                    { name: Options.layout, url: "/project/" + ProjectTypeID + "/layout?isadd=true" },
                    { name: Options.sharing, url: "/setup/sharing/permissions/" + ProjectTypeID + "/" + Options._opportunity_type_ + "/" + null  }
                ]
            };

            _wizdata["preventClose"] = false;
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        
        showEditOpportunity: function (ProjectTypeID, options) {
            var views = [];
            if (options.sharelevel > parseInt("1")) {
                views.push({ icon: "bars", name: options.layout, url: "/project/" + ProjectTypeID + "/layout?isadd=false", buttons: ["save"], buttonaction: true });
                views.push({ icon: "edit", name: options.fields, url: "/project/" + ProjectTypeID + "/fields", buttons: ["save"], buttonaction: true });
                views.push({ icon: "info-circle", name: options.info, url: "/project/" + ProjectTypeID + "/info", buttons: ["save"] });
            }
            if (options.sharingpermission) {
                views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + ProjectTypeID + "/" + options._opportunity_type_ + "/" + null, buttons: ["save"] });
            }
            var title = options.title + " " + views[0].name + " (<b><i>" + options.name + "</i></b>)";
            modal.show({ title: title, views: views, preventClose:true, isEditor: false });
        },
        showCaseWizard: function (CaseTypeID, Options) {
            var _wizdata = {
                name: Options.headername,
                steps: [
                    { name: Options.info, url: "/case/" + CaseTypeID + "/info" },
                    { name: Options.fields, url: "/case/" + CaseTypeID + "/fields" },
                    { name: Options.layout, url: "/case/" + CaseTypeID + "/layout?isadd=true" }
                ]
            };

            _wizdata["preventClose"] = false;
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showEditCase: function (CaseTypeID, options) {
            var views = [{ icon: "bars", name: options.layout, url: "/case/" + CaseTypeID + "/layout?isadd=false", buttons: ["save"], buttonaction: true },
                { icon: "edit", name: options.fields, url: "/case/" + CaseTypeID + "/fields", buttons: ["save"], buttonaction: true },
                { icon: "info-circle", name: options.info, url: "/case/" + CaseTypeID + "/info", buttons: ["save"] },
                { icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + CaseTypeID + "/" + options._case_type_ + "/" + null, buttons: ["save"] }];
            var title = options.title + " " + views[0].name + " (<b><i>" + options.name + "</i></b>)";
            modal.show({ title: title, views: views, preventClose: true, isEditor: false });
        },
        showsolutionWizard: function (SolutionTypeID, Options) {
            var _wizdata = {
                name: Options.headername,
                steps: [
                    { name: Options.info, url: `/solution/${SolutionTypeID}/info?create=true` },
                    { name: Options.fields, url: "/solution/" + SolutionTypeID + "/fields" },
                    { name: 'Sharing', url: "/setup/sharing/permissions/" + SolutionTypeID + "/" + Options._solution_type_ + "/" + null}
                ]
            };

            _wizdata["preventClose"] = false;
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showEditSolution: function (SolutionTypeID, options) {
            var views = [{ icon: "edit", name: options.fields, url: "/solution/" + SolutionTypeID + "/fields", buttons: ["save"], buttonaction: true },
                { icon: "info-circle", name: options.info, url: "/solution/" + SolutionTypeID + "/info", buttons: ["save"] },
                { icon: "share-alt", name: 'Sharing', url: `/setup/sharing/permissions/${SolutionTypeID}/${options._solution_type_}/null`, buttons: ["save"] },
                { icon: "language", name: 'Localization', url: `/solution/${SolutionTypeID}/localization`, buttons: ["save"] }];
            var title = 'Solution' + ' ' + views[0].name + '' + ' (<b>' + options.name + '</b>)';
            modal.show({ title: title, views: views, preventClose: true, isEditor: false });
        },
        SolutionGroupWizard: function (id, options) {
            var _wizdata = {
                name: 'Create Solution Group',
                steps: [
                    { name: 'Info', url: `/setup/solutions/groups/info/${id}` },
                    { name: 'Select Banner', url: "/setup/solution/groups/" + id + "/images?issolutiongroup=true&singleselect=" + true + "&saveondblclick=true&isplaybook=" + false + "&showWebBanner=" + true + "&isembed=" + true + "&showbannertemplate=" + true + "&issetup=" + false + "&isbadge=" + true },
                    { name: 'Add Solutions', url: `/setup/solution/groups/${id}/addremove?issolutiongroup=true` },
                    { name: 'Sharing', url: `/setup/sharing/newversion/${options.sharetype}/${id}?copy=true` },
                ],
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showSolutionGroup: function (id, groupName, options) {
            var views = [
                { icon: "info-circle", name: 'Info', url: `/setup/solutions/groups/info/${id}`, buttons: ["save"] },
                { icon: "image", name: 'Select Banner', url: "/setup/solution/groups/" + id + "/images?issolutiongroup=true&singleselect=" + true + "&saveondblclick=true", buttons: ["save"] },
                { icon: "image", name: 'Select Overview Banner', url: "/setup/solution/groups/" + id + "/images?issolutiongroup=true&singleselect=" + true + "&saveondblclick=true&isoverviewbanner="+true, buttons: ["save"] },
                { icon: "file", name: 'Add Solutions', url: `/setup/solution/groups/${id}/addremove?issolutiongroup=true` },
                { icon: "share-alt", name: 'Sharing', url: `/setup/sharing/newversion/${options.sharetype}/${id}?copy=true`, buttons: ["save"] }
                
            ];       
            var title = 'Solution Groups > ' + views[0].name + ' (<b><i>' + groupName + '</i></b>)';
            modal.show({ title: title, views: views });
        },
        showSolutionLocalization: function (solutionTypeID, options) {
            var views = [{ icon: "language", name: 'Localization', url: `/solution/${solutionTypeID}/localization?selectedtab=${options.selectedtab}`, buttons: ["save"] }];
            var title = views[0].name + '' + ' (<b>' + options.name + '</b>)';
            modal.show({ title: title, views: views, preventClose: true, isEditor: false });
        },
        manageSolutionDiscountRule: function(data){
            var views = [{ icon: "usd-square", name: 'Manage Solution Discount Rule', url: `/setup/solution/pricingrules/${data.solutiontypeid}/${data.solutionid}`, buttons: ["save"] }];
            var title = views[0].name + ' (<b>' + data.name + '</b>)';
            modal.show({ title: title, views: views, locked: true, preventClose: true, isEditor: false });
        },
        showOpportunityForUser: function (userID) {
            var hideActions = false;
            if (isNewUI)
                hideActions = true;
            var views = [{ name: 'Opportunity', url: "/manage/opportunity-records/" + userID + "?hideactions=" + hideActions }];
            modal.show({ title: 'Opportunity Created', views: views });
        },

        showSharedUsersForOpportunity: function(id,poolID){ 
            var views = [{ name: 'Opportunity',url: "/opportunityrouting/shared-users-preview/" + id + "/" + poolID}];
             modal.show({ title: 'Opportunity Created', views: views });
        },

        showOrganizationOpportunity: function (userid, orgID, isEngagementReport, stage, type) {
            var hideActions = false;
            if (isNewUI)
                hideActions = true;
            var views = [];
            if (userid<=0)
                views.push({ name: 'Opportunity', url: "/manage/opportunity-records/org/" + orgID + "?createdonly=" + true + "&hideactions=" + hideActions });
            else
                views.push({ name: 'Opportunity', url: "/manage/opportunity-records/org/" + orgID + "?userid=" + userid + "&isengagementreport=" + isEngagementReport + "&stage=" + stage + "&hideactions=" + hideActions });

            var Title = 'Opportunity Created';
            if (type != null && type != "") 
                Title = '{$ajax_engagement_report.opportunities} (' + type + ')'

            modal.show({ title: Title, views: views });
        },
        showSharedLeads: function (userID) {
            var views = [{ name: 'Leads Shared', url: "/connections/contacts/shared/" + userID }];
            modal.show({ title: 'Leads Shared', views: views });
        },
        showAssetOwnsershipTransfer: function (data) {
            var views = [{ name: '{$ajax_sa_users.GridColumns.ChangeOwnership}', url: "/sa/ownershiptransfer/" + data.id }];
            modal.show({ title: "User > Change Ownership of Assets (<b><i>" + data.email + "</i></b>)", views: views });
        },
        showcertificationPass: function (userID, emailId, isorgcertificationuser) {
            var views = [{ name: 'Certification Passed', url: "/setup/templates/certificationpass/" + userID}];
            var title = "";
            if (emailId == undefined && emailId == null)
                title = "User > Certification Passed";
            else {
                if (isorgcertificationuser)
                    title = "Certification Passed (<b><i>" + emailId + "</i></b>)";
                else
                    title = "User > Certification Passed (<b><i>" + emailId + "</i></b>)";
            }
            modal.show({ title: title, views: views });
        },
        showSharedLeadsForOrg: function (orgID) {
            var views = [{ name: 'Leads Shared', url: "/contacts/shared/" + orgID }];
            modal.show({ title: 'Leads Shared', views: views });
        },
        showOpportunitiesCreatedByUser: function (userID, createdOnly, contactCheck) {
            var hideActions = false;
            if (isNewUI)
                hideActions = true;
            var views = [{ name: 'Opportunity', url: "/manage/opportunity-records/" + userID + "?createdonly=" + (createdOnly !== undefined ? createdOnly : false) + "&contactcheck=" + (contactCheck !== undefined ? false : true) + "&hideactions=" + hideActions }];
            modal.show({ title: 'Opportunity Created', views: views });
        },
        showSharedLeadsForOrgGroup: function (orgGroupID) {
            var views = [{ name: 'Leads Shared', url: "/contacts/shared/0?orggroupid=" + orgGroupID }];
            modal.show({ title: 'Leads Shared', views: views });
        },
        showOpportunityForOrgGroup: function (orgID,orgGroupID,userID) {
            var views = [];
            var hideActions = false;
            if (isNewUI)
                hideActions = true;
            views.push({ name: 'Opportunity', url: "/manage/opportunity-records/org/" + orgID + "?orggroupid=" + orgGroupID + "&userid=" + userID + "&hideactions=" + hideActions});
            modal.show({ title: 'Opportunity Created', views: views });
        },
        showPickForm: function () {
            var views = [{ icon: "chart-bar", name: 'Report', url: "/forms/pickform", iconprefix: "far" }];
            modal.show({ title: 'All Forms', views: views });
        },
        showAdvancedsearch: function (templatetypes, callback) {
            var views = [{ icon: "search", name: 'Advanced Search', url: "/advancedsearch?temtypes=" + templatetypes, buttons: ["submit"] }];
            modal.show({ title: 'Advanced Search', views: views, callback: callback });
        },        
        showSelectedAssets: function(callback) {
            var views = [{ icon: "search", name: 'Multiple Asset Selection', url: "/multiple-assetselection", buttons: ["save"]}];
            modal.show({ title: 'Selected Assets', views: views, locked: true, preventClose: true, closeButton: false, callback: callback });
        },
        selectedAssets: function (assetId, isViewAssets, selectedAssetIds, canDataRoomSend) {
            var _wizdata = {
                name: 'Add to Dataroom & Send',
                steps: [

                    { name: 'Select Template', url: `/collateral/datarooms?isviewassets=${isViewAssets}&selectedassetids=${selectedAssetIds}&ismultipleassets=true` },
                    { name: 'Dataroom Editor', url: `collateral/data-room/${assetId}/editor` }
                ]
            };

            if (canDataRoomSend)
                _wizdata.steps.push({ name: 'Send Email', url: `/communicate/email/0?assetid=${assetId}&isAssetEmail=true&customsendmodal=true&hideimportcustomize=true`, wizardclose: true });

            var wizardFinishtxt = 'Finish';
            _wizdata.finishBtnText = wizardFinishtxt;

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showRelatedAssets: function (id, options) {
            var views = [];
            views.push({ icon: "address-book", name: 'Associated Assets', url: "/related-assets/" + id });
            if (options.linkids != null && options.linkids != "" && options.isSmartlist != "" && options.isSmartlist != "") {
                if (options.cansend) {
                    views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist, buttons: ["finish"] });
                }
                if (options.canPartnerSend) {
                    views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist + "&ispartner=" + true, buttons: ["finish"], iconprefix: "far" });
                }
            } else {
                if (options.cansend) {
                    views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"] });
                }
                if (options.canPartnerSend) {
                    views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&ispartner=" + true, buttons: ["finish"], iconprefix: "far" });
                }
            }
            
            modal.show({ title: 'FAQs' + '> ' + 'Associated Assets' + ' (<b><i>' + options.name + '</i></b>)', views: views, locked: true, preventClose: true, closeButton: false });
        },
        showActivityWidgetContacts: function (type, index, format) {            
            if (type == "") {
                var views = [
                  { icon: "user", name: 'Contact', url: "/widgets/activecontact?type=noactivity&index=" + index + "&format=" + format }
                ];
                modal.show({ title: 'Activity for contacts ', views: views });
            }
            else {
                var views = [
                  { icon: "user", name: 'Contact', url: "/widgets/activecontact?type=" + type + "&index=" + index + "&format=" + format }
                ];
                modal.show({ title: 'Activity for contacts (' + type + ')', views: views });
            }
        },
        showProjectContactsActivity: function (data) {
            var param = "";
            if (data.linktoid != undefined)
                param += "&linktoid=" + data.linktoid + "&linktype=" + data.linktype+ "&viewoption=" + data.viewoption + "&orgviewoption=" + data.orgviewoption + "&groupviewoption=" + data.groupviewoption;
            else
                param += "&linktype=" + data.linktype + "&viewoption=" + data.viewoption + "&orgviewoption=" + data.orgviewoption + "&groupviewoption=" + data.groupviewoption;

            var views = [
                { icon: "user", name: 'Contact', url: "/widgets/activecontact?type=" + data.type + "&index=" + data.index + "&format=" + data.format + "&projecttypeid=" + data.projecttypeid + "&isproject=true" + param }
            ];
            modal.show({ title: 'Activity for contacts (' + data.type + ')', views: views });
        },

        showActivityWidgetSharedContacts: function (index, format, options) {
            var title = "";
            if (typeof (options) != "undefined") {
                if (typeof (options.Title) != "undefined")
                    title = options.Title;
            }
            var views = [
                           { icon: "user", name: 'Contact', url: "/widgets/activecontact?index=" + index + "&format=" + format + "&shared=true" }
            ];
            modal.show({ title: title, views: views });
        },
        showPresentationsForMerge: function (templateid, callback) {
            var views = [{ icon: "user", name: 'PPT', url: "/collateral/presentation/" + templateid + "/merge", buttons: ["insert"] }];
            modal.show({ title: 'Add Additional Slides', views: views, callback :callback });
        },
        showMergedPresentationQuestionnaire: function (template) {
            var views = [];
            if (template.usedatasource == 1)
                views.push({ name: 'AssetPicker', url: "/collateral/presentation/" + template.id + "/assetpicker", buttons: ["save"] });
            if (template.hasquestionnaire)
                views.push({ name: 'Input', url: "/collateral/presentation/" + template.id + "/questions", buttons: ["save"] });
            modal.show({ title: "", views: views});
        },
        showWidget: function (options) {
            var urlParam = "";
            if (options.version != undefined)
                urlParam += urlParam != "" ? "&widgetversion=" + options.version : "?widgetversion=" + options.version;

            if (options.id != undefined && options.id != null) {
                var views = [{ icon: "user", name: 'Info', url: "/sa/widget/" + options.id + urlParam, buttons: ["save"]}];
                var title = 'Edit Widget';
            }
            else {
                var views = [{ icon: "user", name: 'Info', url: "/sa/widget/0" + urlParam, buttons: ["save"] }];
                var title = 'Add Widget';
            }
            modal.show({ title: title, views: views});
        },
        showWidgetGroup: function (options) {
            var urlParam = "";
            if (options.version != undefined)
                urlParam += urlParam != "" ? `&widgetversion=${options.version}` : `?widgetversion="${options.version}`;
            var views = [];
            if (options.id != undefined && options.id != null) {
                views.push({ icon: "user", name: 'Info', url: `/sa/widget/group/${options.id}${urlParam}`, buttons: ["save"] });
            }
            else {
                views.push({ icon: "user", name: 'Info', url: `/sa/widget/group/0${urlParam}`, buttons: ["save"] });
            }
            views.push({ icon: "building", name: 'Add Or Remove Widget', url: `/sa/widget/group/action/${options.id}`, iconprefix: "far" });

            var title = 'Widget Group > ' + views[0].name;

            if (options.groupName != "")
                title += ' (<b><i>' + options.groupName + '</i></b>)';

            modal.show({ title: title, views: views });
        },
        showPersona: function (options) {
            var urlParam = "";
            if (options.version != undefined)
                urlParam += urlParam != "" ? "&widgetversion=" + options.version : "?widgetversion=" + options.version;
            if (options.type != undefined)
                urlParam += urlParam != "" ? "&personatype=" + options.type : "?personatype=" + options.type;
            if (options.personaoptionid != undefined)
                urlParam += urlParam != "" ? "&personaoptionid=" + options.personaoptionid : "?personaoptionid=" + options.personaoptionid;

            if (options.id != undefined && options.id != null) {
                var views = [{ icon: "user", name: 'Info', url: "/sa/persona/" + options.id + urlParam, buttons: ["save"] }];
                var title = 'Edit Persona';
            }
            else {
                var views = [{ icon: "user", name: 'Info', url: "/sa/persona/0" + urlParam, buttons: ["save"] }];
                var title = 'Add Persona';
            }
            modal.show({ title: title, views: views });
        },
        showDashboardProfile: function (id) {
            if (id != null) {
                var views = [{ icon: "tachometer", name: 'Info', url: "/sa/dashboard/profile/" + id, buttons: ["save"] }];

                var title = 'Edit Dashboard Profile';
            }
            else {
                var views = [{ icon: "user", name: 'Info', url: "/sa/dashboard/profile/0", buttons: ["save"] }];
                var title = 'Add Dashboard Profile';
            }
            modal.show({ title: title, views: views });
        },
        showContactStatusCountList: function (type, title, showHotHighLeads) {
            var views = [
                { icon: "user", name: 'Contact', url: "/widgets/contacts?type=" + type + "&showhothighleads=" + showHotHighLeads }
            ]
            modal.show({ title: title, views: views });
        },
        showContactListWidgetWise: function (widgetname, title) {
            if (typeof (widgetname) != "undefined" && widgetname != null)
            {
                var views = [
                    { icon: "user", name: 'Contact', url: "/widgets/contacts?widgetname=" + widgetname }
                ];
                modal.show({ title: title, views: views });
            }
        },
        showchannel: function (type) {
            var title = type == "totalorganizations" ? 'Total Organizations' : type == "notsure" ? 'Not Sure' : type;
            var views = [
                          { icon: "organization", name: 'Organization', url: "/widgets/organizationstatus?type=" + type }
            ];
            modal.show({ title: title, views: views });
        },
        showDailyMailPreview: function (id, email) {
            var viewurl = [{ icon: "image", name: 'Preview', url: "/sa/dailyweeklyemailmonitorview/" + id , iconprefix: "far" }];
            modal.show({ title: 'Daily/Weekly Email Report' +'('+ email+')', views: viewurl });
        },
        showContactCountInNgkf: function (type) {
            var views = [{ icon: "user", url: "/widgets/dailyemail?type=" + type }
            ];
            modal.show({ title: "", views: views });
        },
        showListPreview: function (listid, name, title) {
            var viewurl = [{ icon: "image", name: 'Preview', url: "/setup/companysmartlists/" + listid + "/preview", iconprefix: "far" }];
            modal.show({ title: title + " - " + name, views: viewurl });
        },
        sendEmailFromNewAssets: function (url, name) {
            var views = [{ icon: "database", name: 'Info', url: url, buttons: ["finish"] }];
            modal.show({ title: 'Send ' + name, views: views });
        },
        sendPPTFromNewAssets: function (id, linkIds, isUserGrid, isSmartList, isContactcompany,playbookID, name) {
            var url = "/communicate/email/0?assetid=" + id + "&isAssetEmail=true" + "&isContactcompany=" + isContactcompany + "&playbookid=" + playbookID;
            if (typeof linkIds != "undefined")
            {
                if (isUserGrid != "" && isUserGrid != null && isUserGrid != undefined)
                    url += "&linkids=" + linkIds + "&isUser=" + isUserGrid;
                else
                    url += "&linkids=" + linkIds;
            }
            if (isSmartList != undefined)
                url += "&issmartlist=" + isSmartList;
            var title = name != undefined ? 'Send Presentation' + ' - ' + name : 'Send Presentation';
            var views = [{ icon: "database", name: 'Send', url: url, buttons: ["finish"] }];
            modal.show({ title: title, views: views });
        },
        showEbookFromNewAsset: function (id, name) {
            views = [{ icon: "view", name: 'View', url: "/collateral/ebook/" + id + "/view" }, ];
            modal.show({ title: 'View of ' + name, views: views });
        },
        sendExternalLinksFromAssets: function (id, linkIds, isUserGrid, isSmartList, isContactcompany, name) {
            var url = "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&isExternalLink=true" + "&isContactcompany=" + isContactcompany;
            if (typeof linkIds != "undefined") {
                if (isUserGrid != "" && isUserGrid != null && isUserGrid != undefined)
                    url += "&linkids=" + linkIds + "&isUser=" + isUserGrid;
                else
                    url += "&linkids=" + linkIds;
            }
            if (isSmartList != undefined)
                url += "&issmartlist=" + isSmartList;

            var views = [{ icon: "database", name: 'Send', url: url, buttons: ["finish"] }];
            var title = name != undefined ? 'Send External Links' + ' - ' + name : 'Send External Links';
            modal.show({ title: title, views: views });
        },
        showAssetsTemplate: function (data, emaildata) {
            switch (data.templatetype) {
            
                case "FORM"://form
                    views = [{ icon: "view", name: 'View', url: "/collateral/pdf/" + data.id + "/view" }, ];
                    modal.show({ title: 'View of ' + data.name, views: views });
                    break;
                case "WEB"://web
                    views = [{ icon: "view", name: 'View', url: "/manage/web/" + data.id + "/view" }, ];
                    modal.show({ title: 'View of ' + data.name, views: views });
                    break;
                case "PRINT":
                    views = [{ icon: "view", name: 'View', url: "/collateral/pdf/" + data.id + "/view" }, ];
                    modal.show({ title: 'View of ' + data.name, views: views });
                    break;
                case "EMAIL"://email
                    if (emaildata.canEmailSend) {
                        var extraParam = data["addclass"] == undefined ? "" : "&addclass=" + data["addclass"];
                        var newMedia = emaildata.result.template;
                            var url = "";
                            if (newMedia != undefined && typeof (newMedia.templateid) == "undefined")
                                url = "/communicate/email/0?emailtemplateid=" + newMedia.id + extraParam;
                            else {
                                newMedia = emaildata.result;
                                url = "/communicate/email/" + newMedia.id + extraParam;
                            }
                            var views = [{ icon: "database", name: 'Info', url: url, buttons: ["finish"] }];
                            modal.show({ title: 'Send ' + newMedia.name, views: views });
                        //});
                    }
                        break;
                case "EBOOK"://ebook
                    views = [{ icon: "view", name: 'View', url: "/collateral/ebook/" + data.id + "/view" }, ];
                    modal.show({ title: 'View of ' + data.name, views: views });
                    break;
                case "DATAROOM"://data room
                    views = [{ icon: "view", name: 'View', url: "/collateral/data-room/" + data.id + "/view" }, ];
                    modal.show({ title: 'View of ' + data.name, views: views });
                    break;
                case "INTERNALPLAYBOOK"://internal playbook
                    //views = [{ icon: "view", name: "View", url: "/internaladminplaybook/" + data.id }, ];
                    //modal.show({ title: "View of " + data.name, views: views });
                    window.open('/#internalplaybook/' + data.id);
                    break;
                case "POWERPOINT": //powerpoint
                    if (emaildata.canEmailSend && emaildata.canPowerPointsend)
                        views = [{ icon: "view", name: "View", url: "/collateral/presentation/" + data.id + "/view", buttons : ["send"] }];
                    else
                        views = [{ icon: "view", name: "View", url: "/collateral/presentation/" + data.id + "/view" }];

                    var title = "";
                    if (data.name != undefined) 
                        title = 'Presentations > ' + views[0].name + ' (<b><i>' + data.name + '</i></b>)';
                    else
                        title = 'Presentations > ' + views[0].name + '';
                    modal.show({ title: title, views: views });
                    //window.open("/ppt/" + data.templatekey + "/" + data.userkey);
            }
        },
        showleadscoringrules: function (scoringType) {
            var url = scoringType == 6 ? "/orgleadscoringrule/create/" : "/leadscoringrule/create/";
            var views = [
                { icon: "database", name: 'Lead Scoring Rules', url: url + scoringType + "/" + getTimeStamp(), buttons: ["save"] }];
            var assetViews = [
                { icon: "database", name: 'Lead Scoring Rules', url: "/assetscoringrule/create", buttons: ["save"] }];
            if (scoringType == 3)
                modal.show({ title: 'User Scoring Rule', views: views });
            else if(scoringType == 4)
                modal.show({ title: 'Opportunity Scoring Rule', views: views});
            else if(scoringType == 5)
                modal.show({ title: 'Asset Scoring Rule', views: assetViews });
            else if (scoringType == 6)
                modal.show({ title: 'Organization Scoring Rule', views: views });
            else
                modal.show({ title: 'Lead Scoring Rule', views: views });
        },
        editleadscoringrules: function (id, scoringType) {
            var url=scoringType == 6?"/orgleadscoringrule/edit/":"/leadscoringrule/edit/";
            var views = [{ icon: "database", name: 'Lead Scoring Rules', url: url + id + "/" + scoringType + "/" + getTimeStamp(), buttons: ["save"]}];
            var assetViews = [{ icon: "database", name: 'Lead Scoring Rules', url: "/assetscoringrule/edit/" + id, buttons: ["save"] }];
            if (scoringType == 3)
                modal.show({ title: 'User Scoring Rule', views: views });
            else if(scoringType == 4)
                modal.show({ title: 'Opportunity Scoring Rule', views: views });
            else if (scoringType == 5)
                modal.show({ title: 'Asset Scoring Rule', views: assetViews });
            else if (scoringType == 6)
                modal.show({ title: 'Organization Scoring Rule', views: views });
            else
                modal.show({ title: 'Lead Scoring Rule', views: views });
        },
        showleadscoringmodel: function (scoringType) {
            var views = [{ icon: "database", name: 'Lead Scoring Models', url: "/leadscoringmodel/create/" + scoringType + "/" + getTimeStamp() ,buttons:["save"]}];
            if (scoringType == 3)
                modal.show({ title: 'User Scoring Models', views: views});
            else if(scoringType == 4)
                modal.show({ title: 'Opportunity Scoring Models', views: views });
            else if (scoringType == 5)
                modal.show({ title: 'Asset Scoring Models', views: views });
            else if (scoringType == 6)
                modal.show({ title: 'Organization Scoring Category', views: views });
            else
                modal.show({ title: 'Lead Scoring Models', views: views });
        },
        showleadscoringgridmodel: function () {
            var views = [{ icon: "database", name: 'Lead Scoring Models', url: "/leadscoringmodel/creategrid"}];
                modal.show({ title: 'Lead Scoring Models', views: views });
        },
        editleadscoringmodel: function (id, scoringType) {
            var views = [{ icon: "database", name: 'Lead Scoring Models', url: "/leadscoringmodel/edit/" + id + "/" + scoringType + "/" + getTimeStamp() ,buttons:["save"]}];
            if (scoringType == 3)
                modal.show({ title: 'User Scoring Models', views: views });
            else if(scoringType == 4)
                modal.show({ title: 'Opportunity Scoring Models', views: views });
            else if (scoringType == 5)
                modal.show({ title: 'Asset Scoring Models', views: views });
            else if (scoringType == 6)
                modal.show({ title: 'Organization Scoring Category', views: views });
            else
                modal.show({ title: 'Lead Scoring Models', views: views });
        },
        showLeadscoringModelRule: function (ruleID, id, scoringType) {
            if (id != null)
                var views = [{ icon: "database", name: 'Lead Scoring Model Rule', url: "/leadscoringmodelrule/edit/" + id + "/" + scoringType + "/" + getTimeStamp(), buttons:["save"] }];
            else 
                var views = [{ icon: "database", name: 'Lead Scoring Model Rule', url: "/leadscoringmodelrule/" + ruleID + "/create/" + scoringType + "/" + getTimeStamp(), buttons:["save"] }];
            if(scoringType == 3)
                modal.show({ title: 'User Scoring Model Rule', views: views });
            else if(scoringType == 4)
                modal.show({ title: 'Opportunity Scoring Model Rule', views: views });
            else if (scoringType == 5)
                modal.show({ title: 'Asset Scoring Model Rule', views: views });
            else if (scoringType == 6)
                modal.show({ title: 'Organization Scoring Topic', views: views });
            else
                modal.show({ title: 'Lead Scoring Model Rule', views: views });
        },
        sendEmailTemplate: function (templatedata) {
            if (typeof (templatedata.templateid) == "undefined")
                url = "/communicate/email/0?emailtemplateid=" + templatedata.id;
            else
                url = "/communicate/email/" + templatedata.id;
            var views = [{ icon: "database", name: 'Info', url: url, buttons: ["save"]}];
            modal.show({ title: 'Send ' + templatedata.name + ' Template', views: views,preventClose:true });
        },
        leadscoring: function () {
            var views = [
               { icon: "database", name: 'Lead Scoring Rules', url: "/leadscoringrule/create" + "/" + getTimeStamp() }];
        },
        showOpportunities: function (options) {
            var stage = options.stage;
            var type = options.type;
            var typelabel = options.typelabel;
            var projecttyeid = options.projecttyeid;

            var strParam = "projecttyeid=" + projecttyeid;
            if (options.linktoid != undefined)
                strParam += "&linktoid=" + options.linktoid;
            if (options.viewoption != undefined)
                strParam += "&viewoption=" + options.viewoption;
            if (options.linktype != undefined)
                strParam += "&linktype=" + options.linktype;
            if (options.orgviewoption != undefined)
                strParam += "&orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != undefined)
                strParam += "&groupviewoption=" + options.groupviewoption;
            if (options.groupviewoption != undefined)
                strParam += "&groupviewoption=" + options.groupviewoption;
            if (options.grouptype != undefined)
                strParam += "&grouptype=" + options.grouptype;
            if (options.usergroupviewoption != undefined)
                strParam += "&usergroupviewoption=" + options.usergroupviewoption;
            if (options.usergroupid != undefined)
                strParam += "&usergroupid=" + options.usergroupid;
            if (type != undefined)
                strParam += "&type=" + type;
            if (stage != undefined)
                strParam += "&stage=" + stage;
            if (options.createdonly != undefined)
                strParam += "&createdonly=" + options.createdonly;
            if (options.selectedrange != undefined)
                strParam += "&selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "") {
                var strtd = new Date(options.startdate)
                strParam += "&startdate=" + strtd.toLocaleDateString().replace(/[\u200E]/g, "");
            }
            if (options.enddate != undefined && options.enddate != "") {
                var strtd = new Date(options.enddate)
                strParam += "&enddate=" + strtd.toLocaleDateString().replace(/[\u200E]/g, "");
            }
            if (options.stages != undefined)
                strParam += strParam != "" ? "&stages=" + options.stages : "?stages=" + options.stages;
            if (options.datecolumn != undefined)
                strParam += strParam != "" ? "&datecolumn=" + options.datecolumn : "?datecolumn=" + options.datecolumn;
            if (options.currencyunit != undefined)
                strParam += "&currencyunit=" + options.currencyunit;
            var views = [
                { icon: "cube", name: 'Opportunity', url: "/reports/projects-status?" + strParam }
            ];
            
             if (typelabel != undefined)
                 modal.show({ title: 'Opportunities - (' + typelabel + ')', views: views });
             else if (stage != undefined)
                 modal.show({ title: 'Opportunities - (' + stage + ')', views: views });
             else
                modal.show({ title: 'Opportunities', views: views });
        },
        showProjectInfoAndReport: function (options) {

            var id = options.id;
            var headerText = options.headerText;
            var projectTypeId = options.projecttyeid;

            var info = { icon: "database", name: 'Info', url: "/manage/project/record/" + projectTypeId + "/" + id, buttons:["save"] };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + projectTypeId + "/" + id, iconprefix: "far" };
            var ownership = { icon: "share-alt", name: 'Ownership', url: "/manage/project-ownership/" + projectTypeId + "/" + id, buttons: ["save"] }
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + projectTypeId + "/" + id };
            var views;

            if (options.usestepwizard)//to show opportunity in step process
                views = [preview, report];
            else
                views = [info, report];

            if (options.hasownershipaccess && !options.usestepwizard)//user permission to change opportunity owner
                views.push(ownership);
            if (options.opportunityname == undefined) {
                var modalTitle = 'Modify Record > ' + views[0].name + ' (<b>' + headerText + '</b>)';
            }
            else {
                var modalTitle = 'Modify Record > ' + views[0].name + ' (<b>' + headerText + '-' + options.opportunityname + '</b>)';
            }
            modal.show({ title: modalTitle, views: views });
        },
        showOpportunitiesByStage: function (options) {
            var organizationid = options.organizationid;
            var userid = options.userid;
            var projecttyeid = options.projecttyeid;
            var stage = options.stage;
            
            var views = [
                { icon: "cube", name: 'Opportunity', url: "/reports/projects-status?organizationid=" + organizationid + "&userid=" + userid + "&projecttyeid=" + projecttyeid + "&stage=" + stage }
            ];
            modal.show({ title: 'Opportunity- (' + stage + ')', views: views });
        },
        showOpportunitiesForStats: function (options) {
            var urlParam = "";
            if (options.stage != undefined)
                urlParam += urlParam != "" ? "&opportunitystage=" + options.stage : "?opportunitystage=" + options.stage;
            if (options.projectTypeID != undefined)
                urlParam += urlParam != "" ? "&projecttypeid=" + options.projectTypeID : "?projecttypeid=" + options.projectTypeID;
            var views = [
                { icon: "cube", name: options.name, url: "/widgets/statuswidgets/opportunitystats" + urlParam }
            ];
            modal.show({ title: options.modalTitle, views: views });
        },
        showLeadRequests: function (options) {
            var urlParam = "";
            var previewURL = "v4u/ajax/widgets/status-widgets/approved-deals-grid.aspx";
            var title = 'Approved Deals';
            if (options != undefined) {
                if (options.state != undefined && options.state==0)
                    previewURL = "manage/leads/leadregistered?isdashboard=true";
                if (typeof(options.Title) != "undefined")
                    title = options.Title;
            }
            var views = [{ icon: "user", name: 'Info', url: previewURL + urlParam }];
            modal.show({ title: title, views: views });
        },
        showMoreAnnouncements: function () {
            var views = [
                { icon: "fa-fw fa-bullhorn", name: 'Announcements', url: "widgets/announcements" }
            ];
            modal.show({ title: 'Announcements', views: views });
        },
        ShowAssets: function (option) {
            var showInfoIcon;
            var isDash;
            if (option.isShownInfoIconInModal != undefined)
                showInfoIcon = option.isShownInfoIconInModal;
            else
                showInfoIcon = true;

            if (option.isDash == undefined)
                isDash = false;
            else
                isDash = option.isDash;
            var views = [{
                icon: "database", name: 'Assets', url: "/search?text=" + option.text + "&isfilter=" + option.filter + "&type=" + option.type + "&typeTitle=" + encodeURI(option.typeTitle) + "&isWidget=" + option.isWidget + "&dataIndex=" + option.dataIndex + "&isdash=" + isDash +"&isShownInfoIconInModal=" + showInfoIcon+ "&istemplatetype=" + option.istemplatetype
            }];

            if (option.includeAll != undefined && option.includeAll != null)
                views[0].url += '&includeAll=false'

            modal.show({ title: option.title, views: views});
        },
        showAssetsGrid: function (WidgetName, ConfigName, linktype, linktoid, WidgetHeader) {
            var views = [{ icon: "database", name: 'Info', url: "widgets/quicklink-widgets/view-assets-grid/" + WidgetName + "/" + ConfigName + "/" + linktype + "/" + linktoid }];
            modal.show({ title: WidgetHeader, views: views });
        },
        showEditorContacts: function (programTemplateID, title) {
            var views = [{ icon: "image", name: 'Media', url: "/manage/drip/editor/contacts?programid=" + programTemplateID, buttons: ["start"], iconprefix: "far" }];
            modal.show({ title: title, views: views });
        },
        showEditorCondition: function (programTemplateID, title) {
            var views = [{ icon: "image", name: 'Media', url: "/connections/smartlist/0?programid=" + programTemplateID, buttons: ["submit"], iconprefix: "far" }];
            modal.show({ title: title, views: views});
        },
        showEditorSystem: function (programTemplateID, title) {
            var views = [{ icon: "image", name: 'Media', url: "/manage/drip/editor/system?programid=" + programTemplateID, buttons: ["submit"], iconprefix: "far" }];
            modal.show({ title: title, views: views });
        },
        showWebLeadsGrid: function (title, activitytype, options) {
            var urlParam = "";
            if (typeof (options) != "undefined") {
                if (typeof (options.format) != "undefined")
                    urlParam = "&format=" + options.format;
                if (typeof (options.index) != "undefined")
                    urlParam = "&index=" + options.index;
            }
            var views = [{ icon: "database", name: 'Info', url: "v4u/ajax/widgets/status-widgets/web-leads-grid.aspx?activitytype=" + activitytype + urlParam }];
            modal.show({ title: title, views: views });
        },
        showNewAssets: function (title, widgetName, personaType, personaOption) {
            var views = [{
                icon: "database", name: 'Info', url: "v4u/ajax/search/search.cshtml?widgetName=" + widgetName + "&isdash=true&type=newReleased&isshowninmodal=true&isStatusWidget=true&personaType=" + personaType + "&personaOption=" + personaOption }];
            modal.show({ title: title, views: views });
        },
        showWebAbTest: function (item) {
            var views = [{ icon: "signal", name: 'Links', url: "/manage/campaigns/web/abtests/" + item.id + "/templates" }];
            modal.show({ title: item.name, views: views });
        },
        showContactsForReport: function (id, option) {
            var views = [
                { icon: "", name: option.info, url: "/connections/contacts/reports?userid=" + id + "&allcompany=false&status=" + option.status }
            ];
            modal.show({ title: option.title + '&nbsp;' + '<b><i>' + option.username + '</i></b>', views: views });
        },       
        showInternalPlaybookGrid: function (options) {
            var views = [{ icon: "database", name: "Info", url: "widgets/quicklink-widgets/internal-playbook-grid/" + options.WidgetName + "/" + options.ConfigName + "/" + options.linktype + "/" + options.linktoid + "/" + options.personalization }];
            modal.show({ title: GetDefaultWidgetHeader(options.WidgetName), views: views, locked: true });
        },
        showVideoGrid: function (WidgetName, ConfigName, linktype, linktoid, Options) {
            var views = [{ icon: "fa-video", name: Options.Info, url: "widgets/quicklink-widgets/watch-video-grid/" + WidgetName + "/" + ConfigName + "/" + linktype + "/" + linktoid }];
            modal.show({ title: GetDefaultWidgetHeader(WidgetName), views: views, locked:true });
        },
        //added by nikita for product overview ,to get internal playbook.
        showPlaybookProductOverview: function (callback, options) {
            var views = [{ icon: "database", name: 'Info', url: "/manage/product-overview-internalplaybook/" + options.assettype + "/" + options.assetid + "/" + options.personalization + "/" + options.widgetname + "/" + options.configurationname }];
                modal.show({ title: options.widgetheader, views: views, callback: callback });
        },
        showOpportunityType: function (callback, options) {//Added to select opportunity for template editor
            $.extend({
                singleselect: false
            })
            var views = [{ icon: "", name: "", url: `/designeditor/selectopportunity?objID=${options.id}&templateid=${options.templateid}&pageid=${options.pageid}`, buttons: ["save"] }];
            modal.show({ title: "", views: views, callback: callback, fixedheight: 'true' });
        },
        showDripCampaignGrid: function (WidgetName, ConfigName, linktype, linktoid) {
            var views = [{ icon: "database", name: "Info", url: "widgets/quicklink-widgets/drip-campaign-grid/" + WidgetName + "/" + ConfigName + "/" + linktype + "/" + linktoid }];
            modal.show({ title: GetDefaultWidgetHeader(WidgetName), views: views });
        },
        showTotalUsersForIntPlaybook: function () {
            var views = [{ icon: "database", url: "dataroom/users/", name: 'Users' }];
            modal.show({ title: 'Users', views: views });
        },
        showUsersForIntPlaybook: function (templateid, used) {
            var views = [{ icon: "database", url: "dataroom/users?templateid=" + templateid + "&used=" + used, name: 'Users' }];
            modal.show({ title: 'Users', views: views });
        },
        showReportForInternalPlaybook: function (data) {
            var views = [
                 { icon: "envelope", name: 'Info', url: "/internalplaybookrecordreport/" + data.id }
            ];
            modal.show({ title: 'Report-' + data.name, views: views });
        },
        showContactsInternalPlaybook: function (data) {
            var views = [
                { icon: "envelope", name: 'Info', url: "/internalplaybookrecordreport/" + data.id + "?currentuser=false&userid=" + data.userid }
            ];
            modal.show({ title: 'Report - ' + data.name, views: views });
        },
        showInternalContactReport: function (data) {
            var views = [{ icon: "envelope", name: 'Info', url: "/internalplaybookrecordreport/" + data.id + "?currentuser=false" }];
            modal.show({ title: 'Contact stages report -' + data.name, views: views });
        },
        showInternalUserReport: function (data) {
            var views = [{ icon: "envelope", name: 'Info', url: "/internalplaybookuserrecordreport/" + data.id }];
            modal.show({ title: 'User stages report -' + data.name, views: views });
        },
        showDripCampaignReport: function (programID, currentuser, title, hideflowchart, isNewUI) {
            var views = [{ icon: "user", name: 'Report', url: "/drip/breakdown/" + programID + "?currentuser=" + currentuser }];
            if (isNewUI != undefined && isNewUI == true) {
                views.push({ icon: "fa fa-file-alt", name: 'Quick Editor', url: "/manage/campaigns/drip/" + programID + "/editor?isquickview=1", buttonaction: true });
                if (!hideflowchart)
                    views.push({ icon: "edit", name: 'Flow Chart Editor', url: "/manage/campaigns/drip/" + programID + "/editor?isquickview=0" });
                views.push({ icon: "info-circle", name: 'Info', url: "/manage/campaigns/drip/" + programID + "/info" + "/" + getTimeStamp(), buttons: ["save"] });
            }
            var repTitle = 'Program Report Breakdown';
            if (title != undefined)
            repTitle = views[0].name + "" + ' (<b><i>' + title + '</i></b>)';
            modal.show({ title: repTitle, views: views });
        },
        showDripMarketingCampaignsReport: function (data) {
            var views = [{
                icon: "sitemap", name: 'Report', url: "/widgets/drip/campaign/marketingcampaignsreport/" + data.WidgetName + "/" + data.ConfigName + "/" + data.linktype + "/" + data.linktoid}];
            modal.show({ title: data.WidgetHeaderName, views: views });
        },
        showDripMarketingCampaignsTemplateUsage: function (options) {
            $.extend({
                viewheader: 'Report'
            }, options);
            var views = [];
            var parameters = "";

            if (typeof (options.linktoid) != "undefined" && options.linktoid != null) {
                parameters += "&linktoid=" + options.linktoid;
            }
            if (typeof (options.linktype) != "undefined" && options.linktype != null) {
                parameters += "&linktype=" + options.linktype;
            }
            if (typeof (options.viewoption) != "undefined" && options.viewoption != null) {
                parameters += "&viewoption=" + options.viewoption ;
            }
            if (typeof (options.orgviewoption) != "undefined" && options.orgviewoption != null) {
                parameters += "&orgviewoption=" + options.orgviewoption;
            }
            if (typeof (options.groupviewoption) != "undefined" && options.groupviewoption != null) {
                parameters += "&groupviewoption=" + options.groupviewoption;
            }
            if (typeof (options.format) != "undefined" && options.format != null) {
                parameters += "&format=" + options.format;
            }
            if (typeof (options.selectedrange) != "undefined" && options.selectedrange !== "") {
                parameters += "&selectedrange=" + options.selectedrange;
            }
            if (options.periodfield != undefined)
                parameters += "&periodfield=" + options.periodfield;

            views.push({
                icon: "signal", name: options.viewheader, url: "/widgets/drip/campaign/marketingcampaignsuserreport/" + options.id + "/" + getTimeStamp() + "?isview=" + options.isview + parameters
            });
            modal.show({ title: options.title + "- " + options.name, views: views });
        },
        showDripForUser: function (reportData) {
            var strParam = "";
            if (reportData.linktoid != undefined)
                strParam += strParam !== "" ? "&linktoid=" + reportData.linktoid : "linktoid=" + reportData.linktoid;
            if (reportData.viewoption != undefined)
                strParam += strParam !== "" ? "&viewoption=" + reportData.viewoption : "viewoption=" + reportData.viewoption;
            if (reportData.linktype != undefined)
                strParam += strParam !== "" ? "&linktype=" + reportData.linktype : "linktype=" + reportData.linktype;
            if (reportData.orgviewoption != undefined)
                strParam += strParam !== "" ? "&orgviewoption=" + reportData.orgviewoption : "orgviewoption=" + reportData.orgviewoption;
            if (reportData.groupviewoption != undefined)
                strParam += strParam !== "" ? "&groupviewoption=" + reportData.groupviewoption : "groupviewoption=" + reportData.groupviewoption;
            if (reportData.currentuser != undefined)
                strParam += strParam !== "" ? "&currentuser=" + reportData.currentuser : "currentuser=" + reportData.currentuser;
            if (reportData.state != undefined)
                strParam += strParam !== "" ? "&state=" + reportData.state : "state=" + reportData.state;
            if (reportData.programid != undefined)
                strParam += strParam !== "" ? "&programid=" + reportData.programid : "programid=" + reportData.programid;
            if (reportData.type != undefined)
                strParam += strParam !== "" ? "&type=" + reportData.type : "type=" + reportData.type;
            if (reportData.selectedrange != undefined)
                strParam += strParam !== "" ? "&selectedrange=" + reportData.selectedrange : "selectedrange=" + reportData.selectedrange;
            if (reportData.useremail != undefined)
                strParam += strParam !== "" ? "&useremail=" + reportData.useremail : "useremail=" + reportData.useremail;
            if (reportData.periodfield != undefined)
                strParam += strParam !== "" ? "&periodfield=" + reportData.periodfield : "periodfield=" + reportData.periodfield;
            var views = [
                { icon: "", name: 'Info', url: "/drip/reports?" + strParam  }
            ];
            modal.show({ title: reportData.title, views: views });
        },
        showDripUsers: function (reportData) {
            var strParam = '';
            if (reportData.linktoid != undefined)
                strParam += "&linktoid=" + reportData.linktoid;
            if (reportData.viewoption != undefined)
                strParam += "&viewoption=" + reportData.viewoption;
            if (reportData.linktype != undefined)
                strParam += "&linktype=" + reportData.linktype;
            if (reportData.orgviewoption != undefined)
                strParam += "&orgviewoption=" + reportData.orgviewoption;
            if (reportData.groupviewoption != undefined)
                strParam += "&groupviewoption=" + reportData.groupviewoption;
            if (reportData.currentuser != undefined)
                strParam += "&currentuser=" + reportData.currentuser;
            if (reportData.state != undefined)
                strParam += "&state=" + reportData.state;
            if (reportData.programid != undefined)
                strParam += "&programid=" + reportData.programid;
            if (reportData.type != undefined)
                strParam += "&type=" + reportData.type;
            if (reportData.selectedrange != undefined)
                strParam += "&selectedrange=" + reportData.selectedrange;
            if (reportData.useremail != undefined)
                strParam += "&useremail=" + reportData.useremail;
            var views = [
                { icon: "", name: 'Info', url: "/drip/bounced/reports?" + strParam }
            ];
            modal.show({ title: reportData.title, views: views });
        },
        showIntPlaybookContacts: function (stepid, userid, internalplaybookid, currentuser, stepname, closeCallback) {
            var title = 'Contacts';
            if (stepname != undefined)
                title += " (" + stepname + ")";
            var views = [
                            { icon: "clock", name: 'Report', url: "/internalplaybook/report/" + stepid + "/" + internalplaybookid + "/" + userid + "?currentuser=" + currentuser },
            ];
            modal.show({ title: title, views: views, closeCallback: closeCallback });
        },
        showIntPlaybookUsers: function (stepid, internalplaybookid, showbycompletion, iscompleted) {
            var views = [
                { icon: "clock", name: 'Report', url: "/internalplaybook/user/report/" + stepid + "/" + internalplaybookid + "/" + showbycompletion + "/" + iscompleted },
            ];
            modal.show({ title: 'Playbook Users', views: views });
        },
        showOpportunityInfo: function (projecttyeid, id, modaltitle) {
            var views = [
                { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + projecttyeid + "/" + id, iconprefix: "far" },
            ];

            modal.show({ title: modaltitle, views: views });
        },
        showPrintReorder: function (data) {
            var views = [{ icon: "print", name: 'Print', url: "/collateral/pdf/" + data.id + "/reorder", buttons: ["save"] }];
            modal.show({ title: '{$ui.grid.actions.ManagePages}', views: views});
        },
        sendMediaEmail: function (id, linkids, isSmartlist) {
            sendMediaEmail(id, linkids, isSmartlist, false);
        },
        sendMediaEmail: function (id, linkids, isSmartlist,locked)
        {
            var views = [
                { icon: "envelope", name: 'Info', url: "/communicate/email/" + id + "?linkids=" + linkids + "&isSmartlist=" + isSmartlist + "&customsendmodal=true&hideimportcustomize=true", buttons: ["save"]}
            ];
            modal.show({ title: 'Compose Email <span class="label txt-color-white draft" id="lblWhatIsIt">NEW</span>', views: views, locked: locked, closeTab: locked });
        },
        showExtPlaybookReport: function (id) {
            var views = [{ icon: "database", name: 'Send', url: "/sendassets/dataroomreport/" + id }];
            modal.show({ title: 'Report', views: views, locked: locked, closeTab: locked });
        },
        showPresentationView: function (templatedata) {
            $.extend({
                locked: false,
                closetab:false
            }, templatedata);
            modal.closeall();
            var wizardStepInfo = { name: 'Info', url: "/collateral/presentation/" + templatedata.id + "/info",buttons:["save"] };
            var wizardStepEditor = { name: 'Editor', url: "/collateral/presentation/" + templatedata.id + "/editor" };
            var wizardStepQuestionnaire = { name: 'Input', url: "/collateral/presentation/" + templatedata.id + "/questions" };
            var wizardStepAssetPicker = { name: 'Asset Picker', url: "/collateral/presentation/" + templatedata.id + "/assetpicker" };
            var wizardStepReordering = { name: 'Manage Slides', url: "/collateral/presentation/" + templatedata.id + "/reordering" ,buttons:["save"]};
            var wizardStepFinish = { name: 'Finish', url: "/collateral/presentation/" + templatedata.id + "/finish" };
            var wizardStepView = { name: 'View', url: "/collateral/presentation/" + templatedata.id + "/view" };

            var wizardSteps = [];

            if (templatedata.hasquestionnaire && templatedata.usedatasource == "1")
                wizardSteps = [wizardStepInfo, wizardStepAssetPicker, wizardStepReordering];
            else if (templatedata.hasquestionnaire)
                wizardSteps = [wizardStepInfo, wizardStepReordering];
            else if (templatedata.usedatasource == "1")
                wizardSteps = [wizardStepInfo, wizardStepAssetPicker, wizardStepReordering];
            else
                wizardSteps = [wizardStepView, wizardStepInfo, wizardStepReordering];
            var title = 'Presentations'+' > ' + wizardSteps[0].name + ' (<b><i>' + templatedata.name + '</i></b>)';
            modal.show({ title: title, views: wizardSteps, locked: templatedata.locked, closeTab: templatedata.closetab });
        },
        sendPresentation: function (id)
        {
            var views = [{ name: 'Send', url: "/collateral/presentation/" + id + "/send", buttons: ["submit"] }];
            modal.show({ title: 'Send Presentation', views: views });
        },
        showLinksForEmailABTest: function (item) {
            var views = [{ icon: "external-link", name: 'Links', url: "/communicate/email/" + item.id + "/links" }]
            modal.show({title:item.name, views: views });
        },
        showReportToExport: function (type, apidata, reportname) {
            var exportData = {};
            exportData.type = type;
            exportData.apidata = apidata;
            setExportTitle(modal.showReportsToExportPDF, exportData);
        },
        showReportsToExportPDF: function (exportData) {
            var Repname = fixedEncodeURIComponent(exportTitle);
            reportType = fixedEncodeURIComponent(exportData.type);
            var views = [{ icon: "file-pdf", name: 'Info', url: "/reportstoexport/" + exportData.apidata + "/" + reportType + "?reportname=" + Repname, buttons: ["generate"], iconprefix: "far" }];
            modal.show({ title: 'Grid Reports', views: views });
        },
        showUserLoginHistory: function (jo)
        {
            var views = [
                    { icon: "user", name: jo.contact, url: "/widgets/loginhistoryusers?index=" + jo.index + "&format=" + jo.format + "&ispartner=" + jo.ispartner + "&orgassociate=true" }
            ];
            modal.show({ title:jo.loginusers, views: views });
        },
        showPrintMedia: function (jo) {
            var views = [
                            { icon: "user", name: jo.contact, url: "/prints/dashboard/" + jo.index+ "/" + jo.format }
            ];
            modal.show({ title: jo.prints, views: views });
        },        
        showActivityWidgetUsers: function (jo) {
            if (jo.type == "") {
                var views = [
                  { icon: "user", name: jo.user, url: "/widgets/activeusers?type=noactivity&index=" + jo.index + "&format=" + jo.format + "&ispartner=" + true }
                ];
                modal.show({ title: jo.activity, views: views });
            }
            else {
                var views = [
                  { icon: "user", name: jo.user, url: "/widgets/activeusers?type=" + jo.type + "&index=" + jo.index + "&format=" + jo.format + "&ispartner=" + true }
                ];
                modal.show({ title: jo.activity+"(" + jo.type + ")", views: views });
            }
        },
        showActivityWidgetUsersReport: function (joData) {
            if (joData.type == "") {
                var views = [
                    { icon: joData.user, name: joData.user, url: "/widgets/activeusersreport?type=noactivity&index=" + joData.index + "&format=" + joData.format }
                ];
                modal.show({ title: joData.activity, views: views });
            }
            else {

                var views = [
                  { icon: joData.user, name: 'User', url: "/widgets/activeusersreport?type=" + joData.type + "&index=" + joData.index + "&format=" + joData.format + "&ispartner=" + true + "&organizationid=" + joData.orgid + "&organizationgroupid=" + joData.orggroupid + "&userid=" + joData.userid }
                ];
                modal.show({ title: joData.activity + "(" + joData.type + ")", views: views });
            }
        },
        showUsersLoginReport:function(joData){
            var views = [];
            if (joData.userhistory == 'First Logins' || joData.userhistory == 'Last Logins' || joData.userhistory == 'Unique Logins' || joData.userhistory == 'Total Logins' || joData.userhistory == 'Users Login')
                views.push({ icon: joData.user, name: joData.contact, url: "https://partner-marketing.bitdefender.com/widgets/loginhistoryuserslist?index=" + joData.index + "&format=" + joData.format + "&statstype=" + joData.statstype + "&selectedrange=" + joData.selectedRange + "&startdate=" + joData.startDate + "&enddate=" + joData.endDate });
            else
                views.push({ icon: joData.user, name: joData.contact, url: "https://partner-marketing.bitdefender.com/widgets/loginhistoryuserslist?index=" + joData.index + "&format=" + joData.format });
            modal.show({ title: joData.userhistory, views: views });
        },

        showCreatedUsersReport: function (joData) {
            var views = [];
            if (joData.userhistory == 'Created On' || joData.userhistory == 'ToS Accepted')
                views.push({ icon: joData.user, name: joData.contact, url: "https://partner-marketing.bitdefender.com/widgets/createduserslist?index=" + joData.index + "&format=" + joData.format + "&statstype=" + joData.statstype + "&selectedrange=" + joData.selectedRange + "&startdate=" + joData.startDate + "&enddate=" + joData.endDate });
            modal.show({ title: joData.userhistory, views: views });
        },
        showPrintAssets: function (joData) {
            var views = [
                { icon: joData.user, name: joData.contact, url: "https://partner-marketing.bitdefender.com/widgets/printmedia?index=" + joData.index + "&format=" + joData.format }
            ];
            modal.show({ title: joData.print, views: views });
        },
        showSentEmailsForReport: function (joData) {
            var strParam = '';
            if (joData.indexdiff != undefined)
                strParam += "&indexdiff=" + joData.indexdiff;
            if (joData.linktype != undefined)
                strParam += "&linktype=" + joData.linktype;
            if (joData.linktoid != undefined)
                strParam += "&linktoid=" + joData.linktoid;
            if (joData.status != undefined)
                strParam += "&status=" + joData.status;
            if (joData.shownote != undefined)
                strParam += "&shownote=" + joData.shownote;
            
            var views = [
                { icon: "envelope", name:"Sent Email", url: "https://partner-marketing.bitdefender.com/widgets/report/sentemails?index=" + joData.index + "&format=" + joData.format + strParam }
            ];
            modal.show({
                title: "Sent Email", views: views });
        },
        showOrganizationsForGroup: function (title,id) {
            var views = [
                { icon: "organization", name: 'Organization', url: "/widgets/organizationstatus?groupid=" + id }
            ];
            modal.show({ title: title, views: views });
        },
        showVideoRecordListener: function(options){
            var views = [
                { icon: "image", name: options.viewsName, url: hostPath + "/setup/gallery/record-video", iconprefix: "far" },
        ];
             modal.show({ title: options.title, views: views, buttons: options.Done});
        }, showOpportunityInfo: function (options, callback) {
            var info = { icon: "database", name: 'Info', url: "/manage/project/record/" + options.selectedprojecttype + "/" + options.projectID + "/" + getTimeStamp(), buttons: ["save"]};
            modal.show({
                title: 'Add Record  (<b>' + options.projectName + '</b>)', views: [info], callback: callback
            })

        }, showOpportunityRecord: function (data)
        {
            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid=" + data.projecttypeid + "&projectid=" + data.id;
            if (data.ismobile == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/" + data.projecttypeid + "," + data.id;
            var views;
            var info = { icon: "database", name: 'Info', url: "/manage/project/record/" + data.projecttypeid + "/" + data.id, buttons: ["save"] };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + data.projecttypeid + "/" + data.id, iconprefix: "far" };
            var associate = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + data.projecttypeid + "/" + data.id + "?isstepprocess=" + data.usestepwizard, buttons: ["save"] };
            var imageGal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + data.projecttypeid + "/" + data.id + "/true?iswizard=true", buttons: ["save"], iconprefix: "far" };
            var docGal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + data.projecttypeid + "/" + data.id + "/true?iswizard=true", buttons: ["save"], iconprefix: "far" };
            var email = { icon: "envelope", name: 'Send Email', url: sendEmailUrl };
            var playbook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + data.projecttypeid + "&assetid=" + data.id + "&isproject=true" };
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + data.projecttypeid + "/" + data.id };
            var permission = { icon: "cog", name: 'Permissions', url: "/project/sharing/" + data.id + "/" + data.projecttypeid };
            var ownership = { icon: "share-alt", name: 'Ownership', url: "/manage/project-ownership/" + data.projecttypeid + "/" + data.id, buttons: ["save"] };   

            if (data.usestepwizard)//to show opportunity in step process
                views = [preview];
            else
                views = [info];
            views.push(report);

            if (data.share)
                views.push(permission);
            if (!data.usestepwizard)
                views.push(associate);
            views.push(imageGal);
            views.push(docGal);

            if (!data.usestepwizard)
                views.push(email);
            views.push(playbook);

            if (data.hasownershipaccess && !data.usestepwizard)//user permission to change opportunity owner
                views.push(ownership);

            var oppTitle = data.opportunityname;
            oppTitle = (oppTitle != "") ? " (<b>" + data.name + " - " + oppTitle + "</b>)" : " (<b>" + data.name + "</b>)";
            var title = 'Opportunity ' + views[0].name + oppTitle;
            modal.show({ title: title, views: views });
        },
        AddNewProjectRecord: function (options ,callback) {
            var views = [
                { icon: "cubes", name: '{$options.info}', url: "https://partner-marketing.bitdefender.com/manage/project/record/" + options.projecttypeid + "/0" + "/" + getTimeStamp() ,buttons:["save"]},
            ];
            modal.show({
                title: 'Add Record  (<b>' + options.projectname + '</b>)', views: views, callback: callback
            });
        },
        showOpportunityRecordInfo: function (data) {
            var views = [{ icon: "database", name: 'Info', url: "/manage/project/record/" + data.projecttypeid + "/" + data.id,  buttons: ["save"]}];
            modal.show({ title: data.name, views: views});
        },
        showOpportunityForUserWithFormat: function (jo) {
            var strParam = "";
            if (jo.index != undefined && jo.index != null)
                strParam += strParam != "" ? "&index=" + jo.index : "?index=" + jo.index;
            if (jo.format != undefined && jo.format != null)
                strParam += strParam != "" ? "&format=" + jo.format : "?format=" + jo.format;
            if (jo.isclosedwon != undefined)
                strParam += strParam != "" ? "&isclosedwon=" + jo.isclosedwon : "?isclosedwon=" + jo.isclosedwon;
            if (jo.viewoption != undefined)
                strParam += strParam != "" ? "&viewoption=" + jo.viewoption : "?viewoption=" + jo.viewoption;
            if (jo.linktoid != undefined && jo.linktoid != null)
                strParam += "&linktoid=" + jo.linktoid;
            if (jo.linktype != undefined)
                strParam += "&linktype=" + jo.linktype;
            if (jo.orgviewoption != undefined)
                strParam += "&orgviewoption=" + jo.orgviewoption;
            if (jo.orggroupviewoption != undefined)
                strParam += "&groupviewoption=" + jo.orggroupviewoption;
            var views = [
                { icon: "user", name: jo.contact, url: "/opportunity/user"+ strParam }
            ];
            modal.show({ title:jo.opportunity, views: views });
        },
        showLoginUserReport: function (joData) {
            var views = [
                { icon: "user", name: 'Contact', url: "https://partner-marketing.bitdefender.com/widgets/loginhistoryuserslist?index=" + joData.index + "&format=" + joData.format + "&ispartner=" + joData.ispartner + "&organizationid=" + joData.orgid + "&organizationgroupid=" + joData.orggroupid + "&userid=" + parseInt(joData.userid) }
            ];
            modal.show({ title: joData.userhistory, views: views });
        },
        showSentEmails: function (jo) {
            var views = [
                            { icon: "user", name: jo.contact, url: "/sent-email/user?index=" + jo.index + "&format=" + jo.format + "&ispartner=" + jo.ispartner + "&orgassociate=true" }
            ];
            modal.show({ title: jo.emails, views: views });
        },
        showDataByFeedType: function (jo) {
            var views = [
                { icon: "user", name: jo.contact, url: "/widgets/userfeedactivity?index=" + jo.index + "&format=" + jo.format + "&feedtype=" + jo.feedtype}
            ];
            modal.show({ title: jo.title, views: views });
        },
        showOpportunityForUserReport: function (joData) {
            var views = [
                { icon: "user", name: joData.contact, url: "/widget/opportunity/user-report/" + joData.index + "/" + joData.format }
            ];
            modal.show({ title: joData.opportunity, views: views });
        },
        showCrmContactCompanies: function (crmData) {
            var views = [{ name: "company", url: "/crm/contacts/" + crmData.id, icon: "cog" }]
            modal.show({ views: views, title: "CRM - " + crmData.name });
        },
        showCrmContactUsers: function (data) {
            var name = encodeURI(data.name);
            var views = [{ name: "company", url: "/crm/users/contacts/" + data.id, icon: "users" }]
            modal.show({ views: views, title: data.name });
        },
        showSuperAdminCrmContactUsers: function (data) {
            var name = encodeURI(data.name);
            var views = [{ name: "company", url: "/superadmin/crm/users/contacts/" + data.id, icon: "users" }]
            modal.show({ views: views, title: data.name });
        },
        showCrmContactUserLogs: function (data) {
            var views = [{ name: data.name, url: "/sa/crmlog/" + data.Id + "/" + data.crmId, icon: "users" }]
            modal.show({ views: views, title: data.title });
        },
        showCrmContactUserLogsInfo: function (data) {
            var views = [{ name: data.name, url: "/sa/crmloginfo/" + data.batchId + "/" + data.crmId + "/" + data.userId +"/"+data.linkType, icon: "users" }]
            modal.show({ views: views, title: data.title });
        },
        showDripTotalContacts: function (programid, options) {
            var views = [
                     { icon: "user", name: options.totalcontacts, url: "/manage/campaigns/totalcontacts/" + programid + "?currentuser=" + options.currentuser },
            ];
            if (options.isuserdrip)
                modal.show({ title: options.totalusers, views: views });
            else
                modal.show({ title: options.totalcontacts, views: views });
        },
        showDripActiveContacts: function (programid, options) {
            var views = [
                          { icon: "user", name: options.activeusers, url: "/manage/campaigns/activecontacts/" + programid + "?currentuser=" + options.currentuser },
            ];
            if (options.isuserdrip)
                modal.show({ title: options.activeusers, views: views });
            else
                modal.show({ title: options.activecontacts, views: views });
        },
        showDripNewBouncedContacts: function (options) {
            var strParam = "userid=" + options.userid + "&status=" + options.status;
            if (options.selectedrange != undefined)
                strParam += "&selectedrange=" + options.selectedrange;
            if (options.startdate != undefined)
                strParam += "&startdate=" + options.startdate;
            if (options.enddate != undefined)
                strParam += "&enddate=" + options.enddate;
            var views = [
                { icon: "user", name: 'Bounced', url: "/drip/bounced/contacts?" + strParam },
            ];
            var title = options.isuserdrip ? 'Bounced Users' : 'Bounced Contacts';
            modal.show({ title: title, views: views });
        },

        showDripBouncedContacts: function (programid, options) {
            var views = [
                { icon: "user", name: 'Bounced', url: "/manage/campaigns/totalcontacts/" + programid + "?currentuser=" + options.currentuser + "&deliverystatus=" + options.deliverystatus + "" },
            ];
            var title = options.isuserdrip ? 'Bounced Users' : 'Bounced Contacts';
            modal.show({ title: title, views: views });
        },
        

        showUnsubscribedContacts: function (programid, options) {
            var views = [
                { icon: "user", name: 'Unsubscribed', url: "/manage/campaigns/totalcontacts/" + programid + "?currentuser=" + options.currentuser + "&deliverystatus=" + options.deliverystatus + "" },
            ];
            var title = options.isuserdrip ? 'Unsubscribed Users' : 'Unsubscribed Contacts';
            modal.show({ title: title, views: views });
        },
        showHotHighContacts: function (programid, options) {
            var views = [
                { icon: "user", name: 'Contacts', url: "/manage/campaigns/totalcontacts/" + programid + "?currentuser=" + options.currentuser + "&intereststatus=" + options.interestStatus + "" },
            ];
            var title = options.isuserdrip ? 'Hot/High Users' : 'Hot/High Contacts';
            modal.show({ title: title, views: views });
        },
        showProgramContactsByEmailStage: function (programid, options) {
            var views = [
                { icon: "user", name: options.totalcontacts, url: "/manage/campaigns/emailcontacts/" + programid + "?emailstage=" + options.emailStage+""},
            ];
            if (options.emailStage == parseInt("7"))
                views[0].url = `/manage/campaigns/emailcontacts/${programid}?emailstage=${options.emailStage}&emailId=${options.emailId}`
            var title = "";
            if (options.isuserdrip) {
                if (options.emailStage == parseInt("1"))
                    title = options.totalemailsentusers;
                else if (options.emailStage == parseInt("7"))
                    title = options.totalemailnotsentusers;
                else if (options.emailStage == parseInt("4"))
                    title = options.totalopenedusers;
                else if (options.emailStage == "EmailUniqueClicked")
                    title = options.totallinksclickedusers;
            }
            else
            {
                if (options.emailStage == parseInt("1"))
                    title = options.totalemailsentcontacts;
                else if (options.emailStage == parseInt("7"))
                    title = options.totalemailnotsentcontacts;
                else if (options.emailStage == parseInt("4"))
                    title = options.totalopenedcontacts;
                else if (options.emailStage == parseInt("5"))
                    title = options.totallinksclickedcontacts;
            }
            modal.show({ title: title, views: views });
        },
        showProgramContacts: function (id, programid, currentuser,options) {
            var views = [
                  { icon: "clock", name: 'Report', url: "/drip/report/" + id + "/" + programid + "?currentuser=" + currentuser },
            ];
            modal.show({ title: options.title, views: views });
        },
        showProgramContactEmailStatus: function (id, status, currentuser, options) {
            var views = [
                 { icon: "clock", name: 'Report', url: "/drip/report/" + id + "/status/" + status + "?currentuser=" + currentuser + "&isuserdrip=" + options.isuserdrip },
            ];
            modal.show({ title: options.title, views: views });
        },
        showProjectStage: function (reportData)
        {           
            var strParam = '';
            if (reportData.leadsource != undefined)
                strParam += "&leadsource=" + fixedEncodeURIComponent(reportData.leadsource);
            if (reportData.contactcompanyid != undefined)
                strParam += "&contactcompanyid=" + reportData.contactcompanyid;
            if (reportData.type != undefined || reportData.type != null) {              
                strParam += "&stage=" + reportData.type;
            }          
            if (reportData.linktoid != undefined)
                strParam += "&linktoid=" + reportData.linktoid;
            if (reportData.viewoption != undefined)
                strParam += "&viewoption=" + reportData.viewoption;
            if (reportData.linktype != undefined)
                strParam += "&linktype=" + reportData.linktype;
            if (reportData.orgviewoption != undefined)
                strParam += "&orgviewoption=" + reportData.orgviewoption;
            if (reportData.groupviewoption != undefined)
                strParam += "&groupviewoption=" + reportData.groupviewoption;
            if (reportData.index != undefined)
                strParam += "&index=" + reportData.index;            
            if (reportData.format != undefined)
                strParam += "&format=" + reportData.format;
            if (reportData.isleaderboard != undefined)
                strParam += "&isleaderboard=" + reportData.isleaderboard;
            if (reportData.indexdiff != undefined)
                strParam += "&indexdiff=" + reportData.indexdiff;
            var title = reportData.title != undefined ? reportData.title : "";
            var views = [
                { icon: "cube", name: title, url: "/reports/projects-contact-status?"+ strParam }
            ];
            modal.show({ title: reportData.title, views: views });
        },
        showProjectsForWinloss: function (organizationid, userid, projecttypeid, type, organizationgroupid, winloss) {
            var views = [
                       { icon: "cube", name: 'Opportunity', url: "/reports/contactshare/opportunitystatus?organizationid=" + organizationid + "&userid=" + userid + "&projecttypeid=" + projecttypeid + "&type=" + type + "&organizationgroupid=" + organizationgroupid + "&winloss=" + winloss }
            ];
            modal.show({ title: 'Opportunity', views: views });
        },        
        showSocialOneOffCreate: function (id,isSharedPublishing, callback) {
            views = [{ icon: "edit", name: 'Publish', url: "/social/publish/oneoff/" + id , buttons: isSharedPublishing ? [] : ["publish"]}];
            modal.show({ title: 'Social Share', views: views, callback: callback });
        },
        showSocialOneOffSelect: function (type, publishingID, callback, isScheduled, isSocialOneOff) {
            if (isScheduled == undefined)
                isScheduled = false;
            if (isSocialOneOff == undefined)
                isSocialOneOff = false;
            views = [{ icon: "edit", name: 'Select', url: "/social/publish/oneoff/select/" + publishingID + "/" + type + "?isScheduled=" + isScheduled + "&isSocialOneOff=" + isSocialOneOff , buttons: ["save"] }];
            modal.show({ title: 'Select', views: views, callback: callback, closeButton: false });
        },
        showSocialOneOffStatus: function (id) {
            views = [{ icon: "edit", name: 'Status', url: "/communicate/social/status/" + id }];
            modal.show({ title: 'Status', views: views });
        },
        showSocialOneOffStatusSelect: function (pid, type, linkid) {
            var views = [{ icon: "file-pdf", name: 'Info', url: "/social/publish/status/select/" + pid + "/" + type + "/" + linkid, iconprefix: "far" }];
            modal.show({ title: 'Status', views: views });
        },
        showUsersForSharing: function (reportData)
        {            
            var strParam = '';
            if (reportData.type != undefined || reportData.type != null) {                
                strParam += "&stage=" + reportData.type;
            }
            if (reportData.leadsource != undefined)
                strParam += "&leadsource=" + fixedEncodeURIComponent(reportData.leadsource);
            if (reportData.contactcompanyid != undefined)
                strParam += "&contactcompanyid=" + reportData.contactcompanyid;
            if (reportData.linktoid != undefined)
                strParam += "&linktoid=" + reportData.linktoid;
            if (reportData.index != undefined)
                strParam += "&index=" + reportData.index;
            if (reportData.viewoption != undefined)
                strParam += "&viewoption=" + reportData.viewoption;
            if (reportData.linktype != undefined)
                strParam += "&linktype=" + reportData.linktype;
            if (reportData.orgviewoption != undefined)
                strParam += "&orgviewoption=" + reportData.orgviewoption;
            if (reportData.groupviewoption != undefined)
                strParam += "&groupviewoption=" + reportData.groupviewoption;
            if (reportData.format != undefined)
                strParam += "&format=" + reportData.format;  
            if (reportData.groupType != undefined)
                strParam += "&grouptype=" + reportData.groupType; 
            if (reportData.userGroupViewOption != undefined)
                strParam += "&usergroupviewoption=" + reportData.userGroupViewOption;
            if (reportData.userGroupId != undefined)
                strParam += "&usergroupid=" + reportData.userGroupId;
           
            var views = [
                { icon: "cube", name: reportData.title, url: "/widgets/sharedcontact/users?"+ strParam }
            ];
            modal.show({ title: reportData.title, views: views });
        },
        showCertificationPreview: function (assetID) {
            var views = [{ icon: "search", name: 'View', url: "/collateral/questionnaire/" + assetID + "/view/template",buttons:["done"] }];
            modal.show({ title: 'Training And Certification', views: views, locked: true, preventClose: true, closeButton: false });
        },
        showLeadPoolWizard: function (id,type,options)
        {
            var _wizdata = {
                name: options.create,
                steps: [
                        { name: options.info, url: "/setup/leadrouting/info/" + id }
                ],
            };
            if (type == 10000 && options.hasuseraccess)
                _wizdata.steps.push({ name: options.users, url: "/setup/leadrouting/users/" + id + "?iscreateleadpool=" + true });
            else if (options.hasorganizationaccess)
                _wizdata.steps.push({ name: options.organizations, url: "/setup/leadrouting/organizations/" + id + "?iscreateleadpool=" + true });
            
            _wizdata.steps.push({ icon: "list", name: options.rules, url: "/setup/leadrouting/rules/" + id });
            if(options.hascontactaccess)
                _wizdata.steps.push({ name: options.leads, url: "/setup/leadrouting/contacts/" + id + "?iscreateleadpool=" + true });
            _wizdata.steps.push({ icon: "bullhorn", name: options.notifications, url: "/setup/leadrouting/notification/" + id });
            
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showLeadPools: function (data, options) {
            $.extend({
                lead:false
            });
            var views = [       
                                { icon: "info-circle", name: options.info, url: "/setup/leadrouting/info/" + data.id, buttons:["save"] },
                                { icon: "list", name: options.rules, url: "/setup/leadrouting/rules/" + data.id, buttons: ["save"]},
                                { icon: "bullhorn", name: options.notifications, url: "/setup/leadrouting/notification/" + data.id, buttons: ["save"] }
            ];
            
            if (data.linktype == 10000 && options.hasuseraccess)
                views.unshift({ icon: "user-alt", name: 'Add/Remove Users', url: "/setup/leadrouting/users/" + data.id, buttons: ["save"] });
            else if(options.hasorganizationaccess)
                views.unshift({ icon: "building", name: options.organizations, url: "/setup/leadrouting/organizations/" + data.id, buttons: ["save"] });
            
            if (options.hascontactaccess) {
                if (data.lead)
                    views.unshift({ icon: "user", name: options.leads, url: "/setup/leadrouting/contacts/" + data.id, buttons: ["save"]});
                else
                    views.push({ icon: "user", name: options.leads, url: "/setup/leadrouting/contacts/" + data.id, buttons: ["save"] });
            }
            if (options.isorgtype)
                views.push({ icon: "fas fa-chart-bar", name: options.name, url: "/setup/leadrouting/report/" + data.id + "/true" });
            var title = 'Lead Pool' + ' > ' + '' + views[0].name + '' + ' (<b><i>' + data.name + '</i></b>)';
            modal.show({ title: title, views: views });
        },
        showOrganizationStats: function (poolID, options) {
            var views = [{ icon: "user", name: options.user, url: "/leadrouting/leadsaddedtopool/" + poolID + "/mainpoolstats/" + options.statsname + "?selectedrange=" + options.selectedrange + "&startdate=" + options.startdate + "&enddate=" + options.enddate + "&isreportview=" + options.isreportview }];
            modal.show({ title: options.title, views: views });
        },
        showUserWiseStats: function (poolID, options) {
            var views = [];
            if (options.statsname == 'leadsaddedtopoolorg') {
                views.push({ icon: "user", name: options.user, url: "/leadrouting/leadsaddedtopoolorg/" + options.orgid + "/" + poolID + "/" + options.statsname });
            }
            else if(options.statsname == 'notificationnotenabled') {
                views.push({
                    icon: "user", name: options.user, url: "/leadrouting/leadsaddedtopoolusers/" + poolID + "/" + options.statsname + "/" + options.orgid + "?selectedrange=" + options.selectedrange + "&startdate=" + options.startdate + "&enddate=" + options.enddate
                });
            }
            else {
                views.push({ icon: "user", name: options.user, url: "/leadrouting/leadsaddedtopoolusers/" + poolID + "/" + options.statsname + "/" + options.orgid });
            }
            modal.show({ title: options.title, views: views });
        },
        showUserOrOrgWiseStatsList: function (poolID, options) {
            var views = [{ icon: "user", name: options.user, url: "/leadrouting/leadsaddedtopool/" + poolID + "/" + options.id + "/" + options.isuserwise + "/" + options.isorgwise + "/" + options.statsname + "?selectedrange=" + options.selectedrange + "&startdate=" + options.startdate + "&enddate=" + options.enddate + "&isreportview=" + options.isreportview }];
            modal.show({ title: options.title, views: views });
        },
        showLeadPoolUserList: function (poolID,options)
        {
            var views = [
                { icon: "user", name: 'User List', url: "/setup/leadrouting/userlist/" + poolID, buttons: ["submit"]}
            ]
            modal.show({ title: options.create, views: views });
        },
        showOpportunityUserList: function (poolID, options) {
            var views = [
                { icon: "user", name: 'User List', url: "/setup/opportunityrouting/userlist/" + poolID }
            ]
            modal.show({ title: options.create, views: views });
        },
        showOpportunitySharingList: function (poolID) {
            var views = [
                { icon: "cubes", name: 'Opportunity List', url: "/setup/opprouting/opportunitylists/" + poolID }
            ]
            modal.show({ title: 'Opportunity List', views: views });
        },
        showLeadPoolContactList: function (poolID,options) {
            var views = [
                { icon: "user", name: 'Contact Lists', url: "/setup/leadrouting/contactlist/" + poolID, buttons: ["submit"] }
            ]
            modal.show({ title: options.create, views: views });
        },
        showWidgetSettings: function (widgetname, requestid, showheader, showdesc, showfilter, title, settingOptions) {
            var urlParam = "";
            if (settingOptions != undefined) {
                if (settingOptions.persona != undefined)
                    urlParam += urlParam != "" ? "&persona=" + settingOptions.persona : "?persona=" + settingOptions.persona;
                if (settingOptions.personaoption != undefined)
                    urlParam += urlParam != "" ? "&personaoption=" + settingOptions.personaoption : "?personaoption=" + settingOptions.personaoption;
                if (settingOptions.platform != undefined)
                    urlParam += urlParam != "" ? "&platform=" + settingOptions.platform : "?platform=" + settingOptions.platform;
                if (settingOptions.keepoldsetting != undefined)
                    urlParam += urlParam != "" ? "&keepoldsetting=" + settingOptions.keepoldsetting : "?keepoldsetting=" + settingOptions.keepoldsetting;
                if (settingOptions.showassets != undefined)
                    urlParam += urlParam != "" ? "&showassets=" + settingOptions.showassets : "?showassets=" + settingOptions.showassets;
                if (settingOptions.isexternalurl != undefined)
                    urlParam += urlParam != "" ? "&isexternalurl=" + settingOptions.isexternalurl : "?isexternalurl=" + settingOptions.isexternalurl;
                if (settingOptions.version != undefined)
                    urlParam += urlParam != "" ? "&version=" + settingOptions.version : "?version=" + settingOptions.version;
            }
            var views = [{ icon: "fa-cog", name: 'Settings', url: "/widgets/widgetsetting/" + widgetname + "/" + requestid + "/" + showheader + "/" + showdesc + "/" + showfilter + urlParam,buttons:["save"]}];
            modal.show({ title: title, views: views, preventclose: true, locked: true, size: "lg" });
        },
        showQuicklinkSettings: function (settingOptions) {
            var urlParam = "";
            if (settingOptions.externalurl != undefined)
                urlParam += urlParam != "" ? "&externalurl=" + settingOptions.externalurl : "?externalurl=" + settingOptions.externalurl;
            if (settingOptions.wheader != undefined)
                urlParam += urlParam != "" ? "&wheader=" + settingOptions.wheader : "?wheader=" + settingOptions.wheader;
            if (settingOptions.widgeticon != undefined)
                urlParam += urlParam != "" ? "&widgeticon=" + settingOptions.widgeticon : "?widgeticon=" + settingOptions.widgeticon;
            if (settingOptions.showassets != undefined)
                urlParam += urlParam != "" ? "&showassets=" + settingOptions.showassets : "?showassets=" + settingOptions.showassets;
            if (settingOptions.persona != undefined)
                urlParam += urlParam != "" ? "&persona=" + settingOptions.persona : "?persona=" + settingOptions.persona;
            if (settingOptions.personaoption != undefined)
                urlParam += urlParam != "" ? "&personaoption=" + settingOptions.personaoption : "?personaoption=" + settingOptions.personaoption;
            if (settingOptions.platform != undefined)
                urlParam += urlParam != "" ? "&platform=" + settingOptions.platform : "?platform=" + settingOptions.platform;
            var views = [{ icon: "fa-cog", name: "Settings", url: "/widgets/quicklinksetting/" + settingOptions.widgetname + "/" + settingOptions.requestid + "/" + settingOptions.showheader + "/" + settingOptions.showdesc + "/" + settingOptions.showfilter + "/" + settingOptions.design + urlParam , buttons: ["save"]}];
            modal.show({ title: settingOptions.title, views: views , preventclose: true, locked: true });
        },
        showColorSettings: function (settingOptions) {
            var urlParam = "";
            if (settingOptions.widgetname != undefined)
                urlParam += urlParam != "" ? "&wname=" + settingOptions.widgetname : "?wname=" + settingOptions.widgetname;
            if (settingOptions.persona != undefined)
                urlParam += urlParam != "" ? "&persona=" + settingOptions.persona : "?persona=" + settingOptions.persona;
            if (settingOptions.personaOption != undefined)
                urlParam += urlParam != "" ? "&personaoption=" + settingOptions.personaOption : "?personaoption=" + settingOptions.personaOption;
            if (settingOptions.platform != undefined)
                urlParam += urlParam != "" ? "&platform=" + settingOptions.platform : "?platform=" + settingOptions.platform;
            if (settingOptions.requestid != undefined)
                urlParam += urlParam != "" ? "&requestid=" + settingOptions.requestid : "?requestid=" + settingOptions.requestid;
            if (settingOptions.editmode != undefined)
                urlParam += urlParam != "" ? "&editmode=" + settingOptions.editmode : "?editmode=" + settingOptions.editmode;
            if (settingOptions.designtype != undefined)
                urlParam += urlParam != "" ? "&designtype=" + settingOptions.designtype : "?designtype=" + settingOptions.designtype;

            var pageURL = "/widgets/colorsetting";
            if (settingOptions.settingtype != undefined && settingOptions.settingtype!="")
                pageURL = "/widgets/" + settingOptions.settingtype + "/colorsetting";
            if (settingOptions.widgetname != undefined && settingOptions.widgetname == "assetsearch")
                pageURL = "/widgets/colorsetting/assetsearch";
            if (settingOptions.widgetname != undefined && settingOptions.widgetname == "myrewardpoints")
                pageURL = "/widgets/colorsetting/myreward";

            var views = [{ icon: "fa-cog", name: 'Settings', url: pageURL + urlParam, buttons: ["save"] }];
            modal.show({ title: settingOptions.title, views: views, preventclose: true, locked: true });
        },  
        showBannerColorSettings: function (settingOptions) {
            var urlParam = "";
            if (settingOptions.widgetname != undefined)
                urlParam += urlParam != "" ? "&wname=" + settingOptions.widgetname : "?wname=" + settingOptions.widgetname;
            if (settingOptions.persona != undefined)
                urlParam += urlParam != "" ? "&persona=" + settingOptions.persona : "?persona=" + settingOptions.persona;
            if (settingOptions.personaOption != undefined)
                urlParam += urlParam != "" ? "&personaoption=" + settingOptions.personaOption : "?personaoption=" + settingOptions.personaOption;
            if (settingOptions.platform != undefined)
                urlParam += urlParam != "" ? "&platform=" + settingOptions.platform : "?platform=" + settingOptions.platform;
            if (settingOptions.requestid != undefined)
                urlParam += urlParam != "" ? "&requestid=" + settingOptions.requestid : "?requestid=" + settingOptions.requestid;
            if (settingOptions.editmode != undefined)
                urlParam += urlParam != "" ? "&editmode=" + settingOptions.editmode : "?editmode=" + settingOptions.editmode;
            if (settingOptions.designtype != undefined)
                urlParam += urlParam != "" ? "&designtype=" + settingOptions.designtype : "?designtype=" + settingOptions.designtype;

            var pageURL = "/widgets/bannercolorsetting";
            
            var views = [{ icon: "fa-cog", name: 'Vide Banner Setting', url: pageURL + urlParam, buttons: ["save"] }];
            modal.show({ title: settingOptions.title, views: views, preventclose: true, locked: true });
        },
        showWidgetSetting: function (settingOptions) {
            var urlParam = "";
            if (settingOptions.widgetname != undefined)
                urlParam += urlParam != "" ? "&wname=" + settingOptions.widgetname : "?wname=" + settingOptions.widgetname;
            if (settingOptions.datawidget != undefined)
                urlParam += urlParam != "" ? "&cname=" + settingOptions.datawidget : "?cname=" + settingOptions.datawidget;
            if (settingOptions.persona != undefined)
                urlParam += urlParam != "" ? "&persona=" + settingOptions.persona : "?persona=" + settingOptions.persona;
            if (settingOptions.personaOption != undefined)
                urlParam += urlParam != "" ? "&personaoption=" + settingOptions.personaOption : "?personaoption=" + settingOptions.personaOption;
            if (settingOptions.platform != undefined)
                urlParam += urlParam != "" ? "&platform=" + settingOptions.platform : "?platform=" + settingOptions.platform;
            if (settingOptions.requestid != undefined)
                urlParam += urlParam != "" ? "&requestid=" + settingOptions.requestid : "?requestid=" + settingOptions.requestid;
            if (settingOptions.isinfotabvisible != undefined)
                urlParam += urlParam != "" ? "&isinfotabvisible=" + settingOptions.isinfotabvisible : "?isinfotabvisible=" + settingOptions.isinfotabvisible;
            if (settingOptions.editmode != undefined)
                urlParam += urlParam != "" ? "&editmode=" + settingOptions.editmode : "?editmode=" + settingOptions.editmode;
            if (settingOptions.iswidegtconfigvisible != undefined)
                urlParam += urlParam != "" ? "&iswidegtconfigvisible=" + settingOptions.iswidegtconfigvisible : "?iswidegtconfigvisible=" + settingOptions.iswidegtconfigvisible;
            if (settingOptions.isbargraphsettings != undefined)
                urlParam += urlParam != "" ? "&isbargraphsettings=" + settingOptions.isbargraphsettings : "?isbargraphsettings=" + settingOptions.isbargraphsettings;
            if (settingOptions.designtype != undefined)
                urlParam += urlParam != "" ? "&designtype=" + settingOptions.designtype : "?designtype=" + settingOptions.designtype;
            if (settingOptions.widgetVersion != undefined)
                urlParam += urlParam != "" ? "&version=" + settingOptions.widgetVersion : "?version=" + settingOptions.widgetVersion;
            if (settingOptions.isdonutsettings != undefined)
                urlParam += urlParam != "" ? "&isdonutsettings=" + settingOptions.isdonutsettings : "?isdonutsettings=" + settingOptions.isdonutsettings;
            if (settingOptions.legendcount != undefined)
                urlParam += urlParam != "" ? "&legendcount=" + settingOptions.legendcount : "?legendcount=" + settingOptions.legendcount;
            if (settingOptions.isassetsetting != undefined)
                urlParam += urlParam != "" ? "&isassetsetting=" + settingOptions.isassetsetting : "?isassetsetting=" + settingOptions.isassetsetting;
            if (settingOptions.isquicklinksettings != undefined)
                urlParam += urlParam != "" ? "&isquicklinksettings=" + settingOptions.isquicklinksettings : "?isquicklinksettings=" + settingOptions.isquicklinksettings;
            if (settingOptions.ispartnercampaign != undefined)
                urlParam += urlParam != "" ? "&ispartnercampaign=" + settingOptions.ispartnercampaign : "?ispartnercampaign=" + settingOptions.ispartnercampaign;
            if (settingOptions.ispersonalization != undefined)
                urlParam += urlParam != "" ? "&ispersonalization=" + settingOptions.ispersonalization : "?ispersonalization=" + settingOptions.ispersonalization;
            if (settingOptions.isvideowidget != undefined)
                urlParam += urlParam != "" ? "&isvideowidget=" + settingOptions.isvideowidget : "?isvideowidget=" + settingOptions.isvideowidget;
            if (settingOptions.isannouncementcarousel != undefined)
                urlParam += urlParam != "" ? "&isannouncementcarousel=" + settingOptions.isannouncementcarousel : "?isannouncementcarousel=" + settingOptions.isannouncementcarousel;
            if (settingOptions.iswidgetinformation != undefined)
                urlParam += urlParam != "" ? "&iswidgetinformation=" + settingOptions.iswidgetinformation : "?iswidgetinformation=" + settingOptions.iswidgetinformation;

            var pageURL = "/widgets/widgetsettingv5";
            
            var views = [{ icon: "fa-cog", name: 'Vide Banner Setting', url: pageURL + urlParam, buttons: ["save"] }];
            modal.show({ title: settingOptions.title, views: views, preventclose: true, locked: true });
        },  
        showActivityWidgetSetting: function (settingOptions) {
            var urlParam = "";
            if (settingOptions.widgetname != undefined)
                urlParam += urlParam != "" ? "&wname=" + settingOptions.widgetname : "?wname=" + settingOptions.widgetname;
            if (settingOptions.datawidget != undefined)
                urlParam += urlParam != "" ? "&cname=" + settingOptions.datawidget : "?cname=" + settingOptions.datawidget;
            if (settingOptions.persona != undefined)
                urlParam += urlParam != "" ? "&persona=" + settingOptions.persona : "?persona=" + settingOptions.persona;
            if (settingOptions.personaOption != undefined)
                urlParam += urlParam != "" ? "&personaoption=" + settingOptions.personaOption : "?personaoption=" + settingOptions.personaOption;
            if (settingOptions.platform != undefined)
                urlParam += urlParam != "" ? "&platform=" + settingOptions.platform : "?platform=" + settingOptions.platform;
            if (settingOptions.requestid != undefined)
                urlParam += urlParam != "" ? "&requestid=" + settingOptions.requestid : "?requestid=" + settingOptions.requestid;
            if (settingOptions.isinfotabvisible != undefined)
                urlParam += urlParam != "" ? "&isinfotabvisible=" + settingOptions.isinfotabvisible : "?isinfotabvisible=" + settingOptions.isinfotabvisible;
            if (settingOptions.editmode != undefined)
                urlParam += urlParam != "" ? "&editmode=" + settingOptions.editmode : "?editmode=" + settingOptions.editmode;
            if (settingOptions.iswidegtconfigvisible != undefined)
                urlParam += urlParam != "" ? "&iswidegtconfigvisible=" + settingOptions.iswidegtconfigvisible : "?iswidegtconfigvisible=" + settingOptions.iswidegtconfigvisible;
            if (settingOptions.isbargraphsettings != undefined)
                urlParam += urlParam != "" ? "&isbargraphsettings=" + settingOptions.isbargraphsettings : "?isbargraphsettings=" + settingOptions.isbargraphsettings;
            if (settingOptions.designtype != undefined)
                urlParam += urlParam != "" ? "&designtype=" + settingOptions.designtype : "?designtype=" + settingOptions.designtype;
            if (settingOptions.widgetVersion != undefined)
                urlParam += urlParam != "" ? "&version=" + settingOptions.widgetVersion : "?version=" + settingOptions.widgetVersion;
            if (settingOptions.isdonutsettings != undefined)
                urlParam += urlParam != "" ? "&isdonutsettings=" + settingOptions.isdonutsettings : "?isdonutsettings=" + settingOptions.isdonutsettings;
            if (settingOptions.legendcount != undefined)
                urlParam += urlParam != "" ? "&legendcount=" + settingOptions.legendcount : "?legendcount=" + settingOptions.legendcount;
            if (settingOptions.isassetsetting != undefined)
                urlParam += urlParam != "" ? "&isassetsetting=" + settingOptions.isassetsetting : "?isassetsetting=" + settingOptions.isassetsetting;
            if (settingOptions.isquicklinksettings != undefined)
                urlParam += urlParam != "" ? "&isquicklinksettings=" + settingOptions.isquicklinksettings : "?isquicklinksettings=" + settingOptions.isquicklinksettings;
            if (settingOptions.ispartnercampaign != undefined)
                urlParam += urlParam != "" ? "&ispartnercampaign=" + settingOptions.ispartnercampaign : "?ispartnercampaign=" + settingOptions.ispartnercampaign;
            if (settingOptions.ispersonalization != undefined)
                urlParam += urlParam != "" ? "&ispersonalization=" + settingOptions.ispersonalization : "?ispersonalization=" + settingOptions.ispersonalization;
            if (settingOptions.isvideowidget != undefined)
                urlParam += urlParam != "" ? "&isvideowidget=" + settingOptions.isvideowidget : "?isvideowidget=" + settingOptions.isvideowidget;

            var pageURL = "/widgets/widgetactivitysettingv5";

            var views = [{ icon: "fa-cog", name: 'Vide Banner Setting', url: pageURL + urlParam, buttons: ["save"] }];
            modal.show({ title: settingOptions.title, views: views, preventclose: true, locked: true });
        },
        showUpdateCourseCatalog: function () {
            var views = [{ icon: "user", name: name, url: "/linearplaybook/updatecoursecatalog", buttons: ["save"]  }];
            modal.show({ title: 'Update Course Catalog', views: views });
        },
        showUpdateJourneyBanner: function () {
            var views = [{ icon: "user", name: name, url: "/journeys/updatebanner", buttons: ["save"] }];
            modal.show({ title: 'Update Journey Banner', views: views });
        },
        updateCampaignBanner: function () {
            var views = [{ icon: "user", name: name, url: "/marketingcampaigns/banner", buttons: ["save"] }];
            modal.show({ title: 'Update Campaign Banner', views: views });
        },
        showInternalPlaybookWidget: function (name, ipID) {
            var views = [{ icon: "user", name: name, url: "https://partner-marketing.bitdefender.com/widgets/internalplaybookwidgetreport/" + ipID }];
            modal.show({ title: 'Playbook Report', views: views });
        },
        showInternalPlaybookPrintPreview: function (id, options) {
            var views = [{ icon: "search", name: 'View', url: "/collateral/pdf/" + id + "/view" }];
            if (options != undefined) {
                if (options.templateType == 16) {
                    if (options.canPrintSend)
                        views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&customsendmodal=true&hideimportcustomize=true", buttons: ["finish"]});
                    if (options.hasPartnerAccess)
                        views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&ispartner=" + true + "&customsendmodal=true&hideimportcustomize=true", buttons: ["finish"]});
                    if (options.canPrintPublish)
                        views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/true/" + id});
                }
            }
            modal.show({ title: 'Print', views: views });
        },
        showPlaybookWebBannerMedia: function (id, options) {
            var views = [{ icon: "search", name: options.view, url: "/manage/campaigns/webbanner/" + id + "/view?rand=1" }];
            modal.show({ title: options.header, views: views });
        },
        showInternalPlaybookEbookPreview: function (id,title) {
            var views = [{ icon: "search", name: 'View', url: "/collateral/ebook/" + id + "/view" }];
            modal.show({ title: 'eBooks - ' + title, views: views });
        },
        showInternalPlaybookPPTPreview: function (id, title) {            
            var views = [{ icon: "search", name: 'View', url: "/collateral/presentation/" + id+ "/view"  }];
            modal.show({ title: 'Presentation' + title, views: views });
        },
        showInternalPlaybookLandingPagePreview: function (id, options) {
            var views = [{ icon: "search", name: options.view, url: "/manage/landingpage/" + id + "/view?rand=1" }];
            modal.show({ title: options.header, views: views });
        },
        showInternalPlaybookWebsitePreview: function (id) {
            var views = [{ icon: "search", name: 'View', url: "/manage/web/" + id + "/view?rand=1" }];
            modal.show({ title: 'Website', views: views });
        },
        showDataRoomPreview: function (id) {
            var views = [{ icon: "search", name: 'View', url: "/collateral/data-room/" + id + "/view?rand=1" }];
            modal.show({ title: 'Data Room', views: views });
        },
        showInternalPlaybookLandingReport: function (options) {
            var views = [];
            if (options.userid !== undefined)
                views = [{ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/landingpage/" + options.id + "/report?currentuser=" + options.currentuser + "&userid=" + options.userid, iconprefix: "far" }];
            else
                views = [{ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/landingpage/" + options.id + "/report?currentuser=" + options.currentuser, iconprefix: "far" }];
            modal.show({ title: options.title, views: views });
        },
        showChannelManagerProspects: function (isNew, options) {
            var views = [{ icon: "search", name: options.prospects, url: "/channelmanager/prospects/" + isNew }];
            modal.show({ title: options.prospects, views: views });
        },
        showChannelManageOrganization: function (isNew, options) {
            var views = [{ icon: "search", name: options.partners, url: "/channelmanager/partners/" + isNew }];
            modal.show({ title: options.partners, views: views });
        },
        showPlanningOrganization: function (planning, options) {
            var views = [{ icon: "search", name: options.planning, url: "/channelmanager/planning/true/" + planning }];
            modal.show({ title: options.planning, views: views });
        },
        showCertificationOrganization: function (isCompleted, options) {
            var views = [{ icon: "search", name: options.certification, url: "/channelmanager/certification/true/" + isCompleted }];
            modal.show({ title: options.certification, views: views });
        },
        showRevenueMateOrganization: function (isRevenue, options) {
            var views = [{ icon: "search", name: options.partners, url: "/channelmanager/revenue/true/" + isRevenue }];
            var title = isRevenue ? options.metorg : options.unmateorg;

            modal.show({ title: title, views: views });
        },
        showFundsForChannelManager: function (options) {
            var views = [{ icon: "search", name: options.funds, url: "/channelmanager/funds" }];
            modal.show({ title: options.funds, views: views });
        },
        showRequestListForFund: function (options) {
            var views = [{ icon: "", name: "", url: "/mdf/fundrequestreport/" + options.fundid + "/" + options.orgid + "?selectedrange=" + options.selectedrange + "&basedon=" + options.basedon , buttons: ["cancel"] }];
            var title = options.title;
            if (options.name != null && options.name != undefined)
                title = options.title  + " (<b><i>" + options.name + "</i></b>)";

            modal.show({ title: title, views: views });
        },
        showContactsForListMDF: function (options) {
            var views = [{ icon: "eye", name: 'Preview', url: `/connections/list/${options.id}/preview/${getTimeStamp()}?ismdf=true&type=${options.type}&isedit=${options.isedit}&mdfrequestid=${options.requestid}`} ];
            modal.show({ title: options.name, views: views });
        },
        showRequestsForChannelManager: function (options) {
            var views = [{ icon: "search", name: options.viewrequest, url: "/channelmanager/viewrequests" }];
            modal.show({ title: options.viewrequest, views: views });
        },
        showEngagementForChannelManager: function (interestStatus,options) {
            var views = [{ icon: "search", name: options.engagement, url: "/channelmanager/engagement/true/" + interestStatus }];
            modal.show({ title: options.engagement, views: views });
        },
        showNewAssetDocument: function (options) {
            var views = [{ icon: "envelope", name: options.name, url: "/gallery/documents?contactidforfilter=" + options.contactIdForFilter + "&filterids=" + options.filterIds + "&contactid=" + options.contactId + "&isplaybook=" + options.isPlaybook }];
            modal.show({ title: options.title, views: views });
        },
        showEditWebBannerWizard: function (pagedata, allpagestemplateonlydb) {
            modal.closeall();
            var temptype = pagedata.templatetype;
            var info = { name: pagedata.info, url: "/manage/campaigns/webbanner/" + pagedata.id + "/info" }
            var questions = { name: pagedata.question, url: "/manage/campaigns/webbanner/" + pagedata.id + "/questions" }
            var assetpicker = { name: pagedata.assetpicker, url: "/manage/campaigns/webbanner/" + pagedata.id + "/assetpicker" }
            var editor = {
                name: pagedata.webeditor, url: "/manage/campaigns/webbanner/" + pagedata.id + "/editor?playbookid=" + pagedata.playbookid, wizardclose: true }

            if (pagedata.hasquestionnaire == true && pagedata.usedatasource == 1 && !allpagestemplateonlydb)
                var _wizdata = {
                    name: pagedata.customizewebbanner,
                    steps: [info, questions, assetpicker, editor]
                };
            else if (pagedata.hasquestionnaire == true && pagedata.usedatasource == 0)
                var _wizdata = {
                    name: pagedata.customizewebbanner,
                    steps: [info, questions, editor]
                };
            else if (pagedata.hasquestionnaire == false && pagedata.usedatasource == 1 && !allpagestemplateonlydb)
                var _wizdata = {
                    name: pagedata.customizewebbanner,
                    steps: [info, assetpicker, editor]
                };
            else if (pagedata.hasquestionnaire == false && pagedata.usedatasource == 0)
                var _wizdata = {
                    name: pagedata.customizewebbanner,
                    steps: [info, editor]
                };
            else
                var _wizdata = {
                    name: pagedata.customizewebsite,
                    steps: [info, editor]
                };


            _wizdata["preventClose"] = false;
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showWebBannerMedia: function (id, options) {
            $.extend({
                cansend: false,
                canpublish: false,
                canedit: false,
                customize: false,
                contactids: null,
                canemailsend: false,
                canpartnersend: false
            }, options);
            var views = [];
            //var modalTitle = "Landing Page";
            if (!options.isNeedApproval) {
                if (!options.isApproved) {
                    if (options.customize) {
                        if (options.canedit) views.push({ icon: "edit", name: options.editor, url: "/manage/campaigns/webbanner/" + id + "/editor", buttonaction: true });
                        views.push({ icon: "search", name: options.view, url: "/manage/campaigns/webbanner/" + id + "/view?rand=1" });
                    }
                    else {
                        views.push({ icon: "search", name: options.view, url: "/manage/campaigns/webbanner/" + id + "/view?rand=1" });
                        if (options.canedit) views.push({ icon: "edit", name: options.editor, url: "/manage/campaigns/webbanner/" + id + "/editor", buttonaction: true });
                    }
                }
                else
                    views.push({ icon: "search", name: options.view, url: "/manage/campaigns/webbanner/" + id + "/view?rand=1" });
                if (options.canemailsend) {
                    if (options.cansend) {
                        if (options.contactids != null) {
                            views.push({ icon: "envelope", name: options.send, url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&contactids=" + options.contactids, buttons: ["finish"] });
                            if (options.canpartnersend)
                                views.push({ icon: "envelope", name: options.sendtousers, url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&contactids=" + options.contactids + "&ispartner=" + true, buttons: ["finish"] });
                        }
                        else {
                            views.push({ icon: "envelope", name: options.send, url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"] });
                            if (options.canpartnersend)
                                views.push({ icon: "envelope", name: options.sendtousers, url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&ispartner=" + true, buttons: ["finish"] });
                        }
                    }
                }

                views.push({ icon: "qrcode", name: 'Get QR Code', url: "/manage/landingpage/" + id + "/qrcode" });
                if (options.canpublish && options.canautopublish) views.push({ icon: "globe", name: options.publish, url: "/setup/publish/media/true/" + id, buttons: ["send"] });
                if (options.output) {
                    views.push({ icon: "info-circle", name: options.info, url: "/manage/campaigns/webbanner/" + id + "/info", buttons: ["save"] });
                }

                views.push({ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/webbanner/" + options.id + "/report?currentuser=" + options.currentuser + "&playbookid=" + options.playbookid, iconprefix: "far" });
                views.push({ icon: "file", name: 'Pages', url: "/manage/campaigns/website/" + options.id + "/interestbypage?currentuser=" + options.currentuser + "&playbookid=" + options.playbookid });
                views.push({ icon: "users", name: 'Contacts', url: "/manage/campaigns/website/" + options.id + "/interestbycontact?currentuser=" + options.currentuser });
            }
            else {
                views.push({ icon: "search", name: options.view, url: "/manage/campaigns/webbanner/" + id + "/view?rand=1" });
                views.push({ icon: "envelope", name: options.sendtoapproval, url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"]});
                views.push({ icon: "qrcode", name: 'Get QR Code', url: "/manage/landingpage/" + id + "/qrcode" });
                if (options.canedit) views.push({ icon: "edit", name: options.editor, url: "/manage/campaigns/webbanner/" + id + "/editor" });
                if (options.output) views.push({ icon: "info-circle", name: options.info, url: "/manage/campaigns/webbanner/" + id + "/info", buttons:["save"] });
            }
            modal.show({ title: options.header + " > "+views[0].name, views: views, locked: true, preventClose: true });
        },
        showWebBannerMediaNew: function (id, options) {
            $.extend({
                cansend: false,
                canpublish: false,
                canWebBannerSend: false,
                canedit: false,
                customize: false,
                contactids: null
            }, options);
            var views = [];
            if (!options.isNeedApproval) {
                if (!options.isApproved) {
                    if (options.customize) {
                        if (options.canedit) views.push({ icon: "edit", name: options.editor, url: "/manage/campaigns/webbanner/" + id + "/editor", buttonaction: true });
                        views.push({ icon: "search", name: options.view, url: "/manage/campaigns/webbanner/" + id + "/view?rand=1" });
                    }
                    else {
                        views.push({ icon: "search", name: options.view, url: "/manage/campaigns/webbanner/" + id + "/view?rand=1" });
                        if (options.canedit) views.push({ icon: "edit", name: options.editor, url: "/manage/campaigns/webbanner/" + id + "/editor", buttonaction: true });
                    }
                }
                else
                    views.push({ icon: "search", name: options.view, url: "/manage/campaigns/webbanner/" + id + "/view?rand=1" });

                if (options.cansend && options.canwebbannersend) {
                    if (options.contactids != null) {
                        views.push({ icon: "envelope", name: options.send, url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&contactids=" + options.contactids, buttons: ["finish"] });
                        if (options.canPartnerSend && options.cansend)
                            views.push({ icon: "envelope", name: options.sendtousers, url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&contactids=" + options.contactids + "&ispartner=" + true, buttons: ["finish"] });
                    }
                    else {
                        if (options.cansend && options.canwebbannersend)
                            views.push({ icon: "envelope", name: options.send, url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"] });
                        if (options.canPartnerSend && options.cansend)
                            views.push({ icon: "envelope", name: options.sendtousers, url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true&ispartner=" + true, buttons: ["finish"] });
                    }
                }

                views.push({ icon: "qrcode", name: 'Get QR Code', url: "/manage/landingpage/" + id + "/qrcode" });
                if (options.canpublish && options.canautopublish) views.push({ icon: "globe", name: options.publish, url: "/setup/publish/media/true/" + id, buttons: ["send"] });
                if (options.output) {
                    views.push({ icon: "info-circle", name: options.info, url: "/manage/campaigns/webbanner/" + id + "/info", buttons: ["save"] });
                }

                views.push({ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/webbanner/" + options.id + "/report?currentuser=" + options.currentuser + "&playbookid=" + options.playbookid, iconprefix: "far" });
                views.push({ icon: "file", name: 'Pages', url: "/manage/campaigns/website/" + options.id + "/interestbypage?currentuser=" + options.currentuser + "&playbookid=" + options.playbookid });
                views.push({ icon: "users", name: 'Contacts', url: "/manage/campaigns/website/" + options.id + "/interestbycontact?currentuser=" + options.currentuser });
            }
            else {
                views.push({ icon: "search", name: options.view, url: "/manage/campaigns/webbanner/" + id + "/view?rand=1" });
                views.push({ icon: "envelope", name: options.sendtoapproval, url: "/communicate/email/0?assetid=" + id + "&isAssetEmail=true", buttons: ["finish"] });
                views.push({ icon: "qrcode", name: 'Get QR Code', url: "/manage/landingpage/" + id + "/qrcode" });
                if (options.canedit) views.push({ icon: "edit", name: options.editor, url: "/manage/campaigns/webbanner/" + id + "/editor" });
                if (options.output) views.push({ icon: "info-circle", name: options.info, url: "/manage/campaigns/webbanner/" + id + "/info", buttons: ["save"] });
            }
            modal.show({ title: options.header + " > " + views[0].name, views: views, locked: true, preventClose: true });
        },
        showOpportunity: function (projectTypeID, format, stage, index,type)
        {
            var hideActions = false;
            if (isNewUI)
                hideActions = true;
            if (index != undefined)
                var views = [{ icon: "cube", name: 'Projects', url: "/opportunity/record/" + projectTypeID + "/" + stage + "/" + format + "?index=" + index + "&hideactions=" + hideActions}]; 
            else
                var views = [{ icon: "cube", name: 'Projects', url: "/opportunity/record/" + projectTypeID + "/" + stage + "/" + format + "?hideactions=" + hideActions  }];

            modal.show({ title: 'Opportunities (' + type + ')', views: views });
        },

        showActualOpportunity: function (options) {
            if (options.format != undefined)
                var format = options.format;
            if (options.indexDiff != undefined)
                var indexDiff = options.indexDiff;
            var views = [{ icon: "cube", name: 'Projects', url: "/widget/opportunityactualdata?format=" + format + "&indexDiff=" + indexDiff }];
            modal.show({ title: 'Opportunities', views: views });
        },
        showActualCallRecord: function (options) {
            if (options.format != undefined)
                var format = options.format;
            if (options.indexDiff != undefined)
                var indexDiff = options.indexDiff;
            var views = [{ icon: "phone", name: 'Phone Activity', url: "/widget/custom/callrecorduseractivity?format=" + format + "&indexDiff=" + indexDiff }];
            modal.show({ title: 'Phone Activity', views: views });
        },
        showUsersList: function (options, callback) {
            var url = "/designeditor/form/onbehalf?type=" + options.clickedon;
            if (options.id != 0)
                url = "/designeditor/form/onbehalf?onbehalfid=" + options.id + "&type=" + options.clickedon;
            var views = [{ icon: "user", name: "", url:url , buttons: ["save"] }];
            modal.show({ title: "", views: views,callback:callback });
        },
        showOpportunityActivity: function (options) {

            var projectTypeID = options.projecttyeid;
            var format = options.format;
            var stage = options.stage;
            var index = options.index;
            var type = options.type;

            var strParam = "projecttyeid=" + projectTypeID;
            if (options.linktoid != undefined)
                strParam += "&linktoid=" + options.linktoid;
            if (options.viewoption != undefined)
                strParam += "&viewoption=" + options.viewoption;
            if (options.linktype != undefined)
                strParam += "&linktype=" + options.linktype;
            if (options.orgviewoption != undefined)
                strParam += "&orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != undefined)
                strParam += "&groupviewoption=" + options.groupviewoption;
            if (options.groupviewoption != undefined)
                strParam += "&groupviewoption=" + options.groupviewoption;
            if (options.grouptype != undefined)
                strParam += "&grouptype=" + options.grouptype;
            if (options.usergroupviewoption != undefined)
                strParam += "&usergroupviewoption=" + options.usergroupviewoption;
            if (options.usergroupid != undefined)
                strParam += "&usergroupid=" + options.usergroupid;
            if (options.currencyunit != undefined)
                strParam += "&currencyunit=" + options.currencyunit;
            if (stage != undefined)
                strParam += "&stage=" + stage;
            if (index != undefined)
                strParam += "&index=" + index;

            if (options.selectedrange != undefined)
                strParam += "&selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "") {
                var strtd = new Date(options.startdate)
                strParam += "&startdate=" + strtd.toLocaleDateString().replace(/[\u200E]/g, "");
            }
            if (options.enddate != undefined && options.enddate != "") {
                var strtd = new Date(options.enddate)
                strParam += "&enddate=" + strtd.toLocaleDateString().replace(/[\u200E]/g, "");
            }

            var views = [{ icon: "cube", name: 'Projects', url: "/opportunity/record/" + projectTypeID + "/" + stage + "/" + format + "?" + strParam  }];
            
            modal.show({ title: 'Opportunities (' + type + ')', views: views });
        },
        showContactExport: function (options) {
            var spaceRegEx = new RegExp(/\s|{|}/g);
            var slashEqualRegEx = new RegExp(/\:/g);
            var slashRegEx = new RegExp(/\"/g);
            if (typeof (JSON.stringify(options.apidata)) != "undefined")
                options.apidata = JSON.stringify(options.apidata).replace(slashEqualRegEx, '\=').replace(slashRegEx, '\ ').replace(spaceRegEx, "");
            var views = [{ icon: "bar - chart - o", name: options.name, url: "/connections/contacts/export/" + options.apiname + "/" + options.apidata + "?isSmartlist=null", buttons: ["generate"]}];
            modal.show({ title: options.title, views: views });
        },
        showOfflineActivityForUser: function (id, contactid,activityname, isPartnerUser) {
            var name = "";
            if (id > 0)
            {
                name = 'Edit' + '(<b><i>' + activityname + '</i></b>)';
            }
            else
            {
                name = 'Create';
            }
            var views = [
                { icon: "file-image", name: 'Offline Activity', url: "/contacts/offline/edit/" + id + "/" + contactid + "?isPartnerUser=" + isPartnerUser, buttons: ["save"], iconprefix: "far" },
            ];
            modal.show({ title: name, views: views});
        },
        showProjectOfflineActivityForUser: function (id, pTypeId, pId, activityname, isPartnerUser) {
            var name = "";
            if (id > 0) {
                name = 'Edit' + '(<b><i>' + activityname + '</i></b>)';
            }
            else {
                name = 'Create';
            }
            var views = [
                { icon: "file-image", name: 'Offline Activity', url: "/manage/project-record/offline-edit/" + id + "?isPartnerUser=" + isPartnerUser + "&projecttype=" + pTypeId + "&id=" + pId, buttons: ["save"], iconprefix: "far" },
            ];
            modal.show({ title: name, views: views });
        },
        showProjectOfflineActivity: function (options) {
            var views = [
                { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + options.pTypeID + "/" + options.pID }
            ];
            var title = `Offline Activity > ${options.projecttypename} (<b>${options.opportunityname}</b>)`;
            modal.show({ title: title, views: views });
        },
        showToDosActivityForContact: function (id, contactid) {
            var title = "";
            if (id > 0)
                 title = 'Edit';
            else
                title = 'Create';
            var views = [
                { icon: "file-image", name: 'Contacts', url: "/contacts/todos/edit/" + id + "/" + contactid, buttons: ["save"], iconprefix: "far" },
            ];
            modal.show({ title: title, views: views });
        },
        showOfflineActivityPages: function (id, email, name)
        {
            var views = [
                { icon: "male", name: 'Offline Activity', url: "/connections/contacts/offline/" + id },
            ];
            var title = "";
            if(email)
                title = 'Offline Activity'+' (<b><i>' + email +'</i></b>)';
            else if (name)
                title = 'Offline Activity'+' (<b><i>' + name +'</i></b>)';
            else
                title = 'Offline Activity';
            modal.show({ title: title, views: views });
        },
        CreateOfflineActivityForUser: function (id, contactid,email, callback) {
            var views = [
                { icon: "file-image", name: 'Contacts', url: "/contacts/offline/edit/" + id + "/" + contactid, buttons: ["save"], iconprefix: "far" },
            ];
            modal.show({ title: ' Create Offline Activity ' + '( <b> <i> '+email+' </i> </b> )', views: views, callback: callback });
        },
        EditContactFilters: function (id, email, callback) {
            var views = [
                { icon: "filter", name: 'Filters', url: "/connections/contacts/filters/" + id, buttons: ["done"] },
            ];
            modal.show({ title: 'Filters' + '( <b> <i> ' + email + ' </i> </b> )', views: views, callback: callback, locked: true, preventClose: true, hideCloseButton: false });
        },
        showDownloadedPDF: function (jo) {
            var views = [{ icon: "user", name: jo.contact, url: "/pdfdownloaded/dashboard/" + jo.index + "/" + jo.format }];
            modal.show({ title: jo.pdf, views: views });
        },
         showPrintMediaReport: function (joData) {
            var views = [{ icon: "user", name: joData.contact, url: "/widgets/report/pdfdownloaded?index=" + joData.index + "&format=" + joData.format }];
            modal.show({ title: joData.pdf, views: views });
        },
         showTemplateReport: function (id, options) {
             var views = [{ icon: "chart-bar", name: options.name, url: "/setup/asset/report/" + id, iconprefix: "far" }];
            modal.show({ title: options.title, views: views });
        },
         showOfflineActivity: function (id, contactid, isActive,activityname) {
             if (isActive != null && isActive != undefined && isActive == parseInt("1")) {
                 var views = [
                     { icon: "file-image", name: 'Contacts', url: "/contacts/offline/edit/" + id + "/" + contactid, buttons: ["save"], iconprefix: "far" },
                 ];
                 if (activityname != null && activityname != undefined) {
                     modal.show({ title: 'Offline Activity Edit' + '(<b><i>' + activityname + '</i></b>)', views: views, preventClose: true });
                 }
                 else {
                     modal.show({ title: 'Offline Activity Edit', views: views, preventClose: true });
                 }
             }
             else {
                 $.OpenSmartMessageBox2({ title: 'This offline activity has been deleted.', buttons: '[Ok]' },
                     function (result) {
                         if (result === 'Ok') {
                             $.CloseSmartMessageBox2();
                             return;
                         }
                     }
                 );
             }
         },
        showOrganizationData: function (showTotalOpportunities, showTotalUsers, showTotalLeadsShared, options) {
            var views = [];
            var header = "";
            if (showTotalOpportunities)
            {
                views = [{ icon: "file-image", name: options.opportunity, url: "/manage/opportunity-records?isReport=" + showTotalOpportunities + "&createdonly=" + (options.createdonly !== undefined ? options.createdonly : false) + "&isOrgReport=" + options.isOrgReport + "&linktoid=" + options.linkToId + "&linktype=" + options.linkType + "&viewoption=" + options.viewOption + "&orgviewoption=" + options.orgViewOption + "&groupviewoption=" + options.groupViewOption, iconprefix: "far" }];
                header = options.opportunity_created;
            }
            else if (showTotalUsers)
            {
                var urlParam = "";
                if (options.isreportactivity != undefined)
                    urlParam += "&isreportactivity=" + options.isreportactivity;
                if (options.isOrgReport != undefined && options.isOrgReport == true && options.isorganizationgrid == true)
                    views = [{ icon: "user", name: options.user, url: `/setup/users?isReport=${showTotalUsers}&isOrgReport=${options.isOrgReport}&isorganizationgrid=${options.isorganizationgrid}&linktoid=${options.linkToId}&linktype=${options.linkType}&viewoption=${options.viewOption}&orgviewoption=${options.orgViewOption}&groupviewoption=${options.groupViewOption}${urlParam}` },]; 
                if (options.isOrgReport != undefined && options.isOrgReport == true)
                    views = [{ icon: "user", name: options.user, url: "/setup/dashboarduserslist?isOrgReport=true&isPartnerEngagement=false&isReport="+ showTotalUsers+"&isOrgReport="+options.isOrgReport+ "&linktoid="+options.linkToId+"&linktype="+options.linkType+"&viewoption="+options.viewOption+"&orgviewoption="+options.orgViewOption+"&selectedrange="+options.selectedrange+"&startdate="+options.startdate+"&enddate="+options.enddate+"&groupviewoption="+options.groupViewOption+urlParam}]; 
                else
                    views = [{ icon: "user", name: options.user, url: "/setup/users?isReport=" + showTotalUsers },];
                header = options.user;
            }
            else if (showTotalLeadsShared)
            {
                views = [{ name: options.leadshared, url: "/contacts/shared/0?isReport=" + showTotalLeadsShared }];
                header = options.leadshared;
            }
            else if (options.IsPartnerEngagement) {
                views = [{ icon: "user", name: options.user, url: "/setup/dashboarduserslist?isReport=" + true + "&isPartnerEngagement=" + options.IsPartnerEngagement + "&isOrgReport=" + options.isOrgReport + "&linktoid=" + options.linkToId + "&linktype=" + options.linkType + "&viewoption=" + options.viewOption + "&orgviewoption=" + options.orgViewOption + "&groupviewoption=" + options.groupViewOption  },];
                header = options.title;
            }
            else if (options.IsPartnerScoring) {
                views = [{ icon: "user", name: options.user, url: "/setup/dashboarduserslist?isReport=" + options.isreport + "&isPartnerEngagement=" + true + "&isOrgReport=" + options.isOrgReport + "&linktoid=" + options.linkToId + "&linktype=" + options.linkType + "&viewoption=" + options.viewOption + "&orgviewoption=" + options.orgViewOption + "&groupviewoption=" + options.groupViewOption + "&displaysiteandsuperadminusers=" + options.displaysiteandsuperadminusers },];
                header = options.title;
            }
            modal.show({ title: header, views: views });
        },

        showOrganizationGroupData: function (showTotalOpportunities, showTotalLeadsShared, options) {
            var views = [];
            var header = "";
            if (showTotalOpportunities) {
                views = [{ icon: "file-image", name: options.opportunity, url: "/manage/opportunity-records?isReport=" + showTotalOpportunities + "&createdonly=" + (options.createdonly !== undefined ? options.createdonly : false) },];
                header = options.opportunity_created;
            }
            else if (showTotalLeadsShared) {
                views = [{ name: options.leadshared, url: "/contacts/shared/0?isReport=" + showTotalLeadsShared }];
                header = options.leadshared;
            }
            modal.show({ title: header, views: views });
        },

        showSocialDripReportBreakdown: function (options) {;
            var isTemplateMedia = !!options.istemplatemedia;
            var iscampaignmedia = options.iscampaignmedia != null && options.iscampaignmedia != undefined ? options.iscampaignmedia : false;
            var views = [{ icon: "edit", name: options.name, url: "/report/socialdrip/" + options.userid + "/" + options.state + "?socialid=" + options.socialid + "&organizationid=" + options.organizationid + "&iscampaignmedia=" + iscampaignmedia + "&istemplatemedia=" + isTemplateMedia + "&linkToId=" + options.linkToId + "&viewOption=" + options.viewOption + "&linkType=" + options.linkType + "&orgViewOption=" + options.orgViewOption + "&groupViewOption=" + options.groupViewOption + "&userGroupId=" + options.userGroupId + "&userGroupViewOption=" + options.userGroupViewOption + "&groupType=" + options.groupType + "&selectedRange=" + options.selectedRange + "&startDate=" + encodeURIComponent(options.startDate) + "&endDate=" + encodeURIComponent(options.endDate) + "&isReportUserFlag=" + options.isReportUserFlag },];
            modal.show({ title: options.heading, views: views });
        },
        showSocialDripUserUsedReport: function (options) {
            var views = [{
                icon: "edit", name: options.name, url: "/report/socialdripuserused/" + options.id + "?iscompleted=" + options.iscompleted + "&originalpublishingid=" + options.originalpublishingid + "&companyid=" + options.companyid + "&linkToId=" + options.linkToId + "&viewOption=" + options.viewOption + "&linkType=" + options.linkType + "&orgViewOption=" + options.orgViewOption + "&groupViewOption=" + options.groupViewOption + "&userGroupId=" + options.userGroupId + "&userGroupViewOption=" + options.userGroupViewOption + "&groupType=" + options.groupType + "&selectedRange=" + options.selectedRange + "&startDate=" + encodeURIComponent(options.startDate) + "&endDate=" + encodeURIComponent(options.endDate)
            }];
            modal.show({ title: options.heading, views: views });
        },
        showSocialDripReportStateBreakdown: function (options) {
            var views = [{ icon: "edit", name: options.name, url: "/report/socialdripstate/" + options.state },];
            modal.show({ title: options.name, views: views });
        },
        showSocialOneOffReportBreakdown: function (options) {
            var views = [{ icon: "edit", name: options.name, url: "/report/socialoneoff/" + options.userid + "/" + options.state + "?socialid=" + options.socialid + "&organizationid=" + options.organizationid },];
            modal.show({ title: options.heading, views: views });
        },

        showSocialOneOffReportBreakdownData: function (options) {
            var views = [{ icon: "edit", name: options.name, url: "/communicate/socialoneoffpublishreport/" + options },];
            modal.show({ title: 'Social Oneoff Messages ', views: views });
        },
        showSocialOneOffReportStateBreakdown: function (options) {
            var views = [{ icon: "edit", name: options.name, url: "/report/socialoneoffstate/" + options.state },];
            modal.show({ title: options.name, views: views });
        },
        showSendAssetModal: function (filterparam,ispartner) {
            var views = [{ icon: "file", name: 'Send Asset', url: "/sendassets/assets?filterparam=" + filterparam + "&ispartner=" + ispartner }];
            modal.show({ title: 'Print Documents', views: views });
        },
        showActivityFeed: function (id, contactid) {
            var views = [
                { icon: "", name: "", url: "/report/activityfeed" },
            ];
            modal.show({ title: "", views: views });
        },
        showSocialDripReport: function (options) {
            var views = [
                { icon: "edit", name: options.title, url: "/report/socialdripstate/" + options.state },
            ];
            modal.show({ title: options.title, views: views });
        },
        showAllSalesCollateral: function (options) {
            var views = [{ icon: "file", name: options.name, url: "/sendassets/assets?filterparam=" + encodeURIComponent(options.searchText),buttons:["save"] }];
            modal.show({ title: options.title, views: views });
        },
        showPlaybookStats: function (data)
        {
            var views = [{
                icon: "edit",
                name: 'Playbooks',
                url: `/collateral/internal-playbook?isreport=true&linktoid=${data.id}`
            }];

            if (data.selectedrange)
                views[0].url += `&selectedrange=${data.selectedrange}`; //append selectedRange if there is one.
            if (data.startdate)
                views[0].url += `&startdate=${data.startdate}`; //append startDate if there is one.
            if (data.enddate)
                views[0].url += `&enddate=${data.enddate}`; //append endDate if there is one.
            modal.show({ title: 'Playbooks - ' + data.name, views: views });
        },
        showPlaybooksForBadges: function (data) {
            var url = `/internalplaybookbadges?badgeid=${data.id}&iscoursecatalog=${data.iscoursecatalog}`;
            var views = [
                {
                    icon: "",
                    name: 'Playbooks',
                    url: url
                }
            ];
            var title = 'Playbooks';
            if (data.isbadge)
                title = 'Badge ({0}) won for completing'.replace("{0}", '<i>' + data.displayname +'</i>');
            modal.show({ title: title, views: views });
        },
        showPlaybookUsageStats: function (data)
        {
            var url = ""; 
            if (data.linkToID != null)
                url = `/report/internalplaybook/usage/${data.id}?linktoid=${data.linkToID}&linktype=${data.linkType}&viewoption=${data.viewOption}&orgviewoption=${data.orgViewOption}&groupviewoption=${data.groupViewOption}&usergroupid=${data.userGroupID}&grouptype=${data.groupType}&usergroupviewoption=${data.userGroupViewOption}`;
            else 
                url = `/report/internalplaybook/usage/${data.id}?linktype=${data.linkType}&viewoption=${data.viewOption}&orgviewoption=${data.orgViewOption}&groupviewoption=${data.groupViewOption}&usergroupid=${data.userGroupID}&grouptype=${data.groupType}&usergroupviewoption=${data.userGroupViewOption}`;
            
            if (data.selectedrange)
                url += `&selectedrange=${data.selectedrange}`; //append selectedRange if there is one.
            if (data.startdate)
                url += `&startdate=${data.startdate}`; //append startDate if there is one.
            if (data.enddate)
                url += `&enddate=${data.enddate}`; //append endDate if there is one.

            var views = [{ icon: "edit", name: 'Playbooks', url: url }];
            
            modal.show({ title: 'Playbook - ' + data.name, views: views });
        },        
        showFormUsers: function (data) {
            var strParam = '';

            if (data.linktype != undefined)
                strParam += "linktype=" + data.linktype;
            if (data.viewoption != undefined)
                strParam += "&viewoption=" + data.viewoption;
            if (data.linktoid != undefined)
                strParam += "&linktoid=" + data.linktoid;
            if (data.orgviewoption != undefined)
                strParam += "&orgviewoption=" + data.orgviewoption;
            if (data.groupviewoption != undefined)
                strParam += "&groupviewoption=" + data.groupviewoption;
            
            var views = [
                { icon: "", title: data.title, url: "/forms/" + data.id + "/users?" + strParam }
            ];
            modal.show({ title: data.title, views: views });
        },
        showSharedPermissions: function (sharetype, shareids, options) {
            if (shareids == undefined)
                shareids = null;
            var name = options.name;
            var title = options.title;
            if (name != null || name != undefined)
                title = options.title + '(<b><i>' + options.name + '</i></b>)';
            var views = [];
            views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + options.id + "/" + sharetype + "/" + shareids, buttons: ["save"] });
            if (options.showViews != undefined && options.showViews == true) {
                if (options.canSendEmail && !options.isrestricted) {
                    views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?templates=null" + "&files=" + options.id + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                    views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?templates=" + null + "&files=" + options.id + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, buttons: ["finish"] });
                }
                if (options.publish && !options.isrestricted) {
                    views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + options.id, buttons: ["publish"] });
                }
                if (options.canedit)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/images/" + options.id + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + options.issetup, buttons: ["save"] });
                if (options.rating) {                                        
                    views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + options.id + "/" + 2 + "/rating/comment", iconprefix: "fas" });
                }
                if (name != null || name != undefined) {
                    title = 'Image > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
                } else { title = 'Image > ' + views[0].name; }

            }
            modal.show({ title: title, views: views });
        },
        showSharing: function (sharetype, shareids, options) {
            if (shareids == undefined)
                shareids = null;
            var name = options.name;
            var title = options.title;
            if (name != null || name != undefined)
                title = options.title + '(<b><i>' + options.name + '</i></b>)';
            var views = [];
            views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/newversion/" + sharetype + "/" + shareids, buttons: ["save"] });
            if (options.showViews != undefined && options.showViews == true) {
                if (options.canSendEmail && !options.isrestricted) {
                    views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?templates=null" + "&files=" + options.id + "&isMultipleAssetEmail=true&customsendmodal=" + true + "&hideimportcustomize=" + true, buttons: ["finish"] });
                    views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?templates=" + null + "&files=" + options.id + "&isMultipleAssetEmail=true&ispartner=true&customsendmodal=" + true + "&isSmartlist=" + false + "&isContactcompany=" + false + "&hideimportcustomize=" + true, buttons: ["finish"] });
                }
                if (options.publish && !options.isrestricted) {
                    views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/false/" + options.id, buttons: ["publish"] });
                }
                if (options.canedit)
                    views.push({ icon: "edit", name: "Edit", url: "/gallery/images/" + options.id + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + options.issetup, buttons: ["save"] });
                if (options.rating) {
                    views.push({ icon: "star", name: 'Feedback and Rating', url: "/feedback/" + options.id + "/" + 2 + "/rating/comment", iconprefix: "fas" });
                }
                if (name != null || name != undefined) {
                    title = 'Image > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
                } else { title = 'Image > ' + views[0].name; }

            }
            modal.show({ title: title, views: views });
        },
        showCreateDatabaseRecords: function (options) {
            var views = [
                { icon: "database", name: 'Info', url: "https://partner-marketing.bitdefender.com/manage/database/record/" + options.assettypeid + "/0", buttons: ["save"]},
                { icon: "file-image", name: '{$ajax_persona_dhalia_channelpartner.ImageGallery}', url: "https://partner-marketing.bitdefender.com/gallery/images/" + options.assettypeid + "/0?iswizard=true", buttons: ["save"], iconprefix: "far" },
                { icon: "file", name: '{$ajax_persona_dhalia_channelpartner.DocumentGallery}', url: "https://partner-marketing.bitdefender.com/gallery/documents/" + options.assettypeid + "/0?iswizard=true", buttons: ["save"], iconprefix: "far" },
            ];
            modal.show({ title: 'Create Record > '+views[0].name+' (<b>' + options.assettypename + '</b>)', views: views, gridobj: options.data });
        },
        showPartnerLocatorBanner: function () {
            var views = [{ icon: "user", name: '', url: "/solutioncenter/update/banner/" + getTimeStamp() + "?type=4", buttons: ["save"] }];
            modal.show({ title: 'Update Partner Locator Banner', views: views });
        },
        showProductRequestInformation: function (options) {
            var views = [{ icon: "qrcode", name: 'Request Information', url: "/manage/product-requestinformation/" + options.assettypeid + "/" + options.assetid, buttons: ["save"] }];
            var title = views[0].name;
            if (options.assetname != undefined && options.assetname != "")
                title = title + ' > ' + options.assetname;
            modal.show({ title: title, views: views });
        },
        showProductRequestInfoSettings: function (options) {
            var views = [{ icon: "qrcode", name: 'Request Info Settings', url: "/manage/product-requestinfosettings/" + options.assettypeid, buttons: ["save"] }];
            var title = views[0].name;

            modal.show({ title: title, views: views });
        },
        showPlaybookEmail: function (options) {
            var _wizdata = {
                name: options.sendEmail,
                steps: [
                    { name: options.emailEditor, url: "/communicate/email/" + options.templateID + "/editor" },
                    { name: options.sendEmail, url: "/communicate/email/" + options.emailID + "?isstepprocess=true&ispartner=false" }
                ]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showContactCustomizeWizard: function (options) {//added by Lalita for testing
            $.extend({
                locked: false,
                closetab: false
            }, options);
            modal.closeall();
            if (options.templatetype == 16384) {
                var wizardStepInfo = { name: options.info, url: "/collateral/presentation/" + options.id + "/info", wizardclose: options.locked };
                var wizardStepQuestionnaire = { name: 'Input', url: "/collateral/presentation/" + options.id + "/questions", wizardclose: options.locked };
                var wizardStepAssetPicker = { name: options.datapicker, url: "/collateral/presentation/" + options.id + "/assetpicker", wizardclose: options.locked };
                var wizardStepReordering = { name: options.manageslides, url: "/collateral/presentation/" + options.id + "/reordering?isplaybook=true", wizardclose: options.locked };

                var wizardSteps = [];

                if (options.hasquestionnaire && options.usedatasource == "1")
                    wizardSteps = [wizardStepInfo, wizardStepQuestionnaire, wizardStepAssetPicker, wizardStepReordering];
                else if (options.hasquestionnaire)
                    wizardSteps = [wizardStepInfo, wizardStepQuestionnaire, wizardStepReordering];
                else if (options.usedatasource == "1")
                    wizardSteps = [wizardStepInfo, wizardStepAssetPicker, wizardStepReordering];
                else
                    wizardSteps = [wizardStepInfo, wizardStepReordering];

                if (typeof options.linkids != 'undefined' && options.linkids != null && options.linkids != "")
                    wizardSteps.push({ name: options.sendEmail, url: "/communicate/email/0?isstepprocess=true&ispartner=false&assetid=" + options.templateID + "&isAssetEmail=true&linkids=" + options.linkids });

                var _wizdata = { name: options.customizeppt, steps: wizardSteps };
            }
            else if (options.templatetype == 36864) {
                var info = { name: options.info, url: "/collateral/data-room/" + options.id + "/info" + "/" + getTimeStamp() }
                var questions = { name: 'Input', url: "/collateral/data-room/" + options.id + "/questions" }
                var editor = { name: getTemplateTypetext(options.templatetype) + options.editor, url: "/collateral/data-room/" + options.id + "/editor?isplaybook=true", wizardclose: true }//Customize
                var wizardSteps = [];

                if (options.hasquestionnaire == true)
                    wizardSteps = [info, questions, editor];
                else
                    wizardSteps = [info, editor];                

                if (typeof options.linkids != 'undefined' && options.linkids != null && options.linkids != "")
                    wizardSteps.push({ name: options.sendEmail, url: "/communicate/email/0?isstepprocess=true&ispartner=false&templates=" + options.emailID + "&isMultipleAssetEmail=true&linkids=" + options.linkids });

                var _wizdata = { name: options.customizedataroom, steps: wizardSteps };
            }
            else if (options.templatetype == 128) {
                if (options.haswebnav) {//website
                    var info = { name: options.info, url: "/manage/web/" + options.id + "/info" }
                    var questions = { name: 'Input', url: "/manage/web/" + options.id + "/questions" }
                    var assetpicker = { name: options.assetpicker, url: "/manage/web/" + options.id + "/assetpicker" }
                    var editor = { name: options.webeditor, url: "/manage/web/" + options.id + "/editor?isplaybook=true", wizardclose: true }//Customize

                    var wizardSteps = [];

                    if (options.hasquestionnaire == true && options.usedatasource == 1 && !options.allpagestemplateonlydb)
                        wizardSteps = [info, questions, assetpicker, editor];
                    else if (options.hasquestionnaire == true && options.usedatasource == 0)
                        wizardSteps = [info, questions, editor];
                    else if (options.hasquestionnaire == false && options.usedatasource == 1 && !options.allpagestemplateonlydb)
                        wizardSteps = [info, assetpicker, editor];
                    else if (options.hasquestionnaire == false && options.usedatasource == 0)
                        wizardSteps = [info, editor];
                    else
                        wizardSteps = [info, editor];

                    if (typeof options.linkids != 'undefined' && options.linkids != null && options.linkids != "")
                        wizardSteps.push({ name: options.sendEmail, url: "/communicate/email/0?isstepprocess=true&ispartner=false&templates=" + options.emailID + "&isMultipleAssetEmail=true&linkids=" + options.linkids });

                    var _wizdata = { name: options.customizewebsite, steps: wizardSteps };
                }
                else {//landing page
                    var info = { name: options.info, url: "/manage/landingpage/" + options.id + "/info" }
                    var questions = { name: 'Input', url: "/manage/landingpage/" + options.id + "/questions" }
                    var assetpicker = { name: options.assetpicker, url: "/manage/landingpage/" + options.id + "/assetpicker" }
                    var editor = { name: options.webeditor, url: "/manage/landingpage/" + options.id + "/editor?isplaybook=true", wizardclose: true }

                    var wizardSteps = [];

                    if (options.hasquestionnaire == true && options.usedatasource == 1 && !options.allpagestemplateonlydb)
                        wizardSteps = [info, questions, assetpicker, editor];
                    else if (options.hasquestionnaire == true && options.usedatasource == 0)
                        wizardSteps = [info, questions, editor];
                    else if (options.hasquestionnaire == false && options.usedatasource == 1 && !options.allpagestemplateonlydb)
                        wizardSteps = [info, assetpicker, editor];
                    else if (options.hasquestionnaire == false && options.usedatasource == 0)
                        wizardSteps = [info, editor];
                    else
                        wizardSteps = [info, editor];

                    if (typeof options.linkids != 'undefined' && options.linkids != null && options.linkids != "")
                        wizardSteps.push({ name: options.sendEmail, url: "/communicate/email/0?isstepprocess=true&ispartner=false&templates=" + options.emailID + "&isMultipleAssetEmail=true&linkids=" + options.linkids });

                    var _wizdata = { name: options.customizewebsite, steps: wizardSteps };
                }
                options['locked'] = false;
            }
            else if (options.templatetype == 256) {
                $.extend({
                    cansend: false,
                    canpublish: false,
                    canedit: false,
                    customize: false,
                    linkids: null,
                    isSmartlist: null,
                    reports: false,
                    canPartnerSend: false,
                    closetab: false
                }, options);
                var views = [];
                views.push({ icon: "search", name: 'View', url: "/collateral/ebook/" + options.id + "/view" });
                if (options.canpublish)
                    views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/true/" + options.id });
                if (options.cansend) {
                    if (options.linkids != null) {
                        views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + options.id + "&isAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist });
                        if (options.canPartnerSend)
                            views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?assetid=" + options.id + "&isAssetEmail=true&linkids=" + options.linkids + "&isSmartlist=" + options.isSmartlist + "&ispartner=" + true });
                    }
                    else {
                        views.push({ icon: "envelope", name: 'Send Email', url: "/communicate/email/0?assetid=" + options.id + "&isAssetEmail=true" });
                        if (options.canPartnerSend)
                            views.push({ icon: "user-check", name: 'Send To Users', url: "/communicate/email/0?assetid=" + options.id + "&isAssetEmail=true&ispartner=" + true });
                    }
                }
                if (options.reports) {
                    views.push({ icon: "chart-bar", name: 'Report', url: "/collateral/ebook/" + options.id + "/report", iconprefix: "far" });
                    views.push({ icon: "file", name: 'Pages', url: "/collateral/ebook/" + options.id + "/interestbypage" });
                    views.push({ icon: "users", name: 'Contacts', url: "/collateral/ebook/" + options.id + "/interestbycontact" });
                }
                var title = 'eBooks' + ' > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
                modal.show({ title: title, views: views, locked: true, preventClose: true, closeTab: options.closetab });
            }
            else if (options.templatetype == 32) {
                var _wizdata = {
                    name: options.sendEmail,
                    steps: [
                        { name: options.emailEditor, url: "/communicate/email/" + options.templateID + "/editor" },
                        { name: options.sendEmail, url: "/communicate/email/" + options.emailID + "?isstepprocess=true&ispartner=false&linkids=" + options.linkids }
                    ]
                };
            }
            else {

                var info = { name: options.info, url: "/collateral/pdf/" + options.id + "/info" + "/" + getTimeStamp(), wizardclose: options.locked }
                var questions = { name: 'Input', url: "/collateral/pdf/" + options.id + "/questions", wizardclose: options.locked }
                var assetpicker = { name: options.datapicker, url: "/collateral/pdf/" + options.id + "/assetpicker", wizardclose: options.locked }
                var editor = { name: getTemplateTypetext(options.templatetype) + options.editor, url: "/collateral/pdf/" + options.id + "/editor?isplaybook=true", wizardclose: true }//Customize           
                var wizardSteps = [];

                if (options.hasquestionnaire == true && options.usedatasource == 1 && !options.allpagestemplateonlydb)
                    wizardSteps = [info, questions, assetpicker, editor];
                else if (options.hasquestionnaire == true && options.usedatasource == 0)
                    wizardSteps = [info, questions, editor];
                else if (options.hasquestionnaire == false && options.usedatasource == 1 && !options.allpagestemplateonlydb)
                    wizardSteps = [info, assetpicker, editor];
                else if (options.hasquestionnaire == false && options.usedatasource == 0)
                    wizardSteps = [info, editor];
                else
                    wizardSteps = [info, editor];

                if (typeof options.linkids != 'undefined' && options.linkids != null && options.linkids != "")
                    wizardSteps.push({ name: options.sendEmail, url: "/communicate/email/0?isstepprocess=true&ispartner=false&templates=" + options.emailID + "&isMultipleAssetEmail=true&linkids=" + options.linkids });

                var _wizdata = { name: options.customizeprint, steps: wizardSteps };
            }
            if (options.templatetype != 256) {
                _wizdata["preventClose"] = options.locked;
                _wizdata["closeTab"] = options.closetab;
                var _wizard = new wizard(_wizdata);
                _wizard.show();
            }
        },
        showSyndicationCode: function (options) {
            var views = [{ icon: "info", name: options.name, url: "https://partner-marketing.bitdefender.com/manage/campaigns/webbanner/syndicationcode/" + options.ampurl + "/" + options.tid }];
            modal.show({ title: options.title, views: views });
        },
        showPermissionForAnnouncements: function (id, options) {
            var info = { icon: "info-circle", name: 'Info', url: "/setup/announcement/create/" + id, buttons: ["save"] };
            var sharing = { icon: "share-alt", name: 'Sharing', url: "/setup/announcements/permissions?annid=" + id, buttons: ["save"] };
            editviews = [info, sharing];
            var $content = $("<div>");
            var $span = ' (<b><i>' + options.title.english + '</i></b>)';
            if (options.version > 0)
                $span = ' (<b><i>' + options.title + '</i></b>)';
            $content.append($span);
            var title = 'Announcement > ' + editviews[0].name + $content.html();
            modal.show({ title: title, views: editviews, locked: true, preventClose: true });
        },
        showFundRequestsForAdmin: function (options) {
            var strParam = '';
            if (options.linktype != undefined)
                strParam += "&linktype=" + options.linktype;
            if (options.linktoid != undefined)
                strParam += "&linktoid=" + options.linktoid;
            if (options.viewoption != undefined)
                strParam += "&viewoption=" + options.viewoption;
            if (options.orgviewoption != undefined)
                strParam += "&orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != undefined)
                strParam += "&groupviewoption=" + options.groupviewoption;            
            var views = [{ icon: "money-bill-alt", name: "", url: "/widgets/mdf/request?format="+options.format + "&indexdiff="+options.indexdiff + strParam }];
            modal.show({ title: options.title, views: views });
        },
        showMediaCreated: function (options) {
            var strParam = '';
            if (options.linktype != undefined)
                strParam += "&linktype=" + options.linktype;
            if (options.linktoid != undefined)
                strParam += "&linktoid=" + options.linktoid;
            var views = [{ icon: "file", name: "", url: "/widgets/mediacreated?format=" + options.format + "&index=" + options.indexdiff + strParam }];
            modal.show({ title: options.title, views: views });
        },
        showOpportunityTypeForLeaderBoard: function (jo) {
            var urlparam = "";
            if (jo.index != undefined)                
                urlparam += urlparam != "" ? "&index=" + jo.index : "?index=" + jo.index;            
            if (jo.format != undefined)
                urlparam += urlparam != "" ? "&format=" + jo.format : "?format=" + jo.format;            
            if (jo.indexdiff != undefined)
                urlparam += urlparam != "" ? "&indexdiff=" + jo.indexdiff : "?indexdiff=" + jo.indexdiff;
            
            if (jo.stage != undefined)
                urlparam += urlparam != "" ? "&stage=" + jo.stage : "?stage=" + jo.stage;            
            if (jo.linktype != undefined)
                urlparam += urlparam != "" ? "&linktype=" + jo.linktype : "?linktype=" + jo.linktype;
            if (jo.linktoid != undefined)
                urlparam += urlparam != "" ? "&linktoid=" + jo.linktoid : "?linktoid=" + jo.linktoid;
            if (jo.showclosedratio != undefined)
                urlparam += urlparam != "" ? "&showclosedratio=" + jo.showclosedratio : "?showclosedratio=" + jo.showclosedratio;
            var views = [
                { icon: "user", name: jo.contact, url: "/widgets/opportunitytypes" + urlparam }
            ];

            modal.show({ title: jo.opportunity, views: views });
        },

        showPhoneActivitity: function (id, options) {
            var urlparam = "";
            if (options.format != undefined)
                urlparam += urlparam != "" ? "&format=" + options.format : "?format=" + options.format;
            if (options.indexdiff != undefined)
                urlparam += urlparam != "" ? "&indexdiff=" + options.indexdiff : "?indexdiff=" + options.indexdiff;
            if (options.isTwilioConnected)
                urlparam += urlparam != "" ? "&userid=" + id : "?userid=" + id;
            var views = [
                { icon: "phone", name: 'Phone Activity', url: "/connections/contacts/usercontacts" + urlparam }
            ];
            modal.show({ title: options.header, views: views });
        },

        showContacts: function (options) {
            var urlparam = "";
            if (options.linktoid != undefined)
                urlparam  += urlparam  != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.viewoption != undefined)
                urlparam  += urlparam  != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.linktype != undefined)
                urlparam  += urlparam  != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.orgviewoption != undefined)
                urlparam  += urlparam  != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != undefined)
                urlparam  += urlparam  != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.isleadsgrid != undefined)
                urlparam  += urlparam  != "" ? "&isleadsgrid=" + options.isleadsgrid : "?isleadsgrid=" + options.isleadsgrid;
            if (options.format != undefined)
                urlparam  += urlparam  != "" ? "&format=" + encodeURIComponent(options.format) : "?format=" + encodeURIComponent(options.foldername);
            var views = [
                { icon: "phone", name: 'Phone Activity', url: "/connections/contacts/summary" + urlparam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showContactsForROI: function (options) {
            var urlparam = "";
            if (options.linktoid != undefined)
                urlparam += urlparam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.viewoption != undefined)
                urlparam += urlparam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.linktype != undefined)
                urlparam += urlparam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.orgviewoption != undefined)
                urlparam += urlparam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != undefined)
                urlparam += urlparam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.ismdf != undefined)
                urlparam += urlparam != "" ? "&ismdf=" + options.ismdf : "?ismdf=" + options.ismdf;
            if (options.ismarketinginfluenced != undefined)
                urlparam += urlparam != "" ? "&ismarketinginfluenced=" + options.ismarketinginfluenced : "?ismarketinginfluenced=" + options.ismarketinginfluenced;
            if (options.isnotinfluenced != undefined)
                urlparam += urlparam != "" ? "&isnotinfluenced=" + options.isnotinfluenced : "?isnotinfluenced=" + options.isnotinfluenced;
            if (options.format != undefined)
                urlparam += urlparam != "" ? "&format=" + encodeURIComponent(options.format) : "?format=" + encodeURIComponent(options.foldername);
            var views = [
                { icon: "phone", name: 'Phone Activity', url: "/connections/contacts" + urlparam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showPhoneActivitityForLeaderBoard: function (options) {
            var urlparam = "";
            if (options.format != undefined)
                urlparam += urlparam != "" ? "&format=" + options.format : "?format=" + options.format;
            if (options.indexdiff != undefined)
                urlparam += urlparam != "" ? "&indexdiff=" + options.indexdiff : "?indexdiff=" + options.indexdiff;
            if (options.userid != undefined)
                urlparam += urlparam != "" ? "&userid=" + options.userid : "?userid=" + options.userid;
            if (options.conid)
                urlparam += urlparam != "" ? "&conid=" + options.conid : "?conid=" + options.conid;
            var views = [
                { icon: "phone", name: 'Phone Activity', url: "/connections/contacts/phoneactivity" + urlparam }
            ];
            modal.show({ title: options.header, views: views });
        },
        showOpportunityRecordForLeaderBoard: function (jo) {
            var urlparam = "";
            if (jo.index != undefined)
                urlparam += urlparam != "" ? "&index=" + jo.index : "?index=" + jo.index;
            if (jo.format != undefined)
                urlparam += urlparam != "" ? "&format=" + jo.format : "?format=" + jo.format;
            if (jo.indexdiff != undefined)
                urlparam += urlparam != "" ? "&indexdiff=" + jo.indexdiff : "?indexdiff=" + jo.indexdiff;
            if (jo.stage != undefined)
                urlparam += urlparam != "" ? "&stage=" + jo.stage : "?stage=" + jo.stage;
            if (jo.linktype != undefined)
                urlparam += urlparam != "" ? "&linktype=" + jo.linktype : "?linktype=" + jo.linktype;
            if (jo.linktoid != undefined)
                urlparam += urlparam != "" ? "&linktoid=" + jo.linktoid : "?linktoid=" + jo.linktoid;
            if (jo.projecttypeid != undefined)
                urlparam += urlparam != "" ? "&projecttypeid=" + jo.projecttypeid : "?projecttypeid=" + jo.projecttypeid;
            var views = [
                { icon: "user", name: jo.contact, url: "/widgets/opportunityrecords" + urlparam }
            ];

            modal.show({ title: jo.opportunity, views: views });
        },
        showUsersForContacts: function (options) {
            var strParam = "";
            if (options.linktoid != undefined && options.linktoid != null)
                strParam += "&linktoid=" + options.linktoid;
            if (options.viewoption != undefined)
                strParam += "&viewoption=" + options.viewoption;
            if (options.linktype != undefined)
                strParam += "&linktype=" + options.linktype;
            if (options.orgviewoption != undefined)
                strParam += "&orgviewoption=" + options.orgviewoption;
            if (options.orggroupviewoption != undefined)
                strParam += "&groupviewoption=" + options.orggroupviewoption;
            var views = [{ icon: "users", name: options.name, url: "/widgets/userlist?" + strParam }];
            modal.show({ title: 'User-wise Contacts', views: views });
        },

        showPhoneActivitity: function (id, options) {
            var urlparam = "";
            if (options.format != undefined)
                urlparam += urlparam != "" ? "&format=" + options.format : "?format=" + options.format;
            if (options.indexdiff != undefined)
                urlparam += urlparam != "" ? "&indexdiff=" + options.indexdiff : "?indexdiff=" + options.indexdiff;
            if (options.isTwilioConnected)
                urlparam += urlparam != "" ? "&userid=" + id : "?userid=" + id;
            var views = [
                { icon: "phone", name: 'Phone Activity', url: "/connections/contacts/usercontacts" + urlparam }
            ];
            modal.show({ title: options.header, views: views });
        },
        showCertificationForUsers: function (options) {
            var strParam = "status=" + options.status;
            if (options.linktoid != undefined && options.linktoid != null)
                strParam += "&linktoid=" + options.linktoid;
            if (options.viewoption != undefined)
                strParam += "&viewoption=" + options.viewoption;
            if (options.linktype != undefined)
                strParam += "&linktype=" + options.linktype;
            if (options.orgviewoption != undefined)
                strParam += "&orgviewoption=" + options.orgviewoption;
            if (options.orggroupviewoption != undefined)
                strParam += "&groupviewoption=" + options.orggroupviewoption;
            var views = [{ icon: "users", name: options.name, url: "/widgets/certification/userlist?" + strParam }];
            modal.show({ title: 'Certification', views: views });
        },
        showPhoneActivitityForLeaderBoard: function (options) {
            var urlparam = "";
            if (options.format != undefined)
                urlparam += urlparam != "" ? "&format=" + options.format : "?format=" + options.format;
            if (options.indexdiff != undefined)
                urlparam += urlparam != "" ? "&indexdiff=" + options.indexdiff : "?indexdiff=" + options.indexdiff;
            if (options.userid != undefined)
                urlparam += urlparam != "" ? "&userid=" + options.userid : "?userid=" + options.userid;
            if (options.conid)
                urlparam += urlparam != "" ? "&conid=" + options.conid : "?conid=" + options.conid;
            var views = [
                { icon: "phone", name: 'Phone Activity', url: "/widget/custom/callrecorduseractivity" + urlparam }
            ];
            modal.show({ title: options.header, views: views });
        },
        showSearchUserModal: function () {
            var views = [{ icon: "user", name: 'Search User', url: "https://partner-marketing.bitdefender.com/sa/user/search/" +  getTimeStamp() }];
            modal.show({ title: 'Search User', views: views });
        },
        showLinearPlaybookUsers: function (options) {
            var urlParam = "";
            if (options != undefined) {
                if (options.orgid != undefined)
                    urlParam += urlParam != "" ? "&organizationid=" + options.orgid : "?organizationid=" + options.orgid;                
            }
            var views = [{ icon: "file", url: "/linearplaybookusers/" + options.templateID + "/" + options.param + "/" + options.stageID + urlParam }];
            modal.show({ title: options.title, views: views });
        },
        showEmailSummaryReport: function (options) {
            var views = [{ icon: "users", name: options.name, url: "/communicate/email/report/summary"}];
            modal.show({ title: options.title, views: views });
        },
        showWebsiteTraffic: function (options) {
            var views = [{ icon: "users", name: options.name, url: "/manage/externaltracking/sites?days="+options.days }];
            modal.show({ title: options.title, views: views });
        },
        showFormContacts: function (options) {
            var views = [{ icon: "users", name: options.name, url: "/forms/contacts?days=" + options.days }];
            modal.show({ title: 'Form Sign-ups', views: views });
        },
        showAssetUsage: function (options) {
            var views = [{ icon: "users", name: options.name, url: "/assets/usage?iscustomized=" + options.iscustomized + "&issent=" + options.issent + "&isdownload=" + options.isdownload }];
            modal.show({ title: 'Assets', views: views });
        },
        showContactOpportunity: function (id) {
            var views = [{ icon: "file", url: "/opportunity/contact/" + id }];
            modal.show({ title: 'Opportunities', views: views });
        },
        showOpportunityReport: function (projectTypeID, ID, modalTitle) {
            var views = [
                { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + projectTypeID + "/" + ID, iconprefix: "far" }
            ];
            modal.show({ title: modalTitle, views: views });
        },
        showPlaybookAssetPreview: function (options, callback) {
            var previewUrl = "/internaladminplaybook/preview/" + options.templateId + "/" + options.assetId;
            var contactID = options.contactId;
            var mediaID = options.mediaId;
            var fileType = options.fileType;
            var hideTemplteEmailOption = false;
            if (typeof options.hidetemplteemailoption != 'undefined')//#40976 - asset preview issue when Non contact playbook is added to Linear playbook
                hideTemplteEmailOption = options.hidetemplteemailoption;
            if (options.isContactCentric && contactID != null)
                previewUrl = previewUrl + "/" + contactID;

            previewUrl = previewUrl + "?type=" + options.type;
            if (typeof options.iseditor != 'undefined')
                previewUrl = previewUrl + "&iseditor=" + options.iseditor;
            if (typeof options.subtype != 'undefined')
                previewUrl = previewUrl + "&subtype=" + options.subtype;
            if (typeof options.ismediaAsset != 'undefined')
                previewUrl = previewUrl + "&ismediaAsset=" + options.ismediaAsset;
            if (typeof options.linearplaybookid != 'undefined')//#40976 - asset preview issue when Non contact playbook is added to Linear playbook
                previewUrl = previewUrl + "&linearplaybookid=" + options.linearplaybookid;

            if (typeof mediaID != 'undefined')
                previewUrl = previewUrl + "&mediaid=" + mediaID;
            if (options.fileurl != '')
                previewUrl = previewUrl + "&fileurl=" + options.fileurl;
            var views = [{ icon: "search", name: 'Info', url: previewUrl }];
            if (typeof fileType != 'undefined') {
                previewUrl = previewUrl + "&filetype=" + fileType + "&isstepwise=" + options.isStepWise + "&issalesmktonboard=" + options.isSalesMktOnboard;
                var views = [{ icon: "search", name: 'Info', url: previewUrl, buttons: ["send", "downloadhtml"] }];
                if (typeof (options.cansendemail) != 'undefined'  && !options.cansendemail)
                    views = [{ icon: "search", name: 'Info', url: previewUrl, buttons: ["downloadhtml"] }];
                if (hideTemplteEmailOption && fileType == 32)
                    views = [{ icon: "search", name: 'Info', url: previewUrl, buttons: ["downloadhtml"] }];
            }
            if (options.templateType == 16) {
                if (options.canPrintSend)
                    views.push({ icon: "envelope", name: 'Send Email', url: `/communicate/email/0?assetid=${options.fileId}&isAssetEmail=true&customsendmodal=true&hideimportcustomize=true&isplaybookasset=true`, buttons: ["finish"]});
                if (options.hasPartnerAccess)
                    views.push({ icon: "user-check", name: 'Send To Users', url: `/communicate/email/0?assetid=${options.fileId}&isAssetEmail=true&ispartner=true&customsendmodal=true&hideimportcustomize=true&isplaybookasset=true`, buttons: ["finish"]});
                if (options.canPrintPublish)
                    views.push({ icon: "globe", name: 'Social Share', url: "/setup/publish/media/true/" + options.fileId });
                if (options.hasEBookAccess)
                    views.push({ icon: "map", name: 'Ebook', url: "/collateral/ebook/" + options.fileId + "/directview" });
            }
            var title = 'Playbook Asset Preview';
            if (typeof options.templatetype != "undefined" && options.templatetype == parseInt("536870912"))
                title = 'Learning Management Asset Preview';
            if (typeof options.title != "undefined")
                title = options.title;
            modal.show({ title: title, views: views, callback: callback });
        },
        showCalendar: function () {
            var views = [{ icon: "edit", name: 'Calendar', url: "/calendar" },];
            modal.show({ title: 'Calendar', views: views });
        },
        showGoogleCalendarsList: function (callback) {
            var views = [{ icon: "edit", name: 'Calendars list', url: "/googlecalendarslist", buttons: ["save"] },];
            modal.show({ title: 'Calendars list', views: views, callback: callback, locked: true, preventClose: true, closeButton: false });
        },
        showCalendarEvent: function (event) {
            var id = event.id;
            var title = event.title;
            var views = [{ icon: "edit", name: 'Info', url: "/calendar/view/" + id },
                { icon: "cubes", name: 'Opportunities', url: "/connections/contacts/project/calendarevent/" + id },
                { icon: "sitemap", name: 'Add to Drip', url: "/connections/contacts/programs/calendarevent/" + id },
                { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/" + id },
                { icon: "inbox", name: 'Send Email', url: "/communicate/newemail/0?calendarevent=true&eventid=" + id },
            ];
            var title = 'Calendar Event' + ' > ' + views[0].name + '';
            modal.show({ title: title, views: views });
        },
        showCalendarEventConfigureDataroom: function (id, callback) {
            var views = [{ icon: "file", name: 'Configure Dataroom', url: "/calendar/dataroom/" + id, buttons: ["save"], }];
            modal.show({ title: 'Assets', views: views, callback: callback });
        },
        showDataroomEditor: function (id, callback) {
            var views = [{ icon: "edit", name: 'Customize', url: "/collateral/data-room/" + id + "/editor", buttons: ["save"], buttonaction: true }];
            modal.show({ title: 'Dataroom', views: views, callback: callback, locked: true, preventClose: true, closeButton: true });
        },
        showDataroomView: function (id) {
            var views = [{ icon: "search", name: 'View', url: "/collateral/data-room/" + id + "/view?rand=1", buttonaction: true }];
            modal.show({ title: 'Dataroom', views: views});
        },
        showAssetsForContact: function (id) {
            var views = [{ icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + id + "&isSmartlist=null&source=opportunity&view=1" }];
            modal.show({ title: 'Assets', views: views });
        },    
        showDripReport: function (options) {
            var views = [{ icon: "chart-bar", url: "/widgets/drip/campaign/report", iconprefix: "far" }];
            modal.show({ title: options.title, views: views });            
        },
        showFormReport: function (option) {
            var views = [{ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/website/" + option.id + "/" + option.contactid + "/interestbycontact/visits?currentuser=" + option.currentuser, iconprefix: "far" }];
            modal.show({ title: 'Visits', views: views });
        },
        showEngagementData: function (options) {
            var strParam = "";
            if (options.persona != undefined && options.persona != null)
                strParam += "&persona=" + options.persona;
            if (options.personaOption != undefined && options.personaOption != null)
                strParam += "&personaOption=" + options.personaOption;
            var views = [{ icon: "chart-bar", url: "/widgets/engagement/data?widgetname=" + options.widgetname + "&widgettitle=" + options.title + "&design=" + options.design + "&editmode=" + options.editmode + "&requestid=" + options.id + strParam, buttons: ["save"], iconprefix: "far" }];
            modal.show({ title: 'Stats ring settings', views: views});
        },
        showPlaybooks: function (callback, options) {
            var strParam = "persona=" + options.persona;
            if (options.personaoption != undefined && options.personaoption != null)
                strParam += "&personaoption=" + options.personaoption;
            if (options.ids != undefined && options.ids != null)
                strParam += "&ids=" + options.ids;
            if (options.widgetname != undefined && options.widgetname != null)
                strParam += strParam != "" ? "&widgetname=" + options.widgetname : "?widgetname=" + options.widgetname;
            if (options.personatype != undefined && options.personatype != null)
                strParam += "&personatype=" + options.personatype;
            if (options.isPlaybookWidget != undefined && options.isPlaybookWidget != null)
                strParam += "&isPlaybookWidget=" + options.isPlaybookWidget;
            if (options.isVideo != undefined && options.isVideo != null)
                strParam += "&isvideo=" + options.isVideo;
            var views = [{ icon: "chart-bar", url: "/widgets/template/reorder?" + strParam, buttons: ["save"], iconprefix: "far"}];
            modal.show({ title: options.title, views: views, callback: callback });
        },
        showTemplates: function (options) {
            var strParam = "persona=" + options.persona;
            if (options.personaoption != undefined && options.personaoption != null)
                strParam += "&personaoption=" + options.personaoption;
            if (options.type != undefined && options.type != null)
                strParam += "&type=" + options.type;
            if (options.widgetname != undefined && options.widgetname != null)
                strParam += strParam != "" ? "&widgetname=" + options.widgetname : "?widgetname=" + options.widgetname;
            if (options.showbannernote != undefined && options.showbannernote != null)
                strParam += strParam != "" ? "&showbannernote=" + options.showbannernote : "?showbannernote=" + options.showbannernote;
            if (options.platform != undefined && options.platform != null)
                strParam += "&platform=" + options.platform;
            if (options.requestid != undefined && options.requestid != null)
                strParam += strParam != "" ? "&requestid=" + options.requestid : "?requestid=" + options.requestid;
            if (options.editmode != undefined && options.editmode != null)
                strParam += strParam != "" ? "&editmode=" + options.editmode : "?editmode=" + options.editmode;
            
            var views = [{ icon: "chart-bar", url: "/widgets/template/grid?" + strParam, buttons: ["save"], iconprefix: "far"}];
            modal.show({ title: options.title, views: views });
        },
        showDataRoomGallery: function (callback) {
            var views = [{ icon: "image", name: 'Media', url: "/gallery/media/false/false?configdataroom=true", buttons: ["done"], iconprefix: "far" }];
            modal.show({ title: 'Data Room', views: views, callback: callback, locked: true, preventClose: true, closeButton: true });
        },
        showOpportunityModel: function (projectTypeID, projectTypeName) {
            var views = [
                { icon: "cubes", name: 'Info', url: "/manage/project/record/" + projectTypeID + "/0" + "/" + getTimeStamp(),buttons:["save"] },
            ];
            modal.show({ title: 'Create Record (<b>' + projectTypeName + '</b>)', views: views });
        },
        showOpportunityCreateWizard: function (projectTypeID, projectID, leadid, type, closeCallback) {
            var url = "/manage/opportunity-create/" + projectTypeID + "/" + projectID;
            if (leadid != "" && leadid != undefined)
            {
                url = url + "?leadid=" + leadid;
                if (type != "" && type != undefined) {
                    url = url + "&type=" + type;
                }
            }
            else if (type != "" && type != undefined) {
                url = url + "?type=" + type;
            }

            var _wizData = {
                name: 'Create Opportunity',
                steps: [
                    { name: 'Develop & Register Opportunity', url: url},
                    { name: 'Associate Account/Contacts', url: "/manage/opportunity-steps/" + projectTypeID + "/" + projectID + "?iscreate=true" },
                ],
                cancelaction: true,
                cancelactionfunction: closeCallback,
            };
            var _wizard = new wizard(_wizData);
            _wizard.show();
        },
        showOpportunityOwner: function (options, callback) {
            var views = [{ icon: "cog", name: 'View', url: "/manage/project-ownership/" + options.projecttypeid + "/" + options.projectid + "?isEdit=true&isOpportunity=true",buttons:["save"]}];
            modal.show({ title: 'Owner', views: views, callback: callback, locked: true, preventClose: true, closeButton: true });
        },
        showOpportunityEmail: function (options, callback) {
            var views = [{ icon: "envelope", name: 'Send Email', url: "/communicate/newemail/0?isopportunity=true&projecttypeid=" + options.projecttypeid + "&projectid=" + options.projectid, buttons: ["finish"] }];           
            modal.show({ title: 'Send Email', views: views, callback: callback, locked: true, preventClose: true, closeButton: true });
        },
        showSolutionCreateWizard: function (options) {
            var steps = [];
            var info = { name: 'Info', url: "/setup/solution/records/" + options.solutiontypeid + "/" + options.solutionid + "/info?orgid=" + options.orgid };
            var banners = { name: 'Select Banner', url: "/setup/solution/records/" + options.solutiontypeid + "/" + options.solutionid + "/images?singleselect=" + true + "&saveondblclick=true&isplaybook=" + false + "&showWebBanner=" + true + "&isembed=" + true + "&showbannertemplate=" + true + "&issetup=" + false + "&isbadge=" + true };
            var details = { name: 'Details', url: "/setup/solution/records/" + options.solutiontypeid + "/" + options.solutionid + "/details" };
            var assets = { name: 'Related Assets', url: "/setup/solution/records/" + options.solutiontypeid + "/" + options.solutionid + "/assets" };
            var products = { name: 'Related Products', url: "/setup/solution/records/" + options.solutiontypeid + "/" + options.solutionid + "/products" };
            steps.push(info); steps.push(banners);
            steps.push(details); steps.push(assets);

            if (options.isatypeexist && options.hasProductAccess) {
                steps.push(products);
            }
            var _wizData = {
                name: 'Create Solution',
                steps: steps
            };
            var _wizard = new wizard(_wizData);
            _wizard.show();
        },
        showSolutionRecord: function (options) {
            var buttons = ["save"];
            var info = { icon: "info-circle", name: 'Info', url: "/setup/solution/records/" + options.solutiontypeid + "/" + options.solutionid + "/info", buttons: buttons };
            var details = { icon: "chart-bar", name: 'Details', url: "setup/solution/records/" + options.solutiontypeid + "/" + options.solutionid + "/details", buttons: buttons, iconprefix: "far" };
            var solution = { icon: "file", name: 'Related Solution', url: "setup/solution/records/" + options.solutiontypeid + "/" + options.solutionid + "/addremove", iconprefix: "far" };
            var assets = { icon: "file", name: 'Related Assets', url: "/setup/solution/records/" + options.solutiontypeid + "/" + options.solutionid + "/assets" };
            var database = { icon: "database", name: 'Related Products', url: "/setup/solution/records/" + options.solutiontypeid + "/" + options.solutionid + "/products" }
            var image = { icon: "image", name: 'Select Banner', url: "/setup/solution/records/" + options.solutiontypeid + "/" + options.solutionid + "/images?singleselect=" + true + "&saveondblclick=true&isplaybook=" + false + "&showWebBanner=" + true + "&isembed=" + true + "&showbannertemplate=" + true + "&issetup=" + false + "&isbadge=" + true, buttons: buttons }
            //var feedbackrating = { icon: "star", name: 'Rating', url: "/feedback/" + options.solutiontypeid + "/3/rating?solutionid=" + options.solutionid} // 3 is for solution rating type
            var feedbackratingandcommentv5 = { icon: "star", name: 'Feedback and Rating', url: "/feedback/" + options.solutiontypeid + "/3/rating/comment?solutionid=" + options.solutionid, iconprefix: "fas" } // 3 is for solution rating type
            //var feedbackcomment = { icon: "comments", name: 'Comments', url: "/feedback/" + options.solutiontypeid + "/3/comment?solutionid=" + options.solutionid, iconprefix: "far" } // 3 is for comment feedback type
            var permission = { icon: "share-alt", name: 'Sharing', url: "/setup/solution/records/sharing/" + options.sharetype + "/" + options.solutiontypeid + "/" + options.id + "/" + options.id, buttons: buttons };
            var links = { icon: "fa-solid fa-link", name: 'Related Links', url: "/setup/solution/records/" + options.solutiontypeid + "/" + options.solutionid + "/links",};
            var manageSuppliers = { icon: "lightbulb-on", name: 'Associate Suppliers', url: `/setup/solution/records/${options.solutiontypeid}/${options.solutionid}/managesuppliers` };

            var views = [details];
            if (options.editPermission && options.solutionTypeEdit)
                views = [details, info, image, assets, solution];
            if (options.hasProductAccess && options.editPermission && options.solutionTypeEdit && options.isSiteOrSuperadmin)
                views.push(database)
            if (options.editPermission && options.solutionTypeEdit)
                views.push(links)
            if (options.sharePermission) {
                views.push(permission)
            }
            
            if (options.editPermission && options.hasOrganizationAccess && options.solutionTypeEdit) {
                views.push(manageSuppliers);
            }
            if (options.allowrating && options.editPermission && options.solutionTypeEdit) {
                //views.push(feedbackrating);
                views.push(feedbackratingandcommentv5);
                //views.push(feedbackcomment);
            }
            var title = 'Solution' + ' ' + views[0].name + '' + ' > ' + options.solutiontypename + ' (<b>' + options.name + '</b>)';
            modal.show({ title: title, views: views });
        },
        showSolution: function (options) {
            var buttons = ["save"];
            var info = { icon: "project-diagram", name: 'Info', url: "/setup/solution/records/" + options.solutiontypeid + "/" + options.id + "/info", buttons: buttons };
            var details = { icon: "chart-bar", name: 'Details', url: "setup/solution/records/" + options.solutiontypeid + "/" + options.id + "/details", buttons: buttons , iconprefix: "far" };
            var preview = { icon: "chart-bar", name: 'Preview', url: "setup/solution/records/" + options.solutiontypeid + "/" + options.id + "/preview", iconprefix: "far" }
            var views = [info, details];
            var title = 'Solution' + ' ' + views[0].name + '' + ' > ' + options.solutiontypename + ' (<b>' + options.name + '</b>)';
            if (options.ispreview != undefined && options.ispreview == true) {
                views = [preview];
                title = 'Solution' + ' ' + views[0].name + '' + ' > ' + options.name;
            }
            modal.show({ title: title, views: views });
        },
        showsolutions: function (options) {
            var views = [{ icon: "", name: '', url: "/setup/solution/records?isrelatedsolution=" + options.isrelatedsolution + "&solutionid=" + options.id + "&solutiontype=" + options.solutiontypeid }];
            modal.show({ title: 'Related Solutions', views: views})
        },
        showSolutionSharing: function (idstoshare, options, callback) {
            var views = [{ icon: "share-alt", name: 'Sharing', url: "/setup/solution/records/sharing/" + options.sharetype + "/" + options.solutiontypeid + "/" + options.id + "/" + idstoshare, buttons: ["save"] }];

            var title = 'Solution' + ' ' + views[0].name;
            modal.show({ title: title, views: views, callback: callback });
        },
        showSolutionCenterBanner: function (options) {
            if (options != undefined && options.marketplacecentertype != null){
                var views = [{ icon: "user", name: '', url: "/solutioncenter/update/banner/" + getTimeStamp() + "?marketplacecentertype=" + options.marketplacecentertype, buttons: ["save"] }];
            }
            else{
              var views = [{ icon: "user", name: '', url: "/solutioncenter/update/banner/" + getTimeStamp(), buttons: ["save"] }];
            }
            modal.show({ title: 'Update Solution Center Banner', views: views });
        },
        showEventCalendarBanner: function () {
            var views = [{ icon: "user", name: '', url: "/event-calendar/banner/" + getTimeStamp(), buttons: ["save"] }];
            modal.show({ title: 'Event Calendar Page Banner', views: views });
        },
        showSolutionPresenatation: function (data) {
            if (data.output == 1 || (data.usedatasource == 0 && data.hasquestionnaire == 0)) {
                views = [{ icon: "view", name: 'View', url: "/collateral/presentation/" + data.id + "/view" },];
                var title = "";
                if (data.name != undefined)
                    title = 'Presentations > ' + views[0].name + ' (<b><i>' + data.name + '</i></b>)';
                else
                    title = 'Presentations > ' + views[0].name + '';
                modal.show({ title: title, views: views });
            }
        },
        showSolutionRelatedProducts: function (data) {
            views = [{ icon: "view", name: 'View', url: "/setup/solution/records/" + data.solutiontypeid + "/" + data.id + "/relatedproducts" },];
            var title = 'Presentations > ' + views[0].name + '';
            modal.show({ title: title, views: views });
        },
        showCaseOwner: function (options, callback) {
            var views = [{ icon: "gear", name: 'View', url: "/manage/caseownership/" + options.casetypeid + "/" + options.caseid + "?isEdit=true&isCase=true", buttons: ["save"] }];
            modal.show({ title: 'Owner', views: views, callback: callback, locked: true, preventClose: true, closeButton: true });
        },
        showDataRoomEditor: function (id, callback) {
            var views = [{ icon: "edit", name: 'Customize', url: "/collateral/data-room/" + id + "/editor?calendarevent=true&isplaybook=true", buttonaction: true ,buttons:["save"]}];
            modal.show({ title: 'Dataroom', views: views, callback: callback, locked: true, preventClose: true, closeButton: true });
        },
        showDataRoomEmail: function (emailParam, callback) {
            var views = [{ icon: "envelope", name: 'Send', url: "/communicate/email/0" + emailParam ,buttons:["finish"]}];
            modal.show({ title: 'Send', views: views, callback: callback, locked: true, preventClose: true, closeButton: true });
        },
        showColorSettingsStatuswidgets: function (settingOptions) {
            var urlParam = "";
            if (settingOptions.widgetname != undefined)
                urlParam += urlParam != "" ? "&wname=" + settingOptions.widgetname : "?wname=" + settingOptions.widgetname;
            if (settingOptions.persona != undefined)
                urlParam += urlParam != "" ? "&persona=" + settingOptions.persona : "?persona=" + settingOptions.persona;
            if (settingOptions.personaoption != undefined)
                urlParam += urlParam != "" ? "&personaoption=" + settingOptions.personaoption : "?personaoption=" + settingOptions.personaoption;
            if (settingOptions.platform != undefined)
                urlParam += urlParam != "" ? "&platform=" + settingOptions.platform : "?platform=" + settingOptions.platform;
            if (settingOptions.requestid != undefined)
                urlParam += urlParam != "" ? "&requestid=" + settingOptions.requestid : "?requestid=" + settingOptions.requestid;
            if (settingOptions.editmode != undefined)
                urlParam += urlParam != "" ? "&editmode=" + settingOptions.editmode : "?editmode=" + settingOptions.editmode;

            var views = [{ icon: "fa-cog", name: 'Settings', url: "/widgets/statuswidgets/colorsetting" + urlParam, buttons: ["save"] }];
            modal.show({ title: settingOptions.title, views: views, preventclose: true, locked: true });
        },
        showSettingSegmentWiseReport: function (settingOptions) {
            var urlParam = "";
            if (settingOptions.widgetname != undefined)
                urlParam += urlParam != "" ? "&widgetname=" + settingOptions.widgetname : "?widgetname=" + settingOptions.widgetname;
            if (settingOptions.persona != undefined)
                urlParam += urlParam != "" ? "&persona=" + settingOptions.persona : "?persona=" + settingOptions.persona;
            if (settingOptions.personaoption != undefined)
                urlParam += urlParam != "" ? "&personaoption=" + settingOptions.personaoption : "?personaoption=" + settingOptions.personaoption;
            if (settingOptions.linktoid != undefined)
                urlParam += urlParam != "" ? "&linktoid=" + settingOptions.linktoid : "?linktoid=" + settingOptions.linktoid;
            if (settingOptions.linktype != undefined)
                urlParam += urlParam != "" ? "&linktype=" + settingOptions.linktype : "?linktype=" + settingOptions.linktype;
            if (settingOptions.platform != undefined)
                urlParam += urlParam != "" ? "&platform=" + settingOptions.platform : "?platform=" + settingOptions.platform;
            if (settingOptions.requestid != undefined)
                urlParam += urlParam != "" ? "&requestid=" + settingOptions.requestid : "?requestid=" + settingOptions.requestid;
            if (settingOptions.editmode != undefined)
                urlParam += urlParam != "" ? "&editmode=" + settingOptions.editmode : "?editmode=" + settingOptions.editmode;

            var views = [{ icon: "fa-cog", name: 'Settings', url: "/widgets/SegmentWiseEmailReportSetting" + urlParam, buttons: ["save"] }];
            modal.show({ title: settingOptions.title, views: views, preventclose: true, locked: true });
        },
        showSettingdonutChart: function (settingOptions) {
            var urlParam = "";
            if (settingOptions.persona != undefined)
                urlParam += urlParam != "" ? "&persona=" + settingOptions.persona : "?persona=" + settingOptions.persona;
            if (settingOptions.personaoption != undefined)
                urlParam += urlParam != "" ? "&personaoption=" + settingOptions.personaoption : "?personaoption=" + settingOptions.personaoption;
            if (settingOptions.linktoid != undefined)
                urlParam += urlParam != "" ? "&linktoid=" + settingOptions.linktoid : "?linktoid=" + settingOptions.linktoid;
            if (settingOptions.linktype != undefined)
                urlParam += urlParam != "" ? "&linktype=" + settingOptions.linktype : "?linktype=" + settingOptions.linktype;
            if (settingOptions.platform != undefined)
                urlParam += urlParam != "" ? "&platform=" + settingOptions.platform : "?platform=" + settingOptions.platform;
            
            if (settingOptions.editmode != undefined)
                urlParam += urlParam != "" ? "&editmode=" + settingOptions.editmode : "?editmode=" + settingOptions.editmode;
            if (settingOptions.noofdays != undefined)
                urlParam += urlParam != "" ? "&noofdays=" + settingOptions.noofdays : "?noofdays=" + settingOptions.noofdays;

            var views = [{ icon: "fa-cog", name: 'Settings', url: "/widgets/custom/donutwidgetsetting/" + settingOptions.widgetname + "/" + settingOptions.requestid + "/" + settingOptions.legendcount + urlParam, buttons: ["save"] }];
            modal.show({ title: settingOptions.title + ' Widget Setting', views: views, preventclose: true, locked: true });
        },
        showSmartListSetting: function (settingOptions) {
            var urlParam = "";
            if (settingOptions.persona != undefined)
                urlParam += urlParam != "" ? "&persona=" + settingOptions.persona : "?persona=" + settingOptions.persona;
            if (settingOptions.personaoption != undefined)
                urlParam += urlParam != "" ? "&personaoption=" + settingOptions.personaoption : "?personaoption=" + settingOptions.personaoption;            
            if (settingOptions.platform != undefined)
                urlParam += urlParam != "" ? "&platform=" + settingOptions.platform : "?platform=" + settingOptions.platform;            
            if (settingOptions.editmode != undefined)
                urlParam += urlParam != "" ? "&editmode=" + settingOptions.editmode : "?editmode=" + settingOptions.editmode;
            if (settingOptions.type != undefined)
                urlParam += urlParam != "" ? "&type=" + settingOptions.type : "?type=" + settingOptions.type;
            if (settingOptions.widgetname != undefined)
                urlParam += urlParam != "" ? "&widgetname=" + settingOptions.widgetname : "?widgetname=" + settingOptions.widgetname;
            if (settingOptions.linktype != undefined)
                urlParam += urlParam != "" ? "&linktype=" + settingOptions.linktype : "?linktype=" + settingOptions.linktype;
            if (settingOptions.maxrecord != undefined)
                urlParam += urlParam != "" ? "&maxrecord=" + settingOptions.maxrecord : "?maxrecord=" + settingOptions.maxrecord;

            var views = [{ icon: "fa-cog", name: 'Settings', url: "/widgets/custom/smartlistssetting/" + settingOptions.widgetname + "/" + settingOptions.requestid + urlParam, buttons: ["save"] }];
            modal.show({ title: settingOptions.title + ' Widget Setting', views: views, preventclose: true, locked: true });
        },
        showYourChannelManagerSetting: function (settingOptions) {
            // Prepare the URL parameter string
            var urlParam = "";

            if (settingOptions.persona != undefined)
                urlParam += urlParam != "" ? "&persona=" + settingOptions.persona : "?persona=" + settingOptions.persona;
            if (settingOptions.personaoption != undefined)
                urlParam += urlParam != "" ? "&personaoption=" + settingOptions.personaoption : "?personaoption=" + settingOptions.personaoption;
            if (settingOptions.platform != undefined)
                urlParam += urlParam != "" ? "&platform=" + settingOptions.platform : "?platform=" + settingOptions.platform;
            // Append editmode parameter if provided
            if (settingOptions.editmode != undefined)
                urlParam += urlParam != "" ? "&editmode=" + settingOptions.editmode : "?editmode=" + settingOptions.editmode;
            if (settingOptions.linktype != undefined)
                urlParam += urlParam != "" ? "&linktype=" + settingOptions.linktype : "?linktype=" + settingOptions.linktype;
            if (settingOptions.type != undefined)
                urlParam += urlParam != "" ? "&type=" + settingOptions.type : "?type=" + settingOptions.type;
            // Append widgetname parameter if provided
            if (settingOptions.widgetname != undefined)
                urlParam += urlParam != "" ? "&widgetname=" + settingOptions.widgetname : "?widgetname=" + settingOptions.widgetname;
            // Prepare the views array for the modal dialog
            var views = [{
                icon: "fa-cog",
                name: 'Settings',
                url: "/widgets/custom/yourchannelmanagers-setting/" + settingOptions.widgetname + "/" + settingOptions.requestid + urlParam,
                buttons: ["save"]
            }];
            // Show the modal dialog with the specified title, views, and options
            modal.show({
                title: settingOptions.title + ' Widget Setting',
                views: views,
                preventclose: true,
                locked: true
            });
        },

        showAssetUtilizedUsers: function (jo) {
            var urlparam = "";
            if (jo.id != undefined)
                urlparam += urlparam != "" ? "&id=" + jo.id : "?id=" + jo.id;
            if (jo.index != undefined)
                urlparam += urlparam != "" ? "&index=" + jo.index : "?index=" + jo.index;
            if (jo.format != undefined)
                urlparam += urlparam != "" ? "&format=" + jo.format : "?format=" + jo.format;
            if (jo.indexdiff != undefined)
                urlparam += urlparam != "" ? "&indexdiff=" + jo.indexdiff : "?indexdiff=" + jo.indexdiff;            
            if (jo.linktype != undefined)
                urlparam += urlparam != "" ? "&linktype=" + jo.linktype : "?linktype=" + jo.linktype;
            if (jo.linktoid != undefined)
                urlparam += urlparam != "" ? "&linktoid=" + jo.linktoid : "?linktoid=" + jo.linktoid;
            if (jo.viewoption != undefined)
                urlparam += urlparam != "" ? "&viewoption=" + jo.viewoption : "?viewoption=" + jo.linktoid;            
            if (jo.orgviewoption != undefined)
                urlparam += urlparam != "" ? "&orgviewoption=" + jo.orgviewoption : "?orgviewoption=" + jo.orgviewoption;
            if (jo.orggroupviewoption != undefined)
                urlparam += urlparam != "" ? "&groupviewoption=" + jo.groupviewoption : "?groupviewoption=" + jo.groupviewoption;
            if (jo.type != undefined)
                urlparam += urlparam != "" ? "&type=" + jo.type : "?type=" + jo.type;
            
            var views = [
                { icon: "user", name: jo.contact, url: "/widgets/assetutilized/users" + urlparam }
            ];
            modal.show({ title: jo.title, views: views });            
        },
        showRatings: function (jo) {
            var urlparam = "";
            if (jo.checkforaccessibleusers != undefined)
                urlparam += urlparam != "" ? "&checkforaccessibleusers=" + jo.checkforaccessibleusers : "?checkforaccessibleusers=" + jo.checkforaccessibleusers;
            if (jo.index != undefined)
                urlparam += urlparam != "" ? "&index=" + jo.index : "?index=" + jo.index;
            if (jo.format != undefined)
                urlparam += urlparam != "" ? "&format=" + jo.format : "?format=" + jo.format;
            if (jo.indexdiff != undefined)
                urlparam += urlparam != "" ? "&indexdiff=" + jo.indexdiff : "?indexdiff=" + jo.indexdiff;
            if (jo.linktype != undefined)
                urlparam += urlparam != "" ? "&linktype=" + jo.linktype : "?linktype=" + jo.linktype;
            if (jo.linktoid != undefined)
                urlparam += urlparam != "" ? "&linktoid=" + jo.linktoid : "?linktoid=" + jo.linktoid;
            if (jo.viewoption != undefined)
                urlparam += urlparam != "" ? "&viewoption=" + jo.viewoption : "?viewoption=" + jo.linktoid;
            if (jo.orgviewoption != undefined)
                urlparam += urlparam != "" ? "&orgviewoption=" + jo.orgviewoption : "?orgviewoption=" + jo.orgviewoption;
            if (jo.orggroupviewoption != undefined)
                urlparam += urlparam != "" ? "&groupviewoption=" + jo.groupviewoption : "?groupviewoption=" + jo.groupviewoption;
            var views = [
                { icon: "users", name: 'Ratings', url: "/feedback/" + jo.itemid + "/" + jo.type + "/rating"+ "/comment" + urlparam},                
            ];
            modal.show({ title: jo.title, views: views });
        },
        showComments: function (jo) {
            var urlparam = "";            
            if (jo.checkforaccessibleusers != undefined)
                urlparam += urlparam != "" ? "&checkforaccessibleusers=" + jo.checkforaccessibleusers : "?checkforaccessibleusers=" + jo.checkforaccessibleusers;
            if (jo.index != undefined)
                urlparam += urlparam != "" ? "&index=" + jo.index : "?index=" + jo.index;
            if (jo.format != undefined)
                urlparam += urlparam != "" ? "&format=" + jo.format : "?format=" + jo.format;
            if (jo.indexdiff != undefined)
                urlparam += urlparam != "" ? "&indexdiff=" + jo.indexdiff : "?indexdiff=" + jo.indexdiff;
            if (jo.linktype != undefined)
                urlparam += urlparam != "" ? "&linktype=" + jo.linktype : "?linktype=" + jo.linktype;
            if (jo.linktoid != undefined)
                urlparam += urlparam != "" ? "&linktoid=" + jo.linktoid : "?linktoid=" + jo.linktoid;
            if (jo.viewoption != undefined)
                urlparam += urlparam != "" ? "&viewoption=" + jo.viewoption : "?viewoption=" + jo.linktoid;
            if (jo.orgviewoption != undefined)
                urlparam += urlparam != "" ? "&orgviewoption=" + jo.orgviewoption : "?orgviewoption=" + jo.orgviewoption;
            if (jo.orggroupviewoption != undefined)
                urlparam += urlparam != "" ? "&groupviewoption=" + jo.groupviewoption : "?groupviewoption=" + jo.groupviewoption;
            var views = [                
                { icon: "comments", name: 'Comments', url: "/feedback/" + jo.itemid + "/" + jo.type + "/rating" + "/comment" + urlparam, iconprefix: "far" }
            ];
            modal.show({ title: jo.title, views: views });
        },
        showLeadPoolORGList: function (poolID)
        {
            var views = [{ icon: "user", name: "", url: "setup/leadrouting/organizationgroups/" + poolID, buttons:["save"] }];
            modal.show({ title:'Organization Groups', views: views});
        },
        showopportunityOrgList: function (poolID) {
            var views = [{ icon: "user", name: "", url: "/setup/opportunityrouting/organizationgroups/" + poolID }];
            modal.show({ title: 'Organization Groups', views: views });
        },
        showInternalLinkPage: function (linkURL) { //added for #22428
            var views = [{ icon: "", name: "", url: linkURL }];
            modal.show({ title: 'Records', views: views});
        },
        showHardBouncedContactReport: function (options){
            var urlparam = "";
            if (options.contacttype != undefined)
                urlparam += urlparam != "" ? "&contacttype=" + options.contacttype : "?contacttype=" + options.contacttype;
            if (options.linktype != undefined)
                urlparam += urlparam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.linktoid != undefined)
                urlparam += urlparam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.viewoption != undefined)
                urlparam += urlparam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.linktoid;
            if (options.orgviewoption != undefined)
                urlparam += urlparam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.orggroupviewoption != undefined)
                urlparam += urlparam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.isorguser != undefined)
                urlparam += urlparam != "" ? "&isorguser=" + options.isorguser : "?isorguser=" + options.isorguser;
            var views = [{ icon: "", name: "", url: "widgets/hardbounced-contact/report" + urlparam }];
            modal.show({ title: options.title, views: views });
        },
        showHardBouncedContacts: function (options) {
            var urlparam = "";
            if (options.contacttype != undefined)
                urlparam += urlparam != "" ? "&contacttype=" + options.contacttype : "?contacttype=" + options.contacttype;
            if (options.linktype != undefined)
                urlparam += urlparam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.linktoid != undefined)
                urlparam += urlparam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.viewoption != undefined)
                urlparam += urlparam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.linktoid;
            if (options.orgviewoption != undefined)
                urlparam += urlparam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.orggroupviewoption != undefined)
                urlparam += urlparam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.id != undefined)
                urlparam += urlparam != "" ? "&id=" + options.id : "?id=" + options.id;
            if (options.organizationid != undefined)
                urlparam += urlparam != "" ? "&organizationid=" + options.organizationid : "?organizationid=" + options.organizationid;
            if (options.isorg != undefined)
                urlparam += urlparam != "" ? "&isorg=" + options.isorg : "?isorg=" + options.isorg;
            var views = [{ icon: "", name: "", url: "widgets/hardbounced/contact-grid" + urlparam }];
            modal.show({ title: "Contacts", views: views });
        },
        showConvertToOpportunityCreate: function (options) {
            var opportunityID = options.opportunityid;
            var opportunityName = options.opportunityname;
            var isdealapprover = false;
            if(options.isdealapprover == true)
            {
                isdealapprover = true;
            }
            var isIft = options.isift;
            var views = [];

            if (isIft) {
                views = [
                    {
                        icon: "cubes",
                        name: options.info,
                        url: `/interactivequestionnaire/preview/${options.id}?isdealtoopportunity=true&leadid=${options.requestid}`,
                    }
                ];
            } else {
                if (options.type != undefined) {
                    views = [
                        {
                            icon: "cubes",
                            name: options.info,
                            url: `/manage/project/record/${opportunityID}/0/${options.requestid}/${isdealapprover}/${getTimeStamp()}?requesttype=${options.type}`,
                            buttons: ["save"]
                        }
                    ];
                }
                else{
                    views = [
                        {
                            icon: "cubes",
                            name: options.info,
                            url: `/manage/project/record/${opportunityID}/0/${options.requestid}/${isdealapprover}/${getTimeStamp()}`,
                            buttons: ["save"]
                        }
                    ];
                }
            }
            modal.show({ title: `Add Record  (<b>${opportunityName}</b>)`, views: views });
        },
        showRoutedContact: function (contact) {
            var views = [
                { icon: "chart-bar", name: 'Report', url: "/connections/contacts/stats/" + contact.id + "/true" },
                { icon: "info-circle", name: 'Info', url: "/connections/contact/" + contact.id }
            ];
            var title = contact.email != "" && contact.email != undefined ? 'Contact > ' + views[0].name +' (<b><i>' + contact.email + '</i></b>)' : 'Contact > ' + views[0].name;
            modal.show({ title: title, views: views});
        },
        showCommissionPayments : function (options) {
            var views = [
                { icon: "user", name: options.title, url: "/widgets/commissionpayments" }
            ];
            modal.show({ title: options.title, views: views });
        },
        showContractsForStats: function (option) {
            var urlparam = "";
            if (option.contractstatus != undefined)
                urlparam += urlparam != "" ? "&contractstatus=" + option.contractstatus : "?contractstatus=" + option.contractstatus;
            var views = [{ icon: "", name: "", url: "widgets/contracts" + urlparam}];
            modal.show({ title: option.modalTitle, views: views });
        },
        showUserExportFields: function (exportDetails) {
            xobnidata = { name: exportDetails.name, apidata: exportDetails.apidata, dbfields: exportDetails.dbfields, sortcolumn: exportDetails.sortcolumn, defaultfields: exportDetails.defaultfields, ascending: exportDetails.ascending, filters: exportDetails.filters, search: exportDetails.searchtext };
            var urlParam = '';
            if (exportDetails.linkids != undefined)
                urlParam += urlParam != "" ? "&linkids=" + exportDetails.linkids : "?linkids=" + exportDetails.linkids;
            if (exportDetails.issmartlist != undefined)
                urlParam += urlParam != "" ? "&isSmartlist=" + exportDetails.issmartlist : "?isSmartlist=" + exportDetails.issmartlist;
            if (exportDetails.listname != undefined)
                urlParam += urlParam != "" ? "&listname=" + fixedEncodeURIComponent(exportDetails.listname) : "?listname=" + fixedEncodeURIComponent(exportDetails.listname);
            if (exportDetails.name != undefined)
                urlParam += urlParam != "" ? "&name=" + fixedEncodeURIComponent(exportDetails.name) : "?name=" + fixedEncodeURIComponent(exportDetails.name);
            if (exportDetails.uniqueids != undefined)
                urlParam += urlParam != "" ? "&uniqueids=" + exportDetails.uniqueids : "?uniqueids=" + exportDetails.uniqueids;

            var views = [{ icon: "chart-bar", name: 'Export', url: "/setup/users/export/" +  exportDetails.api + urlParam, buttons: ["generate"] }];
            modal.show({
                title: 'User(s) Export: Fields Selection', views: views
            });
        },
        showMdfExportFields: function (exportDetails) {
            xobnidata = { name: exportDetails.name, apiname: exportDetails.api, apidata: exportDetails.apidata, dbfields: exportDetails.dbfields, sortcolumn: exportDetails.sortcolumn, defaultfields: exportDetails.defaultfields, ascending: exportDetails.ascending, filters: exportDetails.filters, search: exportDetails.searchtext };
            var urlParam = '';
            if (exportDetails.linkids != undefined)
                urlParam += urlParam != "" ? "&linkids=" + exportDetails.linkids : "?linkids=" + exportDetails.linkids;
            if (exportDetails.name != undefined)
                urlParam += urlParam != "" ? "&name=" + fixedEncodeURIComponent(exportDetails.name) : "?name=" + fixedEncodeURIComponent(exportDetails.name);
            if (exportDetails.uniqueids != undefined)
                urlParam += urlParam != "" ? "&uniqueids=" + exportDetails.uniqueids : "?uniqueids=" + exportDetails.uniqueids;

            var views = [
                { icon: "", name: 'Export', url: "/connections/mdflistexport/" + urlParam, buttons: ["generate"] }
            ];
            modal.show({ title: 'MDF List Export', views: views });
        },
        showExportWizard: function (exportDetails) {
            xobnidata = exportDetails;
                if (exportDetails.apidata != undefined) {
                    if (exportDetails.apidata.smart != undefined && exportDetails.apidata.smart)
                        exportDetails.issmartlist = true;
            }
                var urlParam = '';
                if (exportDetails.linkids != undefined)
                    urlParam += urlParam != "" ? "&linkids=" + exportDetails.linkids : "?linkids=" + exportDetails.linkids;
                if (exportDetails.issmartlist != undefined)
                    urlParam += urlParam != "" ? "&isSmartlist=" + exportDetails.issmartlist : "?isSmartlist=" + exportDetails.issmartlist;
                if (exportDetails.listname != undefined)
                    urlParam += urlParam != "" ? "&listname=" + fixedEncodeURIComponent(exportDetails.listname) : "?listname=" + fixedEncodeURIComponent(exportDetails.listname);
                if (exportDetails.name != undefined)
                    urlParam += urlParam != "" ? "&name=" + fixedEncodeURIComponent(exportDetails.name) : "?name=" + fixedEncodeURIComponent(exportDetails.name);
                if (exportDetails.contactexport != undefined && !exportDetails.contactexport)
                    urlParam += urlParam != "" ? "&export=" + exportDetails.contactexport : "?export=" + exportDetails.contactexport;
                if (exportDetails.projecttype != undefined)
                    urlParam += urlParam != "" ? "&pt=" + exportDetails.projecttype : "?pt=" + exportDetails.projecttype;
                if (exportDetails.iscontactcompany != undefined)
                    urlParam += urlParam != "" ? "&iscontactcompany=" + exportDetails.iscontactcompany : "?iscontactcompany=" + exportDetails.iscontactcompany;
                if (exportDetails.casetypeid != undefined)
                    urlParam += urlParam != "" ? "&ct=" + exportDetails.casetypeid : "?ct=" + exportDetails.casetypeid;
                if (exportDetails.exporttype != undefined)
                    urlParam += urlParam != "" ? "&exporttype=" + exportDetails.exporttype : "?exporttype=" + exportDetails.exporttype;
                if (exportDetails.assettype != undefined)
                    urlParam += urlParam != "" ? "&assettypeid=" + exportDetails.apidata.assettypeid : "?assettypeid=" + exportDetails.apidata.assettypeid;
            
                var userFieldsUrl = "/setup/users/export" + urlParam;
                var contactFieldsUrl = "/connections/contacts/export" + urlParam;
                var opportunityUrl = "/manage/opportunity-export" + urlParam;
                var caseUrl = "manage/case-export" + urlParam;
                var orgUrl = "/setup/organizations/export" + urlParam;
                var accountUrl = "/setup/accounts/export" + urlParam;
                var databaseUrl = "/manage/database-export" + urlParam;

            var fieldsUrl = contactFieldsUrl;
            var title = 'Export Contact(s)';
            if (exportDetails.linktype == LinkTypeEnums.User) {
                fieldsUrl = userFieldsUrl;
                title = 'Export User(s)';
            }
            else if (exportDetails.linktype == LinkTypeEnums.Opportunity) {
                fieldsUrl = opportunityUrl;
                title = 'Export Opportunities';
                xobnidata.name = "Opportunity Export";
            }
            else if (exportDetails.linktype == LinkTypeEnums.Case) {
                fieldsUrl = caseUrl;
                title = 'Export Cases';
                xobnidata.name = "Case Export";
            }
            else if (exportDetails.linktype == LinkTypeEnums.Organization) {
                fieldsUrl = orgUrl;
                title = 'Export Organization';
                if (exportDetails.issmartlist)
                    title = 'Organization List Export';
                xobnidata.name = 'Organization Export';
            }
            else if (exportDetails.linktype == LinkTypeEnums.Deals) {
                if (exportDetails.selectedfolder == "opportunities")
                    fieldsUrl = opportunityUrl + "&deal=true";
                else
                    fieldsUrl = contactFieldsUrl + "&deal=true";
                title = 'Export Deals';
                xobnidata.name = "Deals Export";
            }
            else if (exportDetails.linktype == LinkTypeEnums.Account) {
                fieldsUrl = accountUrl;
                title = 'Export Account';
                xobnidata.name = 'Account Export';
            } else if (exportDetails.linktype == LinkTypeEnums.Database){
                fieldsUrl = databaseUrl;
                title = 'Export Database Record(s)';
                xobnidata.name = 'Database Export';
            }
            
            var linkTypeId = null;
            switch (exportDetails.linktype) {
                case LinkTypeEnums.Database:
                    linkTypeId = xobnidata.apidata.assettypeid;
                    break;
                case LinkTypeEnums.Opportunity:
                    linkTypeId = xobnidata.projecttype;
                    break;
            }
            api.call("GetExportPresetForUser", { linktype: exportDetails.linktype, linktypeid: linkTypeId }, function (r) {
                if (r.status == 0) {
                    if (r.result.length > 0) {
                        var preset = '[Custom]';
                        var result = r.result;
                        $.each(result, function (index, item) {
                            preset += (",[" + item.name + "]");
                        });                        
                        var name = "";
                        var apiData = { linktype: xobnidata.linktype };
                        if (xobnidata.issmartlist != null)
                            apiData.issmartlist = xobnidata.issmartlist.toString();
                        if (xobnidata.linkids != null && xobnidata.linkids.length > 0)
                            apiData.linkids = xobnidata.linkids[0];
                        if (xobnidata.name != null)
                            apiData.name = xobnidata.name;
                        if (xobnidata.listname != null)
                            apiData.listname = xobnidata.listname;
                        if (xobnidata.gridtype == "" && xobnidata.api.toLowerCase() == 'getallcontactandanonymouscompanies') {
                            apiData.exporttype = LinkTypeEnums.Account;
                            fieldsUrl = fieldsUrl.replace("name=", "name=" + apiData.exporttype +"");
                        }
                        if (xobnidata.linktype == LinkTypeEnums.Contact || xobnidata.linktype == LinkTypeEnums.User ) {
                            api.call("GetNameForExport", apiData, function (rs) {
                                if (rs.status == 0) {
                                    name = rs.result;
                                    xobnidata.name = name;
                                    OpenPresetMsgBox(preset, fieldsUrl, exportDetails, title, result);
                                }
                            }, null, null);
                        }
                        else 
                            OpenPresetMsgBox(preset, fieldsUrl, exportDetails, title, result);
                    }
                    else {
                        modal.showExportFieldWizard(fieldsUrl, exportDetails.linktype, title);
                    }
                }
            },null,null);
        },
        showExportFieldWizard: function (fieldsUrl,linkType,title) {
            var wizardSteps = [];
            wizardSteps.push({ name: 'Select Field(s)', url: fieldsUrl });
            wizardSteps.push({ name: 'Order Fields', url: "/exportfieldmapping/" + linkType });

            var _wizdata = {
                name: title,
                steps: wizardSteps
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showEmailModel: function (options, callback) {
            var url = '';
            if (options.assetFileType == '16384') {
                url = "/communicate/email/0?assetid=" + options.index + "&isAssetEmail=true&isPlaybookAsset=true";
                if (typeof options.linkID != 'undefined') //Added linkID check if contact is present.
                    url = url + "&linkids=" + options.linkID;
                if (typeof options.originalTemplateID != 'undefined')
                    url = url + "&playbookid=" + options.originalTemplateID;
                if (typeof options.contactListID != 'undefined')
                    url = url + "&contactlistid=" + options.contactListID;
            }
            else if (options.assetFileType == '256') {
                url = "/communicate/email/0?assetid=" + options.index + "&isAssetEmail=true&isPlaybookAsset=true";
                if (options.originalTemplateID != undefined || options.originalTemplateID != "undefined" || options.originalTemplateID != null)
                    url = "/communicate/email/0?assetid=" + options.index + "&isAssetEmail=true&isPlaybookAsset=true&playbookid=" + options.originalTemplateID;
                if (typeof options.linkID != 'undefined') //Added linkID check if contact is present.
                    url = url + "&linkids=" + options.linkID;
                if (typeof options.contactListID != 'undefined')
                    url = url + "&contactlistid=" + options.contactListID;
            }
            else {
                url = "/communicate/email/0?emailtemplateid=" + options.index + "&isPlaybookAsset=true";
                if (typeof options.linkID != 'undefined')
                    url = url + "&linkids=" + options.linkID;
                if (typeof options.contactListID != 'undefined')
                    url = url + "&contactlistid=" + options.contactListID;
            }

            var views = [{ icon: "database", name: 'Send', url: url, buttons: ["finish"] }];
            modal.show({ title: 'Send Email', views: views, callback: callback });
        },
        showAssetEmailModel: function (index, assetFileType, originalTemplateID) {
            var views = null;
            if (assetFileType == '16384' || assetFileType == '256' || '134217728') {
                if (originalTemplateID != undefined || originalTemplateID != "undefined")
                    views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + index + "&isAssetEmail=true&playbookid=" + originalTemplateID, buttons: ["finish"] }];
                else
                    views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + index + "&isAssetEmail=true", buttons: ["finish"] }];
            }               
            else
                views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?ispartner=false&templates=" + index + "&isMultipleAssetEmail=true", buttons: ["finish"] }];
            modal.show({ title: 'Send Email', views: views });
        },
        sendLinearExternalMedia: function (options, callback) {
            var views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?assetID=0&isAssetEmail=true&isPlaybookAsset=true&templateid=" + options.templateID + "&stepassetID=" + options.assetID, buttons: ["finish"] }];
            modal.show({ title: 'Send External Media', views: views, callback: callback });
        },
        showDealRegistrationStats: function (data) {
            var views = [];
            if (data.newVersion != undefined && data.newVersion) {
                var queryString = "";

                if (data.linkToId != undefined) {
                    queryString = "linktoid=" + data.linkToId + "&linktype=" + data.linkType
                        + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption + "&type=" + data.type;
                }
                else {
                    queryString = "linktype=" + data.linkType
                        + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption + "&type=" + data.type;
                }

                if (data.userId != undefined) {
                    queryString += "&reportuserid=" + data.userId;
                }
                if (data.organizationId != undefined) {
                    queryString += "&reportorganizationid=" + data.organizationId;
                }
                if (data.userGroupId != undefined) {
                    queryString += "&userGroupId=" + data.userGroupId;
                }
                if (data.organizationGroupId != undefined) {
                    queryString += "&organizationGroupId=" + data.organizationGroupId;
                }
                if (data.userGroupViewOption != undefined) {
                    queryString += "&userGroupViewOption=" + data.userGroupViewOption;
                }
                if (data.userGroupId != undefined) {
                    queryString += "&userGroupId=" + data.userGroupId;
                }
                if (data.groupType != undefined) {
                    queryString += "&groupType=" + data.groupType;
                }

                views.push({
                    icon: "user", name: 'Deal Requests', url: "/setup/leads/leadrequests?" + queryString
                });
            }
            else {
                if (data.linkToId != undefined)
                    if (data.userid != undefined) {
                        var extraQueryFields="";

                        if(data.linkType=='2' && data.groupType=='160' && parseInt(data.orgViewOption) == parseInt('64')){
                            if (data.organizationid != undefined)
                                extraQueryFields += "&reportorganizationid=" + data.organizationid;
                        }

                        if (data.userGroupId != null) {
                            views.push({
                                icon: "user", name: 'Deal Requests', url: "/setup/leads/leadrequests?linktoid=" + data.linkToId + "&linktype=" + data.linkType
                                    + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption + "&type=" + data.type + "&reportuserid=" + data.userid
                                    + "&userGroupViewOption=" + data.userGroupViewOption + "&userGroupId=" + data.userGroupId + "&groupType=" + data.groupType + extraQueryFields
                            });
                        }
                        else {
                            views.push({
                                icon: "user", name: 'Deal Requests', url: "/setup/leads/leadrequests?linktoid=" + data.linkToId + "&linktype=" + data.linkType
                                    + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption + "&type=" + data.type + "&reportuserid=" + data.userid
                                    + "&userGroupViewOption=" + data.userGroupViewOption + "&groupType=" + data.groupType + extraQueryFields
                            });
                        }

                    }
                    else if (data.organizationid != undefined) {
                        if (data.userGroupId != null) {
                            views.push({
                                icon: "user", name: 'Deal Requests', url: "/setup/leads/leadrequests?linktoid=" + data.linkToId + "&linktype=" + data.linkType
                                    + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption + "&type=" + data.type + "&reportorganizationid=" + data.organizationid
                                    + "&userGroupViewOption=" + data.userGroupViewOption + "&userGroupId=" + data.userGroupId + "&groupType=" + data.groupType
                            });
                        }
                        else {
                            views.push({
                                icon: "user", name: 'Deal Requests', url: "/setup/leads/leadrequests?linktoid=" + data.linkToId + "&linktype=" + data.linkType
                                    + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption + "&type=" + data.type + "&reportorganizationid=" + data.organizationid
                                    + "&userGroupViewOption=" + data.userGroupViewOption + "&groupType=" + data.groupType
                            });
                        }
                    }
                    else {
                        if (data.userGroupId != null) {
                            views.push({
                                icon: "user", name: 'Deal Requests', url: "/setup/leads/leadrequests?linktoid=" + data.linkToId + "&linktype=" + data.linkType
                                    + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption + "&type=" + data.type + "&reportuserid=" + data.userid
                                    + "&userGroupViewOption=" + data.userGroupViewOption + "&userGroupId=" + data.userGroupId + "&groupType=" + data.groupType
                            });
                        }
                        else {
                            views.push({
                                icon: "user", name: 'Deal Requests', url: "/setup/leads/leadrequests?linktoid=" + data.linkToId + "&linktype=" + data.linkType
                                    + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption + "&type=" + data.type + "&reportuserid=" + data.userid
                                    + "&userGroupViewOption=" + data.userGroupViewOption + "&groupType=" + data.groupType
                            });
                        }
                    }
                else {
                    if (data.userGroupId != null) {
                        views.push({
                            icon: "user", name: 'Deal Requests', url: "/setup/leads/leadrequests?linktoid=" + data.linkToId + "&linktype=" + data.linkType
                                + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption + "&type=" + data.type + "&reportuserid=" + data.userid
                                + "&userGroupViewOption=" + data.userGroupViewOption + "&userGroupId=" + data.userGroupId + "&groupType=" + data.groupType
                        });
                    }
                    else {
                        views.push({
                            icon: "user", name: 'Deal Requests', url: "/setup/leads/leadrequests?linktoid=" + data.linkToId + "&linktype=" + data.linkType
                                + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption + "&type=" + data.type + "&reportuserid=" + data.userid
                                + "&userGroupViewOption=" + data.userGroupViewOption + "&groupType=" + data.groupType
                        });
                    }
                }
                    
            }
            var title = data.title != undefined ? data.title : 'Deal Requests';
            modal.show({ title: title, views: views });
        },
        showProjectsForUser: function (pID, pTypeID, options) {
            $.extend({
                customize: false,
            }, options);
            var buttons = options.hasOpportunityEditAccess != undefined && options.hasOpportunityEditAccess ? ["save"] : [];
            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid=" + pTypeID + "&projectid=" + pID;

            if (options.isOpportunityAssociation && options.isstageclosed || options.isclosedopportunity)
                buttons = [];

            // this is added to select default tab on opportunity tab page.
            var defaultTab = "";
            if (options.defaulttab != null && options.defaulttab != '' && options.defaulttab != undefined) {
                defaultTab = "&defaulttab=" + options.defaulttab;
            }

            if (options.ismobilebrowser == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/" + pTypeID + "," + pID;
            var overview = { icon: "telescope", name: 'Opportunity Overview', url: "/manage/projectrecord/overview/" + pTypeID + "/" + pID + "/" + "?isassociated=" + options.associated, iconprefix: "far" };
            var info = { icon: "info-circle", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp + "?isassociated=" + options.associated, buttons: buttons };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + pTypeID + "/" + pID +"/" + "?isassociated=" + options.associated, iconprefix: "far" };
            var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + pID + "&isSmartlist=null&source=opportunity&isproject=true&assettype=" + pTypeID + "&assetid=" + pID };
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + pID + "/" + pTypeID, buttons: buttons };
            var contacts = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/project-contacts/" + pTypeID + "/" + pID, buttons: buttons };
            var imagegal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var docgal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + pTypeID + "&assetid=" + pID + "&isproject=true&linkids=" + pID + "&source=opportunity" };
            var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + pTypeID + "/" + pID, iconprefix: "far" };
            var email = { icon: "envelope", name: 'Send Email', url: sendEmailUrl };
            var associate = { icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard, iconprefix: "far" };//#32431 - Remove "Save" button since contacts are directly added on "add"
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID + "?issharepermission=" + options.sharePermission + "&isassociated=" + options.associated + defaultTab };
            var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + pID + "?isproject="+true + "&projectid=" + pID +"&projecttype="+pTypeID};
            var associateopportunity = { icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + pTypeID + "/" + pID + "?projectid=" + pID + "&projecttype=" + pTypeID + "&sharelevel=" + options.shareLevel };
            var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + pTypeID + "/" + pID};
            var projViews;

            if (options.usestepwizard)//to show opportunity in step process
            {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [overview, preview, associate, associateopportunity, database, report] : [overview];
                    else
                        projViews = options.iscurrent ? [preview, associate, associateopportunity, database, report] : [report];
            }
            else {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [overview, info, report, viewasset] : [overview];
                    else
                        projViews = options.iscurrent ? [info, report, viewasset] : [report];
            }

            if (options.isEngagementReport){
                if (options.isNewOpportunityView)
                    projViews = [overview];
                else
                    projViews = [report, preview];
            }

            var title = "";
            var oppname = "";
            ///dont knw why thsi is added here
            ///api.call("GetOpportunityInfo", { projecttypeid: pTypeID, projectid: pID }, function (result) {
               // oppname = result.result[0].projectname;

                if (options.iscurrent) {
                    if (options.hasuseraccess == true && options.sharePermission && !options.isPublic)
                        projViews.push(permission);

                    if (options.hascontactaccess && !options.usestepwizard)
                        projViews.push(associate);

                    if (options.isassociateopportunity && !options.usestepwizard)
                        projViews.push(associateopportunity);

                    if (options.hasProductAccess && !options.usestepwizard) projViews.push(database);

                    projViews.push(imagegal, docgal);

                    if (options.hasemailsendaccess)
                        projViews.push(email);
                    if (options.hasinternalplaybookaccess)
                        projViews.push(intplaybook);
                }

                projViews.push(offline);
                if (options.hasuseraccess && options.hasownershipaccess && !options.usestepwizard)
                    projViews.push(ownership);

                if (options.isOpportunityAssociation){
                    projViews = [];
                    if (options.usestepwizard) {
                        projViews = [preview];
                    }
                    else
                        projViews = [info];
                }
                    
                title = 'Opportunity' + ' ' + projViews[0].name + '' + ' > ' + options.projecttypename + ' (<b>' + options.opportunityname+ '</b>)';
                modal.show({ title: title, views: projViews });
            //});
        },
        ShowOpportunityMoreInfo: function (pID, pTypeID, options) {
            $.extend({
                customize: false,
            }, options);
            var buttons = [];
            if (options.hasOpportunityEditAccess)
                buttons = ["save"]
            if (options.isclosedopportunity)
                buttons = []

            var info = { icon: "info-circle", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp + "?isassociated=" + options.isAssociated, buttons: buttons };
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID + "?isassociated=" + options.isAssociated};
            
            var projViews = [];
            if (options.usestepwizard) {
                projViews = [preview];
            }
            else
                projViews = [info];
            var title = projViews[0].name + '' + ' > ' + options.opportunityname;
            modal.show({ title: title, views: projViews });
        },
        ShowAssociateContactForOpportunity: function (pID, pTypeID, options) {
            $.extend({
                customize: false,
            }, options);

            var associate = { icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard, iconprefix: "far" };//#32431 - Remove "Save" button since contacts are directly added on "add"
            var projViews = [];
            projViews.push(associate);

            var title = projViews[0].name + '' + ' > ' + options.opportunityname;
            modal.show({ title: title, views: projViews });
        },
        ShowAssociateOpportunities: function (pID, pTypeID, options) {
            $.extend({
                customize: false,
            }, options);
            var associateopportunity = { icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + pTypeID + "/" + pID + "?projectid=" + pID + "&projecttype=" + pTypeID};
            var projViews = [];
            projViews.push(associateopportunity);

            var title = projViews[0].name + '' + ' > ' + options.opportunityname;
            modal.show({ title: title, views: projViews });
        },
        showOppoReportData: function (pID, pTypeID,options) {
            var buttons = options.hasOpportunityEditAccess != undefined && options.hasOpportunityEditAccess ? ["save"] : [];
            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid=" + pTypeID + "&projectid=" + pID;

            if (options.isOpportunityAssociation && options.isstageclosed || options.isclosedopportunity)
                buttons = [];

            // this is added to select default tab on opportunity tab page.
            var defaultTab = "";
            if (options.defaulttab != null && options.defaulttab != '' && options.defaulttab != undefined) {
                defaultTab = "&defaulttab=" + options.defaulttab;
            }

            if (options.ismobilebrowser == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/" + pTypeID + "," + pID;
            var overview = { icon: "telescope", name: 'Opportunity Overview', url: "/manage/projectrecord/overview/" + pTypeID + "/" + pID, iconprefix: "far" };
            var info = { icon: "info-circle", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp + "?isassociated=" + options.associated, buttons: buttons };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + pTypeID + "/" + pID + "/" + "?isassociated=" + options.associated, iconprefix: "far" };
            var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + pID + "&isSmartlist=null&source=opportunity&isproject=true&assettype=" + pTypeID + "&assetid=" + pID };
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + pID + "/" + pTypeID, buttons: buttons };
            var contacts = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/project-contacts/" + pTypeID + "/" + pID, buttons: buttons };
            var imagegal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var docgal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + pTypeID + "&assetid=" + pID + "&isproject=true&linkids=" + pID + "&source=opportunity" };
            var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + pTypeID + "/" + pID, iconprefix: "far" };
            var email = { icon: "envelope", name: 'Send Email', url: sendEmailUrl };
            var associate = { icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard, iconprefix: "far" };//#32431 - Remove "Save" button since contacts are directly added on "add"
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID + "?issharepermission=" + options.sharePermission + "&isassociated=" + options.associated + defaultTab };
            var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + pID + "?isproject=" + true + "&projectid=" + pID + "&projecttype=" + pTypeID };
            var associateopportunity = { icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + pTypeID + "/" + pID + "?projectid=" + pID + "&projecttype=" + pTypeID + "&sharelevel=" + options.shareLevel };
            var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + pTypeID + "/" + pID };
            var projViews;

            if (options.usestepwizard)//to show opportunity in step process
            {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [report, overview, preview, associate, associateopportunity, database] : [report];
                else
                    projViews = options.iscurrent ? [preview, associate, associateopportunity, database, report] : [report];
            }
            else {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [report, overview, info, viewasset] : [report];
                else
                    projViews = options.iscurrent ? [info, report, viewasset] : [report];
            }

            if (options.isEngagementReport) {
                if (options.isNewOpportunityView)
                    projViews = [report];
                else
                    projViews = [report, preview];
            }

            var title = "";
            var oppname = "";

            if (options.iscurrent) {
                if (options.hasuseraccess == true && options.sharePermission && !options.isPublic)
                    projViews.push(permission);

                if (options.hascontactaccess && !options.usestepwizard)
                    projViews.push(associate);

                if (options.isassociateopportunity && !options.usestepwizard)
                    projViews.push(associateopportunity);

                if (options.hasProductAccess && !options.usestepwizard) projViews.push(database);

                projViews.push(imagegal, docgal);

                if (options.hasemailsendaccess)
                    projViews.push(email);
                if (options.hasinternalplaybookaccess)
                    projViews.push(intplaybook);
            }

            projViews.push(offline);
            if (options.hasuseraccess && options.hasownershipaccess && !options.usestepwizard)
                projViews.push(ownership);

            if (options.isOpportunityAssociation) {
                projViews = [];
                if (options.usestepwizard) {
                    projViews = [preview];
                }
                else
                    projViews = [info];
            }

            title = 'Opportunity' + ' ' + projViews[0].name + '' + ' > ' + options.projecttypename + ' (<b>' + options.opportunityname + '</b>)';
            modal.show({ title: title, views: projViews });
        },
        showOppoInfoData: function (pID, pTypeID, options) {
            var buttons = options.hasOpportunityEditAccess != undefined && options.hasOpportunityEditAccess ? ["save"] : [];
            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid=" + pTypeID + "&projectid=" + pID;

            if (options.isOpportunityAssociation && options.isstageclosed || options.isclosedopportunity)
                buttons = [];

            // this is added to select default tab on opportunity tab page.
            var defaultTab = "";
            if (options.defaulttab != null && options.defaulttab != '' && options.defaulttab != undefined) {
                defaultTab = "&defaulttab=" + options.defaulttab;
            }

            if (options.ismobilebrowser == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/" + pTypeID + "," + pID;
            var overview = { icon: "telescope", name: 'Opportunity Overview', url: "/manage/projectrecord/overview/" + pTypeID + "/" + pID, iconprefix: "far" };
            var info = { icon: "info-circle", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp + "?isassociated=" + options.associated, buttons: buttons };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + pTypeID + "/" + pID + "/" + "?isassociated=" + options.associated, iconprefix: "far" };
            var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + pID + "&isSmartlist=null&source=opportunity&isproject=true&assettype=" + pTypeID + "&assetid=" + pID };
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + pID + "/" + pTypeID, buttons: buttons };
            var contacts = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/project-contacts/" + pTypeID + "/" + pID, buttons: buttons };
            var imagegal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var docgal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + pTypeID + "&assetid=" + pID + "&isproject=true&linkids=" + pID + "&source=opportunity" };
            var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + pTypeID + "/" + pID, iconprefix: "far" };
            var email = { icon: "envelope", name: 'Send Email', url: sendEmailUrl };
            var associate = { icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard, iconprefix: "far" };//#32431 - Remove "Save" button since contacts are directly added on "add"
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID + "?issharepermission=" + options.sharePermission + "&isassociated=" + options.associated + defaultTab };
            var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + pID + "?isproject=" + true + "&projectid=" + pID + "&projecttype=" + pTypeID };
            var associateopportunity = { icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + pTypeID + "/" + pID + "?projectid=" + pID + "&projecttype=" + pTypeID + "&sharelevel=" + options.shareLevel };
            var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + pTypeID + "/" + pID };
            var projViews;

            if (options.usestepwizard)//to show opportunity in step process
            {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [info, report, overview, preview, associate, associateopportunity, database] : [info];
                else
                    projViews = options.iscurrent ? [preview, associate, associateopportunity, database, report] : [report];
            }
            else {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [info, overview, report, viewasset] : [info];
                else
                    projViews = options.iscurrent ? [info, report, viewasset] : [report];
            }

            if (options.isEngagementReport) {
                if (options.isNewOpportunityView)
                    projViews = [info];
                else
                    projViews = [report, preview];
            }

            var title = "";
            var oppname = "";

            if (options.iscurrent) {
                if (options.hasuseraccess == true && options.sharePermission && !options.isPublic)
                    projViews.push(permission);

                if (options.hascontactaccess && !options.usestepwizard)
                    projViews.push(associate);

                if (options.isassociateopportunity && !options.usestepwizard)
                    projViews.push(associateopportunity);

                if (options.hasProductAccess && !options.usestepwizard) projViews.push(database);

                projViews.push(imagegal, docgal);

                if (options.hasemailsendaccess)
                    projViews.push(email);
                if (options.hasinternalplaybookaccess)
                    projViews.push(intplaybook);
            }

            projViews.push(offline);
            if (options.hasuseraccess && options.hasownershipaccess && !options.usestepwizard)
                projViews.push(ownership);

            if (options.isOpportunityAssociation) {
                projViews = [];
                if (options.usestepwizard) {
                    projViews = [preview];
                }
                else
                    projViews = [info];
            }

            title = 'Opportunity' + ' ' + projViews[0].name + '' + ' > ' + options.projecttypename + ' (<b>' + options.opportunityname + '</b>)';
            modal.show({ title: title, views: projViews });
        },
        showOppoPreviewData: function (pID, pTypeID, options) {
            var buttons = options.hasOpportunityEditAccess != undefined && options.hasOpportunityEditAccess ? ["save"] : [];
            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid=" + pTypeID + "&projectid=" + pID;

            if (options.isOpportunityAssociation && options.isstageclosed || options.isclosedopportunity)
                buttons = [];

            // this is added to select default tab on opportunity tab page.
            var defaultTab = "";
            if (options.defaulttab != null && options.defaulttab != '' && options.defaulttab != undefined) {
                defaultTab = "&defaulttab=" + options.defaulttab;
            }

            if (options.ismobilebrowser == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/" + pTypeID + "," + pID;
            var overview = { icon: "telescope", name: 'Opportunity Overview', url: "/manage/projectrecord/overview/" + pTypeID + "/" + pID, iconprefix: "far" };
            var info = { icon: "info-circle", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp + "?isassociated=" + options.associated, buttons: buttons };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + pTypeID + "/" + pID + "/" + "?isassociated=" + options.associated, iconprefix: "far" };
            var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + pID + "&isSmartlist=null&source=opportunity&isproject=true&assettype=" + pTypeID + "&assetid=" + pID };
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + pID + "/" + pTypeID, buttons: buttons };
            var contacts = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/project-contacts/" + pTypeID + "/" + pID, buttons: buttons };
            var imagegal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var docgal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + pTypeID + "&assetid=" + pID + "&isproject=true&linkids=" + pID + "&source=opportunity" };
            var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + pTypeID + "/" + pID, iconprefix: "far" };
            var email = { icon: "envelope", name: 'Send Email', url: sendEmailUrl };
            var associate = { icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard, iconprefix: "far" };//#32431 - Remove "Save" button since contacts are directly added on "add"
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID + "?issharepermission=" + options.sharePermission + "&isassociated=" + options.associated + defaultTab };
            var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + pID + "?isproject=" + true + "&projectid=" + pID + "&projecttype=" + pTypeID };
            var associateopportunity = { icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + pTypeID + "/" + pID + "?projectid=" + pID + "&projecttype=" + pTypeID + "&sharelevel=" + options.shareLevel };
            var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + pTypeID + "/" + pID };
            var projViews;

            if (options.usestepwizard)//to show opportunity in step process
            {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [preview, report, overview, associate, associateopportunity, database] : [preview];
                else
                    projViews = options.iscurrent ? [preview, associate, associateopportunity, database, report] : [report];
            }
            else {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [info, overview, report, viewasset] : [info];
                else
                    projViews = options.iscurrent ? [info, report, viewasset] : [report];
            }

            if (options.isEngagementReport) {
                if (options.isNewOpportunityView)
                    projViews = [info];
                else
                    projViews = [report, preview];
            }

            var title = "";
            var oppname = "";

            if (options.iscurrent) {
                if (options.hasuseraccess == true && options.sharePermission && !options.isPublic)
                    projViews.push(permission);

                if (options.hascontactaccess && !options.usestepwizard)
                    projViews.push(associate);

                if (options.isassociateopportunity && !options.usestepwizard)
                    projViews.push(associateopportunity);

                if (options.hasProductAccess && !options.usestepwizard) projViews.push(database);

                projViews.push(imagegal, docgal);

                if (options.hasemailsendaccess)
                    projViews.push(email);
                if (options.hasinternalplaybookaccess)
                    projViews.push(intplaybook);
            }

            projViews.push(offline);
            if (options.hasuseraccess && options.hasownershipaccess && !options.usestepwizard)
                projViews.push(ownership);

            if (options.isOpportunityAssociation) {
                projViews = [];
                if (options.usestepwizard) {
                    projViews = [preview];
                }
                else
                    projViews = [info];
            }

            title = 'Opportunity' + ' ' + projViews[0].name + '' + ' > ' + options.projecttypename + ' (<b>' + options.opportunityname + '</b>)';
            modal.show({ title: title, views: projViews });
        },
        showOppoSharingData: function (pID, pTypeID, options) {
            var buttons = options.hasOpportunityEditAccess != undefined && options.hasOpportunityEditAccess ? ["save"] : [];
            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid=" + pTypeID + "&projectid=" + pID;

            if (options.isOpportunityAssociation && options.isstageclosed || options.isclosedopportunity)
                buttons = [];

            // this is added to select default tab on opportunity tab page.
            var defaultTab = "";
            if (options.defaulttab != null && options.defaulttab != '' && options.defaulttab != undefined) {
                defaultTab = "&defaulttab=" + options.defaulttab;
            }

            if (options.ismobilebrowser == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/" + pTypeID + "," + pID;
            var overview = { icon: "telescope", name: 'Opportunity Overview', url: "/manage/projectrecord/overview/" + pTypeID + "/" + pID, iconprefix: "far" };
            var info = { icon: "info-circle", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp + "?isassociated=" + options.associated, buttons: buttons };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + pTypeID + "/" + pID + "/" + "?isassociated=" + options.associated, iconprefix: "far" };
            var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + pID + "&isSmartlist=null&source=opportunity&isproject=true&assettype=" + pTypeID + "&assetid=" + pID };
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + pID + "/" + pTypeID, buttons: buttons };
            var contacts = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/project-contacts/" + pTypeID + "/" + pID, buttons: buttons };
            var imagegal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var docgal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + pTypeID + "&assetid=" + pID + "&isproject=true&linkids=" + pID + "&source=opportunity" };
            var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + pTypeID + "/" + pID, iconprefix: "far" };
            var email = { icon: "envelope", name: 'Send Email', url: sendEmailUrl };
            var associate = { icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard, iconprefix: "far" };//#32431 - Remove "Save" button since contacts are directly added on "add"
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID + "?issharepermission=" + options.sharePermission + "&isassociated=" + options.associated + defaultTab };
            var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + pID + "?isproject=" + true + "&projectid=" + pID + "&projecttype=" + pTypeID };
            var associateopportunity = { icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + pTypeID + "/" + pID + "?projectid=" + pID + "&projecttype=" + pTypeID + "&sharelevel=" + options.shareLevel };
            var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + pTypeID + "/" + pID };
            var projViews;

            if (options.usestepwizard)//to show opportunity in step process
            {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [permission, preview, report, overview, associate, associateopportunity, database] : [permission];
                else
                    projViews = options.iscurrent ? [preview, associate, associateopportunity, database, report] : [report];
            }
            else {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [permission, info, overview, report, viewasset] : [permission];
                else
                    projViews = options.iscurrent ? [info, report, viewasset] : [report];
            }

            if (options.isEngagementReport) {
                if (options.isNewOpportunityView)
                    projViews = [info];
                else
                    projViews = [report, preview];
            }

            var title = "";
            var oppname = "";

            if (options.iscurrent) {

                if (options.hascontactaccess && !options.usestepwizard)
                    projViews.push(associate);

                if (options.isassociateopportunity && !options.usestepwizard)
                    projViews.push(associateopportunity);

                if (options.hasProductAccess && !options.usestepwizard) projViews.push(database);

                projViews.push(imagegal, docgal);

                if (options.hasemailsendaccess)
                    projViews.push(email);
                if (options.hasinternalplaybookaccess)
                    projViews.push(intplaybook);
            }

            projViews.push(offline);
            if (options.hasuseraccess && options.hasownershipaccess && !options.usestepwizard)
                projViews.push(ownership);

            if (options.isOpportunityAssociation) {
                projViews = [];
                if (options.usestepwizard) {
                    projViews = [preview];
                }
                else
                    projViews = [info];
            }

            title = 'Opportunity' + ' ' + projViews[0].name + '' + ' > ' + options.projecttypename + ' (<b>' + options.opportunityname + '</b>)';
            modal.show({ title: title, views: projViews });
        },
        showAssociateContact: function (pID, pTypeID, options) {
            var buttons = options.hasOpportunityEditAccess != undefined && options.hasOpportunityEditAccess ? ["save"] : [];
            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid=" + pTypeID + "&projectid=" + pID;

            if (options.isOpportunityAssociation && options.isstageclosed || options.isclosedopportunity)
                buttons = [];

            // this is added to select default tab on opportunity tab page.
            var defaultTab = "";
            if (options.defaulttab != null && options.defaulttab != '' && options.defaulttab != undefined) {
                defaultTab = "&defaulttab=" + options.defaulttab;
            }

            if (options.ismobilebrowser == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/" + pTypeID + "," + pID;
            var overview = { icon: "telescope", name: 'Opportunity Overview', url: "/manage/projectrecord/overview/" + pTypeID + "/" + pID, iconprefix: "far" };
            var info = { icon: "info-circle", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp + "?isassociated=" + options.associated, buttons: buttons };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + pTypeID + "/" + pID + "/" + "?isassociated=" + options.associated, iconprefix: "far" };
            var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + pID + "&isSmartlist=null&source=opportunity&isproject=true&assettype=" + pTypeID + "&assetid=" + pID };
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + pID + "/" + pTypeID, buttons: buttons };
            var contacts = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/project-contacts/" + pTypeID + "/" + pID, buttons: buttons };
            var imagegal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var docgal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + pTypeID + "&assetid=" + pID + "&isproject=true&linkids=" + pID + "&source=opportunity" };
            var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + pTypeID + "/" + pID, iconprefix: "far" };
            var email = { icon: "envelope", name: 'Send Email', url: sendEmailUrl };
            var associate = { icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard, iconprefix: "far" };//#32431 - Remove "Save" button since contacts are directly added on "add"
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID + "?issharepermission=" + options.sharePermission + "&isassociated=" + options.associated + defaultTab };
            var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + pID + "?isproject=" + true + "&projectid=" + pID + "&projecttype=" + pTypeID };
            var associateopportunity = { icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + pTypeID + "/" + pID + "?projectid=" + pID + "&projecttype=" + pTypeID + "&sharelevel=" + options.shareLevel };
            var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + pTypeID + "/" + pID };
            var projViews;

            if (options.usestepwizard)//to show opportunity in step process
            {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [associate, preview, report, overview, associateopportunity, database] : [associate];
                else
                    projViews = options.iscurrent ? [preview, associate, associateopportunity, database, report] : [report];
            }
            else {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [associate, info, overview, report, viewasset] : [associate];
                else
                    projViews = options.iscurrent ? [info, report, viewasset] : [report];
            }

            if (options.isEngagementReport) {
                if (options.isNewOpportunityView)
                    projViews = [info];
                else
                    projViews = [report, preview];
            }

            var title = "";
            var oppname = "";

            if (options.iscurrent) {
                if (options.hasuseraccess == true && options.sharePermission && !options.isPublic)
                    projViews.push(permission);

                if (options.isassociateopportunity && !options.usestepwizard)
                    projViews.push(associateopportunity);

                if (options.hasProductAccess && !options.usestepwizard) projViews.push(database);

                projViews.push(imagegal, docgal);

                if (options.hasemailsendaccess)
                    projViews.push(email);
                if (options.hasinternalplaybookaccess)
                    projViews.push(intplaybook);
            }

            projViews.push(offline);
            if (options.hasuseraccess && options.hasownershipaccess && !options.usestepwizard)
                projViews.push(ownership);

            if (options.isOpportunityAssociation) {
                projViews = [];
                if (options.usestepwizard) {
                    projViews = [preview];
                }
                else
                    projViews = [info];
            }

            title = 'Opportunity' + ' ' + projViews[0].name + '' + ' > ' + options.projecttypename + ' (<b>' + options.opportunityname + '</b>)';
            modal.show({ title: title, views: projViews });
        },
        showOppoOwernship: function (pID, pTypeID, options) {
            var buttons = options.hasOpportunityEditAccess != undefined && options.hasOpportunityEditAccess ? ["save"] : [];
            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid=" + pTypeID + "&projectid=" + pID;

            if (options.isOpportunityAssociation && options.isstageclosed || options.isclosedopportunity)
                buttons = [];

            // this is added to select default tab on opportunity tab page.
            var defaultTab = "";
            if (options.defaulttab != null && options.defaulttab != '' && options.defaulttab != undefined) {
                defaultTab = "&defaulttab=" + options.defaulttab;
            }

            if (options.ismobilebrowser == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/" + pTypeID + "," + pID;
            var overview = { icon: "telescope", name: 'Opportunity Overview', url: "/manage/projectrecord/overview/" + pTypeID + "/" + pID, iconprefix: "far" };
            var info = { icon: "info-circle", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp + "?isassociated=" + options.associated, buttons: buttons };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + pTypeID + "/" + pID + "/" + "?isassociated=" + options.associated, iconprefix: "far" };
            var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + pID + "&isSmartlist=null&source=opportunity&isproject=true&assettype=" + pTypeID + "&assetid=" + pID };
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + pID + "/" + pTypeID, buttons: buttons };
            var contacts = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/project-contacts/" + pTypeID + "/" + pID, buttons: buttons };
            var imagegal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var docgal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + pTypeID + "&assetid=" + pID + "&isproject=true&linkids=" + pID + "&source=opportunity" };
            var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + pTypeID + "/" + pID, iconprefix: "far" };
            var email = { icon: "envelope", name: 'Send Email', url: sendEmailUrl };
            var associate = { icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard, iconprefix: "far" };//#32431 - Remove "Save" button since contacts are directly added on "add"
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID + "?issharepermission=" + options.sharePermission + "&isassociated=" + options.associated + defaultTab };
            var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + pID + "?isproject=" + true + "&projectid=" + pID + "&projecttype=" + pTypeID };
            var associateopportunity = { icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + pTypeID + "/" + pID + "?projectid=" + pID + "&projecttype=" + pTypeID + "&sharelevel=" + options.shareLevel };
            var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + pTypeID + "/" + pID };
            var projViews;

            if (options.usestepwizard)//to show opportunity in step process
            {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [ownership, preview, report, overview, associate, associateopportunity, database] : [ownership];
                else
                    projViews = options.iscurrent ? [preview, associate, associateopportunity, database, report] : [report];
            }
            else {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [ownership, overview, info, report, viewasset, associate] : [ownership];
                else
                    projViews = options.iscurrent ? [info, report, viewasset] : [report];
            }

            if (options.isEngagementReport) {
                if (options.isNewOpportunityView)
                    projViews = [info];
                else
                    projViews = [report, preview];
            }

            var title = "";
            var oppname = "";

            if (options.iscurrent) {
                if (options.hasuseraccess == true && options.sharePermission && !options.isPublic)
                    projViews.push(permission);

                if (options.isassociateopportunity && !options.usestepwizard)
                    projViews.push(associateopportunity);

                if (options.hasProductAccess && !options.usestepwizard) projViews.push(database);

                projViews.push(imagegal, docgal);

                if (options.hasemailsendaccess)
                    projViews.push(email);
                if (options.hasinternalplaybookaccess)
                    projViews.push(intplaybook);
            }

            projViews.push(offline);

            if (options.isOpportunityAssociation) {
                projViews = [];
                if (options.usestepwizard) {
                    projViews = [preview];
                }
                else
                    projViews = [info];
            }

            title = 'Opportunity' + ' ' + projViews[0].name + '' + ' > ' + options.projecttypename + ' (<b>' + options.opportunityname + '</b>)';
            modal.show({ title: title, views: projViews });
        },
        showOppoAsset: function (pID, pTypeID, options) {
            var buttons = options.hasOpportunityEditAccess != undefined && options.hasOpportunityEditAccess ? ["save"] : [];
            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid=" + pTypeID + "&projectid=" + pID;

            if (options.isOpportunityAssociation && options.isstageclosed || options.isclosedopportunity)
                buttons = [];

            // this is added to select default tab on opportunity tab page.
            var defaultTab = "";
            if (options.defaulttab != null && options.defaulttab != '' && options.defaulttab != undefined) {
                defaultTab = "&defaulttab=" + options.defaulttab;
            }

            if (options.ismobilebrowser == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/" + pTypeID + "," + pID;
            var overview = { icon: "telescope", name: 'Opportunity Overview', url: "/manage/projectrecord/overview/" + pTypeID + "/" + pID, iconprefix: "far" };
            var info = { icon: "info-circle", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp + "?isassociated=" + options.associated, buttons: buttons };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + pTypeID + "/" + pID + "/" + "?isassociated=" + options.associated, iconprefix: "far" };
            var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + pID + "&isSmartlist=null&source=opportunity&isproject=true&assettype=" + pTypeID + "&assetid=" + pID };
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + pID + "/" + pTypeID, buttons: buttons };
            var contacts = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/project-contacts/" + pTypeID + "/" + pID, buttons: buttons };
            var imagegal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var docgal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + pTypeID + "&assetid=" + pID + "&isproject=true&linkids=" + pID + "&source=opportunity" };
            var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + pTypeID + "/" + pID, iconprefix: "far" };
            var email = { icon: "envelope", name: 'Send Email', url: sendEmailUrl };
            var associate = { icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard, iconprefix: "far" };//#32431 - Remove "Save" button since contacts are directly added on "add"
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID + "?issharepermission=" + options.sharePermission + "&isassociated=" + options.associated + defaultTab };
            var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + pID + "?isproject=" + true + "&projectid=" + pID + "&projecttype=" + pTypeID };
            var associateopportunity = { icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + pTypeID + "/" + pID + "?projectid=" + pID + "&projecttype=" + pTypeID + "&sharelevel=" + options.shareLevel };
            var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + pTypeID + "/" + pID };
            var projViews;

            if (options.usestepwizard)//to show opportunity in step process
            {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [preview, report, overview, associate, associateopportunity, database] : [report];
                else
                    projViews = options.iscurrent ? [preview, associate, associateopportunity, database, report] : [report];
            }
            else {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [viewasset, associate, info, overview, report, viewasset] : [viewasset];
                else
                    projViews = options.iscurrent ? [info, report, viewasset] : [report];
            }

            if (options.isEngagementReport) {
                if (options.isNewOpportunityView)
                    projViews = [info];
                else
                    projViews = [report, preview];
            }

            var title = "";
            var oppname = "";

            if (options.iscurrent) {
                if (options.hasuseraccess == true && options.sharePermission && !options.isPublic)
                    projViews.push(permission);

                if (options.isassociateopportunity && !options.usestepwizard)
                    projViews.push(associateopportunity);

                if (options.hasProductAccess && !options.usestepwizard) projViews.push(database);

                projViews.push(imagegal, docgal);

                if (options.hasemailsendaccess)
                    projViews.push(email);
                if (options.hasinternalplaybookaccess)
                    projViews.push(intplaybook);
            }

            projViews.push(offline); 
            if (options.hasuseraccess && options.hasownershipaccess && !options.usestepwizard)
                projViews.push(ownership);
            if (options.isOpportunityAssociation) {
                projViews = [];
                if (options.usestepwizard) {
                    projViews = [preview];
                }
                else
                    projViews = [info];
            }

            title = 'Opportunity' + ' ' + projViews[0].name + '' + ' > ' + options.projecttypename + ' (<b>' + options.opportunityname + '</b>)';
            modal.show({ title: title, views: projViews });
        },
        showOppoOflineActivity: function (pID, pTypeID, options) {
            var buttons = options.hasOpportunityEditAccess != undefined && options.hasOpportunityEditAccess ? ["save"] : [];
            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid=" + pTypeID + "&projectid=" + pID;

            if (options.isOpportunityAssociation && options.isstageclosed || options.isclosedopportunity)
                buttons = [];

            // this is added to select default tab on opportunity tab page.
            var defaultTab = "";
            if (options.defaulttab != null && options.defaulttab != '' && options.defaulttab != undefined) {
                defaultTab = "&defaulttab=" + options.defaulttab;
            }

            if (options.ismobilebrowser == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/" + pTypeID + "," + pID;
            var overview = { icon: "telescope", name: 'Opportunity Overview', url: "/manage/projectrecord/overview/" + pTypeID + "/" + pID, iconprefix: "far" };
            var info = { icon: "info-circle", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp + "?isassociated=" + options.associated, buttons: buttons };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + pTypeID + "/" + pID + "/" + "?isassociated=" + options.associated, iconprefix: "far" };
            var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + pID + "&isSmartlist=null&source=opportunity&isproject=true&assettype=" + pTypeID + "&assetid=" + pID };
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + pID + "/" + pTypeID, buttons: buttons };
            var contacts = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/project-contacts/" + pTypeID + "/" + pID, buttons: buttons };
            var imagegal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var docgal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + pTypeID + "&assetid=" + pID + "&isproject=true&linkids=" + pID + "&source=opportunity" };
            var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + pTypeID + "/" + pID, iconprefix: "far" };
            var email = { icon: "envelope", name: 'Send Email', url: sendEmailUrl };
            var associate = { icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard, iconprefix: "far" };//#32431 - Remove "Save" button since contacts are directly added on "add"
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID + "?issharepermission=" + options.sharePermission + "&isassociated=" + options.associated + defaultTab };
            var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + pID + "?isproject=" + true + "&projectid=" + pID + "&projecttype=" + pTypeID };
            var associateopportunity = { icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + pTypeID + "/" + pID + "?projectid=" + pID + "&projecttype=" + pTypeID + "&sharelevel=" + options.shareLevel };
            var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + pTypeID + "/" + pID };
            var projViews;

            if (options.usestepwizard)//to show opportunity in step process
            {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [offline, preview, report, overview, associate, associateopportunity, database] : [offline];
                else
                    projViews = options.iscurrent ? [preview, associate, associateopportunity, database, report] : [report];
            }
            else {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [offline, viewasset, associate, info, overview, report, viewasset] : [offline];
                else
                    projViews = options.iscurrent ? [info, report, viewasset] : [report];
            }

            if (options.isEngagementReport) {
                if (options.isNewOpportunityView)
                    projViews = [info];
                else
                    projViews = [report, preview];
            }

            var title = "";
            var oppname = "";

            if (options.iscurrent) {
                if (options.hasuseraccess == true && options.sharePermission && !options.isPublic)
                    projViews.push(permission);

                if (options.isassociateopportunity && !options.usestepwizard)
                    projViews.push(associateopportunity);

                if (options.hasProductAccess && !options.usestepwizard) projViews.push(database);

                projViews.push(imagegal, docgal);

                if (options.hasemailsendaccess)
                    projViews.push(email);
                if (options.hasinternalplaybookaccess)
                    projViews.push(intplaybook);
            }

            if (options.hasuseraccess && options.hasownershipaccess && !options.usestepwizard)
                projViews.push(ownership);
            if (options.isOpportunityAssociation) {
                projViews = [];
                if (options.usestepwizard) {
                    projViews = [preview];
                }
                else
                    projViews = [info];
            }

            title = 'Opportunity' + ' ' + projViews[0].name + '' + ' > ' + options.projecttypename + ' (<b>' + options.opportunityname + '</b>)';
            modal.show({ title: title, views: projViews });
        },
        showOppoDatabse: function (pID, pTypeID, options) {
            var buttons = options.hasOpportunityEditAccess != undefined && options.hasOpportunityEditAccess ? ["save"] : [];
            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid=" + pTypeID + "&projectid=" + pID;

            if (options.isOpportunityAssociation && options.isstageclosed || options.isclosedopportunity)
                buttons = [];

            // this is added to select default tab on opportunity tab page.
            var defaultTab = "";
            if (options.defaulttab != null && options.defaulttab != '' && options.defaulttab != undefined) {
                defaultTab = "&defaulttab=" + options.defaulttab;
            }

            if (options.ismobilebrowser == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/" + pTypeID + "," + pID;
            var overview = { icon: "telescope", name: 'Opportunity Overview', url: "/manage/projectrecord/overview/" + pTypeID + "/" + pID, iconprefix: "far" };
            var info = { icon: "info-circle", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp + "?isassociated=" + options.associated, buttons: buttons };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + pTypeID + "/" + pID + "/" + "?isassociated=" + options.associated, iconprefix: "far" };
            var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + pID + "&isSmartlist=null&source=opportunity&isproject=true&assettype=" + pTypeID + "&assetid=" + pID };
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + pID + "/" + pTypeID, buttons: buttons };
            var contacts = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/project-contacts/" + pTypeID + "/" + pID, buttons: buttons };
            var imagegal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var docgal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + pTypeID + "&assetid=" + pID + "&isproject=true&linkids=" + pID + "&source=opportunity" };
            var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + pTypeID + "/" + pID, iconprefix: "far" };
            var email = { icon: "envelope", name: 'Send Email', url: sendEmailUrl };
            var associate = { icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard, iconprefix: "far" };//#32431 - Remove "Save" button since contacts are directly added on "add"
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID + "?issharepermission=" + options.sharePermission + "&isassociated=" + options.associated + defaultTab };
            var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + pID + "?isproject=" + true + "&projectid=" + pID + "&projecttype=" + pTypeID };
            var associateopportunity = { icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + pTypeID + "/" + pID + "?projectid=" + pID + "&projecttype=" + pTypeID + "&sharelevel=" + options.shareLevel };
            var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + pTypeID + "/" + pID };
            var projViews;

            if (options.usestepwizard)//to show opportunity in step process
            {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [database, preview, report, overview, associate, associateopportunity] : [database];
                else
                    projViews = options.iscurrent ? [preview, associate, associateopportunity, database, report] : [report];
            }
            else {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [database, viewasset, associate, info, overview, report, viewasset] : [database];
                else
                    projViews = options.iscurrent ? [info, report, viewasset] : [report];
            }

            if (options.isEngagementReport) {
                if (options.isNewOpportunityView)
                    projViews = [info];
                else
                    projViews = [report, preview];
            }

            var title = "";
            var oppname = "";

            if (options.iscurrent) {
                if (options.hasuseraccess == true && options.sharePermission && !options.isPublic)
                    projViews.push(permission);

                if (options.isassociateopportunity && !options.usestepwizard)
                    projViews.push(associateopportunity);

                projViews.push(imagegal, docgal);

                if (options.hasemailsendaccess)
                    projViews.push(email);
                if (options.hasinternalplaybookaccess)
                    projViews.push(intplaybook);
            }

            if (options.hasuseraccess && options.hasownershipaccess && !options.usestepwizard)
                projViews.push(ownership);

            projViews.push(offline);
            if (options.isOpportunityAssociation) {
                projViews = [];
                if (options.usestepwizard) {
                    projViews = [preview];
                }
                else
                    projViews = [info];
            }

            title = 'Opportunity' + ' ' + projViews[0].name + '' + ' > ' + options.projecttypename + ' (<b>' + options.opportunityname + '</b>)';
            modal.show({ title: title, views: projViews });

        },
        showProjectAttachment: function (pID, pTypeID, options) {
            var buttons = options.hasOpportunityEditAccess != undefined && options.hasOpportunityEditAccess ? ["save"] : [];
            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid=" + pTypeID + "&projectid=" + pID;

            if (options.isOpportunityAssociation && options.isstageclosed || options.isclosedopportunity)
                buttons = [];

            // this is added to select default tab on opportunity tab page.
            var defaultTab = "";
            if (options.defaulttab != null && options.defaulttab != '' && options.defaulttab != undefined) {
                defaultTab = "&defaulttab=" + options.defaulttab;
            }

            if (options.ismobilebrowser == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/" + pTypeID + "," + pID;
            var attchement = { icon: "file", name: 'View Assets', url: "/profile/gallery/assets/" + pTypeID + "/" + pID + "/true?iswizard=true&showall=false", iconprefix: "far"};
            var overview = { icon: "telescope", name: 'Opportunity Overview', url: "/manage/projectrecord/overview/" + pTypeID + "/" + pID, iconprefix: "far" };
            var info = { icon: "info-circle", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp + "?isassociated=" + options.associated, buttons: buttons };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + pTypeID + "/" + pID + "/" + "?isassociated=" + options.associated, iconprefix: "far" };
            var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + pID + "&isSmartlist=null&source=opportunity&isproject=true&assettype=" + pTypeID + "&assetid=" + pID };
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + pID + "/" + pTypeID, buttons: buttons };
            var contacts = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/project-contacts/" + pTypeID + "/" + pID, buttons: buttons };
            var imagegal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var docgal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + pTypeID + "&assetid=" + pID + "&isproject=true&linkids=" + pID + "&source=opportunity" };
            var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + pTypeID + "/" + pID, iconprefix: "far" };
            var email = { icon: "envelope", name: 'Send Email', url: sendEmailUrl };
            var associate = { icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard, iconprefix: "far" };//#32431 - Remove "Save" button since contacts are directly added on "add"
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID + "?issharepermission=" + options.sharePermission + "&isassociated=" + options.associated + defaultTab };
            var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + pID + "?isproject=" + true + "&projectid=" + pID + "&projecttype=" + pTypeID };
            var associateopportunity = { icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + pTypeID + "/" + pID + "?projectid=" + pID + "&projecttype=" + pTypeID + "&sharelevel=" + options.shareLevel };
            var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + pTypeID + "/" + pID };
            var projViews;

            if (options.usestepwizard)//to show opportunity in step process
            {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [attchement, overview, preview, associate, associateopportunity, database, report] : [attchement];
                else
                    projViews = options.iscurrent ? [preview, associate, associateopportunity, database, report] : [report];
            }
            else {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [attchement, overview, info, report, viewasset] : [attchement];
                else
                    projViews = options.iscurrent ? [info, report, viewasset] : [report];
            }

            if (options.isEngagementReport) {
                if (options.isNewOpportunityView)
                    projViews = [overview];
                else
                    projViews = [report, preview];
            }

            var title = "";

            if (options.iscurrent) {
                if (options.hasuseraccess == true && options.sharePermission && !options.isPublic)
                    projViews.push(permission);

                if (options.hascontactaccess && !options.usestepwizard)
                    projViews.push(associate);

                if (options.isassociateopportunity && !options.usestepwizard)
                    projViews.push(associateopportunity);

                if (options.hasProductAccess && !options.usestepwizard) projViews.push(database);


                if (options.hasemailsendaccess)
                    projViews.push(email);
                if (options.hasinternalplaybookaccess)
                    projViews.push(intplaybook);
            }

            projViews.push(offline);
            if (options.hasuseraccess && options.hasownershipaccess && !options.usestepwizard)
                projViews.push(ownership);

            if (options.isOpportunityAssociation) {
                projViews = [];
                if (options.usestepwizard) {
                    projViews = [preview];
                }
                else
                    projViews = [info];
            }

            title = 'Opportunity' + ' ' + projViews[0].name + '' + ' > ' + options.projecttypename + ' (<b>' + options.opportunityname + '</b>)';
            modal.show({ title: title, views: projViews });
        },
        showOppoExecutePlay: function (pID, pTypeID, options) {
            var buttons = options.hasOpportunityEditAccess != undefined && options.hasOpportunityEditAccess ? ["save"] : [];
            var sendEmailUrl = "/communicate/newemail/0?isopportunity=true&projecttypeid=" + pTypeID + "&projectid=" + pID;

            if (options.isOpportunityAssociation && options.isstageclosed || options.isclosedopportunity)
                buttons = [];

            // this is added to select default tab on opportunity tab page.
            var defaultTab = "";
            if (options.defaulttab != null && options.defaulttab != '' && options.defaulttab != undefined) {
                defaultTab = "&defaulttab=" + options.defaulttab;
            }

            if (options.ismobilebrowser == true)
                sendEmailUrl = "/mobile/importtemplate/opportunity/" + pTypeID + "," + pID;
            var overview = { icon: "telescope", name: 'Opportunity Overview', url: "/manage/projectrecord/overview/" + pTypeID + "/" + pID, iconprefix: "far" };
            var info = { icon: "info-circle", name: 'Info', url: "/manage/project/record/" + pTypeID + "/" + pID + "/" + options.timestamp + "?isassociated=" + options.associated, buttons: buttons };
            var report = { icon: "chart-bar", name: 'Report', url: "/manage/projectrecord/report/" + pTypeID + "/" + pID + "/" + "?isassociated=" + options.associated, iconprefix: "far" };
            var viewasset = { icon: "file", name: 'View Assets', url: "/sendassets/mediaassets?linkids=" + pID + "&isSmartlist=null&source=opportunity&isproject=true&assettype=" + pTypeID + "&assetid=" + pID };
            var permission = { icon: "share-alt", name: 'Sharing', url: "/project/sharing/" + pID + "/" + pTypeID, buttons: buttons };
            var contacts = { icon: "user", name: 'Associate Account/Contacts', url: "/manage/project-contacts/" + pTypeID + "/" + pID, buttons: buttons };
            var imagegal = { icon: "file-image", name: 'Image Gallery', url: "/gallery/images/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var docgal = { icon: "file", name: 'Document Gallery', url: "/gallery/documents/" + pTypeID + "/" + pID + "/true?iswizard=true", iconprefix: "far" };
            var intplaybook = { icon: "book", name: 'Execute Play', url: "/sendassets/intplaybooks/?assettype=" + pTypeID + "&assetid=" + pID + "&isproject=true&linkids=" + pID + "&source=opportunity" };
            var ownership = { icon: "user", name: 'Ownership', url: "/manage/project-ownership/" + pTypeID + "/" + pID, iconprefix: "far" };
            var email = { icon: "envelope", name: 'Send Email', url: sendEmailUrl };
            var associate = { icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + pTypeID + "/" + pID + "?isstepprocess=" + options.usestepwizard, iconprefix: "far" };//#32431 - Remove "Save" button since contacts are directly added on "add"
            var preview = { icon: "info-circle", name: 'Info', url: "/manage/opportunity-steps/" + pTypeID + "/" + pID + "?issharepermission=" + options.sharePermission + "&isassociated=" + options.associated + defaultTab };
            var database = { icon: "database", name: 'Assign Database Records', url: "/connections/contacts/asset/" + pID + "?isproject=" + true + "&projectid=" + pID + "&projecttype=" + pTypeID };
            var associateopportunity = { icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + pTypeID + "/" + pID + "?projectid=" + pID + "&projecttype=" + pTypeID + "&sharelevel=" + options.shareLevel };
            var offline = { icon: "male", name: 'Offline Activity', url: "/manage/project-record/offline/" + pTypeID + "/" + pID };
            var projViews;

            if (options.usestepwizard)//to show opportunity in step process
            {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [intplaybook, overview, preview, associate, associateopportunity, database, report] : [intplaybook];
                else
                    projViews = options.iscurrent ? [preview, associate, associateopportunity, database, report] : [report];
            }
            else {
                if (options.isNewOpportunityView)
                    projViews = options.iscurrent ? [intplaybook, overview, info, report, viewasset] : [intplaybook];
                else
                    projViews = options.iscurrent ? [info, report, viewasset] : [report];
            }

            if (options.isEngagementReport) {
                if (options.isNewOpportunityView)
                    projViews = [overview];
                else
                    projViews = [report, preview];
            }

            var title = "";

            if (options.iscurrent) {
                if (options.hasuseraccess == true && options.sharePermission && !options.isPublic)
                    projViews.push(permission);

                if (options.hascontactaccess && !options.usestepwizard)
                    projViews.push(associate);

                if (options.isassociateopportunity && !options.usestepwizard)
                    projViews.push(associateopportunity);

                if (options.hasProductAccess && !options.usestepwizard) projViews.push(database);

                projViews.push(imagegal, docgal);

                if (options.hasemailsendaccess)
                    projViews.push(email);
            }

            projViews.push(offline);
            if (options.hasuseraccess && options.hasownershipaccess && !options.usestepwizard)
                projViews.push(ownership);

            if (options.isOpportunityAssociation) {
                projViews = [];
                if (options.usestepwizard) {
                    projViews = [preview];
                }
                else
                    projViews = [info];
            }

            title = 'Opportunity' + ' ' + projViews[0].name + '' + ' > ' + options.projecttypename + ' (<b>' + options.opportunityname + '</b>)';
            modal.show({ title: title, views: projViews });
        },
        showAssociateContactAccount: function (data) {
            var views = [{
                icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/opportunity/association/" + data.projecttypeid + "/" + data.projectid + "?isstepprocess=" + data.usestepwizard, iconprefix: "far"
            }];
            modal.show({ title: 'Opportunity' + ' ' + 'Associate Account/Contacts' + '' + ' > ' + data.projecttypename + ' (<b><i>' + data.opportunityname + '</i></b>)', views: views });
        },
        showOppoAttachment: function (data, closeCallback) {
            var views = [{
                icon: "file", name: 'View Assets', url: "/profile/gallery/assets/" + data.projecttypeid + "/" + data.projectid + "/true?iswizard=true&showall=false", iconprefix: "far"
            }];
            modal.show({ title: 'Opportunity' + ' ' + 'View Assets' + '' + ' > ' + data.projecttypename + ' (<b><i>' + data.opportunityname + '</i></b>)', views: views, closeCallback: closeCallback });
            },
        showAssociateProject: function (data, options) {
            var associateopportunity = [{ icon: "cubes", name: 'Associate Opportunities', url: "/manage/project/associate/" + options.projecttypeid + "/" + options.projectid + "?projectid=" + options.projectid + "&projecttype=" + options.projecttypeid +  "&sharelevel=" + options.shareLevel }];
            
            title = 'Opportunity Association > ' + options.projecttypename + ' (<b>' + options.opportunityname + '</b>)';
            modal.show({ title: title, views: associateopportunity });
        },
        showAddDiscountRule: function (callback, options) {
            var views = [{ icon: "", name: 'Price Discount Rule', url: "/setup/adddiscountrule?assettypeid=" + options.assetTypeId + "&assetid=" + options.assetId + "&isedit=" + options.isEdit, buttons: ["save"] }];
            modal.show({ title: 'Price Discount Rule' + options.primaryField + "", views: views, locked: true, callback: callback  });
        },
        updateProfile: function () {
            var views = [{ icon: "edit", name: 'Info', url: "/user/profile/" + getTimeStamp() + "?isplaybook=true" , buttons:["save"]}];
            modal.show({ title: 'User Profile', views: views });
        },
        activateSocialProfile: function () {
            var views = [{ icon: "edit", name: 'Info', url: "/user/profile?showtab=social&isplaybook=true", buttons:["save"] }];
            modal.show({ title: 'User Profile', views: views });
        },
        updateBusinessPlanning: function (id) {
            var views = [
                { icon: "chart-line", name: 'Planning', url: "/setup/organization/planning/" + id, buttons:["save"] },
            ];
            modal.show({ title: 'Planning', views: views });
        },
        showMDFRequests: function (options) {
            var views = [{ icon: "fa-money-bill-alt", name: 'Fund Details', url: "/manage/mdf/funds"}];
            modal.show({ title: options.title, views: views});
        },
        showSimilarDealRequest: function (options) {
            var views = [{
                icon: "", name: "", url: "/setup/leads/similarleadrequest/" + options.id + "/" + options.status + "" }];
            modal.show({ title: 'Deal Registration Approval > Similar Requests ' +'(' + options.companyname + ')', views: views });
        },
        showEmailAssetPicker: function (data,callback) {
            var views = [{ icon: "database", name: 'Record Picker', url: "/drip/email/assetpicker/" + data.id + "/" + data.isFromDrip + "/" + data.selectAssetIds, buttons: ["save"] }];
            modal.show({ title: 'Record Picker', views: views, callback: callback });
        },
        showfieldstats: function (options) {
            var views = [{ icon: "database", name: 'Contact Field Stats', url: "/setup/fields/" + options.fid + "/stats" }];
            modal.show({ title: 'Contact Field Stats (<b><i>' + options.fname + '</b></i>)', views: views });
        },
        showCustomFieldsTabSetting: function (options, callback) {
            var views = [{ icon: "database", name: 'tab setting', url: "/setup/fields/tabsetting?tabindex=" + options.tabindex + "&settingfor=" + options.cftype + "&ts="+ getTimeStamp() , buttons: ["save"] }];
            modal.show({ title: 'Setting for Tab (' + options.tabname +')', views: views, callback:callback });
        },
        showPermissionSetting: function (options, iftid) {
            var defaultPermission = options.showoptionsetting || 'all';
            var views = [{ icon: "database", name: 'Setting Permission for Field', url: `/setup/fields/fieldpermission?fieldid=${options.id}&settingfor=${options.fieldtype}&iftid=${iftid}&sharetype=${options.sharetype}&permissionSetting=${defaultPermission}`, buttons: ["save"] }];
            if (options.shareids){
                views = [{ icon: "database", name: 'Setting Permission for Field', url: `/setup/fields/fieldpermission?fieldid=${options.id}&settingfor=${options.fieldtype}&iftid=${iftid}&sharetype=${options.sharetype}&permissionSetting=${defaultPermission}&idstoshare=${options.shareids}`, buttons: ["save"] }];
            }
            modal.show({ title: 'Setting Permission for Field (' + options.fieldlabel + ')', views: views, callback: false });
        },
        showPlaybookTodoList: function (options) {
            var playbookName = options.playbookname
            var playbookid = options.playbookid
            var selectedDate = options.selecteddate
            var jsSelectedDate = new Date(selectedDate).toLocaleDateString('en-GB', {
                day: 'numeric', month: 'short', year: 'numeric'
            });
            var title = 'Playbook To-do(s) : (<b><i>' + playbookName + ' for ' + jsSelectedDate + '</i></b>)';
            var views = [{ icon: "user", url: "/internalplaybook/todolist/" + playbookid + "?selectedDate=" + selectedDate, buttons: [] }];
            modal.show({ title: title, views: views });
        },        
        showPlaybookByContact: function (options) {
            var views = [{ icon: "file", name: 'playbook', url: "/internalplaybookcrm/playbooklist/" + options.contactid + "?notadded=" + options.notadded }]
            modal.show({ title: "", views: views });
        },
        showNCCIPPlaybookUsers: function (data) {
            var param = "";
            if (data.linktoid != undefined)
                param += "?linktoid=" + data.linktoid + "&linktype=" + data.linktype + "&viewoption=" + data.viewoption + "&orgviewoption=" + data.orgviewoption + "&groupviewoption=" + data.groupviewoption + "&action=" + data.action ;
            else
                param += "?linktype=" + data.linktype + "&viewoption=" + data.viewoption + "&orgviewoption=" + data.orgviewoption + "&groupviewoption=" + data.groupviewoption + "&action=" + data.action ;

            if (typeof (data.usergroupviewoption) != "undefined" && typeof (data.usergroupviewoption) != "" && data.usergroupviewoption != null)
                param += "&usergroupviewoption=" + data.usergroupviewoption;
            if (typeof (data.usergroupid) != "undefined" && typeof (data.usergroupid) != "" && data.usergroupid != null)
                param += "&usergroupid=" + data.usergroupid;
            if (typeof (data.grouptype) != "undefined" && typeof (data.grouptype) != "" && data.grouptype != null)
                param += "&groupType=" + data.grouptype;
            if (typeof (data.selectedrange) != "undefined" && typeof (data.selectedrange) != "" && data.selectedrange != null)
                param += "&selectedrange=" + data.selectedrange;
            if (typeof (data.startdate) != "undefined" && typeof (data.startdate) != "" &&  data.startdate != null)
                param += "&startdate=" + encodeURIComponent(data.startdate);
            if (typeof (data.enddate) != "undefined" && typeof (data.enddate) != "" && data.enddate != null)
                param += "&enddate=" + encodeURIComponent(data.enddate);
            if (data.stepid != undefined)
                param += "&stepid=" + data.stepid;
            if (data.stageindex != undefined)
                param += "&stageindex=" + data.stageindex;
            if (data.personalization != undefined)
                param += "&personalization=" + data.personalization;
            if (data.iscourse != undefined)
                param += "&iscourse=" + data.iscourse;
            if (data.iscurriculum != undefined)
                param += "&iscurriculum=" + data.iscurriculum;
            if (data.isLMS != undefined)
                param += "&isLMS=" + data.isLMS;
            if (data.userGroupViewOption != undefined)
                param += "&userGroupViewOption=" + data.userGroupViewOption;
            if (data.groupType != undefined)
                param += "&groupType=" + data.groupType;
            if (data.userGroupId != undefined)
                param += "&userGroupId=" + data.userGroupId;
            if (data.source != undefined)
                param += "&source=" + data.source;
            var views = [{ icon: "user", name: name, url: "/report/playbooks/users/" + data.id + param }];
            var title = data.iscourse == true ? 'Course Usage' : 'Playbook Usage';
            title = data.iscurriculum ? 'Curriculum Usage' : title;
            title = data.personalization == parseInt("9") && !data.iscurriculum ? 'Journey Usage' : title;
            modal.show({ title: title + ' (' + data.name + ')' , views: views });
        },
        showPlaybookUsageByOrganization: function (data) {
            var param = "";
            if (data.linktoid != undefined)
                param += "?linktoid=" + data.linktoid + "&linktype=" + data.linktype + "&viewoption=" + data.viewoption + "&orgviewoption=" + data.orgviewoption + "&groupviewoption=" + data.groupviewoption + "&action=" + data.action;
            else
                param += "?linktype=" + data.linktype + "&viewoption=" + data.viewoption + "&orgviewoption=" + data.orgviewoption + "&groupviewoption=" + data.groupviewoption + "&action=" + data.action;

            if (data.stepid != undefined)
                param += "&stepid=" + data.stepid;
            if (data.personalization != undefined)
                param += "&personalization=" + data.personalization;
            if (data.iscourse != undefined)
                param += "&iscourse=" + data.iscourse;
            if (data.iscurriculum != undefined)
                param += "&iscurriculum=" + data.iscurriculum;
            if (data.isLMS != undefined)
                param += "&isLMS=" + data.isLMS;
            if (data.userGroupViewOption != undefined)
                param += "&userGroupViewOption=" + data.userGroupViewOption;
            if (data.groupType != undefined)
                param += "&groupType=" + data.groupType;
            if (data.userGroupId != undefined)
                param += "&userGroupId=" + data.userGroupId;
            if (data.organizationid != undefined)
                param += "&organizationid=" + data.organizationid;
            var views = [{ icon: "user", name: name, url: "/report/playbooks/users/" + data.templateid + param }];
            var title = data.iscourse == true ? 'Course Usage' : 'Playbook Usage';
            title = data.iscurriculum ? 'Curriculum Usage' : title;
            modal.show({ title: title + ' (' + data.name + ')', views: views });
        },
        showNCCIPPlaybook: function (data) {
            var param = "";
            if (data.linktoid != undefined)
                param += "?linktoid=" + data.linktoid + "&linktype=" + data.linktype + "&viewoption=" + data.viewoption + "&orgviewoption=" + data.orgviewoption + "&groupviewoption=" + data.groupviewoption + "&action=" + data.action ;
            else
                param += "?linktype=" + data.linktype + "&viewoption=" + data.viewoption + "&orgviewoption=" + data.orgviewoption + "&groupviewoption=" + data.groupviewoption + "&selectedrange=" + data.selectedrange + "&startdate=" + data.startdate + "&enddate=" + data.enddate + "&action=" + data.action;

            if (data.iscourse != undefined)
                param += "&iscourse=" + data.iscourse;
            if (data.iscurriculum != undefined)
                param += "&iscurriculum=" + data.iscurriculum;
            if (data.isLMS != undefined)
                param += "&isLMS=" + data.isLMS;
            if (data.userGroupViewOption != undefined)
                param += "&userGroupViewOption=" + data.userGroupViewOption;
            if (data.groupType != undefined)
                param += "&groupType=" + data.groupType;
            if (data.userGroupId != undefined)
                param += "&userGroupId=" + data.userGroupId;
            var title = data.iscourse == true ? 'Courses' : 'Playbook';
            title = data.iscurriculum ? 'Curriculum' : title;

            var views = [{ icon: "user", name: 'Playbooks', url: "/report/playbooks/playbook/" + data.id + param }];

            modal.show({ title: title+' - ' + data.name, views: views });
        },
        showLinearPlaybookSummary: function (options) {            
            var views = [
                { icon: "envelope", name: 'Info', url: "/widgets/linearplaybook/summary?templateid=" + options.id }
            ];
            modal.show({ title: 'Report-' + options.name, views: views });     
        },
        showLoginShoutOut: function (isMultipleLoginPage, isLoginPortal = false) {
            var views = [{ icon: "", name: 'Login ShoutOut', url: "/sa/announcements/loginshoutout/" + isMultipleLoginPage + "?isloginportal=" + isLoginPortal, buttons: ["save"] }];
            modal.show({ title: 'Login ShoutOut', views: views, locked: true });
        },
        showUserPlaybooks: function (options, playbookState) {
            let url = `/report/user/playbooks/${options.id}?playbookstate=${playbookState}&selectedrange=${options.selectedrange}&startdate=${options.startdate}&enddate=${options.enddate}&basedon=${options.basedon}`;

            if (options.isLMS !== undefined) 
                url += `&isLMS=${options.isLMS}`;
            if (options.personalization !== undefined) 
                url += `&personalization=${options.personalization}`;
            if (options.iscourse !== undefined) 
                url += `&iscourse=${options.iscourse}`;
            if (options.iscurriculum !== undefined) 
                url += `&iscurriculum=${options.iscurriculum}`;

            const views = [{ icon: "file", name: "Info", url }];

            modal.show({ title: options.title, views });

        },
        showOrganizationGroups: function (id, options) {
            var views = [
                { icon: "hospital", name: 'Organization Groups', url: "/organization/groups/addremove/" + id, iconprefix: "far" }
            ];
            var title = 'Organization' + ' > ' + '' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';

            modal.show({ title: title, views: views });
        },        
        showCaseCreateWizard: function (caseTypeID, caseID, options) {
            var _wizData = {
                name: 'Create Case',
                steps: [],
            };

            if (options && options["showcreatestep"] && options["showdetailsstep"]) {
                _wizData.steps.push({ name: 'Search & Create Case', url: "/manage/case-create/" + caseTypeID + "/" + caseID });
                _wizData.steps.push({ name: 'Additional Case Details', url: "/manage/case-steps/" + caseTypeID + "/" + caseID + "?iscreate=true" });
            }
            else {
                _wizData.steps.push({ name: 'Case Details', url: "/manage/case-steps/" + caseTypeID + "/" + caseID + "?iscreate=true" });
            }

            var _wizard = new wizard(_wizData);
            _wizard.show();
        },
        showCaseRecord: function (caseTypeID, caseID, options, viewOptions) {
            var views = [];
            var isStepWizard = options["isstep"];
            if (viewOptions.showinfo) {
                if (isStepWizard)
                    views.push({ icon: "info-circle", name: 'Info', url: "/manage/case-steps/" + caseTypeID + "/" + caseID + "?iscreate=false" });
                else
                    views.push({ icon: "info-circle", name: 'Info', url: "/manage/case/record/" + caseTypeID + "/" + caseID + "?iscreate=false", buttons: ["save"] });
            }
            if (viewOptions.showcontacts)
                views.push({ icon: "user-circle", name: 'Associate Account/Contacts', url: "/manage/case-contacts/" + caseTypeID + "/" + caseID, iconprefix: "far" });
            if (viewOptions.showopportunity)
                views.push({ icon: "cubes", name: 'Associate Opportunities', url: "/manage/case-opportunity/" + caseTypeID + "/" + caseID });
            if (viewOptions.showimagegallery)
                views.push({ icon: "file-image", name: 'Image Gallery', url: "/gallery/images/cases/" + caseTypeID + "/" + caseID + "/true?iswizard=true", iconprefix: "far" });
            if (viewOptions.showdocumentgallery) {
                var docUrl = "/gallery/documents/cases/" + caseTypeID + "/" + caseID + "/true?iswizard=true";
                if (viewOptions.isuploaddisable != undefined && viewOptions.isuploaddisable)
                    docUrl += "&isuploaddisable=" + viewOptions.isuploaddisable;
                views.push({ icon: "file", name: 'Document Gallery', url: docUrl, iconprefix: "far" });
            }
            var sharing = { icon: "share-alt", name: 'Sharing', url: "/case/sharing/" + caseID + "/" + caseTypeID, buttons: ["save"] }

            if (options.hasuseraccess)
                views.push(sharing);

            modal.show({ title: options.title == undefined ? 'Case Info > ' + options.casetypename + '(<b><i>' + options.subject + '</i></b>)': options.title, views: views });
        },
        showCampaignCreate: function (options) {
            var _wizdata = {
                name: 'Create Campaign',
                steps: [{ icon: "file-image", name: options.titleinfo, url: "/manage/campaigns/info/" + options.campaignid, buttons: ["save"], iconprefix: "far" }],
            };
            _wizdata.steps.push({ icon: "users", name: options.titlelinks, url: "/manage/campaigns/" + options.campaignid + "/links?modalpop=" + options.modalpop, buttons: ["next"], iconprefix: "far" });
            _wizdata.steps.push({ icon: "fas fa-fw fa-photo-video", name: options.titleassets, url: "/manage/campaigns/asset/" + options.campaignid + "?modalpop=" + options.modalpop, buttons: ["save"], iconprefix: "far" });
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showCampaignEdit: function (options) {
            var views = [];
            views.push({ icon: "external-link", name: 'Links', url: "/manage/campaigns/" + options.campaignid + "/links" });
            views.push({ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/" + options.campaignid + "/report", iconprefix: "far" });
            if (options.canedit == true || options.issiteorsuperadmin == true) {
                views.push({ icon: "info-circle", name: 'Info', url: "/manage/campaigns/info/" + options.campaignid, buttons: ["save"] });
            }
            if (options.canshare == true) {
                views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + options.campaignid + "/" + options.sharetype, buttons: ["save"] });
            }
            if (options.canedit == true) {
            views.push({ icon: "fas fa-fw fa-photo-video", name: 'Associate Assets', url: "/manage/campaigns/asset/" + options.campaignid + "", buttons: ["save"], iconprefix: "far" });
            }
            var title = 'Campaign > ' + views[0].name +' (<b><i>' + options.campaignname + '</i></b>)';
            modal.show({ title: title, views: views });
        },
        showAssociateAssetForCampaign: function (options) {
            var views = [];
            views.push({ icon: "fas fa-fw fa-photo-video", name: 'Associate Assets', url: "/manage/campaigns/asset/" + options.campaignid + "", buttons: ["save"], iconprefix: "far" });
            var title = 'Campaign > ' + views[0].name + ' (<b><i>' + options.campaignname + '</i></b>)';
            modal.show({ title: title, views: views });
        },
        showCampaignSharing: function (options) {
            var views = [];
            views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + options.campaignid + "/" + options.sharetype, buttons: ["save"] });
            views.push({ icon: "external-link", name: 'Links', url: "/manage/campaigns/" + options.campaignid + "/links" });
            views.push({ icon: "chart-bar", name: 'Report', url: "/manage/campaigns/" + options.campaignid + "/report", iconprefix: "far" });
            if (options.canedit == true || options.issiteorsuperadmin == true) {
                views.push({ icon: "info-circle", name: 'Info', url: "/manage/campaigns/info/" + options.campaignid, buttons: ["save"] });
            }
            
            var title = 'Campaign > ' + views[0].name + ' (<b><i>' + options.campaignname + '</i></b>)';
            modal.show({ title: title, views: views });
        },
        showLinkCreate: function (options) {
            var views = [];
            if (options.iscreate)
                views.push({ icon: "chart-bar", url: "/manage/campaigns/" + options.campaignid + "/campaign-track-link?isCreate=" + options.iscreate, buttons: ["save"], iconprefix: "far" });
            else
                views.push({ icon: "chart-bar", url: "/manage/campaigns/" + options.campaignid + "/campaign-track-link?isCreate=" + options.iscreate + "&id=" + options.id, iconprefix: "far" });

            modal.show({ title: options.title, views: views});
        },
        showCampaignLinksContacts: function (options) {
            var views = [{ icon: "chart-bar", url: "/manage/campaigns/" + options.campaignID + "/interestbycontact" + "?sourceid=" + options.campaignSourceID + "&format=" + options.format + "&source=" + options.source, iconprefix: "far" }];
            modal.show({ title: "Contacts", views: views });
        },
        showCampaignClicksData: function (options) {
          var views = [{ icon: "chart-bar", url: "/manage/campaigns/" + options.campaignID + "/interestbycontact" + "?sourceid=" + options.campaignSourceID + "&format=" + options.format + "&campaignid=" + options.campaignID, iconprefix: "far" }];
            modal.show({ title: "Contacts", views: views });
        },

        ShowCampaignLinksData: function (data) {
            if (data.campaignid != undefined && data.campaignid != null) {
                var views = [{ icon: "external-link", name: 'Links', url: "/manage/campaigns/" + data.campaignid + "/links?isCampaignReport=" + data.isCampaignReport }];
                var title = 'Campaign > ' + views[0].name + ' (<b><i>' + data.campaignname + '</i></b>)';
            } 
            modal.show({ title: title, views: views });
        },

        showCampaignData: function (data) {
            var views = [{
                icon: "", name: 'Campaign', url: "/manage/campaigns/report/summary?isCampaignView=" + data.isCampaignView + "&projecttypeid=" + data.projecttypeid + "&projectid=" + data.projectid
            }];

            modal.show({ title: 'Campaign', views: views });
        },
        showAllCampaignLinksData: function (data) {
            var queryString = "";
            if (data.isActiveLinks == true) {

                if (data.linkToId != undefined) {
                    queryString = "&linktoid=" + data.linkToId + "&linktype=" + data.linkType
                        + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption;
                }
                else {
                    queryString = "&linktype=" + data.linkType
                        + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption;
                }
            }
            else
            {
                if (data.linkToId != undefined) {
                    queryString = "linktoid=" + data.linkToId + "&linktype=" + data.linkType
                        + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption;
                }
                else {
                    queryString = "linktype=" + data.linkType
                        + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption;
                }
            }
            if (data.campaignID != undefined) {
                queryString += "&campaignid=" + data.campaignID;
            }
            if (data.campaignSourceID != undefined) {
                queryString += "&campaignSourceid=" + data.campaignSourceID;
            }
            if (data.userGroupId != undefined) {
                queryString += "&userGroupId=" + data.userGroupId;
            }
            if (data.organizationGroupId != undefined) {
                queryString += "&organizationGroupId=" + data.organizationGroupId;
            }
            if (data.userGroupViewOption != undefined) {
                queryString += "&userGroupViewOption=" + data.userGroupViewOption;
            }
            if (data.userGroupId != undefined) {
                queryString += "&userGroupId=" + data.userGroupId;
            }
            if (data.groupType != undefined) {
                queryString += "&groupType=" + data.groupType;
            }           
            var views = [];
            if (data.isActiveLinks == true) {

                views.push({
                    icon: "external-link", name: '', url: "/manage/campaigns/links?isActiveLinks=" + data.isActiveLinks + queryString
                });
                var title = 'Active Links';
            }
            else {

                views.push({
                    icon: "external-link", name: '', url: "/manage/campaigns/links?" + queryString
                });
                var title = 'Total Links';
            }
            modal.show({ title: title, views: views });
        },

        showCampaignLinksClicks: function (data) {

            if (data.isTotalLInkClicks == true || data.isTotalUniqueClicks == true || data.isSignUps == true || data.isUserLInkClicks == true || data.isusersourceclicks == true) {

                var queryString = "";

                if (data.linkToId != undefined) {
                    queryString = "&linktoid=" + data.linkToId + "&linktype=" + data.linkType
                        + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption;
                }
                else {
                    queryString = "&linktype=" + data.linkType
                        + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption;
                }

                if (data.campaignID != undefined) {
                    queryString += "&reportuserid=" + data.campaignID;
                }
                if (data.campaignSourceID != undefined) {
                    queryString += "&campaignSourceID=" + data.campaignSourceID;
                }
                if (data.userGroupId != undefined) {
                    queryString += "&userGroupId=" + data.userGroupId;
                }
                if (data.organizationGroupId != undefined) {
                    queryString += "&organizationGroupId=" + data.organizationGroupId;
                }
                if (data.userGroupViewOption != undefined) {
                    queryString += "&userGroupViewOption=" + data.userGroupViewOption;
                }
                if (data.userGroupId != undefined) {
                    queryString += "&userGroupId=" + data.userGroupId;
                }
                if (data.groupType != undefined) {
                    queryString += "&groupType=" + data.groupType;
                }

                var views = [];
                if (data.isTotalLInkClicks == true) {
                    views.push({
                        icon: "chart-bar", name: '', url: "/manage/campaigns/interestbycontact?isTotalLInkClicks=" + data.isTotalLInkClicks + queryString
                    });
                }
                else if (data.isTotalUniqueClicks == true) {
                    views.push({
                        icon: "chart-bar", name: '', url: "/manage/campaigns/interestbycontact?isTotalUniqueClicks=" + data.isTotalUniqueClicks + queryString
                    });
                }
                else if (data.isSignUps == true) {
                    views.push({
                        icon: "chart-bar", name: '', url: "/manage/campaigns/interestbycontact?isSignUps=" + data.isSignUps + queryString
                    });
                }
                else if (data.isUserLInkClicks == true) {
                    views.push({
                        icon: "chart-bar", name: '', url: "/manage/campaigns/interestbycontact?isUserLInkClicks=" + data.isUserLInkClicks + "&userid=" + data.userid + queryString
                    });
                }
                else {
                    views.push({
                        icon: "chart-bar", name: '', url: "/manage/campaigns/interestbycontact?isusersourceclicks=" + data.isusersourceclicks + "&userid=" + data.userid + queryString
                    });
                }
            }            
            modal.show({ title: "Contacts", views: views });
        },
        showTotalSignupContacts: function (options) {
            var views = [{ icon: "chart-bar", url: "/manage/campaigns/" + options.campaignID + "/signupcontact" + "?format=" + options.format + "&linkid=" + options.linkID, iconprefix: "far" }];
            modal.show({ title: 'Signups', views: views });
        },
        showCampaignLinksReport: function (data) {
            var views = [];
            views.push({ icon: "chart-bar", name: 'Report', url: "/manage/externaltracking/links/" + data.id + "/report?campaignID=" + data.campaignid+"" });
            if (data.isSharedCampaign == false) {
                if (data.fromsource) {
                    if (data.contact)
                        views.unshift({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact?source=true&sourceid=" + data.sourceid });
                    else
                        views.push({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact?source=true&sourceid=" + data.sourceid });
                }
                else {
                    if (data.contact)
                        views.unshift({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact" });
                    else
                        views.push({ icon: "user", name: 'Contacts', url: "/manage/externaltracking/links/" + data.id + "/interestbycontact" });
                }
            }
            if (data.canedit == true) {
                views.push({ icon: "info-circle", name: 'Info', url: "/manage/campaigns/" + data.campaignid +"/campaign-track-link?isedit=" +data.isedit+"&id="+data.id, buttons: ["save"] });
            }

            if (data.canshare == true) // need to check the sharing permission
                views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + data.id + "/" + data.sharetype + "/null", buttons: ["save"] });

            if (data.canedit == true)
            views.push({ icon: "fas fa-fw fa-photo-video", name: 'Associate Assets', url: "/manage/campaigns/asset/" + data.campaignid + "", buttons: ["save"], iconprefix: "far" });
            
            var title = views[0].name +" (<b><i> " + data.name + " </i></b>)";
            modal.show({ title: title, views: views });
        },
        showCampaignLinksAssets: function (data) {
            var views = [];
            views.push({ icon: "chart-bar", name: 'Associate Assets', url: "/manage/campaigns/asset/associate/" + data.campaignid , buttons: ["save"] });
           
            var title = views[0].name + "<b><i> (" + data.name + ")</i></b>";
            modal.show({ title: title, views: views });
        },
        showPlaybookCampaignLinks: function (options, callback) {
            var url = "/playbook/campaigns/" + options.campaignid;
            var views = [{ name: 'Campaign Link(s)', url: url, buttons: ["done"] }];
            modal.show({ title: options.title, views: views, callback: callback });
        },
        showCases: function(options) {
            var urlParam = "";
            if (options.action != undefined)
                urlParam += urlParam != "" ? "&action=" + encodeURIComponent(options.action) : "?action=" + encodeURIComponent(options.action);
            var views = [
                { icon: "", name: options.title, url: "/manage/case-records" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showDealRequests: function(options) {
            var urlParam = "";
            if (options.foldername != undefined)
                urlParam += urlParam != "" ? "&folder=" + encodeURIComponent(options.foldername) : "?folder=" + encodeURIComponent(options.foldername);
            if (options.selectedprojecttypeid != undefined)
                urlParam += urlParam != "" ? "&selectedprojecttypeid=" + options.selectedprojecttypeid : "?selectedprojecttypeid=" + options.selectedprojecttypeid;
            var views = [
                { icon: "", name: options.title, url: "/manage/leads/leadregistered" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showReferralGrid: function (options) {
            var urlParam = "";
            if (options.foldername != undefined)
                urlParam += urlParam != "" ? "&folder=" + encodeURIComponent(options.foldername) : "?folder=" + encodeURIComponent(options.foldername);
            if (options.selectedprojecttypeid != undefined)
                urlParam += urlParam != "" ? "&selectedprojecttypeid=" + options.selectedprojecttypeid : "?selectedprojecttypeid=" + options.selectedprojecttypeid;
            if (options.isHeaderShowing != null)
                urlParam += urlParam != "" ? "&isheadershowing=" + encodeURIComponent(options.isHeaderShowing) : "?isheadershowing=" + encodeURIComponent(options.isHeaderShowing);

            var views = [
                { icon: "", name: options.title, url: "/widgets/referralsgridwidget" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },

        showUserEngagementReport: function (options) {
            var urlParam = "";
            if (options.intereststatus != undefined)
                urlParam += urlParam != "" ? "&intereststatus=" + encodeURIComponent(options.intereststatus) : "?intereststatus=" + encodeURIComponent(options.intereststatus);
            if (options.date_range_index_activity != undefined)
                urlParam += urlParam != "" ? "&date_range_index_activity=" + encodeURIComponent(options.date_range_index_activity) : "?date_range_index_activity=" + encodeURIComponent(options.date_range_index_activity);
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + encodeURIComponent(options.startdate) : "?startdate=" + encodeURIComponent(options.startdate);
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
            if (options.linktoId != null)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoId : "?linktoid=" + options.linktoId;
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.grouptype != null)
                urlParam += urlParam != "" ? "&grouptype=" + options.grouptype : "?grouptype=" + options.grouptype;
            if (options.usergroupviewoption != null)
                urlParam += urlParam != "" ? "&usergroupviewoption=" + options.usergroupviewoption : "?usergroupviewoption=" + options.usergroupviewoption;
            if (options.usergroupid != null)
                urlParam += urlParam != "" ? "&usergroupid=" + options.usergroupid : "?usergroupid=" + options.usergroupid;
          
            var views = [
                { icon: "", name: options.title, url: "/widgets/custom/userengagementgrid" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },

        showRevenueData: function (options) {
            var organizationid = options.organizationid;
            var stage = options.stage;
            var foldername = options.folder;
            var views = [
                { icon: "cube", name: foldername, url: "/widgets/revenuereport?organizationid=" + organizationid + "&folder=" + foldername + "&stage=" + stage + "&format=" + options.Format + "&PeriodType=" + options.PeriodType + "&linkToID=" + options.linkToID + "&linkTypeTo=" + options.linkTypeTo  }
            ];
            modal.show({ title: options.title, views: views });
        },

        showOpportunitybymarketingRequests: function (options) {
            var urlParam = "";
            if (options.stage != undefined)
                urlParam += urlParam != "" ? "&opportunitystage=" + options.stage : "?opportunitystage=" + options.stage;
            if (options.projectTypeID != undefined)
                urlParam += urlParam != "" ? "&projecttypeid=" + options.projectTypeID : "?projecttypeid=" + options.projectTypeID;
            var views = [
                { icon: "cube", name: options.name, url: "/widgets/opportunitybymarketinggrid" + urlParam }
            ];
            modal.show({ title: options.modalTitle, views: views });
        },

        showRoutedGridData: function (options) {
            var urlParam = "";
            if (options.foldername != undefined)
                urlParam += urlParam != "" ? "&folder=" + options.foldername : "?folder=" + options.foldername;
            if (options.atdata != undefined)
                urlParam += urlParam != "" ? "&atdata=" + options.atdata : "?atdata=" + options.atdata;
            if (options.showAll != undefined)
                urlParam += urlParam != "" ? "&showAll=" + options.showAll : "?showAll=" + options.showAll;
            var views = [
                { icon: "cube", name: options.name, url: "/widgets/custom/leadroutedgrid" + urlParam }
            ];
            modal.show({ title: options.modalTitle, views: views });
        },

        showLeadEngagementReport: function (options) {
            var urlParam = "";
            if (options.intereststatus != undefined)
                urlParam += urlParam != "" ? "&intereststatus=" + encodeURIComponent(options.intereststatus) : "?intereststatus=" + encodeURIComponent(options.intereststatus);
            if (options.date_range_index_activity != undefined)
                urlParam += urlParam != "" ? "&date_range_index_activity=" + encodeURIComponent(options.date_range_index_activity) : "?date_range_index_activity=" + encodeURIComponent(options.date_range_index_activity);
                if (options.selectdate != undefined)
                    urlParam += urlParam != "" ? "&selectdate=" + encodeURIComponent(options.selectdate) : "?selectdate=" + encodeURIComponent(options.selectdate);
                    if (options.index_drp != undefined)
                        urlParam += urlParam != "" ? "&index_drp=" + encodeURIComponent(options.index_drp) : "?index_drp=" + encodeURIComponent(options.index_drp);
            if (options.issummarywidget != undefined)
                urlParam += urlParam != "" ? "&issummarywidget=" + options.issummarywidget : "?issummarywidget=" + options.issummarywidget;
            var views = [
                { icon: "", name: options.title, url: "/widgets/custom/leadengagementgrid" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showAccountEngagementReport: function (options) {
            var urlParam = "";
            if (options.intereststatus != undefined)
                urlParam += urlParam != "" ? "&intereststatus=" + encodeURIComponent(options.intereststatus) : "?intereststatus=" + encodeURIComponent(options.intereststatus);
            if (options.format != undefined)
                urlParam += urlParam != "" ? "&format=" + encodeURIComponent(options.format) : "?format=" + encodeURIComponent(options.format);
            if (options.enddate != undefined)
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
            if (options.index_drp != undefined)
                urlParam += urlParam != "" ? "&index_drp=" + encodeURIComponent(options.index_drp) : "?index_drp=" + encodeURIComponent(options.index_drp);
            if (options.issummarywidget != undefined)
                urlParam += urlParam != "" ? "&issummarywidget=" + options.issummarywidget : "?issummarywidget=" + options.issummarywidget;
            if (options.linktoid != undefined)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != undefined)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != undefined)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.groupviewoption != undefined)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.orgviewoption != undefined)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.startdate != undefined)
                urlParam += urlParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            var views = [
                { icon: "", name: options.title, url: "/widgets/custom/accountengagementgrid" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showAccountEngagementSummaryReport: function (options) {
            var urlParam = "";
            if (options.intereststatus != undefined)
                urlParam += urlParam != "" ? "&intereststatus=" + encodeURIComponent(options.intereststatus) : "?intereststatus=" + encodeURIComponent(options.intereststatus);
            if (options.format != undefined)
                urlParam += urlParam != "" ? "&format=" + encodeURIComponent(options.format) : "?format=" + encodeURIComponent(options.format);
            if (options.enddate != undefined)
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
            if (options.index_drp != undefined)
                urlParam += urlParam != "" ? "&index_drp=" + encodeURIComponent(options.index_drp) : "?index_drp=" + encodeURIComponent(options.index_drp);
            if (options.issummarywidget != undefined)
                urlParam += urlParam != "" ? "&issummarywidget=" + options.issummarywidget : "?issummarywidget=" + options.issummarywidget;
            if (options.linktoid != undefined)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != undefined)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != undefined)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.groupviewoption != undefined)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.orgviewoption != undefined)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.startdate != undefined)
                urlParam += urlParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            var views = [
                { icon: "", name: options.title, url: "/widgets/custom/accountengagementgridsummary" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showHotLeadsReport: function (options) {
            var urlParam = "";
            if (options.intereststatus != undefined)
                urlParam += urlParam != "" ? "&intereststatus=" + encodeURIComponent(options.intereststatus) : "?intereststatus=" + encodeURIComponent(options.intereststatus);
            if (options.issummarywidget != undefined)
                urlParam += urlParam != "" ? "&issummarywidget=" + options.issummarywidget : "?issummarywidget=" + options.issummarywidget;
            if (options.selectdate != undefined)
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.selectdate) : "?enddate=" + encodeURIComponent(options.selectdate);
            var views = [
                { icon: "", name: options.title, url: "/widgets/custom/accountengagementgrid" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showMDFRequestsByStage: function(options) {
            var urlParam = "";
            if (options.foldername != undefined)
                urlParam += urlParam != "" ? "&mdfstage=" + encodeURIComponent(options.foldername) : "?mdfstage=" + encodeURIComponent(options.foldername);
            var views = [
                { icon: "", name: options.title, url: "/manage/mdf/funds/" + urlParam }
            ];
            modal.show({ title: options.title, views: views });

        },
        showMDFLeadsOpportuniesByStage: function (options) {
            var urlParam = "";
            if (options.foldername != undefined)
                urlParam += urlParam != "" ? "&mdfstage=" + encodeURIComponent(options.foldername) : "?mdfstage=" + encodeURIComponent(options.foldername);
            var views = [
                { icon: "", name: options.title, url: "/widgets/statsmdfgrid/" + urlParam }
            ];
            modal.show({ title: options.title, views: views });

        },
        showEmailActivityBreakDown: function (options, callback) {
            var url = "/emails/report/breakdown?format=" + options.format + "&linktype=" + options.linkType + "&viewoption=" + options.viewOption + "&orgviewoption=" + options.orgViewOption + "&groupviewoption=" + options.groupViewOption + "&status=" + options.status;
            if (options.linkToID != null)
                url += "&linktoid=" + options.linkToID;
            if (options.startDate != undefined)
                url += "&startdate=" + options.startDate;
            if (options.endDate != undefined)
                url += "&enddate=" + options.endDate;
            if (options.selectedRange != undefined && options.selectedRange != 0)
                url += "&selectedrange=" + options.selectedRange
            var views = [{ icon: "user", name: options.name, url: url }];
            modal.show({ title: options.name, views: views, callback: callback });
        },
        showSharingPermissions: function (shareType, options) {
            var title = options.title;
            var views = [];
            views.push({ icon: "edit", name: 'Permissions', url: "/setup/sharing/permissions/" + options.id + "/" + shareType, buttons: ["save"], iconprefix: "far" });
            modal.show({ title: title, views: views });
        },
        showCheckoutDetails : function (options) {
            var strParam = '';

            if (options.userid !== undefined)
                strParam += "?userid=" + options.userid;
            if (options.redemptionid !== undefined)
                strParam += strParam != "" ? "&redemptionid=" + options.redemptionid : "?redemptionid=" + options.redemptionid;

            var views = [{ icon: "cubes", name: '{$options.info}', url: "/product/checkoutlist" + strParam, buttons: [] }];
            modal.show({ title: options.title, views: views });
        },
        viewMarketplaceOrderDetails: function (options) {
            if (options.isMyOrders == undefined){
                options.isMyOrders = false;
            }
            var views = [{ icon: "folder-open", name: 'Details', url: `/marketplace/order-details/${options.id}?showactions=${options.showactions}&ismyorders=${options.isMyOrders}`, buttons: [] }];
            modal.show({ title: "Order Summary", views: views });
        },
        showpointsredemption : function (options) {
            var views = [{ icon: "cubes", name: '{$options.info}', url: "/points/redemption/status", buttons: [] }];
            modal.show({ title: options.title, views: views });
        },
        showMarketplaceOrders: function (options) {
            var views = [{ icon: "cubes", name: '{$options.info}', url: "/marketplace/view-orders", buttons: [] }];
            modal.show({ title: options.title, views: views });
        },
        manageMarketplaceOrderItems: function (options, callback) {
            var views = [{ icon: "cubes", name: '{$options.info}', url: `/marketplace/manage-order-items/${options.id}`, buttons: ["addtoorder"] }];
            modal.show({ title: options.title, views: views, callback: callback });
        },
        showDashboardReport: function (options) {
            var strParam = "";
            if (options.persona != undefined && options.persona != null)
                strParam += strParam != "" ? "&persona=" + options.persona : "?persona=" + options.persona;
            if (options.personaOption != undefined && options.personaOption != null)
                strParam += strParam != "" ? "&personaOption=" + options.personaOption : "?personaOption=" + options.personaOption;
            var views = [{ icon: "cubes", name: '{$options.info}', url: "/report/dashboard" + strParam, buttons: [] }];
            modal.show({ title: options.title, views: views });
        },
        showApiStats: function (apiName) {
            var views = [{ icon: "cubes", name: '{$options.info}', url: "/sa/apistats/" + apiName, buttons: [] }];
            modal.show({ title: "API Performance Metrics - " + apiName, views: views });
        },
        showNavigationLayoutChanges: function (data, isMainLayout) {
            var views = [{ icon: 'route', name: '{$options.info}', url: `/sa/navigationlayoutlogscompare/${data.id}?isMainLayout=${isMainLayout}`, buttons: [] }];
            modal.show({ title: 'Portal History - Compare Versions', views: views });
        },
        showUpdatandPreviousData: function (data, isMainLayout) {
            var views = [{ icon: 'route', name: '{$options.info}', url: `/sa/updatlogsistorycompare/${data.id}`, buttons: [] }];
            modal.show({ title: 'Portal History - Compare Versions', views: views });
        },
        showAssetPickerWizard: function (data) {
            var inputStep = { name: 'input', url: "/editor/media/questionpicker/" + data.templateId  + "?isAiBridge=" + data.isbridgeai, wizardclose: true };
            var dbAssetStep = { name: 'Database', url: "/editor/media/dbassetpicker/" + data.templateId + "/" + data.pageId, wizardclose: true  };
            var opportunityStep = { name: 'opportunity', url: "/editor/media/opportunitypicker/" + data.templateId + "/" + data.pageId, wizardclose: true };
            var webinarStep = { name: 'Webinar', url: "/editor/media/webinarpicker/" + data.templateId, wizardclose: true  };
            var steps = [];
            if (data.hasQuestionnaire)
                steps.push(inputStep);
            if (data.hasDatabase)
                steps.push(dbAssetStep);
            if (data.hasOpportunityAttached)
                steps.push(opportunityStep);
            if (data.hasWebinar)
                steps.push(webinarStep);
            var _wizdata = {
                name: 'Customize Personalization Data',
                steps: steps
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showAssetPickerWizardAssets: function (data) {
            var inputStep = { name: 'input', url: "/editor/media/questionpicker/" + data.id, wizardclose: true };
            var dbAssetStep = { name: 'Database', url: "/editor/media/dbassetpicker/" + data.id + "/" + data.firstpage, wizardclose: true };
            var opportunityStep = { name: 'opportunity', url: "/editor/media/opportunitypicker/" + data.id + "/" + data.firstpage, wizardclose: true };
            var webinarStep = { name: 'Webinar', url: "/editor/media/webinarpicker/" + data.id, wizardclose: true };
            var steps = [];
            if (data.hasquestionnaire)
                steps.push(inputStep);
            if (data.usedatasource)
                steps.push(dbAssetStep);
            if (data.UseProjectSource)
                steps.push(opportunityStep);
            if (data.hasWebinar)
                steps.push(webinarStep);
            var url = "/communicate/email/0?emailtemplateid=" + data.id +"&isstepprocess=true";
            if (data.linkids != null && data.linkids != '' && data.linkids != 'null' && (data.isShownInModal || data.isUserGrid))
                url += "&linkids=" + data.linkids + "&isuser=" + data.isUserGrid + "&ispartner=" + data.ispartner + "&issmartlist=" + data.isSmartlist + "&isContactcompany=" + data.isContactcompany;
            var SendEmailStep = { icon: "database", name: 'Send Email', url: url, buttons: ["finish"] };
            steps.push(SendEmailStep);
            var _wizdata = {
                name: 'Customize Personalization Data',
                steps: steps
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showUserTaskGridData: function (options) {
            var strParam = "";
            if (options.tasktype != undefined && options.tasktype != null)
                strParam += strParam != "" ? "&tasktype=" + options.tasktype : "?tasktype=" + options.tasktype;
            if (options.taskyear != undefined && options.taskyear != null)
                strParam += strParam != "" ? "&taskyear=" + options.taskyear : "?taskyear=" + options.taskyear;
            if (options.linktype != undefined && options.linktype != null)
                strParam += strParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.status != undefined && options.status != null)
                strParam += strParam != "" ? "&status=" + options.status : "?status=" + options.status;
            var views = [{ icon: "", name: options.title, url: "/widgets/cutom/tasktodosgrid" + strParam, buttons: [] }];
            modal.show({ title: options.title, views: views });
        },        
        showTodosDetails: function (options) {
            var strParam = "";
            if (options.todoid != undefined && options.todoid != null)
                strParam += strParam != "" ? "&todoid=" + options.todoid : "?todoid=" + options.todoid;            
            if (options.linktype != undefined && options.linktype != null)
                strParam += strParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.userid != undefined && options.userid != null)
                strParam += strParam != "" ? "&userid=" + options.userid : "?userid=" + options.userid;
            if (options.eventtype != undefined && options.eventtype != null)
                strParam += strParam != "" ? "&eventtype=" + options.eventtype : "?eventtype=" + options.eventtype;
            if (options.isbutton)
                var views = [{ icon: "", name: options.title, url: "/widgets/cutom/tasktodosdetail" + strParam, buttons: ["done"] }];
            else
                var views = [{ icon: "", name: options.title, url: "/widgets/cutom/tasktodosdetail" + strParam, buttons: [] }];
            modal.show({ title: options.title, views: views });
        },
        showLeadroutingRanking: function (options) {
            var views = [{ icon: "users", name: options.name, url: "/setup/leadrouting/ranking/" + options.id, buttons: ["save"] }];
            modal.show({ title: 'Reorder Ranking and/or provide Weighted', views: views });
        },
        showSelfServev5: function (options, closeCallback) {
            var userinfo = { name: options.user, url: "/newselfserve/user/v5" }
            var companyinfo = { name: options.company, url: "/newselfserve/company/v5" }
            var organizationinfo = { name: options.organization, url: "/newselfserve/organization/v5" }
            var trackinginfo = { name: options.tracking, url: "/newselfserve/tracking/v5" }
            var steps;
            if (options.hasorganizationprofileaccess == true && options.hasorganizationaccess == true && options.hascompanyaccess == true && options.cancreateexternalsites == true) {
                steps = [userinfo, companyinfo, organizationinfo, trackinginfo]
            }
            else if (options.hascompanyaccess == true && options.hasorganizationaccess == false && options.cancreateexternalsites == true) {
                steps = [userinfo, companyinfo, trackinginfo]
            }
            else if (options.hasorganizationprofileaccess == true && options.hasorganizationaccess == true && options.hascompanyaccess == false && options.cancreateexternalsites == true) {
                steps = [userinfo, organizationinfo, trackinginfo]
            }
            else if (options.hasorganizationprofileaccess == true && options.hasorganizationaccess == true && options.hascompanyaccess == true && options.cancreateexternalsites == false) {
                steps = [userinfo, organizationinfo, companyinfo]
            }
            else if (options.hasorganizationprofileaccess == true && options.hasorganizationaccess == true && options.hascompanyaccess == false && options.cancreateexternalsites == false) {
                steps = [userinfo, organizationinfo]
            }
            else if (options.hasorganizationaccess == false && options.hascompanyaccess == true && options.cancreateexternalsites == false) {
                steps = [userinfo, companyinfo]
            }
            else if (options.hasorganizationaccess == false && options.hascompanyaccess == false && options.cancreateexternalsites == true) {
                steps = [userinfo, trackinginfo]
            }
            else {
                steps = [userinfo]
            }
            var _wizdata = {
                name: options.name,
                closeaction:closeCallback,
                steps: steps
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        contactStatsEditCallBack: function (options, callback) {
            var views = [
                { icon: "database", name: "", url: "/connections/contact/" + options.contactid, buttons: ["save"] }
            ];
            modal.show({ title: 'Modify Contact', views: views, callback: callback });
        },
        showleadsgriddata: function (options) {
            var urlParam = "";
            if (options.isOldLeads != undefined)
                urlParam += urlParam != "" ? "&isOldLeads=" + options.isOldLeads : "?isOldLeads=" + options.isOldLeads;
            if (options.selectedrange != undefined)
                urlParam += urlParam != "" ? "&format=" + options.selectedrange : "?format=" + options.selectedrange;
            if (options.noofdays != undefined)
                urlParam += urlParam != "" ? "&noofdays=" + options.noofdays : "?noofdays=" + options.noofdays;
            var views = [
                { icon: "", name: options.title, url: "/widgets/leadsgriddata" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showParterOrgReport: function (options) {
            var urlParam = "";
            if (options.ispartnerscore != undefined)
                urlParam += urlParam != "" ? "&ispartnerscore=" + options.ispartnerscore : "?ispartnerscore=" + options.ispartnerscore;
            if (options.intereststatus != undefined)
                urlParam += urlParam != "" ? "&intereststatus=" + encodeURIComponent(options.intereststatus) : "?intereststatus=" + encodeURIComponent(options.intereststatus);
            if (options.folder != undefined)
                urlParam += urlParam != "" ? "&folder=" + options.folder : "?folder=" + options.folder;
             if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + options.enddate : "?enddate=" + options.enddate;
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.ispartnercertificationscoring!=undefined && options.ispartnercertificationscoring != null)
                urlParam += urlParam != "" ? "&ispartnercertificationscoring=" + options.ispartnercertificationscoring : "?ispartnercertificationscoring=" + options.ispartnercertificationscoring;
            if (options.linktype != undefined)
                urlParam += "&linktype=" + options.linktype;
            if (options.format != undefined)
                urlParam += "&format=" + options.format;
            if (options.isreportactivity != undefined)
                urlParam += "&isreportactivity=" + options.isreportactivity;
            if (options.selectedrange != undefined)
                urlParam += "&selectedrange=" + options.selectedrange;
            if (options.engagementlevel != undefined)
                urlParam += "&engagementlevel=" + options.engagementlevel;
            if (options.leads != undefined)
                urlParam += "&leads=" + options.leads;
            if (options.opportunity != undefined)
                urlParam += "&opportunity=" + options.opportunity;
            if (options.isdashboard != undefined)
                urlParam += "&isdashboard=" + options.isdashboard;
            var views = [
                { icon: "", name: options.title, url: "/setup/partnerorganizationreport" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showUserRep: function (options) {
            var urlParam = "";
            if (options.IsPartnerEngagement != undefined)
                urlParam += urlParam != "" ? "&IsPartnerEngagement=" + options.IsPartnerEngagement : "?IsPartnerEngagement=" + options.IsPartnerEngagement;
            if (options.intereststatus != undefined)
                urlParam += urlParam != "" ? "&intereststatus=" + options.intereststatus : "?intereststatus=" + options.intereststatus;
            if (options.folder != undefined)
                urlParam += urlParam != "" ? "&folder=" + options.folder : "?folder=" + options.folder;
            var views = [
                { icon: "", name: options.title, url: "/setup/users/list" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showContactNotificationPopV5: function (id, requestId) {
            var views = [{ icon: "list", name: "list-edit", url: "/connections/notification/v5/" + id + "?requestId=" + requestId, buttons: ["done"] }];
            modal.show({ title: 'Notification Message', views: views });
        },
        showAnnouncementDetail: function (data) {
            var views = [
                { icon: "", name: 'Announcements', url: "widgets/announcementmodal?annid=" + data.id + "&isdesc=" + data.isdesc }
            ];
            modal.show({ title: 'Announcements' + ' </br> <p>New features, bug fixes and content you might have missed</p>', views: views });
        },
        showFeedSettings: function (data) {
            var views = [{ icon: "", name: 'Track Sites', url: "widgets/feed/settings", buttons: ["save"] }];
            modal.show({ title: data.isuser ? 'Activity' : 'Track Sites', views: views });
        },
        showNotifactionReadAlert: function (data) {
            var views = [{ icon: "", name: 'Read', url: "notifications/alert", buttons: ["yes"] }];
            modal.show({ title: "", views: views });
        },
        showNotificationDeleteSettingv5: function () {
            var views = [{ icon: "list", name: "list-edit", url: "/connections/notificationdelete/v5", buttons: ["save"] }];
            modal.show({ title: 'Notification Delete Setting', views: views });
        },
        showCoursesForUser: function (data) {
            var param = "";
            if (data.action != undefined)
                param += "?action=" + data.action;
            if (data.personalization != undefined)
                param += "&personalization=" + data.personalization;

            var views = [{ icon: "user", name: 'Playbooks', url: "/report/courses/user-wise/" + data.id + param }];

            var title = data.iscourse == true ? 'Courses' : 'Playbook';
            modal.show({ title: title + ' - ' + data.name, views: views });
        },
        showCurriculumForUser: function (data) {
            var param = "";
            if (data.action != undefined)
                param += "?action=" + data.action;
            if (data.personalization != undefined)
                param += "&personalization=" + data.personalization;

            var views = [{ icon: "user", name: 'Playbooks', url: "/report/curriculum/user-wise/" + data.id + param }];

            var title = data.iscurriculum == true ? 'Curriculum':'Courses';
            modal.show({ title: title + ' - ' + data.name, views: views });
        },
        showEditImage: function (options,callback) {
            var views = [{ icon: "", name: 'Image Properties', url: "/designeditor/" + options.templateid + "/imageproperties/" + options.objid, buttons: ["save"] }];
            modal.show({ title: 'Image Properties', views: views, callback: callback });
        },
        showCaseModel: function (caseTypeID, caseTypeName, caseTitle) {
            var views = [
                { icon: "cubes", name: 'Info', url: "/manage/case/record/" + caseTypeID + "/0", buttons: ["save"] },
            ];
            modal.show({ title: caseTitle + '(<b>' + caseTypeName + '</b>)', views: views });
        }, 
        showFormContainerProperties: function () {
            var views = [
                { icon: "database", name: "", url: "/designeditor/formproperties", buttons: ["save"] }
            ];
            modal.show({ title: 'Form Submission Options', views: views });
        },
        showAllOrgUserReport: function (options) {
            var urlParam = "";
            if (options.IsPartnerEngagement != undefined)
                urlParam += urlParam != "" ? "&IsPartnerEngagement=" + options.IsPartnerEngagement : "?IsPartnerEngagement=" + options.IsPartnerEngagement;
            if (options.folder != undefined)
                urlParam += urlParam != "" ? "&folder=" + options.folder : "?folder=" + options.folder;
            if (options.linktoid != undefined)
                urlParam += "&linktoid=" + options.linktoid;
            if (options.viewoption != undefined)
                urlParam += "&viewoption=" + options.viewoption;
            if (options.linktype != undefined)
                urlParam += "&linktype=" + options.linktype;
            if (options.orgviewoption != undefined)
                urlParam += "&orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != undefined)
                urlParam += "&groupviewoption=" + options.groupviewoption;
            if (options.currentuser != undefined)
                urlParam += "&currentuser=" + options.currentuser;
            if (options.format != undefined)
                urlParam += "&format=" + options.format;
            if (options.isreportactivity != undefined)
                urlParam += "&isreportactivity=" + options.isreportactivity;
            if (options.selectedrange != undefined)
                urlParam += "&selectedrange=" + options.selectedrange;
            if (options.isengagementreport != undefined)
                urlParam += "&isengagementreport=" + options.isengagementreport;
            if (options.ispartnerreport != undefined)
                urlParam += "&ispartnerreport=" + options.ispartnerreport;
            if (options.engagementlevel != undefined)
                urlParam += "&engagementlevel=" + options.engagementlevel;
            var views = [
                { icon: "", name: options.title, url: "/setup/Loggedinusers-list" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        }, showPassCertificationsReport: function (options) {
            var urlParam = "";
            if (options.folder != undefined)
                urlParam += urlParam != "" ? "&folder=" + options.folder : "?folder=" + options.folder;
            if (options.isreportactivity != undefined)
                urlParam += urlParam != "" ? "&isreportactivity" + options.isreportactivity : "?isreportactivity=" + options.isreportactivity;
            if (options.linktoid != undefined)
                urlParam += "&linktoid=" + options.linktoid;
            if (options.viewoption != undefined)
                urlParam += "&viewoption=" + options.viewoption;
            if (options.linktype != undefined)
                urlParam += "&linktype=" + options.linktype;
            if (options.orgviewoption != undefined)
                urlParam += "&orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != undefined)
                urlParam += "&groupviewoption=" + options.groupviewoption;
            var views = [
                { icon: "", name: options.title, url: "/report/certificationachivedreport" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showParterDealReport: function (options) {
            var urlParam = "";
            if (options.IsPartnerEngagement != undefined)
                urlParam += urlParam != "" ? "&IsPartnerEngagement=" + options.IsPartnerEngagement : "?IsPartnerEngagement=" + options.IsPartnerEngagement;
            if (options.folder != undefined)
                urlParam += urlParam != "" ? "&folder=" + options.folder : "?folder=" + options.folder;
            var views = [
                { icon: "", name: options.title, url: "/manage/leads/leadregistered" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showParterOpportunityReport: function (options) {
            var urlParam = "";
            if (options.ispartneractivity != undefined)
                urlParam += urlParam != "" ? "&ispartneractivity=" + options.ispartneractivity : "?ispartneractivity=" + options.ispartneractivity;
            if (options.folder != undefined)
                urlParam += urlParam != "" ? "&folder=" + options.folder : "?folder=" + options.folder;
            var views = [
                { icon: "", name: options.title, url: "/manage/opportunity-records" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },

        showCampaignOpportunity: function (data) {

            if (data.isCampaignReport == true) {
                var queryString = "";

                if (data.linkToId != undefined) {
                    queryString = "&linktoid=" + data.linkToId + "&linktype=" + data.linkType
                        + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption;
                }
                else {
                    queryString = "&linktype=" + data.linkType
                        + "&viewoption=" + data.viewOption + "&orgviewoption=" + data.orgViewOption + "&groupviewoption=" + data.groupViewOption;
                }

                if (data.campaignID != undefined) {
                    queryString += "&campaignid=" + data.campaignID;
                }
                if (data.campaignSourceID != undefined) {
                    queryString += "&campaignSourceid=" + data.campaignSourceID;
                }
                if (data.userGroupId != undefined) {
                    queryString += "&userGroupId=" + data.userGroupId;
                }
                if (data.organizationGroupId != undefined) {
                    queryString += "&organizationGroupId=" + data.organizationGroupId;
                }
                if (data.userGroupViewOption != undefined) {
                    queryString += "&userGroupViewOption=" + data.userGroupViewOption;
                }
                if (data.userGroupId != undefined) {
                    queryString += "&userGroupId=" + data.userGroupId;
                }
                if (data.groupType != undefined) {
                    queryString += "&groupType=" + data.groupType;
                }
                var views = [];
                views.push({
                    icon: "", name: 'Opportunity', url: "/manage/opportunity-records?isCampaignReport=" + data.isCampaignReport + queryString
                });

                modal.show({ title: 'Opportunities', views: views });
            }
        },
        showassetscoredata: function (options) {
            var urlParam = "";
            if (options.isAssetscore != undefined)
                urlParam += urlParam != "" ? "&isAssetscore=" + options.isAssetscore : "?isAssetscore=" + options.isAssetscore;
            if (options.intereststatus != undefined)
                urlParam += urlParam != "" ? "&intereststatus=" + options.intereststatus : "?intereststatus=" + options.intereststatus;
            var views = [
                { icon: "", name: options.title, url: "/widgets/assetscorereport" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },        
        showNewCampaigns: function (reportData) {
            var views = [
                { icon: "", name: 'Info', url: "/newcampaigns/reports"}
            ];
            modal.show({ title: reportData.title, views: views });
        },
        showActiveProspects: function (reportData) {
            var views = [
                { icon: "", name: 'Info', url: "/activeprospects/reports"}
            ];
            modal.show({ title: reportData.title, views: views });
        },
        showLandingPages: function (callback) {
            var views = [
                { icon: "", name: 'Info', url: "/manage/campaigns/landingpage?selection=true", buttons: ["attach"]}
            ];
            modal.show({ title: "Select Form", views: views, preventclose: false, callback: callback });
        },
        showActiveAccounts: function (reportData) {            
            var views = [
                { icon: "", name: 'Info', url: "/activeaccounts/reports" }
            ];
            modal.show({ title: reportData.title, views: views });
        },
        showDealRequestsforUserReport: function (options) {
            var urlParam = "";
            options.isreportactivity = options.isreportactivity != undefined ? options.isreportactivity : false;
            if (options.isreportactivity != undefined)
                urlParam += urlParam != "" ? "&isreportactivity=" + options.isreportactivity : "?isreportactivity=" + options.isreportactivity;
            if (options.linktoid != undefined)
                urlParam += "&linktoid=" + options.linktoid;
            if (options.viewoption != undefined)
                urlParam += "&viewoption=" + options.viewoption;
            if (options.linktype != undefined)
                urlParam += "&linktype=" + options.linktype;
            if (options.orgviewoption != undefined)
                urlParam += "&orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != undefined)
                urlParam += "&groupviewoption=" + options.groupviewoption;
            if (options.currentuser != undefined)
                urlParam += "&currentuser=" + options.currentuser;
            if (options.format != undefined)
                urlParam += urlParam != "" ? "&format=" + encodeURIComponent(options.format) : "?format=" + encodeURIComponent(options.foldername);
            if (options.selectedrange != undefined)
                urlParam += "&selectedrange=" + options.selectedrange;
            if (options.foldername != undefined)
                urlParam += urlParam != "" ? "&folder=" + encodeURIComponent(options.foldername) : "?folder=" + encodeURIComponent(options.foldername);
            if (options.isroireport != null)
                urlParam += urlParam != "" ? "&isroireport=" + encodeURIComponent(options.isroireport) : "?isroireport=" + encodeURIComponent(options.isroireport);
            if (options.type != null)
                urlParam += urlParam != "" ? "&type=" + encodeURIComponent(options.type) : "?type=" + encodeURIComponent(options.type);
            if (options.ismdf != null)
                urlParam += urlParam != "" ? "&ismdf=" + encodeURIComponent(options.ismdf) : "?ismdf=" + encodeURIComponent(options.ismdf);
            if (options.ismdfattachment != null)
                urlParam += urlParam != "" ? "&ismdfattachment=" + encodeURIComponent(options.ismdfattachment) : "?ismdfattachment=" + encodeURIComponent(options.ismdfattachment);
            var views = [
                { icon: "", name: options.title, url: "/report/leadregisteredreport" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showTotalLandingPages: function (options) {
            var urlParam = "";
            var url = "";
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + options.enddate : "?enddate=" + options.enddate;
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.pages != null)
                urlParam += urlParam != "" ? "&pages=" + options.pages : "?pages=" + options.pages;
            if (options.pages != null && options.pages == "activepages") {
                url = "/widgets/custom/landingactivepages/" + urlParam
            }
            else {
                url="/widgets/custom/landingpages/" + urlParam
            }

            var views = [
                { icon: "", name: options.title, url: url}
            ];
            modal.show({ title: options.title, views: views });

        },     
        showEmailReportsWidgets: function (options) {
            var urlParam = "";
            var url = "";
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + options.enddate : "?enddate=" + options.enddate;
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.pages != null)
                urlParam += urlParam != "" ? "&pages=" + options.pages : "?pages=" + options.pages;
            url = "/widgets/custom/emailreportgrid" + urlParam
            var views = [
                { icon: "", name: options.title, url: url }
            ];
            modal.show({ title: options.title, views: views });
        },
        showSocialDripPages: function (options) {
            var urlParam = "";
            var url = "";
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + options.enddate : "?enddate=" + options.enddate;
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.filetype != null)
                urlParam += urlParam != "" ? "&filetype=" + options.filetype : "?filetype=" + options.filetype;
            if (options.pages != null)
                urlParam += urlParam != "" ? "&pages=" + options.pages : "?pages=" + options.pages;

            url = "/widgets/custom/socialdrip" + urlParam;
            var views = [
                { icon: "", name: options.title, url: url }
            ];
            modal.show({ title: options.title, views: views });

        },
        showFacebookPage: function (options) {                        
            url = "/widgets/custom/showFacebookPage?siteid=" + options.sites[0] +
                "&linktoid=" + options.linktoid +
                "&linktype=" + options.linktype +
                "&viewoption=" + options.viewoption +
                "&orgviewoption=" + options.orgviewoption +
                "&groupviewoption=" + options.groupviewoption +
                "&selectedrange=" + options.selectedrange +
                "&startdate=" + options.startdate +
                "&enddate=" + options.enddate;
            var views = [
                { icon: "", name: options.title,url: url }
            ];
            modal.show({ title: options.title,  views: views });
        },
        showLeadsPages: function (options) {
            var urlParam = "";
            var url = "";
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + options.enddate : "?enddate=" + options.enddate;
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.pages != null)
                urlParam += urlParam != "" ? "&pages=" + options.pages : "?pages=" + options.pages;

            url = "/widgets/custom/leadspage" + urlParam;
            var views = [
                { icon: "", name: options.title, url: url }
            ];
            modal.show({ title: options.title, views: views });

        },       
        showOverviewPages: function (options) {
            var urlParam = "";
            var url = "";
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + options.enddate : "?enddate=" + options.enddate;
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.projecttypeid != null)
                urlParam += urlParam != "" ? "&projecttypeid=" + options.projecttypeid : "?pprojecttypeidages=" + options.pages;
            if (options.oppstage != null)
                urlParam += urlParam != "" ? "&oppstage=" + options.oppstage : "?oppstage=" + options.oppstage;            
            url = "/widgets/custom/overviewopportunityrecords" + urlParam;
            var views = [
                { icon: "", name: options.title, url: url }
            ];
            modal.show({ title: options.title, views: views });

        },
        showTotalDealsConvertedPages: function (options) {
            var urlParam = "";
            var url = "";
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + options.enddate : "?enddate=" + options.enddate;
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            url = "/widgets/custom/totaldealsconverted" + urlParam;
            var views = [
                { icon: "", name: options.title, url: url }
            ];
            modal.show({ title: options.title, views: views });

        },
        showPlaybookPages: function (options) {
            var urlParam = "";
            var url = "";
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + options.enddate : "?enddate=" + options.enddate;
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.pages != null)
                urlParam += urlParam != "" ? "&pages=" + options.pages : "?pages=" + options.pages;

            url = "/widgets/custom/playbookgrid" + urlParam;
            var views = [
                { icon: "", name: options.title, url: url }
            ];
            modal.show({ title: options.title, views: views });

        },
        showAccountPermission: function (options) {
            var views = [];
            views.push({ icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + options.id + "/" + options.sharetype + "/" + options.shareids, buttons: ["save"] });
            var title = "";
            if (options.name != null || options.name != undefined)
                title = 'Account > ' + views[0].name + ' (<b><i>' + options.name + '</i></b>)';
            else
                title = 'Account > ' + '(<b><i>' + views[0].name + '</i></b>)';
            modal.show({ title: title, views: views });
        },
        showSmartListPreview: function (id, options, option) {
            $.extend({
                customize: false,
                status: 1,
                hasUserViewAccess: false
            }, options);

            var smartlistviews = [];
            var preview = { icon: "image", name: option.preview, url: "/connections/list/" + id + "/preview/" + getTimeStamp() + "?smart=true&isuser=" + options.isuser + "&type=" + option.isCompanyUserList, iconprefix: "far" };

            if (option.listActivity == option.companyUserList)
                smartlistviews = [preview];
            else if (option.listActivity == option.organizationList) {
                smartlistviews = [preview];
            }
            var title = "";
            if (option.status = 3 && option.listActivity == option.companyUserList)
                title = 'Company User Lists' + " > " + option.preview + "";
            else if (option.listActivity == option.organizationList)
                title = title = 'Organization Lists' + " > " + option.preview + "";
            else
                title = options.status == 1 ? 'Smart List' + " > Contact " + option.preview + "" : 'User Smart List' + " > " + option.preview + "";

            if (option.listActivity == option.organizationList)
                modal.show({ title: title + " (<b><i>" + options.name + "</b></i>)", views: smartlistviews });
            else
                modal.show({ title: title + " (<b>" + options.name + "</b>)", views: smartlistviews });

        },
        showAccountEngagementgriddata: function (options) {
            var urlParam = "";
            if (options.intereststatus != undefined)
                urlParam += urlParam != "" ? "&intereststatus=" + encodeURIComponent(options.intereststatus) : "?intereststatus=" + encodeURIComponent(options.intereststatus);
            if (options.format != undefined)
                urlParam += urlParam != "" ? "&format=" + encodeURIComponent(options.format) : "?format=" + encodeURIComponent(options.format);
            if (options.enddate != undefined)
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
            if (options.index_drp != undefined)
                urlParam += urlParam != "" ? "&index_drp=" + encodeURIComponent(options.index_drp) : "?index_drp=" + encodeURIComponent(options.index_drp);
            if (options.issummarywidget != undefined)
                urlParam += urlParam != "" ? "&issummarywidget=" + options.issummarywidget : "?issummarywidget=" + options.issummarywidget;
            var views = [
                { icon: "", name: options.title, url: "/widgets/custom/accountengagementgrid" + urlParam }

            ];
            modal.show({ title: options.title, views: views });
        },
        showCertificationData: function (options) {
            var urlParam = "";
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + options.enddate : "?enddate=" + options.enddate;
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.usergroupviewoption != null)
                urlParam += urlParam != "" ? "&usergroupviewoption=" + options.usergroupviewoption : "?usergroupviewoption=" + options.usergroupviewoption;
            if (options.grouptype != null)
                urlParam += urlParam != "" ? "&grouptype=" + options.grouptype : "?grouptype=" + options.grouptype;
            if (options.type != null)
                urlParam += urlParam != "" ? "&type=" + options.type : "?type=" + options.type;
            var views = [{
                icon: "", name: "Certifications", url: "widgets/partnercertificationscores/certification" + urlParam, iconprefix: ""
            }
            ];
            modal.show({ title: options.title, views: views });
        },
        showNewTaskWizard: function (id, options) {
            if (options.type != 'User') {
                $.extend({
                    status: 1
                })
                var info = { name: 'Info', url: "/business/planning/task/info/" + id };
                var enablementtools = { name: 'Enablement Tools', url: "/business/planning/task/enablement/tools/" + id }
                var sharing = { icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + id + "/" + options.sharetype, buttons: ["save"] }

                var steps = [info, enablementtools, sharing];

                var name = 'Create New Task';

                var _wizdata = {
                    name: name,
                    steps: steps,
                    isCreate: true
                };

                var _wizard = new wizard(_wizdata);
                _wizard.show();
            }
            else {
                var views = [];
                var info = { icon: "user", name: 'Info', url: "/business/planning/task/" + id + "/info", buttons: ["save", "cancel"] }

                views.push(info);

                modal.show({ title: 'Create List', views: views });
            }
        },
        showBusinessPlanningTaskCreate: function (data) {
            $.extend({
                iscreate: false
            }, data);
            var views = [{ icon: "", name: "New Task", url: "/businessplanning/edit/" + data.id + "?iscreate=" + data.iscreate, buttons: ["save"] }];
            var title = data.iscreate ? 'Task Manager > New Activity' : 'Task Manager > ' + data.name;
            modal.show({ title: title, views: views });
        },
        showOrganizationPlanner: function (year, quarter) {
            var views = [{ icon: "", name: '', url: "/businessplanning/organizations?year=" + year + "&quarter=" + quarter }];
            modal.show({ title: 'Add Business Plan', views: views });
        },
    
        showTiers: function (options) {
            var views = [
                { icon: "users", name: 'Tier(s)', url: "/setup/tiers/" + options.id +"?partners="+options.partners},
                { icon: "info-circle", name: 'Info', url: "/setup/tiergroup/" + options.id + "/info", buttons: ["save"] },
                { icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + options.id + "/" + options.sharetypeid + "/null?iscompanyuserlist=" + options.isCompanyUserList, buttons: ["save"] } //TYPE_TIER:3000
                //{ icon: "user", name: 'Goals', url: "/setup/organization/goal/" + options.id + "?istier=true" }
            ]

            var title = options.title + " > (<b><i>" + options.name + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        showTier: function (options) {
            var views = [
                { icon: "user", name: 'Tier(s)', url: "/setup/tiers/" + options.id + "/" + options.tierid + "/info", buttons: ["save"] },
            ] 
            modal.show({ title: options.title, views: views });
        },
        showTierStatus: function (options) {
            var views = [
                { icon: "user", name: 'Tier(s)', url: "/setup/tiers/" + options.id + "/status"},
            ]
            modal.show({ title: "Organization Status", views: views });
        },
        showTierGroups: function (id, options) {
            var info = { icon: "user", name: 'Tier(s)', url: "/setup/tiergroup/" + id + "/info", buttons: ["done"] };
            var share = { icon: "share-alt", name: 'Sharing', url: "/setup/sharing/permissions/" + id + "/" + options.sharetypeid  + "/null?iscompanyuserlist=" + options.isCompanyUserList, buttons: ["save"] };
            var _wizdata = {
                name: 'Tier(s)',
                steps: [info, share]
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showInsight: function (options) {
            var views = [
                { icon: "user", name: 'Insight', url: "/setup/tiergroup/" + options.id + "/insight" }
            ]
            var title = options.title + " > " + "" + views[0].name + " (<b><i>" + options.name + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        createTier: function (groupID) {
            var views = [
                { icon: "user", name: 'Tier(s)', url: "/setup/tiers/" + groupID + "/0/info?isedit=false", buttons: ["save"] }
            ]
            modal.show({ title: 'Create Tier', views: views });
        },
        editTier: function (options) {
            var views = [
                { icon: "user", name: 'Tier(s)', url: "/setup/tiers/" + options.groupid + "/" + options.id + "/info?isedit=true", buttons: ["save"] }
            ]
            var title = options.title + " > (<b><i>" + options.name + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        addDomain: function (id) {
            var views = [
                { icon: "chart-bar", name: 'Add Domain', url: "/setup/crmsettings/domain/" + id, buttons: ["save"] }
            ];
            var title = 'Add SFDC Domain';
            modal.show({ title: title, views: views });
        },
        showGoalModal: function (options) {
            var views = [
                { icon: "user", name: 'Tier(s)', url: "/setup/organization/goal/" + options.groupid + "/" + options.id + "?istier=true" }
            ]
            var title = options.title + " > (<b><i>" + options.name + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        documentWizard: function (options, closeCallback) {
            if (options.isscorm === undefined)
                options.isscorm = false;

            var uploadUrl = "/gallery/documents/upload/" + options.gallerytype + "/" + options.assetid + "/" + options.assettypeid + "/" + options.filetypes + "/" + options.isproject + "/" + options.ispublic + "/" + options.isscorm + "?fileid=" + options.fileuploadid + "&ismultiplefiles=true" + "&iswizard=" + options.iswizard;
            if (name != undefined)
            title = 'Sharing (<b><i>' + name + '</i></b>)';
            if (options.isCase)
                uploadUrl = uploadUrl + "&iscase=" + options.isCase;
            else if (typeof options.islms != "undefined")
                uploadUrl = uploadUrl + "&islms=" + options.islms;//#42018 - LMS: text should only specified with pdf's

            if (options.isversion != undefined && options.fileid != undefined) {
                uploadUrl = uploadUrl + "&isversion=" + options.isversion + "&linkid=" + options.fileid;
            }
            var docUplaod = { name: options.uploadHeader, url: uploadUrl, wizardclose: true }
            var editDoc = { name: 'Attributes', url: "/gallery/documents/" + 0 + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + options.isSetup + "&iswizard=true&isbulkupload=true&fileuploadid=" + options.fileuploadid };
            var shareDoc = { name: 'Sharing', url: "/setup/sharing/newversion/" + 800 + "/" + options.fileuploadid + "?isbulkupload=true&iswizard=true", buttons: ["save"], wizardclose: true };
            var steps = [];
            
            if (options.gallerytype == 'my')
                steps = [docUplaod, editDoc, shareDoc];
            else
                steps = [docUplaod, editDoc];
            var _wizdata = {
                name: 'Upload Document',
                steps: steps,
                closeaction: closeCallback
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showCoSellInvite: function (options) {

            var id = options.id;
            var param = "";
            if (options.issharedaccountoverlapwithprofile != undefined)
                param = "?issharedaccountoverlapwithprofile=" + options.issharedaccountoverlapwithprofile

            var views = [
                { name: 'Invite to Collaborate', url: "/connections/accounts/overview/invitecosell/" + id + param },
            ];

            modal.show({ title: 'Invite to Collaborate', views: views });
        },
        imageWizard: function (options, closeCallback) {
            var uploadUrl = "/gallery/images/upload/" + options.gallerytype + "/" + options.assetid + "/" + options.assettypeid + "/" + options.isproject + "/" + "?fileid=" + options.fileuploadid + "&ismultiplefiles=true" + "&iswizard=" + options.iswizard;
            if (name != undefined)
                title = 'Sharing (<b><i>' + name + '</i></b>)';

            if (options.isCase)
                uploadUrl = uploadUrl + "&iscase=" + options.isCase;

            if (typeof options.isBadge != "undefined")//#37340 - Added to show badges in image gallery
                url = url + "&isbadge=" + options.isBadge;

            var imgUpload = { name: options.uploadHeader, url: uploadUrl, wizardclose: true };
            var editDoc = { name: 'Attributes', url: "/gallery/images/" + 0 + "/edit/edit" + "/" + getTimeStamp() + "?issetup=" + options.isSetup + "&iswizard=true&fileuploadid=" + options.fileuploadid };
            var shareDoc = { name: 'Sharing', url: "/setup/sharing/newversion/" + options.shareType + "/" + options.fileuploadid + "?isbulkupload=true&iswizard=true", buttons: ["save"], wizardclose: true };
            if (options.gallerytype == 'my')
                steps = [imgUpload, editDoc, shareDoc];
            else
                steps = [imgUpload, editDoc];
            var _wizdata = {
                name: 'Upload Image',
                steps: steps,
                closeaction: closeCallback
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showAccountContactsLinked: function (options) {           
            var urlParam = "";
            if (options != undefined) {
                if (options.maxGroupNo != undefined)
                    urlParam += urlParam != "" ? "&maxGroupNo=" + options.maxGroupNo : "?maxGroupNo=" + options.maxGroupNo;
                if (options.linktoid != undefined)
                    urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
                if (options.linktype != undefined)
                    urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
                if (options.viewoption != undefined)
                    urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
                if (options.orgviewoption != undefined)
                    urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
                if (options.groupviewoption != undefined)
                    urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
                if (options.selectedrange != undefined)
                    urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
                if (options.startdate != undefined)
                    urlParam += urlParam != "" ? "&startdate=" + encodeURIComponent(options.startdate) : "?startdate=" + encodeURIComponent(options.startdate);
                if (options.enddate != undefined)
                    urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
                if (options.sort != undefined)
                    urlParam += urlParam != "" ? "&sort=" + options.sort : "?sort=" + options.sort;
                if (options.pagesize != undefined)
                    urlParam += urlParam != "" ? "&pagesize=" + options.pagesize : "?pagesize=" + options.pagesize;
            }
            var views = [{
                icon: "chart-bar", name: 'Report', url: "/widgets/modalaccountcontactpiechart/" + urlParam, iconprefix: "far"
            }];
            var title = options.title;
            modal.show({ title: title, views: views });
        },
        showAccountEngagementSummaryReport: function (options) {
            var urlParam = "";
            if (options.intereststatus != undefined)
                urlParam += urlParam != "" ? "&intereststatus=" + encodeURIComponent(options.intereststatus) : "?intereststatus=" + encodeURIComponent(options.intereststatus);
            if (options.format != undefined)
                urlParam += urlParam != "" ? "&format=" + encodeURIComponent(options.format) : "?format=" + encodeURIComponent(options.format);
            if (options.enddate != undefined)
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
            if (options.index_drp != undefined)
                urlParam += urlParam != "" ? "&index_drp=" + encodeURIComponent(options.index_drp) : "?index_drp=" + encodeURIComponent(options.index_drp);
            if (options.issummarywidget != undefined)
                urlParam += urlParam != "" ? "&issummarywidget=" + options.issummarywidget : "?issummarywidget=" + options.issummarywidget;
            if (options.linktoid != undefined)
                urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
            if (options.linktype != undefined)
                urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
            if (options.viewoption != undefined)
                urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
            if (options.groupviewoption != undefined)
                urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
            if (options.orgviewoption != undefined)
                urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
            if (options.startdate != undefined)
                urlParam += urlParam != "" ? "&startdate=" + options.startdate : "?startdate=" + options.startdate;
            var views = [
                { icon: "", name: options.title, url: "/widgets/custom/accountengagementgridsummary" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showAccountOpportunitiesLinked: function (options) {
            var views = [{
                icon: "chart-bar", name: 'Report', url: "/widgets/marketingsalespiechart/" + options.projecttypeid + "/" + options.contactno + "/" + options.linktoid + "/" + options.linktype + "/" + options.viewoption + "/" + options.orgviewoption + "/" + options.groupviewoption + "/" + options.selectedrange + "/" + options.startdate + "/" + options.enddate + "/" + options.sort + "/" + options.pagesize, iconprefix: "far"
            }];
            var title = options.title;
            modal.show({ title: title, views: views });
        },
        showDefaultPersonaSettings: function (settingOptions) {
            var urlParam = "";
            if (settingOptions.widgetname != undefined)
                urlParam += urlParam != "" ? "&wname=" + settingOptions.widgetname : "?wname=" + settingOptions.widgetname;
            if (settingOptions.requestid != undefined)
                urlParam += urlParam != "" ? "&requestid=" + settingOptions.requestid : "?requestid=" + settingOptions.requestid;
            var pageURL = "/widgets/setdefaultpersona";

            var views = [{ icon: "fa-cog", name: 'Settings', url: pageURL + urlParam, buttons: ["save"] }];
            modal.show({ title: settingOptions.title, views: views, preventclose: true, locked: true });

        },
        showLinkManagerLayout: function (id, requestID, options, callback) {
            var views = [];
            var iscreate = false;
            var solutionID = 0;
            var solutionType = 0;
            if (options!=undefined && options.iscreate != null && options.iscreate != undefined)
                iscreate = options.iscreate;

            if (options != undefined && options.solutionid != null && options.solutionid != undefined)
                solutionID = options.solutionid;
            if (options != undefined && options.solutiontype != null && options.solutiontype != undefined)
                solutionType = options.solutiontype;
            
            moduleTitle = 'Edit Link';
            views.push({ icon: "user", name: "Info", url: "setup/linkmanager-linkinfo?requestid=" + requestID + "&id=" + id + "&solutionid=" + solutionID + "&solutiontype=" + solutionType+ "&iscreate=" + iscreate, buttons: ["save"] });
            views.push({ icon: "fa-solid fa-link", name: "Link Setting", url: "setup/linkmanager-settings/" + id + "?requestid=" + requestID +"&solutionid=" + solutionID + "&solutiontype=" + solutionType, buttons: ["save"] });
            views.push({ icon: "file", name: "Assign To Solution", url: "setup/solution/records/addremove?islinkmanager=true" + "&linkid=" + id, iconprefix: "far" });
   
            modal.show({ title: moduleTitle , views: views, callback: callback});
        },
        showGroupManagerLayout: function (id, requestid, options, callback) {
            var iscreate = false;
            if (options!=undefined && options.iscreate != null && options.iscreate != undefined)
                iscreate = options.iscreate;
            var moduleTitle = 'Edit Group';
            var views = [{ icon: "user", name: "Info", url: "setup/linkmanager-groupinfo?requestid=" + requestid + "&id=" + id + "&iscreate=" + iscreate, buttons: ["save"] }];

            modal.show({ title: moduleTitle , views: views, callback: callback});
        },


        showBlogpostDownloadedReport: function (options) {
            var views = [{icon: "signal", url: "/setup/blogpost/download/" + options.id + "/?linktype=" + options.linktype+ "&viewoption=" + options.viewoption + "&orgviewoption=" + options.orgviewoption + "&groupviewoption=" + options.groupviewoption
                }];
             modal.show({ title: options.title + "-" + options.name, views: views });
        },
        showBlogpostDownloaddTime: function (userid, templateid) {
            var views = [{ icon: "download", name: 'Download On', url: "/setup/blogpost/downloadhistory/" + userid +"/?templateid=" + templateid}];
            modal.show({ title: 'Blogpost History', views: views });
        },
        showVideoFinishedReport:function (options) {
            var views = [
                { icon: "user", name: options.title, url: "/setup/gallery/videos/" + options.id+ "?isfinished=" + options.isFinished },
            ]
            var title = options.title + " > (<b><i>" + options.name + "</i></b>)";
            modal.show({ title: title, views: views });
        },
        showInternalPageVisits: function (reportData) {
            var strParam = '';
            if (reportData.linktoid != undefined)
                strParam += strParam !== "" ? "&linktoid=" + reportData.linktoid : "linktoid=" + reportData.linktoid;
            if (reportData.viewoption != undefined)
                strParam += strParam !== "" ? "&viewoption=" + reportData.viewoption : "viewoption=" + reportData.viewoption;
            if (reportData.linktype != undefined)
                strParam += strParam !== "" ? "&linktype=" + reportData.linktype : "linktype=" + reportData.linktype;
            if (reportData.orgviewoption != undefined)
                strParam += strParam !== "" ? "&orgviewoption=" + reportData.orgviewoption : "orgviewoption=" + reportData.orgviewoption;
            if (reportData.groupviewoption != undefined)
                strParam += strParam !== "" ? "&groupviewoption=" + reportData.groupviewoption : "groupviewoption=" + reportData.groupviewoption;
            if (reportData.selectedrange != undefined)
                strParam += strParam !== "" ? "&selectedrange=" + reportData.selectedrange : "selectedrange=" + reportData.selectedrange;
            if (reportData.startdate != undefined)
                strParam += strParam !== "" ? "&startdate=" + reportData.startdate : "startdate=" + reportData.startdate;
            if (reportData.enddate != undefined)
                strParam += strParam !== "" ? "&enddate=" + reportData.enddate : "enddate=" + reportData.enddate;
            if (reportData.pageid != null)
                strParam += strParam !== "" ? "&pageid=" + reportData.pageid : "pageid=" + reportData.pageid;
            if (reportData.id != null)
                strParam += strParam !== "" ? "&id=" + reportData.id : "id=" + reportData.id;
            if (reportData.urlhashid != null)
                strParam += strParam !== "" ? "&urlhashid=" + reportData.urlhashid : "urlhashid=" + reportData.urlhashid;
            if (reportData.isinternalpagelink != undefined)
                strParam += strParam !== "" ? "&isinternalpagelink=" + reportData.isinternalpagelink : "isinternalpagelink=" + reportData.isinternalpagelink;
            var views = [];
            if (reportData.type =='foruserlist')
                views.push({ icon: "user", name: name, url: "/visited/users/list?" + strParam });
            else if (reportData.type =='foruserdetails')
                views.push({ icon: "user", name: name, url: "/users/visits/details?" + strParam });
            else if (reportData.type =='forpagelist')
                views.push({ icon: "user", name: name, url: "/visited/pages/list?" + strParam });
            
            var title = reportData.title;
            modal.show({ title: title, views: views });
        },
        showAccounts: function (options) {
            var urlParam = "";
            if (options.ids != undefined)
                urlParam += urlParam != "" ? "&ids=" + options.ids : "?ids=" + options.ids;
            if (options.isplaybook)
                urlParam += urlParam != "" ? "&isplaybook=" + options.isplaybook : urlParam;
            var views = [
                { icon: "", name: options.title, url: "/connections/accounts" + urlParam }

            ];
            modal.show({ title: 'Company List (<b><i>' + options.title + '</i></b>)', views: views });
        },
        showAccountContactsLinked: function (options) {          
            var urlParam = "";
            if (options != undefined) {
                if (options.maxGroupNo != undefined)
                    urlParam += urlParam != "" ? "&maxGroupNo=" + options.maxGroupNo : "?maxGroupNo=" + options.maxGroupNo;
                if (options.contactGroupNo != undefined)
                    urlParam += urlParam != "" ? "&contactGroupNo=" + options.contactGroupNo : "?contactGroupNo=" + options.contactGroupNo;
                if (options.isusergrid != undefined)
                    urlParam += urlParam != "" ? "&isusergrid=" + options.isusergrid : "?isusergrid=" + options.isusergrid;
                if (options.linktoid != undefined)
                    urlParam += urlParam != "" ? "&linktoid=" + options.linktoid : "?linktoid=" + options.linktoid;
                if (options.linktype != undefined)
                    urlParam += urlParam != "" ? "&linktype=" + options.linktype : "?linktype=" + options.linktype;
                if (options.viewoption != undefined)
                    urlParam += urlParam != "" ? "&viewoption=" + options.viewoption : "?viewoption=" + options.viewoption;
                if (options.orgviewoption != undefined)
                    urlParam += urlParam != "" ? "&orgviewoption=" + options.orgviewoption : "?orgviewoption=" + options.orgviewoption;
                if (options.groupviewoption != undefined)
                    urlParam += urlParam != "" ? "&groupviewoption=" + options.groupviewoption : "?groupviewoption=" + options.groupviewoption;
                if (options.selectedrange != undefined)
                    urlParam += urlParam != "" ? "&selectedrange=" + options.selectedrange : "?selectedrange=" + options.selectedrange;
                if (options.startdate != undefined)
                    urlParam += urlParam != "" ? "&startdate=" + encodeURIComponent(options.startdate) : "?startdate=" + encodeURIComponent(options.startdate);
                if (options.enddate != undefined)
                    urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
                if (options.sort != undefined)
                    urlParam += urlParam != "" ? "&sort=" + options.sort : "?sort=" + options.sort;
                if (options.pagesize != undefined)
                    urlParam += urlParam != "" ? "&pagesize=" + options.pagesize : "?pagesize=" + options.pagesize;
            }       
            var views = [{
                icon: "chart-bar", name: 'Report', url: "/widgets/modalaccountcontactpiechart/" + urlParam, iconprefix: "far"
            }];
            var title = options.title;
            modal.show({ title: title, views: views });
        },
        showCollaborationTopicInfo: function (options, callback) {
            var views = [{ icon: "", name: '', url: "/collaboration/topic/info/" + options.id + "?linktype=" + options.linktype, buttons: ["submit"] }];
            if (options.linkid != undefined && options.linkid != 0)
                views[0].url += "&linkid=" + options.linkid;

            if (options.linktypeid != undefined && options.linktypeid != 0)
                views[0].url += "&linktypeid=" + options.linktypeid;

            modal.show({ title: options.title, views: views, callback: callback });
        },
        showTopicDiscussion: function (options) {
            var views = [{ icon: "", name: '', url: "/collaboration/topic/discussion/" + options.id + "/" + options.categoryID + "?ismodal=" + true }];
            modal.show({ title: options.title, views: views });
        },
        showOpportunityTopicData: function (options) {
            var views = [{ icon: "", name: '', url: "/collaboration/opportunity/" + options.projecttypeid + "/" + options.id + "/" + options.categoryID + "?ispublic=" + options.ispublic + "&ismodal="+true}];
            modal.show({ title: options.title, views: views });
        },
        showAccountTopicData: function (options) {
            var views = [{ icon: "", name: '', url: "/collaboration/account/" + options.id + "/" + options.categoryID + "?ispublic=" + options.ispublic + "&ismodal=" + true }];
            modal.show({ title: options.title, views: views });
        },       
        showSolutionsTopicData: function (options) {
            var views = [{ icon: "", name: '', url: "/collaboration/solution/" + options.id + "/" + options.categoryID + "?ispublic=" + options.ispublic + "&ismodal=" + true }];
            modal.show({ title: options.title, views: views });
        },
        showProjectContacts: function (options) {
            var views = [{ icon: "", name: '', url: "/collaboration/project/contacts/" + options.projecttypeid + "/" + options.id }];
            modal.show({ title: 'Contact Associated With {0}'.replace("{0}",options.opportunity), views: views });
        },
        showSelectAttachment: function (type, options) {
            if (options === undefined) {
                options = {};
            }
            var singleSelect = "0";
            var views = [{ icon: "", name: 'Documents', url: options.url !== undefined ? options.url : "/gallery/document/v5?singleselect=false" + "&isdocumentimport=" + true, buttons: ["addselected", "cancel"] }];
            modal.show({ title: 'Documents', views: views, buttons: '[Done]', callback: type });
        },
        showCoopfundGrid: function (Options) {
            var urlParam = "";
            if (Options.incomingstatus != undefined)
                urlParam += urlParam != "" ? "&incomingstatus=" + Options.incomingstatus : "?incomingstatus=" + Options.incomingstatus;

            var views =[{ icon: "user", name: '{$dashboard.coopsfundwidget.MDFGrid}', url: "widgets/coopfundgriddata" + urlParam }];

            modal.show({ title: Options.title, views: views });
        },
        showAccountsForAccountReport: function (options) {
            var views = [{ name: options.title, url: "connections/accounts?accountBasedWidgetType=" + options.accountbasedwidgettype + "&accountbasedreportfilterid=" + options.accountbasedreportfilterid + "&UserBaseAccountDisplayType=" + options.userbaseaccountdisplaytype }];
            modal.show({ title: options.title, views: views });
        },
        showOpportunitiesForAccountBaseWidget: function (options) {
            var stage = "";
            if (options.stage != null || options.stage != undefined)
                stage = '&stage=' + options.stage

            var views = [{ name: options.title, url: "/manage/opportunity-records?filtergroupid=" + options.filtergroupid + "&createdonly=" + options.createdonly + "&accountBasedWidgetType=" + options.accountbasedwidgettype + stage }];
            modal.show({ title: options.title, views: views });
        },
        showOpportunitiesForUserBaseWidget: function (options) {
            var stage = "";
            if (options.stage != null || options.stage != undefined)
                stage = '&stage=' + options.stage

            var views = [{ name: options.title, url: "/manage/opportunity-records/" + options.filtergroupid + "?createdonly=" + options.createdonly + "&accountBasedWidgetType=" + options.accountbasedwidgettype + stage }];
            modal.show({ title: options.title, views: views });
        },
        showOpportunitiesForOrganizationBaseWidget: function (options) {
            var stage = "";
            if (options.stage != null || options.stage != undefined)
                stage = '&stage=' + options.stage

            var views = [{ name: options.title, url: "/manage/opportunity-records/org/" + options.filtergroupid + "?createdonly=" + options.createdonly + "&accountBasedWidgetType=" + options.accountbasedwidgettype + stage }];
            modal.show({ title: options.title, views: views });
        },
        showOrganizationProfile: function (id, options) {
            var views = [{ icon: "chart-bar", name: "", url: "/setup/organization/info/" + id, iconprefix: "far", buttons: ["save"] }];
            modal.show({ title: options.name, views: views });
        },
        showOverlappedAccountForAccountOverlapping: function (Options) {
            var urlParam = "";
            urlParam += urlParam != "" ? "&" : "?";
            urlParam += 'linktoid=' + Options.linktoid + '&linktype=' + Options.linktype + '&viewoption=' + Options.viewoption + '&orgviewoption=' + Options.orgviewoption+'&groupviewoption=' + Options.groupviewoption

            if (Options.organizationid != null && Options.organizationid != "" && Options.organizationid != undefined) {
                urlParam += "&organizationid=" + Options.organizationid
            }
            if (Options.type != null && Options.type != "" && Options.type != undefined) {
                urlParam += "&type=" + Options.type 
            }

            var views = [{ icon: "file", name: Options.title, url: 'reports/accountoverlapreport/overlappedaccount' + urlParam }];
            modal.show({ title: Options.title, views: views });
        },
        showOverlappedAccountForOverlappingWidget: function (Options) {
            var urlParam = "";
            urlParam += urlParam != "" ? "&" : "?";
            urlParam += 'linktoid=' + Options.linktoid + '&linktype=' + Options.linktype + '&viewoption=' + Options.viewoption + '&orgviewoption=' + Options.orgviewoption + '&groupviewoption=' + Options.groupviewoption

            if (Options.organizationid != null && Options.organizationid != "" && Options.organizationid != undefined) {
                urlParam += "&organizationid=" + Options.organizationid
            }
            if (Options.type != null && Options.type != "" && Options.type != undefined) {
                urlParam += "&type=" + Options.type
            }

            var views = [{ icon: "file", name: Options.title, url: 'reports/accountoverlapreport/overlappedaccount' + urlParam }];

            // for overlapping widget
            if (Options.selectedoverlappedvalue > 0 && Options.dropdownvalues != undefined && Options.dropdownvalues != null && Options.dropdownvalues.length > 0) {
                views = [];

                $(Options.dropdownvalues).each(function (index, value) {

                    var additionalParam = urlParam;
                    var overlapedDropDownValue = value.val;
                    var overlapType = value.overlaptype;
                    var name = value.name;
                    additionalParam += '&selectedoverlappedvalue=' + overlapedDropDownValue + '&type=' + overlapType;
                    if (overlapedDropDownValue == Options.selectedoverlappedvalue)
                        views.unshift({ icon: "", name: name, url: 'reports/accountoverlapreport/overlappedaccount' + additionalParam});
                    else
                        views.push({ icon: "", name: name, url: 'reports/accountoverlapreport/overlappedaccount' + additionalParam });
                });
            }

            modal.show({ title: Options.title, views: views });
        },
        showOverlappedAccountForOverlappingWidget: function (Options) {
            var urlParam = "";
            urlParam += urlParam != "" ? "&" : "?";
            urlParam += 'linktoid=' + Options.linktoid + '&linktype=' + Options.linktype + '&viewoption=' + Options.viewoption + '&orgviewoption=' + Options.orgviewoption + '&groupviewoption=' + Options.groupviewoption

            if (Options.organizationid != null && Options.organizationid != "" && Options.organizationid != undefined) {
                urlParam += "&organizationid=" + Options.organizationid
            }
            if (Options.type != null && Options.type != "" && Options.type != undefined) {
                urlParam += "&type=" + Options.type
            }

            var views = [{ icon: "file", name: Options.title, url: 'reports/accountoverlapreport/overlappedaccount' + urlParam }];

            // for overlapping widget
            if (Options.selectedoverlappedvalue > 0 && Options.dropdownvalues != undefined && Options.dropdownvalues != null && Options.dropdownvalues.length > 0) {
                views = [];

                $(Options.dropdownvalues).each(function (index, value) {

                    var additionalParam = urlParam;
                    var overlapedDropDownValue = value.val;
                    var overlapType = value.overlaptype;
                    var name = value.name;
                    additionalParam += '&selectedoverlappedvalue=' + overlapedDropDownValue + '&type=' + overlapType;
                    if (overlapedDropDownValue == Options.selectedoverlappedvalue)
                        views.unshift({ icon: "", name: name, url: 'reports/accountoverlapreport/overlappedaccount' + additionalParam});
                    else
                        views.push({ icon: "", name: name, url: 'reports/accountoverlapreport/overlappedaccount' + additionalParam });
                });
            }

            modal.show({ title: Options.title, views: views });
        },
        showOverlappedOrganizationsForAccountOverlapping: function (Options) {
            var urlParam = "";
            urlParam += urlParam != "" ? "&" : "?";
            urlParam += 'linktoid=' + Options.linktoid + '&linktype=' + Options.linktype + '&viewoption=' + Options.viewoption + '&orgviewoption=' + Options.orgviewoption + '&groupviewoption=' + Options.groupviewoption

            if (Options.type != undefined && Options.type != null && Options.type != "")
                urlParam += '&type=' + Options.type;

            if (Options.accountid != null && Options.accountid != "" && Options.accountid != undefined) {
                urlParam += "&accountid=" + Options.accountid
            }

            if (Options.showtotalorg != null && Options.showtotalorg != "" && Options.showtotalorg != undefined) {
                urlParam += "&showtotalorg=" + Options.showtotalorg
            }
            if (Options.displayoverlapandaccounts != null && Options.displayoverlapandaccounts != "" && Options.displayoverlapandaccounts != undefined) {
                urlParam += "&displayoverlapandaccounts=" + Options.displayoverlapandaccounts
            }

            var views = [{ icon: "file", name: Options.title, url: 'reports/accountoverlapreport/overlappedorganizations' + urlParam }];

            // for overlapping donut
            if ((Options.numberofaccountupperlimit > 0 || Options.numberofaccountlowerlimit > 0) && Options.dropdownvalues != undefined && Options.dropdownvalues != null && Options.dropdownvalues.length > 0) {
                views = [];
                $(Options.dropdownvalues).each(function (index, value) {

                    var additionalParam = urlParam;
                    var splittedData = value.split('-');
                    var lowerLimit = 0;
                    var upperLimit = 0
                    if (splittedData.length > 0) {
                        if (splittedData.length > 1) {
                            lowerLimit = parseInt(splittedData[0]);
                            upperLimit = parseInt(splittedData[1]);
                            additionalParam += '&numberofaccountlowerlimit=' + lowerLimit;
                            additionalParam += '&numberofaccountupperlimit=' + upperLimit;
                        }
                        else {
                            var lowerValue = splittedData[0].replace(">", '');
                            lowerLimit = parseInt(lowerValue)+1;
                            upperLimit = 0;

                            additionalParam += '&numberofaccountlowerlimit=' + lowerLimit;
                            additionalParam += '&numberofaccountupperlimit=0';
                        }
                    }

                    if (lowerLimit == Options.numberofaccountlowerlimit && upperLimit == Options.numberofaccountupperlimit)
                        views.unshift({ icon: "", name: value, url: 'reports/accountoverlapreport/overlappedorganizations' + additionalParam });
                    else
                        views.push({ icon: "", name: value, url: 'reports/accountoverlapreport/overlappedorganizations' + additionalParam });
                });

            }

            // for overlapping widget
            if (Options.selectedoverlappedvalue > 0 && Options.dropdownvalues != undefined && Options.dropdownvalues != null && Options.dropdownvalues.length > 0) {
                views = [];

                $(Options.dropdownvalues).each(function (index, value) {

                    var additionalParam = urlParam;
                    var overlapedDropDownValue = value.val;
                    var name = value.name;
                    additionalParam += '&selectedoverlappedvalue=' + overlapedDropDownValue;
                    if (overlapedDropDownValue == Options.selectedoverlappedvalue)
                        views.unshift({ icon: "", name: name, url: 'reports/accountoverlapreport/overlappedorganizations' + additionalParam });
                    else
                        views.push({ icon: "", name: name, url: 'reports/accountoverlapreport/overlappedorganizations' + additionalParam });
                });
            }


            modal.show({ title: Options.title, views: views });
        },
        showStatsSummarySettings: function (settingOptions) {
            var urlParam = "";
            if (settingOptions.widgetname != undefined)
                urlParam += urlParam != "" ? "&widgetname=" + settingOptions.widgetname : "?widgetname=" + settingOptions.widgetname;
            if (settingOptions.widgetid != undefined)
                urlParam += urlParam != "" ? "&widgetid=" + settingOptions.widgetid : "?widgetid=" + settingOptions.widgetid;
            if (settingOptions.pagereqid != undefined)
                urlParam += urlParam != "" ? "&pagereqid=" + settingOptions.pagereqid : "?pagereqid=" + settingOptions.pagereqid;
            if (settingOptions.persona != undefined)
                urlParam += urlParam != "" ? "&persona=" + settingOptions.persona : "?persona=" + settingOptions.persona;
            if (settingOptions.personaOption != undefined)
                urlParam += urlParam != "" ? "&personaoption=" + settingOptions.personaOption : "?personaoption=" + settingOptions.personaOption;
            if (settingOptions.platform != undefined)
                urlParam += urlParam != "" ? "&platform=" + settingOptions.platform : "?platform=" + settingOptions.platform;
            if (settingOptions.requestid != undefined)
                urlParam += urlParam != "" ? "&requestid=" + settingOptions.requestid : "?requestid=" + settingOptions.requestid;
            if (settingOptions.editmode != undefined)
                urlParam += urlParam != "" ? "&editmode=" + settingOptions.editmode : "?editmode=" + settingOptions.editmode;
            if (settingOptions.designtype != undefined)
                urlParam += urlParam != "" ? "&designtype=" + settingOptions.designtype : "?designtype=" + settingOptions.designtype;

            var pageURL = "/widgets/settings/summarystats";
            var pageURL1 = "/widgets/settings/summarysmartlist";

            var widgetSetting = { icon: "fa-cog", name: 'Smart Summary Setting ', url: pageURL + urlParam, buttons: ["save"] };
            var orderSetting = { icon: "fa-cog", name: 'Order Setting', url: `widgets/ordersettings/summarystats${urlParam}`, buttons: ["save"] }
            var views = [widgetSetting, orderSetting];

            var _wizardData = {
                name: 'Status widgets setting',
                steps: [
                    { name: 'Standard Stats', url: pageURL + urlParam },
                    { name: 'Smartlist Stats', url: pageURL1 + urlParam },
                    { name: 'Order Setting', url: `widgets/ordersettings/summarystats${urlParam}` },
                ]
            };
            var _wizard = new wizard(_wizardData);
            _wizard.show();
        },
        showStatsAddRemoveSettings: function (settingOptions) {
            var urlParam = "";
            if (settingOptions.widgetname != undefined)
                urlParam += urlParam != "" ? "&widgetname=" + settingOptions.widgetname : "?widgetname=" + settingOptions.widgetname;
            if (settingOptions.widgetid != undefined)
                urlParam += urlParam != "" ? "&widgetid=" + settingOptions.widgetid : "?widgetid=" + settingOptions.widgetid;
            if (settingOptions.pagereqid != undefined)
                urlParam += urlParam != "" ? "&pagereqid=" + settingOptions.pagereqid : "?pagereqid=" + settingOptions.pagereqid;
            if (settingOptions.persona != undefined)
                urlParam += urlParam != "" ? "&persona=" + settingOptions.persona : "?persona=" + settingOptions.persona;
            if (settingOptions.personaOption != undefined)
                urlParam += urlParam != "" ? "&personaoption=" + settingOptions.personaOption : "?personaoption=" + settingOptions.personaOption;
            if (settingOptions.platform != undefined)
                urlParam += urlParam != "" ? "&platform=" + settingOptions.platform : "?platform=" + settingOptions.platform;
            if (settingOptions.requestid != undefined)
                urlParam += urlParam != "" ? "&requestid=" + settingOptions.requestid : "?requestid=" + settingOptions.requestid;
            if (settingOptions.editmode != undefined)
                urlParam += urlParam != "" ? "&editmode=" + settingOptions.editmode : "?editmode=" + settingOptions.editmode;
            if (settingOptions.designtype != undefined)
                urlParam += urlParam != "" ? "&designtype=" + settingOptions.designtype : "?designtype=" + settingOptions.designtype;
            if (settingOptions.isvertical != undefined)
                urlParam += urlParam != "" ? "&isvertical=" + settingOptions.isvertical : "?isvertical=" + settingOptions.isvertical;


            var pageURL = "/widgets/settings/summarystats";

            var views = [{ icon: "fa-cog", name: 'Standard Stats', url: pageURL + urlParam, buttons: ["save"] }];
            views.push({icon: "fa-cog", name: 'Smartlist Stats', url: "widgets/settings/summarysmartlist" + urlParam, buttons: ["save"]});

            modal.show({ title: settingOptions.title, views: views, preventclose: true, locked: true });
        },  
        showAllOrganizations: function (Options) {
            var views = [{
                icon: "", name: Options.title, url: 'setup/organizations'
            }];
            modal.show({ title: Options.title, views: views });
        },
        showAllAccounts: function (Options) {
            var param = "";
            if (Options.isreport != undefined && Options.isreport != null && Options.isreport != "")
                param += param == "" ? "?isreport=" + Options.isreport : "&isreport=" + Options.isreport;

            if (Options.issharedonly != undefined && Options.issharedonly != null && Options.issharedonly != "")
                param += param == "" ? "?issharedonly=" + Options.issharedonly : "&issharedonly=" + Options.issharedonly;
            if (Options.accountstattype != undefined && Options.accountstattype != null && Options.accountstattype != "")
                param += param == "" ? "?accountstattype=" + Options.accountstattype : "&accountstattype=" + Options.accountstattype;
            if (Options.accountstatsvalue != undefined && Options.accountstatsvalue != null && Options.accountstatsvalue != "")
                param += param == "" ? "?accountstatsvalue=" + Options.accountstatsvalue : "&accountstatsvalue=" + Options.accountstatsvalue;

            var views = [{
                icon: "", name: Options.title, url: 'connections/accounts' + param
            }];
            modal.show({ title: Options.title, views: views });
        },
        showOpportunityRequestsReportROI: function (options) {
            var urlParam = "";
            if (options.stage != undefined)
                urlParam += urlParam != "" ? "&stage=" + encodeURIComponent(options.stage) : "?stage=" + encodeURIComponent(options.stage);
            if (options.projecttypeid != undefined && options.projecttypeid != "")
                urlParam += urlParam != "" ? "&projecttyeid=" + encodeURIComponent(options.projecttypeid) : "?projecttyeid=" + encodeURIComponent(options.projecttypeid);
            if (options.selectedrange != undefined && options.selectedrange != "")
                urlParam += urlParam != "" ? "&selectedrange=" + encodeURIComponent(options.selectedrange) : "?selectedrange=" + encodeURIComponent(options.selectedrange);
            if (options.startdate != undefined && options.startdate != "")
                urlParam += urlParam != "" ? "&startdate=" + encodeURIComponent(options.startdate) : "?startdate=" + encodeURIComponent(options.startdate);
            if (options.enddate != undefined && options.enddate != "")
                urlParam += urlParam != "" ? "&enddate=" + encodeURIComponent(options.enddate) : "?enddate=" + encodeURIComponent(options.enddate);
            if (options.linktoid != null)
                urlParam += urlParam != "" ? "&linktoid=" + encodeURIComponent(options.linktoid) : "?linktoid=" + encodeURIComponent(options.linktoid);
            if (options.linktype != null)
                urlParam += urlParam != "" ? "&linktype=" + encodeURIComponent(options.linktype) : "?linktype=" + encodeURIComponent(options.linktype);
            if (options.viewoption != null)
                urlParam += urlParam != "" ? "&viewoption=" + encodeURIComponent(options.viewoption) : "?viewoption=" + encodeURIComponent(options.viewoption);
            if (options.orgviewoption != null)
                urlParam += urlParam != "" ? "&orgviewoption=" + encodeURIComponent(options.orgviewoption) : "?orgviewoption=" + encodeURIComponent(options.orgviewoption);
            if (options.groupviewoption != null)
                urlParam += urlParam != "" ? "&groupviewoption=" + encodeURIComponent(options.groupviewoption) : "?groupviewoption=" + encodeURIComponent(options.groupviewoption);
            if (options.isHeaderShowing != null)
                urlParam += urlParam != "" ? "&isheadershowing=" + encodeURIComponent(options.isHeaderShowing) : "?isheadershowing=" + encodeURIComponent(options.isHeaderShowing);
            if (options.isroireport != null)
                urlParam += urlParam != "" ? "&isroireport=" + encodeURIComponent(options.isroireport) : "?isroireport=" + encodeURIComponent(options.isroireport);
            if (options.quarterno != null)
                urlParam += urlParam != "" ? "&format=" + encodeURIComponent(options.format) : "?quarterno=" + encodeURIComponent(options.format);
            if (options.type != null)
                urlParam += urlParam != "" ? "&type=" + encodeURIComponent(options.type) : "?type=" + encodeURIComponent(options.type);
            if (options.ismdf != null)
                urlParam += urlParam != "" ? "&ismdf=" + encodeURIComponent(options.ismdf) : "?ismdf=" + encodeURIComponent(options.ismdf);
            if (options.ismdfattachment != null)
                urlParam += urlParam != "" ? "&ismdfattachment=" + encodeURIComponent(options.ismdfattachment) : "?ismdfattachment=" + encodeURIComponent(options.ismdfattachment);
            var views = [
                { icon: "", name: options.title, url: "/reports/projects-status" + urlParam }
            ];
            modal.show({ title: options.title, views: views });
        },
        showPublishedChanges: function (id, options) {
            var views = [{ icon: "", name: "", url: "/manage/marketplace/viewchanges/" + id + "/" + options.linkType, iconprefix: "far", buttons: ["publish"] }];
            var title = options.linkType == 1 ? 'Review {0} Changes'.replace('{0}', 'Solution') : options.linkType == 3 ? 'Review {0} Changes'.replace('{0}', 'Product') : 'Review {0} Changes'.replace('{0}', 'Partner')
            modal.show({ title: `${title} (${options.name})`, views: views });
        },
        showPlaybookContractApprover: function (options, callback) {
            var views = [{ icon: "users", name: 'Users', url: "/internalplaybook/contract/user-approver/" + options.approverId, buttons: ["save"] }];
            modal.show({ title: options.title, views: views, callback: callback, locked: true, preventClose: true, closeButton: true });
        },
        showAnnouncementImage: function (id, announceRequestID) {
            var views = [{ icon: "", name: "", url: "/setup/announcements/imagebanner?saveOnDblClick=true&singleselect=true&announcerequestid=" + announceRequestID + "&annnounceid=" + id, buttons: ["addselected"] }];
            modal.show({ title: "Add Banner For Announcement", views: views });
        },
        ShowAccountOverlap: function (options) {

            var title = "";
            if (options.title != undefined)
                title = options.title;

            var param = "";
            if (options.ismainaccountpage != undefined)
                param = "?ismainaccountpage=" + options.ismainaccountpage;

            if (options.accounttype != undefined)
                if (!param)
                    param = param + "?accounttype=" + options.accounttype;
                else
                    param = param + "&accounttype=" + options.accounttype;

            if (options.isoptin != undefined)
                if (!param)
                    param = param + "?isoptin=" + options.isoptin;
                else
                    param = param + "&isoptin=" + options.isoptin;

            if (!param)
                param = param + '?linktoid=' + options.linktoid + '&linktype=' + options.linktype + '&viewoption=' + options.viewoption + '&orgviewoption=' + options.orgviewoption + '&groupviewoption=' + options.groupviewoption
            else 
                param = param + '&linktoid=' + options.linktoid + '&linktype=' + options.linktype + '&viewoption=' + options.viewoption + '&orgviewoption=' + options.orgviewoption + '&groupviewoption=' + options.groupviewoption

            if (options.isreport) {
                if (!param)
                    param = param + '?isreport=' + options.isreport;
                else
                    param = param + '&isreport=' + options.isreport;
            }

            var views = [{ icon: "", name: "", url: "connections/accounts/overlapedaccounts" + param }];
            modal.show({ title: title, views: views });
        },
        ShowOverlapForAccount: function (options) {

            var title = "";
            if (options.title != undefined)
                title = options.title;

            var param = "";
            if (options.accountid != undefined)
                param = "?accountid=" + options.accountid;
            if (options.overlaptype != undefined)
                if (!param)
                    param = param + "?overlaptype=" + options.overlaptype;
                else
                    param = param + "&overlaptype=" + options.overlaptype;

            if (options.isshared != undefined)
                if (!param)
                    param = param + "?isshared=" + options.isshared;
                else
                    param = param + "&isshared=" + options.isshared;

            if (options.type != undefined)
                if (!param)
                    param = param + "?type=" + options.type;
                else
                    param = param + "&type=" + options.type;

            if (options.isoptin != undefined)
                if (!param)
                    param = param + "?isoptin=" + options.isoptin;
                else
                    param = param + "&isoptin=" + options.isoptin;

            if (options.isgeovertoverlap != undefined)
                if (!param)
                    param = param + "?isgeovertoverlap=" + options.isgeovertoverlap;
                else
                    param = param + "&isgeovertoverlap=" + options.isgeovertoverlap;

            if (options.isvendorview != undefined)
                if (!param)
                    param = param + "?isvendorview=" + options.isvendorview;
                else
                    param = param + "&isvendorview=" + options.isvendorview;

            if (!param)
                param = param + '?linktoid=' + options.linktoid + '&linktype=' + options.linktype + '&viewoption=' + options.viewoption + '&orgviewoption=' + options.orgviewoption + '&groupviewoption=' + options.groupviewoption
            else
                param = param + '&linktoid=' + options.linktoid + '&linktype=' + options.linktype + '&viewoption=' + options.viewoption + '&orgviewoption=' + options.orgviewoption + '&groupviewoption=' + options.groupviewoption

            if (options.isreport) {
                if (!param)
                    param = param + '?isreport=' + options.isreport;
                else
                    param = param + '&isreport=' + options.isreport;
            }

            var views = [{ icon: "", name: "", url: "connections/accounts/overlapforaccount" + param }];
            modal.show({ title: title, views: views });
        },
        showAnnouncementPopup: function () {
            var views = [{ icon: "", name: "", url: "/setup/announcements/popup"}];
            modal.show({ title: "Announcement", views: views, locked: true});
        },
        showNotificationEditor: function (data) {
            var views = [];
            var view = {
                icon: "",
                name: data.oname,
                url: "setup/system/notification/edit/" + data.notificationid + "/" + data.languageid,
                buttons: ["save"]
            };
            views.push(view);
                
            modal.show({ title: 'Notification Email Design' + ' (<b><i>' + data.name + " - " + data.localizelang + '</i></b>)', views: views, locked: true, preventClose: true });
        },
        editSortAndTemplateSettings: function (type) {
            var views = [{ icon: "", name: "", url: `/manage/marketplace/edit/${type}`, buttons: ["save"] }];
            modal.show({ title: 'Edit Sort and Template', views: views });
        },
        showOrganizationProfilePage: function (organizationID) {
            var views = [{
                icon: "", name: "", url: "/organization/profile/v5/" + getTimeStamp() + "?id=" + organizationID +"&isplaybook=true" }];
            modal.show({ title: ' Organization Profile', views: views });
        },

        showusersessionedit: function (options) {
            var views = [];
            views.push({ icon: "calendar-times-o", name: "{$ajax_instructor.AddUsers}", url: "/manage/instructorcourse/setupusers/" + options.id + "/" + options.courseid + "" });

            var title = views[0].name + "<b><i> (" + options.sessionid + ")</i></b>";
            modal.show({ title: title, views: views });
        },

        showSessionCreate: function (options,callback) {
            var views = [];
            const url = `/manage/instructorcourse/createsession/${options.id}/${options.courseid}/?isCreate=${options.iscreate}&prefix=${options.prefix}`;

            if (options.iscreate)
                views.push({ icon: "bar-chart-o", url, buttons: ["save"] });
            else
                views.push({ icon: "bar-chart-o", url });


            modal.show({ title: options.title, views: views, callback: callback });
        },

        //modal for virtual events

        createVirtualEvent: function (options) {
            var info = { name: "Info", url: `/manage/virtualevents/info/${options.id}` };
            var session = { name: "Sessions", url: `/manage/virtualevents/clsession/${options.id}?modalpop=${options.modalpop}` };
            var sharing = { name: "Sharing", url: `/setup/sharing/permissions/${options.id}/${options.sharetype}` };
            var _wizdata = {
                name: options.header,
                steps: [info, session, sharing],
            };
            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },

        editVirtualEvent: function (options) {
            var views = [];
            views.push({ icon: "calendar-times-o", name: "Session", url: `/manage/virtualevents/clsession/${options.id}` });
            views.push({ icon: "bar-chart-o", name: "Report", url: `/manage/virtualevents/eventreport/${options.id}` });

            views.push({ icon: "info-circle", name: "Info", url: `/manage/virtualevents/info/${options.id}`, buttons: ["save"] });

            if (options.canshare)
                views.push({ icon: "share-alt", name: "Sharing", url: `/setup/sharing/permissions/${options.id}/${options.sharetype}`, buttons: ["save"] });
            var heading = "Virtual Event"
            if (options.eventtype === parseInt("11"))
                heading = "In-Person Event"

            var title = heading + " >  Sessions  ( <b><i>" + options.eventname + "</i></b> )";
            modal.show({ title: title, views: views });
        },

        showVirtualEventInfo: function (options) {
            var views = [];
            views.push({ icon: "info-circle", name: "Info", url: `/manage/virtualevents/info/${options.id}`, buttons: ["save"] });
            views.push({ icon: "calendar-times-o", name: "Sessions", url: `/manage/virtualevents/clsession/${options.id}` });
            views.push({ icon: "bar-chart-o", name: "Report", url: `/manage/virtualevents/eventreport/${options.id}` });
            if (options.canshare)
                views.push({ icon: "share-alt", name: "Sharing", url: `/setup/sharing/permissions/${options.id}/${options.sharetype}`, buttons: ["save"] });

            var heading = "Virtual Event";
            if (options.eventtype === parseInt("11"))
                heading = "In-Person Event";

            var title = `${heading} >  Info  ( <b><i>${options.eventname}</i></b> )`;
            modal.show({ title: title, views: views });
        },

        showVirtualSessionInfo: function (options) {
            var views = [];
            views.push({ icon: "calendar-times-o", name: "Sessions", url: `/manage/virtualevents/clsession/${options.id}` });
            views.push({ icon: "info-circle", name: "Info", url: `/manage/virtualevents/info/${options.id}`, buttons: ["save"] });
            views.push({ icon: "bar-chart-o", name: "Report", url: `/manage/virtualevents/eventreport/${options.id}` });
            if (options.canshare)
                views.push({ icon: "share-alt", name: "Sharing", url: `/setup/sharing/permissions/${options.id}/${options.sharetype}`, buttons: ["save"] });

            var heading = "Virtual Event";
            if (options.eventtype === parseInt("11"))
                heading = "In-Person Event";

            var title = `${heading} >  Sessions  ( <b><i>${options.eventname}</i></b> )`;
            modal.show({ title: title, views: views });
        },

        showVirtualSessionCreate: function (options, callback) {
            var views = [];
            const url = `/manage/virtualevents/createsession/${options.id}/${options.courseid}/?isCreate=${options.iscreate}&prefix=${options.prefix}`;

            if (options.iscreate)
                views.push({ icon: "bar-chart-o", url, buttons: ["save"] });
            else
                views.push({ icon: "bar-chart-o", url });


            modal.show({ title: options.title, views: views, callback: callback });
        },

        showVirtualSessionEdit: function (options) {
            var views = [];
            var buttons = [];
            if (options.candeleteevents)
                buttons = ["save"];

            views.push({icon: "info-circle",name: "Info",url: `/manage/virtualevents/createsession/${options.id}/${options.eventid}`, buttons: buttons});

            var title = `${views[0].name}<b><i> (${options.sessionid})</i></b>`;
            modal.show({ title: title, views: views });
        },

        //end of modals for virtual events
        showSolutionStatsGrid: function (options) {
            var urlParam = "";
            if (options.section != undefined)
                urlParam += urlParam != "" ? "&section=" + encodeURIComponent(options.section) : "?section=" + encodeURIComponent(options.section);
            if (options.type != undefined)
                urlParam += urlParam != "" ? "&type=" + encodeURIComponent(options.type) : "?type=" + encodeURIComponent(options.type);
            if (options.orderstatus != undefined)
                urlParam += urlParam != "" ? "&orderstatus=" + encodeURIComponent(options.orderstatus) : "?orderstatus=" + encodeURIComponent(options.orderstatus);
            var views = [{
                icon: "", name: "", url: "/widgets/programstatsgrid/" + urlParam
            }];
            modal.show({ title: options.title, views: views });
        },
        showTotalActivePartners: function (options) {
             var ja = [];        
        if (options.selectedrange != undefined)
            ja.push("selectedrange=" + (options.selectedrange));
        if (options.startdate != undefined)
            ja.push("startdate=" + (options.startdate));
        if (options.enddate != enddate)
            ja.push("enddate=" + (options.enddate));
        if (options.linktoid != undefined)
            ja.push("linktoid=" + (options.linktoid));
        if (options.linktype != undefined)
            ja.push("linktype=" + (options.linktype));
        if (options.viewoption != undefined)
            ja.push("viewoption=" + (options.viewoption));
        if (options.orgviewoption != undefined)
            ja.push("orgviewoption=" + (options.orgviewoption));
        if (options.groupviewoption != undefined)
            ja.push("groupviewoption=" + (options.groupviewoption));
            if (options.isusers != undefined)
            ja.push("isusers=" + (options.isusers));
            
            var views = [{ icon: "cube", name: options.title, url: "widgets/custom/partnersactivepagegrid?default=1" + ((ja.length > 0) ? ("&" + ja.join('&')) : "") }];
    modal.show({ title: options.title, views: views });
   
        },
        showPaymentSettings: function (settingOptions, closeCallback) {
            var urlParam = "";
            var pageURL = "/setup/configure/payments";
            var views = [{ name: 'Configure', url: pageURL + urlParam }];
            modal.show({ title: settingOptions.title, views: views, closeCallback: closeCallback });
        },
        showLeadsGenerated: function (id, options){
            var views = [{ icon: "", name: "", url: "/manage/marketplace/leads/" + id + "/" + options.linkType, iconprefix: "far"}];
            modal.show({ title: `Leads Generated > (${options.name})`, views: views });
        },
        importContacts: function(options){
            var views = [{ icon: "", name: "", url: `/connections/import/${options.linktype}/${options.linkid}/${options.stepid}/${options.stepdelay}?importid=${options.importid}`, iconprefix: "" }];
            modal.show({ title: options.title, views: views });
        },
        

        showSalesActivityCount: function (options) {
            var urlParam = "";
            if (options.isOpportunity != undefined && options.isOpportunity != "")
                urlParam += "&isopportunity=" + options.isOpportunity;
            if (options.isCall != undefined && options.isCall != "")
                urlParam += "&isCall=" + options.isCall;
            var views = [{ icon: "", name: "", url: "/widgets/grid/salesactivitylist?templateid=" + options.templateid + "&playbookid=" + options.playbookid + "&selectedrange=" + options.selectedrange + "&type=" + options.types + urlParam }];
            modal.show({ title: options.name, views: views, locked: true });
        },
        
        showCoursesCompletedGrid: function (options) {
            var urlParam = "";
            if (options.course != undefined)
                urlParam += urlParam != "" ? "&course=" + options.course : "?course=" + options.course;
            if (options.certificate != undefined)
                urlParam += urlParam != "" ? "&certificate=" + options.certificate : "?certificate=" + options.certificate;
            if (options.totalcourse != undefined)
                urlParam += urlParam != "" ? "&totalcourse=" + options.totalcourse : "?totalcourse=" + options.totalcourse;
            if (options.totalcertificate != undefined)
                urlParam += urlParam != "" ? "&totalcertificate=" + options.totalcertificate : "?totalcertificate=" + options.totalcertificate;
            var views = [{ icon: "", name: "", url: "/widgets/grid/coursescompleted" + urlParam }];
            modal.show({ title: options.name, views: views, locked: true });
        },
        showOpportunityPoolWizard: function (id, type, options) {
            var _wizdata = {
                name: options.create,
                steps: [
                    { name: options.info, url: "/setup/opprouting/info/" + id }
                ],
            };
            if (type == 10000 && options.hasuseraccess)
                _wizdata.steps.push({ name: options.users, url: "/setup/opprouting/users/" + id + "?iscreateopppool=" + true });
            else if (options.hasorganizationaccess)
                _wizdata.steps.push({ name: options.organizations, url: "/setup/opprouting/organizations/" + id + "?iscreateopppool=" + true });

            _wizdata.steps.push({ icon: "list", name: options.rules, url: "/setup/opprouting/rules/" + id });
            _wizdata.steps.push({ name: options.Opportunity, url: "/setup/opprouting/opportunities/" + id + "?iscreateopppool=" + true });

            var _wizard = new wizard(_wizdata);
            _wizard.show();
        },
        showOpportunityPools: function (data, options) {
            $.extend({
                lead: false 
            });
            var views = [
                { icon: "info-circle", name: options.info, url: "/setup/opprouting/info/" + data.id, buttons: ["save"] },
                { icon: "list", name: options.rules, url: "/setup/opprouting/rules/" + data.id, buttons: ["save"] }
            ];

            if (data.linktype == 10000 && options.hasuseraccess)
                views.unshift({ icon: "user-alt", name: 'Add/Remove Users', url: "/setup/opprouting/users/" + data.id, buttons: ["save"] });
            else if (options.hasorganizationaccess)
                views.unshift({ icon: "building", name: 'Add/Remove Organizations', url: "/setup/opprouting/organizations/" + data.id, buttons: ["save"] });

            
               if (data.lead){ 
                   if(data.unassigned == 1){
                   views.unshift({ icon: "cubes", name: 'Opportunities', url: "/setup/opprouting/opportunities/" + data.id + "?iscreateleadpool=" + true + "&isunassigned=" + data.unassigned });
               } else {
                   views.unshift({ icon: "cubes", name: 'Shared Opportunities', url: "/setup/opprouting/opportunities/" + data.id + "?iscreateleadpool=" + true + "&isunassigned=" + data.unassigned });
               }
             }
                else
                   views.push({ icon: "cubes", name: 'Shared Opportunities', url: "/setup/opprouting/opportunities/" + data.id + "?iscreateleadpool=" + true + "&isunassigned=" + data.unassigned  });
          
            var title = 'Opportunity Pool' + ' > ' + '' + views[0].name + '' + ' (<b><i>' + data.name + '</i></b>)';
            modal.show({ title: title, views: views });
        }
    }
}();
function GetStatsWidgetDetails(widgetname) {
    var WidgetsParameter = {};
    WidgetsParameter["widgetName"] = widgetname;
    switch (widgetname) {
        case "totaldeals":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'Click here to view total Deals';
            WidgetsParameter["WidgetHeaderName"] = 'Total Deals';
            //WidgetsParameter["SummaryText"] = BindStatsData(widgetname);
            break;
        case "approveddeals":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'Approved Deals';
            WidgetsParameter["WidgetHeaderName"] = 'Approved Deals';
            break;
        case "hothighleads":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'Hot High Leads';
            WidgetsParameter["WidgetHeaderName"] = 'Hot High Leads';
            break;
        case "totalmdffundplan":
            WidgetsParameter["IconName"] = "fa-money-bill-alt";
            WidgetsParameter["ToolTipText"] = 'Click here to view total MDF fund plans';
            WidgetsParameter["WidgetHeaderName"] = 'Total MDF Fund Plan';
            //WidgetsParameter["SummaryText"] = BindStatsData(widgetname);
            break;
        case "activeleads":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'Click here to view Active Leads';
            WidgetsParameter["WidgetHeaderName"] = 'Active Leads';
            //WidgetsParameter["SummaryText"] = BindStatsData(widgetname);
            break;
        case "hotleads":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'Click here to view Hot Leads';
            WidgetsParameter["WidgetHeaderName"] = 'Hot Leads';
            //WidgetsParameter["SummaryText"] = BindStatsData(widgetname);
            break;
        case "highleads":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'Click here to view High Leads';
            WidgetsParameter["WidgetHeaderName"] = 'High Leads';
            //WidgetsParameter["SummaryText"] = BindStatsData(widgetname);
            break;
        case "mediumleads":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'Click here to view Medium Leads';
            WidgetsParameter["WidgetHeaderName"] = 'Medium Leads';
            //WidgetsParameter["SummaryText"] = BindStatsData(widgetname);
            break;
        case "lowleads":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'Click here to view Low Leads';
            WidgetsParameter["WidgetHeaderName"] = 'Low Leads';
            //WidgetsParameter["SummaryText"] = BindStatsData(widgetname);
            break;
        case "webleads":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'Web Leads';
            WidgetsParameter["WidgetHeaderName"] = 'Web Leads';
            break;
        case "totalopportunity":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'Total Opportunities';
            WidgetsParameter["WidgetHeaderName"] = 'Total Opportunities';
            break;
        case "opportunitieswon":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'Opportunities Won';
            WidgetsParameter["WidgetHeaderName"] = 'Opportunities Won';
            break;
        case "totalrevenue":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'Total Revenue';
            WidgetsParameter["WidgetHeaderName"] = 'Total Revenue';
            break;
        case "newmdfrequests":
            WidgetsParameter["IconName"] = "fa-fw fa-dollar-sign";
            WidgetsParameter["ToolTipText"] = 'New MDF Requests';
            WidgetsParameter["WidgetHeaderName"] = 'New MDF Requests';
            break;
        case "pendingmdfrequests":
            WidgetsParameter["IconName"] = "fa-fw fa-dollar-sign";
            WidgetsParameter["ToolTipText"] = 'Pending MDF Requests';
            WidgetsParameter["WidgetHeaderName"] = 'Pending MDF Requests';
            break;
        case "approvedmdfrequests":
            WidgetsParameter["IconName"] = "fa-fw fa-dollar-sign";
            WidgetsParameter["ToolTipText"] = 'Approved MDF Requests';
            WidgetsParameter["WidgetHeaderName"] = 'Approved MDF Requests';
            break;
        case "reimbursedmdfrequests":
            WidgetsParameter["IconName"] = "fa-fw fa-dollar-sign";
            WidgetsParameter["ToolTipText"] = 'Reimbursed MDF Requests';
            WidgetsParameter["WidgetHeaderName"] = 'Reimbursed MDF Requests';
            break;
        case "allmdfrequests":
            WidgetsParameter["IconName"] = "fa-fw fa-dollar-sign";
            WidgetsParameter["ToolTipText"] = 'All MDF Requests';
            WidgetsParameter["WidgetHeaderName"] = 'All MDF Requests';
            break;
        case "totalmdfopportunities":
            WidgetsParameter["IconName"] = "fa-fw fa-dollar-sign";
            WidgetsParameter["ToolTipText"] = 'Total MDF Opportunities';
            WidgetsParameter["WidgetHeaderName"] = 'Total MDF Opportunities';
            break;
        case "totalmdfleads":
            WidgetsParameter["IconName"] = "fa-fw fa-dollar-sign";
            WidgetsParameter["ToolTipText"] = 'Total MDF Leads';
            WidgetsParameter["WidgetHeaderName"] = 'Total MDF Leads';
            break;
        case "totalemailsent":
            WidgetsParameter["IconName"] = "fa-fw fa-envelope";
            WidgetsParameter["ToolTipText"] = 'Total Email Sent';
            WidgetsParameter["WidgetHeaderName"] = 'Total Email Sent';
            break;
        case "totalopenedemails":
            WidgetsParameter["IconName"] = "fa-fw fa-envelope";
            WidgetsParameter["ToolTipText"] = 'Total Opened Emails';
            WidgetsParameter["WidgetHeaderName"] = 'Total Opened Emails';
            break;
        case "totalclickedemails":
            WidgetsParameter["IconName"] = "fa-fw fa-envelope";
            WidgetsParameter["ToolTipText"] = 'Total Clicked Emails';
            WidgetsParameter["WidgetHeaderName"] = 'Total Clicked Emails';
            break;
        case "uniquecontactsopenmaillast30day":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'View Unique Contacts who opened email within 30 days';
            WidgetsParameter["WidgetHeaderName"] = 'Opened email in 30 days';
            //WidgetsParameter["SummaryText"] = BindStatsData(widgetname);
            break;
        case "uniquecontactsopenmaillast90day":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'View Unique Contacts who opened email within 90 days';
            WidgetsParameter["WidgetHeaderName"] = 'Opened email in 90 days';
            //WidgetsParameter["SummaryText"] = BindStatsData(widgetname);
            break;
        case "uniquecontactsclickedmaillast30day":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'View Unique Contacts who clicked Link within 30 days';
            WidgetsParameter["WidgetHeaderName"] = 'Link Clicked in 30 days';
            //WidgetsParameter["SummaryText"] = BindStatsData(widgetname);
            break;
        case "uniquecontactsclickedmaillast90day":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'View Unique Contacts who clicked Link within 90 days';
            WidgetsParameter["WidgetHeaderName"] = 'Link Clicked in 90 days';
            //WidgetsParameter["SummaryText"] = BindStatsData(widgetname);
            break;
        case "ActiveSocialDripCampaign":
            WidgetsParameter["IconName"] = "fa-user";
            WidgetsParameter["ToolTipText"] = 'Active Social Drip Campaign';
            WidgetsParameter["WidgetHeaderName"] = 'Active Social Drip Campaign';
            //WidgetsParameter["SummaryText"] = BindStatsData(widgetname);
            break;
        default:
            WidgetsParameter["IconName"] = "";
            WidgetsParameter["ToolTipText"] = "";
            WidgetsParameter["WidgetHeaderName"] = "";
            WidgetsParameter["SummaryText"] = "";
            break;
    }
    return WidgetsParameter;
}

function fixedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
        return '%' + c.charCodeAt(0).toString(16);
    });
}

function isInValidTitle(str) {
   return /["?]/.test(str);
}

function isValidURL(string) {
    return string.match(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,16}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/g) !== null;
}

function getTimeStamp() {
    var timestamp = $.now();
    return timestamp;
}

var events = function () {

    //simple event is just a light weight function that binds and triggers the event without additional data
    function simpleEvent(name) {
        return function (domel, callback) {
            if (domel === undefined || callback === undefined) {
                //if neither domel or callback is defined then we are trying to trigger the event
                $("div[eventListener]").trigger(name);
            } else {
                //if domel and callback are defined then we are trying to listen for the event
                domel.attr("eventListener", true);
                domel.on(name, callback);
            }
        }
    };

    return {
        savedContact: simpleEvent("savedContact"),
        savedContract: simpleEvent("savedContract"),
        savedContactList: simpleEvent("savedContactList"),
        incetiveApproval: simpleEvent("incetiveApproval"),
        savedProjectList: simpleEvent("savedProjectList"),
        savedCRM: simpleEvent("savedCRM"),
        savedCompanyList: simpleEvent("savedCompanyList"),
        savedDataBaseRecords: simpleEvent("savedDataBaseRecords"),
        savedWebsite: simpleEvent("savedWebsite"),
        savedPrint: simpleEvent("savedPrint"),
        savedPresentation: simpleEvent("savedPresentation"),
        reloadSlideThumbnails: simpleEvent("reloadSlideThumbnails"),
        savedLandingPage: simpleEvent("savedLandingPage"),
        savedEbook: simpleEvent("savedEbook"),
        savedPlaybook: simpleEvent("savedPlaybook"),
        savedTemplate: simpleEvent("savedTemplate"),
        savedSMS: simpleEvent("savedSMS"),
        savedEmail: simpleEvent("savedEmail"),
        savedFundplan: simpleEvent("savedFundplan"),
        savedFundplanActivity: simpleEvent("savedFundplanActivity"),
        savedCoOpFundplanActivity: simpleEvent("savedCoOpFundplanActivity"),
        savedRequests: simpleEvent("savedRequests"),
        savedUpdateRequests: simpleEvent("savedUpdateRequests"),
        savedPoll: simpleEvent("savedPoll"),
        savedQuestionnaire: simpleEvent("savedQuestionnaire"),
        savedEditLeads: simpleEvent("savedEditLeads"),
        savedLeadRequests: simpleEvent("savedLeadRequests"),
        savedCompany: simpleEvent("savedCompany"),
        savedPresets: simpleEvent("savedPresets"),
        savedGroups: simpleEvent("savedGroups"),
        savedOrganizations: simpleEvent("savedOrganizations"),
        savedUsers: simpleEvent("savedUsers"),
        resetUsers: simpleEvent("resetUsers"),
        savedRoles: simpleEvent("savedRoles"),
        savedBrand: simpleEvent("savedBrand"),
        savedBrandTheme: simpleEvent("savedBrandTheme"),
        savedBrandPalette: simpleEvent("savedBrandPalette"),
        savedBrandFile: simpleEvent("savedBrandFile"),
        savedBrandContent: simpleEvent("savedBrandContent"),
        readContactNotification: simpleEvent("readContactNotification"),
        savedTrackingLink: simpleEvent("savedTrackingLink"),
        savedKeyword: simpleEvent("savedKeyword"),
        savedDocument: simpleEvent("savedDocument"),
        savedImage: simpleEvent("savedImage"),
        savedVendors: simpleEvent("savedVendors"),
        savedDrip: simpleEvent("savedDrip"),
        savedSocialDrip: simpleEvent("savedSocialDrip"),
        savedSocialDripTemplate: simpleEvent("savedSocialDripTemplate"),
        savedSocialListening: simpleEvent("savedSocialListening"),
        savedDripContacts: simpleEvent("savedDripContacts"),
        savedTodos: simpleEvent("savedTodos"),
        savedtracklinks: simpleEvent("savedtracklinks"),
        savedRating: simpleEvent("savedRating"),
        savedPartnersList: simpleEvent("savedPartnersList"),
        savedImportedPartners: simpleEvent("savedImportedPartners"),
        savedImportedContacts: simpleEvent("savedImportedContacts"),
        savedImportedHardbouncedContacts: simpleEvent("savedImportedHardbouncedContacts"),
        savedtracklinks: simpleEvent("savedtracklinks"),
        savedFormTeplate: simpleEvent("savedFormTeplate"),
        ExportContacts: simpleEvent("ExportContacts"),
        ExportUsers: simpleEvent("ExportUsers"),
        savedImportedAccounts: simpleEvent("savedImportedAccounts"),
        savedImportedEventCalendar: simpleEvent("savedImportedEventCalendar"),
        savedReferenceList: simpleEvent("savedReferenceList"),
        savedlistcontacts: simpleEvent("savedlistcontacts"),
        savedContactActiveList: simpleEvent("savedContactActiveList"),
        savedContactprograms: simpleEvent("savedContactprograms"),
        savedContactUserSharing: simpleEvent("savedContactUserSharing"),
        savedListSharing: simpleEvent("savedListSharing"),
        SaveOrgGroup: simpleEvent("SaveOrgGroup"),
        SaveOrgUser: simpleEvent("SaveOrgUser"),
        savedReferenceList: simpleEvent("savedReferenceList"),
        savedSocialDripPerDayMessages: simpleEvent("savedSocialDripPerDayMessages"),
        savedSocialDripSpecificDayMessages: simpleEvent("savedSocialDripSpecificDayMessages"),
        savedSocialDirectorUsers: simpleEvent("savedSocialDirectorUsers"),
        savedSocialDirectorGroups: simpleEvent("savedSocialDirectorGroups"),
        savedSocialDirectorOrganizations: simpleEvent("savedSocialDirectorOrganizations"),
        savedtracksites: simpleEvent("savedtracksites"),
        savedWidget: simpleEvent("savedWidget"),
        savedWidgetGroup: simpleEvent("savedWidgetGroup"),
        savedPersona: simpleEvent("savedPersona"),
        ExportOpportunities: simpleEvent("ExportOpportunities"),
        savedScoringRules: simpleEvent("savedScoringRules"),
        savedScoringModels: simpleEvent("savedScoringModels"),
        savedAssetSearch: simpleEvent("savedAssetSearch"),
        savedVideo: simpleEvent("savedVideo"),
        savedInternalPlaybook: simpleEvent("savedInternalPlaybook"),
        savedInternalPlaybooks: simpleEvent("savedInternalPlaybooks"),
        savedCertification: simpleEvent("savedCertification"),//Added by Lalita
        ExportReports: simpleEvent("ExportReports"),
        savedImportedUsers: simpleEvent("savedImportedUsers"),
        ExportPdfReports: simpleEvent("ExportPdfReports"),
        ExportDatabases: simpleEvent("ExportDatabases"),
        savedDeveloperApi: simpleEvent("savedDeveloperApi"),
        savedFilterCategory: simpleEvent("savedFilterCategory"),
        savedFilters: simpleEvent("savedFilters"),
        savedPricing: simpleEvent("savedPricing"),
        savedTemplateApproval: simpleEvent("savedTemplateApproval"),
        savedLeadPool: simpleEvent("savedLeadPool"),
        savedLeadPool: simpleEvent("savedLeadPool"),
        savedLeadUsers: simpleEvent("savedLeadUsers"),
        savedLeadContacts: simpleEvent("savedLeadContacts"),
        savedInternalPlaybook: simpleEvent("savedInternalPlaybook"),
        savedOffline: simpleEvent("savedOffline"),
        savedOpportunity: simpleEvent("savedOpportunity"),
        GetMDFProgram: simpleEvent("GetMDFProgram"),
        GetMDFClaims: simpleEvent("GetMDFClaims"),
        GetMDFInvitations: simpleEvent("GetMDFInvitations"),
        GetMDFActivityRequests: simpleEvent("GetMDFActivityRequests"),
        GetMDFClaimRequests: simpleEvent("GetMDFClaimRequests"),
        savedAssociateOpportunity: simpleEvent("savedAssociateOpportunity"),
        savedCaseType: simpleEvent("savedCaseType"),
        savedWebBanner: simpleEvent("savedWebBanner"),
        loadDataroomDetails: simpleEvent("loadDataroomDetails"),
        savedPhone: simpleEvent("savedPhone"),
        savedSocialDripMessages: simpleEvent("savedSocialDripMessages"),
        savedSocialDripSpecificMessages: simpleEvent("savedSocialDripSpecificMessages"),
        associated_contacts: simpleEvent("associated_contacts"),
        refreshAccount: simpleEvent("refreshAccount"),
        savedFieldSetTypes: simpleEvent("savedFieldSetTypes"),
        saveIncentive: simpleEvent("saveIncentive"),
        playbookContactList: simpleEvent("playbookContactList"),
        savedContents: simpleEvent("savedContent"),
        savedTemplatesContentSyndication:simpleEvent("savedTemplateContentSyndication"),
        savedOpportunityPicker: simpleEvent("savedOpportunityPicker"),
        refreshTemplateVersions: simpleEvent("refreshTemplateVersions"),
        contactLimit: simpleEvent("contactLimit"),
        savedMdfConditionList: simpleEvent("savedMdfConditionList"),
        savedCaseMessage: simpleEvent("savedCaseMessage"),
        savedCampaigns: simpleEvent("savedCampaigns"),
        savedImportedSalesData: simpleEvent("savedImportedSalesData"),
        refreshImportedSalesData: simpleEvent("refreshImportedSalesData"),
        savedImportedSalesDataEntries: simpleEvent("savedImportedSalesDataEntries"),
        savedOrganizationGoals: simpleEvent("savedOrganizationGoals"),
        savedSocialSyndicationCategory: simpleEvent("savedSocialSyndicationCategory"),
        reloadRedemptionStatus: simpleEvent("reloadRedemptionStatus"),
        reloadMarketplaceOrders: simpleEvent("reloadMarketplaceOrders"),
        reloadMarketplaceCartItems: simpleEvent("reloadMarketplaceCartItems"),
        expirypointreport: simpleEvent("expirypointreport"),
        savedVideoMedia: simpleEvent("savedVideoMedia"),
        updatetodostatus: simpleEvent("updatetodostatus"),
        donetodostatus: simpleEvent("donetodostatus"),
        todostatusdone: simpleEvent("todostatusdone"),
        ExportCases: simpleEvent("ExportCases"),
        ExportAccount: simpleEvent("ExportAccount"),
        ExportDeals: simpleEvent("ExportDeals"),
        loadVendorWidgets: simpleEvent("loadVendorWidgets"),
		savedFavorites: simpleEvent("savedFavorites"),
        savedMDFProjectList: simpleEvent("saveMDFProjectList"),
        savedMDFClaimList: simpleEvent("saveClaimProjectList"),
        savedPlaybookTemplate: simpleEvent("savedPlaybookTemplate"),
        //ift  admin page start
        savedIQTemplate: simpleEvent("savedIQTemplate"),
        savedFieldsTemplate: simpleEvent("savedFieldsTemplate"),
        savedGroupFieldsTemplate: simpleEvent("savedGroupFieldsTemplate"),
        //ift  admin page end
        savedChannelmanagerFeed: simpleEvent("savedChannelmanagerFeed"),
        savedSolutionType: simpleEvent("savedSolutionType"),
        savedSolutionRecords: simpleEvent("savedSolutionRecords"),
        savedProjectRecords: simpleEvent("savedProjectRecords"),
        savedAnnouncement: simpleEvent("savedAnnouncement"),
        saveRenewalSalesData: simpleEvent("saveRenewalSalesData"),
        savedCustomFeatures: simpleEvent("savedCustomFeatures"),
        savedcforglists: simpleEvent("savedcforglists"),
        savedGroupRole: simpleEvent("savedGroupRole"),
        savedOrganizationRole: simpleEvent("savedOrganizationRole"),
        savedUserRole: simpleEvent("savedUserRole"),        
        refreshIncentiveScores: simpleEvent("refreshIncentiveScores"),
        savedAccounts: simpleEvent("savedAccounts"),
        savedOptingReport: simpleEvent("savedOptingReport"),
        savedEnablementTool: simpleEvent("savedEnablementTool"),
        savedTiers: simpleEvent("savedTiers"),
        savedTierGroups: simpleEvent("savedTierGroups"),
        refreshSSOInfo: simpleEvent("refreshSSOInfo"),
        refreshMarketplace: simpleEvent("refreshMarketplace"),
        savedSolutionLinks: simpleEvent("savedSolutionLinks"),
        refreshMarketplace: simpleEvent("refreshMarketplace"),
        emailStage: simpleEvent("getdripcontactsbyemailstage"),
        savedDealUserSharing: simpleEvent("savedDealUserSharing"),
        savedTodo: simpleEvent("savedTodo"),
        savedCategory: simpleEvent("savedCategory"),
        refreshApproverContractUsers: simpleEvent("refreshApproverContractUsers"),
        savedCategory: simpleEvent("savedCategory"),
        refreshWidgetAssets: simpleEvent("refreshWidgetAssets"),
        savedsystemnotificationconfiguration: simpleEvent("savedsystemnotificationconfiguration"),
        systemnotificationgrid: simpleEvent("systemnotificationgrid"),
        databaseRecordApproved: simpleEvent("databaseRecordApproved"),
        refreshSolutionMarketplace: simpleEvent("refreshSolutionMarketplace"),
        associated_accounts: simpleEvent("associated_accounts"),
        refreshdashboardeventlist: simpleEvent("refreshdashboardeventlist"),
		savedLanguageTranslators: simpleEvent("savedLanguageTranslators"),
        refreshSalesPlaybook: simpleEvent("refreshSalesPlaybook"),
        savedOrphanDeal: simpleEvent("savedOrphanDeal"),
        savedOrphanOpportunity: simpleEvent("savedOrphanOpportunity"),
        refreshIncentiveScores: simpleEvent("refreshIncentiveScores"),
        savedVirtualEvent: simpleEvent("savedVirtualEvent"),
        savedEventSession: simpleEvent("savedEventSession"),
        savePaymentApprovalStatus: simpleEvent("savePaymentApprovalStatus"),
        savedManageSolution: simpleEvent("savedManageSolution"),
        refreshIDPInfo: simpleEvent("refreshIDPInfo"),
        refreshSolutionPricingRules: simpleEvent("refreshSolutionPricingRules"),
        refreshSolutionPricingRuleConditions: simpleEvent("refreshSolutionPricingRuleConditions")
    };
}();

$.fn.extend({
    rowslide: function (callback) {
        var $row, $tds, highestTd;
        $row = this;
        $tds = this.find("td");
        $row_id = $row.attr("id");
        highestTd = this.getTallestTd($tds);
        return $row.animate({
            opacity: 0
        }, 80, function () {
            var $td, $wrapper, _this = this;
            $tds.each(function (i, td) {
                if (this !== highestTd) {
                    $(this).empty();
                    return $(this).css("padding", "0");
                }
            });
            $td = $(highestTd);
            $wrapper = $("<div/>");
            $wrapper.css($td.css("padding"));
            $td.css("padding", "0");
            $td.wrapInner($wrapper);
            return $td.children("div").animate({
                height: "hide"
            }, 100, "swing", function () {
                $row.remove();
                //console.log($row.attr("id") +" was deleted");
                if (callback) {
                    return callback();
                }
            });
        });
    },
    getTallestTd: function ($tds) {
        var height, index;
        index = -1;
        height = 0;
        $tds.each(function (i, td) {
            if ($(td).height() > height) {
                index = i;
                return height = $(td).height();
            }
        });
        return $tds.get(index);
    }
});

function getUniqueTime() {
    var time = new Date().getTime();
    while (time == new Date().getTime());
    return new Date().getTime();
}

function parseUTCTicks(d) {
    if (d == null || d === undefined)
        return null;
    return Date.parse(d);
}

function parseUTCDate(d) {
    d = parseUTCTicks(d);
    if (d == null || d === undefined)
        return null;
    return new Date(d);
}
function parseUTCDateTimeZoneOffset(d) {
    d = d.replace(/-/g, "/");   // Date.parse is not working for mozilla in format(mm-dd-yyyy);
    if (d == null || d === undefined)
        return null;
    var ticks = Date.parse(d);
    ticks += -((new Date()).getTimezoneOffset() * 60000)
    return new Date(ticks).format("mm/dd/yyyy hh:MM tt");
}

function prettyDate(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;

    time = d.format(dateTimeFormat.longdatepattern + " " + dateTimeFormat.longtimepattern); 

    var date = new Date((time || "").replace(/-/g, "/").replace(/[TZ]/g, " "));
    date = getDateTimeBasedOnTimeZone(date);
    var diff = ((getDateTimeBasedOnTimeZone(new Date()).getTime() - date.getTime()) / 1000);
    var day_diff = Math.floor(diff / 86400);

    if (isNaN(day_diff) || day_diff < 0 || day_diff >= 31)
        return d.format("mmm dd, yyyy");

    return day_diff == 0 && (
			diff < 60 && "just now" ||
			diff < 120 && "1 minute ago" ||
			diff < 3600 && Math.floor(diff / 60) + " minutes ago" ||
			diff < 7200 && "1 hour ago" ||
			diff < 86400 && Math.floor(diff / 3600) + " hours ago") ||
		day_diff == 0 && "Today" ||
		day_diff == 1 && "Yesterday" ||
		day_diff < 7 && day_diff + " days ago" ||
		day_diff < 31 && Math.ceil(day_diff / 7) + " weeks ago";
}

function daydiff(utcdt) {
    var d1 = new Date();
    d1.setHours(0, 0, 0, 0);
    var strdt1 = d1.toString();
    var d2 = new Date(utcdt);
    d2.setHours(0, 0, 0, 0);
    strdt2 = d2.toString()
    var diff = Math.floor((Date.parse(strdt1) - Date.parse(strdt2)) / 86400000);
    return diff;
}

function GetLocalizedLabel(label, fieldLocalization, currentLanguage) {
    var localeName = "";
    var lang = currentLanguage;
    if (fieldLocalization == "" || fieldLocalization == undefined) {
    }
    else {
        var _customLocale = JSON.parse(stringtojson(fieldLocalization));
        var cLocalName = _customLocale[lang];
        if (cLocalName != null || cLocalName != "" || cLocalName != undefined || cLocalName != "undefined")
            localeName = cLocalName;
    }
    if (localeName == null || localeName == "" || localeName == undefined || localeName == "undefined")
        return label;
    else
        return localeName;
    return label;
}

function getDayDiff(endDate , startDate) {
    var d1 = new Date(endDate);
    var strdt1 = d1.toString();
    var d2 = new Date(startDate);
    strdt2 = d2.toString()
    var diff = Math.floor((Date.parse(strdt1) - Date.parse(strdt2)) / 86400000);
    return diff;
}

function RemoveUtcfromdate(dataweb) {
    var getdata = dataweb;
    var startDt = (getdata);
    if (startDt.includes("UTC")) {
        dataweb = startDt.replace(" UTC", "");
    }
    return dataweb;
}

function shortDateFromUTC(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;
    d = getDateTimeBasedOnTimeZone(d);

    var now = new Date();

    if (d.format("dd") == now.format("dd") && d.format("mm") == now.format("mm") && d.format("yyyy") == now.format("yyyy")) {
        return d.format(dateTimeFormat.shorttimepattern);
    }
    return d.format(dateTimeFormat.shortdatepattern);
}
function shortDateFromUTCForUser(time) {
    if (isNaN(new Date(time).getTime()))
        return time;                        //if invalid date is saved returns the original date
    var d = parseUTCDate(time);
    if (d === null) return time;
    d = getDateTimeBasedOnTimeZone(d);

    var now = new Date();

    if (d.format("dd") == now.format("dd") && d.format("mm") == now.format("mm") && d.format("yyyy") == now.format("yyyy")) {
        return d.format(dateTimeFormat.shorttimepattern);
    }
    return d.format(dateTimeFormat.shortdatepattern);
}
function userdateformat(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;
    return d.format(dateTimeFormat.shortdatepattern);
}

function userDateTimeFormat(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;
    return d.format(dateTimeFormat.shortdatepattern + " " + dateTimeFormat.longtimepattern);
}

function shortDateWithoutTimeFromUTC(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;
    d = getDateBasedOnSystemTimeZone(d);//#40867 - Issue of Date in grid if time zone is changed

    var now = new Date();
    return d.format(dateTimeFormat.shortdatepattern);
}
function shortDateWithoutTime(time) {   
    if (time === null) return time;
    var d = time.split(' ')
    var newDate = d[0];
    return newDate;
}
function shortTimeFromUTC(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;
    d = getDateTimeBasedOnTimeZone(d);

    var now = new Date();
    return d.format(dateTimeFormat.shorttimepattern);
}

function shortDateWithTimeFromUTC(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;
    d = getDateTimeBasedOnTimeZone(d);

    var now = new Date();

    //if (d.format("dd") == now.format("dd") && d.format("mm") == now.format("mm") && d.format("yyyy") == now.format("yyyy")) {
    //    return d.format(dateTimeFormat.shorttimepattern);
    //}
    return d.format(dateTimeFormat.shortdatepattern) + " - " + d.format(dateTimeFormat.shorttimepattern);
}

function checkDateCompare(firstDate, secondDate) {
    var firstDt = parseUTCDate(firstDate);
    firstDt = getDateTimeBasedOnTimeZone(firstDt);

    var secondDt = parseUTCDate(secondDate);
    secondDt = getDateTimeBasedOnTimeZone(secondDt);

    var d = new Date(firstDt.getFullYear(), firstDt.getMonth(), firstDt.getDate());
    var d1 = new Date(secondDt.getFullYear(), secondDt.getMonth(), secondDt.getDate());

    if (d > d1)
        return true;
    else
        return false;
}
function shortDateWithoutTimeRegex(value) {
    return value.replace(/[^ -~]/g, '');
}
function checkDateTimeCompare(firstDate, secondDate) {
    var firstDt = parseUTCDate(firstDate);
    firstDt = getDateTimeBasedOnTimeZone(firstDt);

    var secondDt = parseUTCDate(secondDate);
    secondDt = getDateTimeBasedOnTimeZone(secondDt);

    var d = new Date(firstDt.getFullYear(), firstDt.getMonth(), firstDt.getDate(), firstDt.getHours(), firstDt.getMinutes(), firstDt.getSeconds());
    var d1 = new Date(secondDt.getFullYear(), secondDt.getMonth(), secondDt.getDate(), secondDt.getHours(), secondDt.getMinutes(), secondDt.getSeconds());

    if (d > d1)
        return true;
    else
        return false;
}

function decodeHtmlText(html) {
    var txt = document.createElement("span");
    txt.innerHTML = html;
    return txt.innerHTML;
}
// this is to sanitize user input to prevent the xss.
function sanitizeUserInput(userInput) {
    const decodeEntities = (str) => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(str, 'text/html');
        return doc.documentElement.textContent;
    };
    userInput = decodeEntities(userInput);
    return DOMPurify.sanitize(userInput);
}
function htmlToText(html) {
    var txt = document.createElement("span");
    txt.innerHTML = html;
    return txt.textContent;
}

function dateFromUTCForScheduling(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;

    return getDateTimeBasedOnTimeZone(d);
}

function shortDateWithTodayFromUTC(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;

    d = getDateBasedOnSystemTimeZone(d);//to fix date issue in grid
    var now = new Date();

    if (d.getDate() == now.getDate() && d.getMonth() == now.getMonth() && d.getFullYear() == now.getFullYear())
        return 'Today';

    return d.format(dateTimeFormat.shortdatepattern);
}

function longDateFromDateString(time) {
    var datetime = time.split(' ');
    var date = datetime[0].split('-');
    var time = datetime[1].split(':');
    var formatedDate = date[1] + "/" + date[2] + "/" + date[0] + " " + time[0] + ":" + time[1] + ":" + time[2];

    var d = parseUTCDate(formatedDate);
    if (d === null) return time;

    d = getDateTimeBasedOnTimeZone(d);
    return d.format(dateTimeFormat.longdatepattern + " " + dateTimeFormat.longtimepattern);
}

function longDateFromUTC(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;

    d = getDateTimeBasedOnTimeZone(d);
    return d.format(dateTimeFormat.longdatepattern + " " + dateTimeFormat.longtimepattern);
}

function dateBasedOnTimeZone(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;

    d = getDateTimeBasedOnTimeZone(d);
    return d.format(dateTimeFormat.longdatepattern);
}

function getTimeStampDate(timeStamp){
    var d = new Date(timeStamp);
    return d.toLocaleString("en-US", {
        year: "numeric",
        month: "long",
        day: "2-digit", hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        hour12: true, 
        weekday: "long"
    });
}

function longDateWithDayFromUTC(time) {
    var weekday = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    var d = parseUTCDate(time);
    if (d === null) return time;
    var day1 = weekday[d.getUTCDay()];
    d = getDateTimeBasedOnTimeZone(d);

    return day1 + " " + d.format("mmmm dd yyyy hh:MM:ss tt");
}

function longDateFromUTCwithUTC(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;
    d = getDateTimeBasedOnTimeZone(d);
    var ttime = d.format("mm/dd/yyyy hh:MM:ss tt");
    return ttime;

}
function longDateFromUTCwithoutSeconds(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;
    d = getDateTimeBasedOnTimeZone(d);
    var ttime = d.format("dd mmmm yyyy hh:MM tt");
    return ttime;

}

function longDateTime(dt, type) {
    if (dt.indexOf("UTC") == -1)
        var date = new Date(dt + " UTC");
    else
        var date = new Date(dt);

    var d = parseUTCDate(date);
    if (d === null) return dt;

    d = getDateTimeBasedOnTimeZone(d);
    if (type == "date")
        return d.format(dateTimeFormat.shortdatepattern);
    else
        return d.format(dateTimeFormat.shortdatepattern + " " + dateTimeFormat.longtimepattern);
}

function minuteSecondFormat(duration) {
    var minutes = Math.floor(duration / 60);
    var seconds = duration % 60;
    var d = minutes + ' min(s) ' + seconds + ' sec(s)';
    return d;
}

function shortMinuteSecondFormat(duration) {
    var minutes = Math.floor(duration / 60);
    var seconds = duration % 60;
    minutes = (minutes < 10) ? "0" + minutes : minutes;
    seconds = (seconds < 10) ? "0" + seconds : seconds;
    var d = minutes + ":" + seconds;
    return d;
}

function prettyDate2(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;

    time = d.format("mm/dd/yyyy hh:mm:ss tt");
    var diff = (((new Date()).getTime() - d.getTime()) / 1000);
    var day_diff = Math.floor(diff / 86400);
    if (isNaN(day_diff) || day_diff < 0 || day_diff >= 31)
        return time;

    return day_diff == 0 && (
        diff < 60 && "just now" ||
        diff < 120 && "1 minute ago" ||
        diff < 3600 && Math.floor(diff / 60) + " minutes ago" ||
        diff < 7200 && "1 hour ago" ||
        diff < 86400 && Math.floor(diff / 3600) + " hours ago") ||
    day_diff == 0 && "Today" ||
    day_diff == 1 && "Yesterday" ||
    day_diff < 7 && day_diff + " days ago" ||
    day_diff < 31 && Math.ceil(day_diff / 7) + " weeks ago";
}

var _scriptsToLoad = [];
function loadScripts(scripts, callback) {
    for (var i = scripts.length - 1; i >= 0; i--)
        _scriptsToLoad.push(scripts[i]);

    processScripts(callback);
}

function processScripts(callback) {
    var script = _scriptsToLoad.pop();
    loadScript(script, function () {
        if (_scriptsToLoad.length == 0)
            callback();
        else
            processScripts(callback);
    });
}

function generateRatingHtml(number, itemid, isuserrating) {
    var ratecontent = "";
    for (var i = 1; i <= 5; i++) {
        if (i <= number) {
            if (isuserrating)
                ratecontent += "<i class='fa rating-star-yellow fa-star' itemid='" + itemid + "' value='" + i + "' style='cursor:pointer;'>&nbsp;</i>";
            else
                ratecontent += "<i class='fa rating-star-blue fa-star' itemid='" + itemid + "' value='" + i + "' style='cursor:pointer;'>&nbsp;</i>";
        }
        else
            ratecontent += "<i class='far fa-star' itemid='" + itemid + "' value='" + i + "' style='cursor:pointer;'>&nbsp;</i>";
    }
    //ratecontent += "<i class='fa fa-comments' id='rating' itemid='" + itemid + "' style='float:right;cursor:pointer;'>&nbsp;</i>";
    return ratecontent;
}

var filterIndex = 0;
function FilterAutoComplete(element, url, filterData, _requestID, isFilterDisplayEnabled = false, isAssetConfig = false, isRemoveFilter = true, apiFilter = {}, isPlaceHolderShown=false) {
    var _filterID = $(element)[0].id;
    var placeHolder = 'SELECT OR ADD FILTER(S)';
    if (!isPlaceHolderShown)
        placeHolder = '';
    $(element).select2({
        placeholder: placeHolder,
        minimumInputLength: 1,
        allowClear: false,
        //maximumSelectionSize: 1,
        multiple: true,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (ValidateSpecialCharacters(term, _requestID)) {
                return {
                    q: term,
                    limit: 25,
                    type: 520,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    apifilter: JSON.stringify(apiFilter[0])
                    };
                }
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatFilterResult,
        formatSelection: function (data) {
            var name = (data.name).replace(/[^\x00 -\x7F]/g, "").trim(); //if there are extra spaces in the name , trim them
            var $list = $("#s2id_" + _filterID+" li[fid]");
            var id = filterIndex--;
            var isHtml = false;
            var isAddFilter = data.isaddfilter != undefined && data.isaddfilter != null ? data.isaddfilter : false;
            if (!isFilterDisplayEnabled && !isAssetConfig) {
                api.call("GetOrAddFilter", { name: name, isaddfilter: isAddFilter }, function (r, ctx) {//api to populate new filter                
                    if (r.status == 0) {
                        if (name.indexOf(FilterDelimiter) > 0) {//while adding filters using | operator
                            appendMultipleFilters(_filterID, _requestID, r.result, isAssetConfig, isAddFilter);
                            $("[fid='" + data.id + "']").parent().parent().remove();
                        }
                        else
                        {
                            $("#s2id_" + _filterID + " li[fid]").each(function () { //for single filters or while binding filters on load
                                $(this).find("i").first().remove();//remove icon                     
                                if ($(this).attr("name") == name) {
                                    var existingFilter = $(".filters .select2-choices").find('.select2-search-choice li[fid="' + r.result + '"]');
                                    if (isAddFilter && existingFilter.length > 0) {
                                        existingFilter.attr("fid", r.result);
                                        $("[fid='" + data.id + "']").parent().parent().remove();
                                    }
                                    else {
                                        $(this).attr("fid", r.result);
                                    }
                                    if (isRemoveFilter)
                                        removeFilter(_requestID, _filterID);
                                    var ov = $("#" + _filterID).val().split(',');
                                    var nv = [];
                                    for (var i = 0; i <= ov.length - 1; i++) {
                                        if (ov[i] == "0" || ov[i] == 0)
                                            ov[i] = r.result;//Assign new value to it
                                        nv.push(ov[i]);
                                    }
                                    $("#" + _filterID).val(nv);//replace new vals
                                    window.alert = function () { /* do nothing here */ }
                                }
                            });
                        }
                    }
                    else
                        isHtml = true;

                    if (isHtml) {
                        $("[fid='" + data.id + "']").parent().parent().remove();
                        window.alert = function () { /* do nothing here */ }
                    }
                    if (name.replace(/\s/g, '').length === 0) {
                        $('.select2-search-choice').each(function () {
                            if ($(this).find('div').text() == 0) {
                                $(this).remove();
                            }
                        });
                    }
                }, null, id);
            }
            else {
                api.call("GetOrAddFilterName", { name: name, isaddfilter: isAddFilter }, function (r, ctx) {//api to populate new filter         
                    if (r.status == 0) {
                        if (name.indexOf(FilterDelimiter) > 0) {//while adding filters using | operator
                            appendMultipleFilters(_filterID, _requestID, r.result, isAssetConfig, isAddFilter);
                            $("[fid='" + data.id + "']").parent().parent().remove();
                        }
                        else
                        {
                            $("#s2id_" + _filterID + " li[fid]").each(function () {
                                $(this).find("i").first().remove();//remove icon                     
                                if ($(this).attr("name") == name) {
                                    var existingFilter = checkExistingFilter(r.result.id, _requestID, isAssetConfig);;

                                    if (isAddFilter && existingFilter.length > 0) {
                                        existingFilter.attr("fid", r.result.id);
                                        existingFilter.attr("name", r.result.name);
                                        existingFilter.text(r.result.name);
                                        $("[fid='" + data.id + "']").parent().parent().remove();
                                    }
                                    else {
                                        $(this).attr("fid", r.result.id);
                                        $(this).attr("name", r.result.name);
                                        $(this).text(r.result.name);
                                    }
                                    removeFilter(_requestID);
                                    var ov = $("#" + _filterID).val().split(',');
                                    var nv = [];
                                    for (var i = 0; i <= ov.length - 1; i++) {
                                        if (ov[i] == "0" || ov[i] == 0)
                                            ov[i] = r.result.id;//Assign new value to it
                                        nv.push(ov[i]);
                                    }
                                    $("#" + _filterID).val(nv);//replace new vals
                                    window.alert = function () { /* do nothing here */ }
                                }
                            });
                        }
                    }
                    else
                        isHtml = true;

                    if (isHtml) {
                        $("[fid='" + data.id + "']").parent().parent().remove();
                        window.alert = function () { /* do nothing here */ }
                    }
                    if (name.replace(/\s/g, '').length === 0) {
                        $('.select2-search-choice').each(function () {
                            if ($(this).find('div').text() == 0)
                                $(this).remove();
                        });
                    }
                }, null, id);
            }
            if (name.replace(/\s/g, '').length > 0) {
                var $li = $("<li>");
                var url = $li[0].baseURI;
                var urlCheck = 'setup/assets/configuration';
                var parts = url.split('#');
                var fragment = parts[1];
                var urlMatch = false;
                if (urlCheck == fragment)
                    urlMatch = true;

                $li.attr({ "fid": data.id, "name": name, "rel": "tooltip", "data-original-title": 'Manual filter added.' });
                if (data.isassetlist)
                    $li.attr({ "isassetlist": true, "data-original-title": 'Filter added through a list. You cannot remove this.' });
                else if (data.issharedcategoryfilter && data.iscategory)
                    $li.attr({ "iscategory": true, "issharedcategoryfilter": true, "data-original-title": 'Category filter added from more than one company. You can not completely remove it.' });
                else if (urlMatch){
                    $li.attr({ "fid": data.id, "name": name, "data-toggle": "tooltip","rel":"", "data-original-title": 'Manual filter added.' });
                }
                else
                {
                    if (data.iscategory)
                        $li.attr({ "iscategory": true, "data-original-title": 'Category filter added.'});
                    if (data.issharedcategoryfilter)
                        $li.attr({ "issharedcategoryfilter": true, 'data-original-title': 'Category filter from another company. You cannot remove this.'});
                }
                $li.text(name);
                var $ul = $("<ul>");
                $ul.append($li);
                return $ul.html();                
            }                
        },
        initSelection: function (element, callback) {
            var data = [];
            if (filterData != undefined && filterData.records != undefined) {
                for (var i = 0; i <= filterData.records.length - 1; i++) {
                    var name = isFilterDisplayEnabled && filterData.records[i].displayname != undefined && filterData.records[i].displayname != null && filterData.records[i].displayname != '' ? filterData.records[i].displayname : filterData.records[i].name;
                    $("#" + _filterID).val([filterData.records[i].id, name]).trigger("change");
                    data.push({ id: element.val().split(",")[0], name: element.val().substring(element.val().indexOf(",") + 1), iscategory: filterData.records[i].iscategory, issharedcategoryfilter: filterData.records[i].issharedcategoryfilter, isassetlist: filterData.records[i].isassetlist });
                }
            }
            
            callback(data);
        },
        createSearchChoice: function (term, data) {
            
            if (ValidateSpecialCharacters(term, _requestID)) {
                const termLower = term.toLowerCase();
                const uiFilterExists = Array.from(document.querySelectorAll('.select2-search-choice li'))
                    .some(li => li.textContent.trim().toLowerCase() === termLower); // Check if filter is already present in UI

                if (uiFilterExists)
                    return null; // already in UI, don't re-add
                data.some(item => item.name && item.name.toLowerCase() === termLower); // Check if it exists in data

                return { id: 0, name: term, isAddFilter: true };
            }
        }
    });
};
function KeywordAutoComplete(element, url, filterData, _requestID) {
   
    var _keywordID = element;
    $(element).select2({
        placeholder: '',
        minimumInputLength: 1,
        allowClear: false,
        multiple: true,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                return {
                    q: term,
                    limit: 25,
                    type: 9000,
                    timestamp: $.now(),
                    fq: term,
                    id: 0
                };
            },
            results: function (data, page) {
                return {
                    results: data.programs
                };
            }
        },
        formatResult: formatFilterResult,
        formatSelection: function (data) {
            const name = (data.name || '').replace(/^[|]+|[|]+$|[^\p{L}\d|+\-\s]+/gu, '').trim();
            var existingFilter = $(".keywords .select2-choices").find('.select2-search-choice li[fid="' + name + '"]');
            const result = name.split('|').filter(item => item.trim() !== "").map(item => ({
                id: item,
                name: item
            }));
            if (name.indexOf(FilterDelimiter) > 0) {
                appendMultipleKeywords(_keywordID, _requestID, result, true);
            }
            else {
                if(name.replace(/\s/g, '').length > 0 && existingFilter.length <= 0) {
                    var $li = $("<li>");
                    $li.attr({ "fid": data.id, "name": name });
                    $li.text(name);
                    var $ul = $("<ul>");
                    $ul.append($li);
                    return $ul.html();
                }
            }
            return $('<div>', { pipekeywords: 'true' });
        },
        initSelection: function (element, callback) {
            var data = [];
            if (filterData != undefined && filterData.programs != undefined) {
                for (var i = 0; i <= filterData.programs.length - 1; i++) {
                    $(_keywordID).val([filterData.programs[i].id, filterData.programs[i].name]).trigger("change");
                    data.push({ id: element.val().split(",")[0], name: element.val().split(",")[1] });
                }
            }

            callback(data);
        },
        createSearchChoice: function (term, data) {
            if ($(data).filter(function () { return this.name.localeCompare(term) === 0; }).length === 0) {
                return { id: term, name: term };
            }
        }
    });
}
function Getfilters(_requestID, filterID) {
    if (filterID === undefined)
        filterID = "filters";
    var filters = '', ifilter = '';
    $("#s2id_" + _requestID + "_" + filterID + " li[fid]").each(function () {
        var isCategory = $(this).attr('iscategory');
        var isAssetList = $(this).attr('isassetlist');
        if (!isCategory && !isAssetList) {
            ifilter = $(this).text().trim();
            if (filters == '')
                filters = ifilter.indexOf(",") != -1 ? encodeURIComponent(ifilter) : ifilter;
            else
                filters = filters + '|' + (ifilter.indexOf(",") != -1 ? encodeURIComponent(ifilter) : ifilter)
        }
    });
    return filters;
}
function GetSeoMetaInfo(_requestID,) {
    var title = $("#" + _requestID + " #metatitle").val();
    var description = $("#" + _requestID + " #metadescription").val();
    var isindex = $("#" + _requestID + " #metaisindex").is(":checked");
    
    return {title: title, description: description, isindex: isindex};
}
function Getkeywords(_requestID) {
    var keywords = [];
    $("#s2id_" + _requestID + "_keywords li[fid]").each(function () {
        keywords.push($(this).text().trim());
    });
    return keywords;
}
function CompanyAutoComplete(element, url, filterData, _requestID, _ignoredistid) {
    var test = "plugin";
    $(element).select2({
        placeholder: 'SELECT OR ADD FILTER(S)',
        minimumInputLength: 1,
        allowClear: false,
        maximumSelectionSize: 1,
        multiple: true,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                return {
                    q: term,
                    limit: 10,
                    type: 640,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    ignoredistid: _ignoredistid
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatFilterResult,
        formatSelection: function (data) {
            var $list = $("#s2id_" + _requestID + "_contactcompany li[fid]");
            var id = filterIndex--;
            var isHtml = false;
            var $li = $("<li>");
            $li.attr({ "fid": data.id, "name": data.name });
            $li.text(data.name);
            var $ul = $("<ul>");
            $ul.append($li);
            return $ul.html();
        },
        initSelection: function (element, callback) {
            var data = [];
            if (filterData.records != undefined) {
                for (var i = 0; i <= filterData.records.length - 1; i++) {
                    $("#" + _requestID + "_contactcompany").val([filterData.records[i].id, filterData.records[i].name]).trigger("change");
                    data.push({ id: element.val().split(",")[0], name: element.val().split(",")[1] });
                }
            }

            callback(data);
        },
        createSearchChoice: function (term, data) {
            if ($(data).filter(function () { return this.name.localeCompare(term) === 0; }).length === 0) {
                return { id: -3, name: term };
            }
        }
    });
};

function formatFilterResult(record) {
    return "<div>" + Encoder.charEncode(record.name) + "</div>";
};


var dipositionIndex = 0;
function DispositionAutoComplete(element, url, dispositionData, _requestID) {
    $(element).select2({
        placeholder:'SELECT OR ADD FILTER(S)',
        minimumInputLength: 1,
        allowClear: false,
        multiple: true,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                return {
                    q: term,
                    limit: 25,
                    type: 580,
                    timestamp: $.now(),
                    fq: term,
                    id: 0
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatDispositonResult,
        formatSelection: function (data) {
            var $list = $("#s2id_" + _requestID + "_dispositions li[did]");
            var id = dipositionIndex--;
            api.call("GetOrAddDisposition", { name: data.name }, function (r, ctx) {//api to populate new filter
                $("#s2id_" + _requestID + "_dispositions li[did]").each(function () {
                    var $this = $(this);
                    $this.find("i").first().remove();//remove icon      
                    if ($this.html() == data.name) { 
                        $this.attr("did", r.result);
                        var ov = $("#" + _requestID + "_dispositions").val().split(',');
                        var nv = [];
                        for (var i = 0; i <= ov.length - 1; i++) {
                            if (ov[i] == "0" || ov[i] == 0)
                                ov[i] = r.result;//Assign new value to it
                            nv.push(ov[i]);
                        }
                        $("#" + _requestID + "_dispositions").val(nv);//replace new vals
                    }
                });
            }, null, id);
            return '<li did="' + data.id + '" name="' + data.name + '">' + data.name + '</li>';
        },
        initSelection: function (element, callback) {
            var data = [];
            for (var i = 0; i <= dispositionData.length - 1; i++) {
                $("#" + _requestID + "_dispositions").val([dispositionData[i].id, dispositionData[i].name]).trigger("change");
                data.push({ id: element.val().split(",")[0], name: element.val().split(",")[1] });
            }
            callback(data);
        },
        createSearchChoice: function (term, data) {
            if ($(data).filter(function () { return this.name.localeCompare(term) === 0; }).length === 0) {
                return { id: 0, name: term };
            }
        }
    });
};
function formatDispositonResult(record) {
    return "<div>" + record.name + "</div>";
};

function formatMoney(num, fixedDigit) {
    if (num != null) {
        if (fixedDigit != undefined)
            num = parseFloat(num).toFixed(fixedDigit);
        return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")
    } else {
        return 0;
    }
}
function formatLargeNumber(num) {
    num = parseFloat(num); // Convert to number if it's a string
    if (isNaN(num)) return 'Invalid number';

    const units = ['','K', 'M', 'B', 'T', 'Q']; // Thousand, Million, Billion, Trillion, Quadrillion
    let unitIndex = 0;

    while (Math.abs(num) >= 1000 && unitIndex < units.length - 1) {
        num /= 1000;
        unitIndex++;
    }

    return num.toFixed(2) + units[unitIndex];
}

function formatFinancial(number) {
    const actualNumber = +number.toString().replace(/,/g, '')
    return formatted = actualNumber.toLocaleString('en-US', { maximumFractionDigits: 2 })
}

//To abbreaviate long numbers
function abbreviateNumber(num, fixed) {
    if (num === null) { return null; } // terminate early
    if (num === 0) { return '0'; } // terminate early
    fixed = (!fixed || fixed < 0) ? 0 : fixed; // number of decimal places to show
    var b = (num).toPrecision(2).split("e"), // get power
        k = b.length === 1 ? 0 : Math.floor(Math.min(b[1].slice(1), 14) / 3), // floor at decimals, ceiling at trillions
        c = k < 1 ? num.toFixed(0 + fixed) : (num / Math.pow(10, k * 3)).toFixed(1 + fixed), // divide by power
        d = c < 0 ? c : Math.abs(c), // enforce -0 is 0
        e = d + ['', 'K', 'M', 'B', 'T'][k]; // append power
    return e;
}
function getHoverContentForExportReport(data) {
    var fileName = data.name == null ? "" : data.name.replace(/%20/g, " ");
    var assetName = data.assetname == null ? "" : data.assetname.replace(/%20/g, " ");
    var userName = data.username;
    var label = ['File Name', 'Asset Name'];
    if (data.username != null)
        label.push('User');
    var value = [fileName, assetName];//value array
    if (data.username != null)
        value.push(userName);

    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
            var $div = $('<div>').addClass('font-xs').css({ "max-width": "100%", "word-wrap": "break-word" }).text(value[i]);
            $strong.append($span);
            $strong.append($div);
        }
    }
    return $strong.html();
}
function checkActionPermissionForVideo(value, rolelevel, roleflags) {
    var level = rolelevel;
    var flags = roleflags;
    var record = value;
    if ((parseInt(record.sharelevel) & level) != level || (parseInt(record.shareflags) & flags) != flags) {
        return false;
    }
    else
        return true;
}
function checkActionPermissionForDocument(value, rolelevel, roleflags) {
    var level = rolelevel;
    var flags = roleflags;
    var record = value;
    if ((parseInt(record.sharelevel) & level) != level || (parseInt(record.shareflags) & flags) != flags) {
        return false;
    }
    else
        return true;
}
function checkActionPermissionForTemplate(value, rolelevel, roleflags) {
    
    var level = rolelevel;
    var flags = roleflags;
    var record = value;
    if ((parseInt(record.sharelevel) & level) != level || (parseInt(record.shareflags) & flags) != flags) {
        return false;
    }
    else
        return true;
}

function getHoverMobilePopupContent(item) {
    var intereststatus = getContactInterest(item.intereststatus);
    var comma = " ";
    if ((item.city != "" && item.state != "") || (item.city != "" && item.country != "")|| (item.state != "" && item.country != ""))
        comma = ",";
    if (item.profileimage != "" && item.profileimage != null && item.profileimage != undefined) {
        var profileimage = "<img src=" + item.profileimage.thumbnail + " class='profile-img' style='width:50px; height:40px; border-radius:100%'/>";
        $("#modalinfopopup").find('.modal-header').find('.profile-image').html(profileimage);
    }
    else  {
        var fullnamearray = item.fullname.split(","); var initials = "";
        for (var i = 0; i < fullnamearray.length; i++) initials += fullnamearray[i].trim().charAt(0);
        $("#modalinfopopup").find('.modal-header').find('.profile-image').html(initials);
    }

    var personalInfo = "<div class='profile-name'>" + item.fullname + "</div><div class='profile-email'>" + item.email + "</div>";
    $("#modalinfopopup").find('.modal-header').find('.personal-info').html(personalInfo);

    var content = "<div class='profile-info'>";
    content += "<div class='view-row'><label>Location</label><div class='name'>" + item.city + comma + item.state + " " + item.country; + "</div></div>";
    content += "<div class='view-row'><label>Company</label><div class='name'>" + item.ownerbycompanyname + "</div></div>";
    content += "<div class='view-row'><label>Creator</label><div class='name'>" + item.createdbyname + "</div><div class='site'>" + item.createdbycompanyname + "</div></div>";
    content += "<div class='view-row'><label>Owner</label><div class='name'>" + item.ownerbyname + "</div><div class='site'>" + item.ownerbycompanyname + "</div></div>";
    if (item.isshared == 1) {
        content += "<div class='view-row'><label>Interest</label><div class='name'><i class='intereststatus-" + intereststatus  +" '>" + item.intereststatus + "</i ></div></div>";
    }
    if (item.isshared != 1) {
        content += "<div class='view-row'><label>Interest</label><div class='name'><i class='intereststatus-" + intereststatus + " '>" + item.intereststatus + "</i >"; "</div></div>";
    }
    content += "<div class='view-row'><label>Created On</label><div class='name'><div class='date'>" + longDateTime(item.createdon) + "</div></div></div>";
    content += "</div>";

    $("#modalinfopopup").find('.modal-body').html(content);
}

function getHoverContents(item) {
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "") {
        if (item.templatetype == 536870912) {
            desc = 'No description to show';
            desc = `<i>${desc}</i>`;
        }
        else
            desc = 'NA';
    }
        
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var createdOn = longDateFromUTC(item.createdon);
    var updatedOn = item.flag7;
    var $div = $('<div>').html(desc);

    if (updatedOn == null || updatedOn == "" || updatedOn == undefined)
        if (item.updatedon == null || item.updatedon == "" || item.updatedon == undefined)
            updatedOn = 'NA';
        else
            updatedOn = longDateFromUTC(item.updatedon);
    else
        updatedOn = longDateFromUTC(updatedOn);
    
    var name = item.displayname;
    if (name == undefined) name = item.name;

    // for getting product name(daabase record name)
    if (name == undefined && item.primarytype != undefined) {
        if (item.primarytype == "CURRENCY") {
            name = formatPrice(item.primary);
        }
        else {
            name = item.primary;
        }
    }
    //end
    var value = [];
    var label = [];
    if (name != null && name != "") {
        label.push('Name');
        value.push(name)
    }
    if (item.createdbyname != null && item.createdbyname != "") {
        if (item.createdby != null && item.createdby != "") {
            if (item.createdbyuser == null || item.createdbyuser == "") {
                label.push('Created By');
            }else
            label.push('Uploaded By');
        } else {
            label.push('Uploaded By');
        }
        value.push(item.createdbyname)
    }
    if (createdOn != null && createdOn != "") {
        if (item.activitytype != null) 
            label.push('Created On');
        else
            label.push('Uploaded On');
        value.push(createdOn)
    }
    if (updatedOn != null && updatedOn != "") {
        label.push('Updated On');
        value.push(updatedOn)
    }
    if ($div.html() != null && $div.html() != "") {
        if (item.activitytype == null) {
            label.push('Description');
            value.push($div.html())
        }
    }


    if (item.templatetype == 134217728) {
        label.splice(1, 0, 'Created By');
        value.splice(1, 0,item.createdbyname);
    }
    if (item.templatetype == 32) {
        label.splice(1, 0, 'Subject');
        value.splice(1, 0, item.subject);
    }
    if (item.filetype == "VIDEO") {
        label = ['Name', 'Uploaded By', 'Uploaded On', 'Updated On', 'Description'];
        value = [name, item.createdbyname, createdOn, longDateFromUTC(item.updatedon), $div.html(),];
    }
    if (item.templatetype == 128) {
        label.splice(1, 1, 'Created By');
        label.splice(2, 1, 'Created On');
        value.splice(1, 1, item.createdbyname);
        value.splice(2, 1, createdOn);
    }

    var $strong = $("<strong>");
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}

function getHoverContentsForm(item) { 
    const desc = (item.description || 'NA').substring(0, 500) +
        (item.description?.length > 500 ? '...' : '');
    const createdOn = longDateFromUTC(item.createdon);
    const updatedOn = item.flag7
        ? longDateFromUTC(item.flag7)
        : item.updatedon
            ? longDateFromUTC(item.updatedon)
            : 'NA';

    const name = item.displayname || item.name;
    const value = [], label = [];

    if (name) {
        label.push('Name');
        value.push(name);
    }
    if (item.createdbyname) {
        label.push(item.createdby ? 'Created By' : 'Uploaded By');
        value.push(item.createdbyname);
    }
    if (createdOn) {
        label.push('Created On');
        value.push(createdOn);
    }
    if (updatedOn) {
        label.push('Updated On');
        value.push(updatedOn);
    }
    if (desc && !item.activitytype) {
        label.push('Description');
        value.push(desc);
    }

    return label.map((lbl, i) => {
        const $label = $('<strong>').addClass('font-sm').text(lbl + ':');
        const $value = $('<div>').addClass('font-xs popover-url').text(value[i]);
        return $('<strong>').append($label).append($value).prop('outerHTML');
    }).join('');
}
function getHoverContentsForPlaybook(item) {
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var $div = $('<div>').text(desc);

    var name = item.displayname;
    if (name == undefined) name = item.name;

    var label = ['Name', 'Description']; //label array
    var value = [name, , $div.html()]; //value array
    var $strong = $("<strong>");
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}
function getSegmentHoverContents(item) {
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var createdOn = longDateFromUTC(item.createdon);
    var updatedOn = item.flag7;
    var $div = $('<div>').text(desc);
    var segmentdescription = "";
    if (item.segmentdescription == null || item.segmentdescription == undefined || item.segmentdescription == "")
        segmentdescription = 'NA';
    else
        segmentdescription = item.segmentdescription.replace(/\\n/g, " ");;
   
    if (segmentdescription.length > 500)
        segmentdescription = segmentdescription.substring(0, 500) + '...';
    var $segmentdescriptiondiv = $('<div>').text(segmentdescription);

    if (updatedOn == null || updatedOn == "" || updatedOn == undefined)
        if (item.updatedon == null || item.updatedon == "" || item.updatedon == undefined)
            updatedOn = 'NA';
        else
            updatedOn = longDateFromUTC(item.updatedon);
    else
        updatedOn = longDateFromUTC(updatedOn);

    var name = item.name;
    if (name == undefined) name = item.displayname;
    var label = ['Name', 'Created On', 'Updated On', 'Description', 'Segment Description'];//label array
    var value = [name, createdOn, updatedOn, $div.html(), $segmentdescriptiondiv.html()];//value array
    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        if (value[i] != "" && value[i] != " ") {
            var $span = $('<strong>').addClass('font-sm').text(label[i] + ' :');
            var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
            $strong.append($span);
            $strong.append($div);
        }
    }
    return $strong.html();
}

function getGalleryHoverContents(item, issetup) {
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var uploadedOn = longDateFromUTC(item.createdon);
    var updatedOn = item.flag7;
    var $div = $('<div>').text(desc);

    if (updatedOn == null || updatedOn == "" || updatedOn == undefined)
        if (item.updatedon == null || item.updatedon == "" || item.updatedon == undefined)
            updatedOn = 'NA';
        else
            updatedOn = longDateFromUTC(item.updatedon);
    else
        updatedOn = longDateFromUTC(updatedOn);

    var name = item.displayname;
    if (name == undefined) name = item.displayname;
    var label = ['Name', 'Uploaded On', 'Updated On', 'Description'];//label array
    var value = [name, uploadedOn, updatedOn, $div.text()];//value array

    if (item.templatetype == "134217728" || issetup) {
        label.splice(1, 0, 'Uploaded By');
        value.splice(1, 0, item.createdbyname);
    }

    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ' :');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}

function getSocialDripHoverContents(item) {
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var createdOn = userDateTimeFormat(item.createdon);
    var updatedOn = item.flag7;
    var $div = $('<div>').text(desc);
    if (updatedOn == null || updatedOn == "" || updatedOn == undefined)
        if (item.updatedon == null || item.updatedon == "" || item.updatedon == undefined)
            updatedOn = 'NA';
        else
            updatedOn = userDateTimeFormat(item.updatedon);
    else
        updatedOn = userDateTimeFormat(updatedOn);

    var label = ['Name', 'Created On', 'Updated On', 'Description'];//label array
    var value = [item.name, createdOn, updatedOn, $div.html()];//value array

    if (item.status != 112 && item.type != 0)
    {
        label.push('Total Likes');
        label.push('Total Comments');
        label.push('Total Shares');

        value.push(item.totallikes);
        value.push(item.totalcomments);
        value.push(item.totalshares);
    }

    if (item.templatetype == 134217728) {
        label.splice(1, 0, 'Created By');
        value.splice(1, 0, item.createdbyname);
    }

    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ' :');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}

function getHoverContentsDataforLists(item) {
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    if (item.createdbyname) {
        var createdByName = item.createdbyname != "<unknown user>" ? item.createdbyname : 'No Name';
        var label = ['Name', 'Created By', 'Created On', 'Updated On', 'Description'];//label array
        var value = [item.name, createdByName, longDateFromUTC(item.createdon), longDateFromUTC(item.updatedon), desc];//value array
    }else{
        var label = ['Name', 'Created On', 'Updated On', 'Description'];//label array
        var value = [item.name, longDateFromUTC(item.createdon), longDateFromUTC(item.updatedon), desc];//value array
    }
    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}

function getHoverContentsData(item) {
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    desc = extractContent(desc);
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var label = ['Name', 'Created By', 'Created On', 'Updated On', 'Description'];//label array
    var createdByName = item.createdbyname != "<unknown user>" ? item.createdbyname : 'No Name';
    var value = [item.name, createdByName, longDateFromUTC(item.createdon), longDateFromUTC(item.updatedon), desc];//value array
    if (item.filetype == "VIDEO") {
        label = ['Name', 'Description', 'Uploaded By'];
        value = [item.name, desc, createdByName]
    }
    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}
function getHoverContentsDataForSolutionGroup(item) {
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    desc = extractContent(desc);
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var label = ['Name', 'Created On', 'Updated On', 'Description'];//label array
    var value = [item.name, longDateFromUTC(item.createdon), longDateFromUTC(item.updatedon), desc];//value array

    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}
function getLinkHoverContentsData(item) {

    var label = ['Link Name', 'Creator'];//label array
    var value = [item.name, item.createdbyname];//value array
    //var $content = $("<div>");
    var $strongTag = $("<strong>");
    for (var i = 0; i < label.length; i++) {
        var $spanTag = $("<strong>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $strongTag.append($divTag);
        }
    }
    return $strongTag.html();
}
function extractContent(s) {
    var span = document.createElement('span');
    span.innerHTML = s;
    return span.textContent || span.innerText;
};
function getHoverCourseContentsData(item) {
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    if (desc.length > 1000)
        desc = desc.substring(0, 1000) + '...';
    var label = ['Name', 'Description'];//label array
    var value = [item.name, desc];//value array
    if (item.filetype == "VIDEO") {
        label = ['Name', 'Description', 'Uploaded By'];
        value = [item.name, desc, item.createdbyname]
    }
    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}
function getHoverCourseContentsDataWiget(item) {
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    if (desc.length > 1000)
        desc = desc.substring(0, 1000) + '...';
    var label = ['Name', 'Description'];//label array
    var value = [item.name, desc];//value array
    var thumb = item.thumbnail;

    if (thumb != null && thumb != "" && thumb != undefined) {
        var img = "<div class='popover-thumbnail cust-img-box'><img src='" + thumb + "' style='max-height:100%;' /></div>";
    }
    else {
        var thumb = "fas fa-fw fa-user-alt";
        var img = "<div class='popover-thumbnail cust-img-box' style='background: #ddd;padding: 10px;' ><i class='" + thumb + "' style='font-size: 70px;'></i></div>";
    }
    if (item.filetype == "VIDEO") {
        label = ['Name', 'Description', 'Uploaded By'];
        value = [item.name, desc, item.createdbyname]
    }
    var $strong = $('<strong>');
    $strong.append(img);
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}

function getHoverCompaignData(item) {
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var label = ['Name', 'Created By', 'Created On', 'Description'];//label array
    var value = [item.name, item.createdbyname, longDateFromUTC(item.createdon), desc];//value array

    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}


function getHoverTabName(item) {
    var label = ['Name'];//label array
    var value = [item.name];//value array

    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ' :');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}

function getSocialDripMessageHoverContent(item) {
    var msg = item.message != null ? item.message.replace(/'/g, '&apos;') : "";
    var $div = $('<div>').css({ 'max-width': '100%', 'word-wrap': 'break-word' }).text(msg);
    var $container = $('<div>');
    $container.append($div);      
    return $container.html();
}

function getOnBehalfOfDrip(item) {
    var onBehalf = item.onbehalf;
    var onBehalfEmail = '';
    if (onBehalf != null && onBehalf != "") {
        if (onBehalf != "Owners" && onBehalf != "Creators") {
            var arrOnBehalf = onBehalf.split("(")[1];
            onBehalfEmail = arrOnBehalf.substring(0, arrOnBehalf.length - 1);
        }
        else
            onBehalfEmail = onBehalf;
    }
    return onBehalfEmail;
}
function getDripHoverContents(item) {
    var desc = item.description;
    
    if (desc == null || desc == undefined)
        desc = 'NA';    
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var $div = $('<div>').text(desc);
    var createdOn = longDateFromUTC(item.createdon);
    var updatedOn = longDateFromUTC(item.updatedon);
    var label = ['Name', 'Created By', 'Created On', 'Updated On', 'Description'];//label array
    var value = [item.name, item.createdbyname, createdOn, updatedOn, $div.html()];//value array

    if (item.state != 1)
    {
        label.push('On Behalf Of');
        value.push(item.onbehalf);
    }
    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}

function getContactPartnerHoverContents(item) {
    var label = ['Name', 'User Name'];//label array
    var value = [(item.userlastname != null && item.userlastname != "") ? (item.userlastname + ", " + item.userfirstname) : item.userfirstname, item.username]; //value array

    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}

function getHoverContentForCompany(item) {
    var name = item.name;
    var lastact = item.lastactivity;

    var label = ['Name'];//label array
    var value = [item.name];//value array

    if (lastact != null || lastact != undefined) {
        label.push('Last Interaction On');
        value.push(longDateFromUTC(item.lastactivity));  
    }

    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ' :');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}
//Hover consistency for Opportunity grid #27669
function getOpportunityHoverContents(item) {
    var desc = item.description;
    if (desc == null || desc == undefined)
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var label = ['Name', 'Description', 'Creator', 'Owner'];//label array
    var value = [item.opportunity, desc, item.createdbyname, item.ownername];//value array

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        if (value[i] != "" && value[i] != " ") {
            var $strong = $("<strong>");
            var $span = $('<span>').addClass('font-sm').text(label[i] + ':');
            var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
            $strong.append($span);
            $content.append($strong);
            $content.append($div);
        }
    }
    return $content[0].innerHTML;
}
function getOpportunityPoolHoverContents(item) {
    if (!item.description || item.description.trim() === "") {
        item.description = "NA";
    }
    var label = ['Name', 'Created By', 'Created On', 'Updated On', 'Description'];//label array
    var value = [item.name, item.createdbyname, item.createdon, item.updatedon, item.description];//value array

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        if (value[i] != "" && value[i] != " ") {
            var $strong = $("<strong>");
            var $span = $('<span>').addClass('font-sm').text(label[i] + ':');
            var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
            $strong.append($span);
            $content.append($strong);
            $content.append($div);
        }
    }
    return $content[0].innerHTML;
}
function getOpportunitySharedtoHoverContents(item) {
    if (!item.description|| item.description.trim() === "") {
        item.description = "NA";
    }
    if (!item.shared_to_organization || item.shared_to_organization.trim() === "") {
        item.shared_to_organization = "NA";
    }
    var label = ['Name','Username', 'Email', 'Organization', 'Description'];//label array
    var value = [item.creator_firstname + ' ' + item.shared_to_lastname, item.shared_to_name, item.shared_to_email, item.shared_to_organization, item.description];//value array

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        if (value[i] != "" && value[i] != " ") {
            var $strong = $("<strong>");
            var $span = $('<span>').addClass('font-sm').text(label[i] + ':');
            var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
            $strong.append($span);
            $content.append($strong);
            $content.append($div);
        }
    }
    return $content[0].innerHTML;
}


function getUserHoverContents(item)
{
        var name = [];
        var userTitle = (item.title != null && item.title != "") ? item.title : '<i>No title</i>';
        if (userTitle == null || userTitle == "")  
            userTitle = '<i>No title</i>';       
        var userName = (item.name != null && item.name != "") ? item.name : item.username;
        if (userName == null || userName == "")
            userName = item.name;
        if (item.lastname != null && item.lastname != "") {
            var lastName = item.lastname + ",";
            name.push(lastName);
        }
        if (item.firstname != null && item.firstname != "")
            name.push(item.firstname);
        if (name.length > 0)
            name = name.join(' ');
        else
            name = 'No Name'
        if (item.email != null && item.email != "" && item.name == "")
            name = item.email;
        var label = ['Title','Name', 'User Name'];
        var value = [userTitle,name, userName];
        var onBeHalfUser = item.onbehalf;
        if (onBeHalfUser != null)
        {
            label.push('On Behalf');
            value.push(onBeHalfUser);
        }
        var $content = $("<div>");
        for (var i = 0; i < label.length; i++) {
            var $strongTag = $("<strong>");
            var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
            var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
            if (value[i] != '' && value[i] != "" && value[i] != " ") {
                $strongTag.append($spanTag);
                $content.append($strongTag);
                $content.append($divTag);
            }
    }
        return $content[0].innerHTML;
}

function getUserHoverContentsForCreatedBy(item) {

    var createdByFirstname = (item.createdbyfirstname != null && item.createdbyfirstname != "") ? item.createdbyfirstname : '<i>No Name</i>';
   
    var createdByLasttname = (item.createdbylastname != null && item.createdbylastname != "") ? item.createdbylastname : '<i>No Name</i>';

    var createdByEmail = (item.createdbyemail != null && item.createdbyemail != "") ? item.createdbyemail : '<i>No Email</i>';

    var firstName = createdByFirstname  != null ? createdByFirstname : "" ;
    var lastName = createdByLasttname != null ? createdByLasttname : "";
    var name = lastName != "" ? lastName + ", " + firstName : firstName;
    var email = createdByEmail != null ? createdByEmail : "" ;
    var createdbycity = item.createdbycity == null ? "" : item.createdbycity.replace(/("|'|-|,)/g, "");
    var createdbystate = item.createdbystate == null ? "" : item.createdbystate.replace(/("|'|-|,)/g, "");
    var createdbycountry = item.createdbycountry == null ? "" : item.createdbycountry.replace(/("|'|-|,)/g, "");
    var createdbyphoto = item.createdbyphotoid == null ? "" : item.createdbyphotoid.thumbnail400 == null ? "" : item.createdbyphotoid.thumbnail400;
    var createdByUpdateOn = item.createdbyupdatedon == null ? "" : item.createdbyupdatedon;
    var createdByLastLogin = item.createdbylogindate == null ? "" : item.createdbylogindate;

    var city = createdbycity != null ? createdbycity : "";
    var state = createdbystate != null ? createdbystate : "";
    var country = createdbycountry != null ? createdbycountry : "";
    var location = city + "," + state + "," + country;
    var userName = firstName != null ? firstName : email;
    var thumb = createdbyphoto != "" ? createdbyphoto : "";

    if (thumb != null && thumb != "" && thumb != undefined) {
        var img = "<div class='popover-thumbnail cust-img-box'><img src='" + thumb + "' style='max-height:100%;' /></div>";
    }
    else {
        var thumb = "fas fa-fw fa-user-alt";
        var img = "<div class='popover-thumbnail cust-img-box' style='background: #ddd;padding: 10px;' ><i class='" + thumb + "' style='font-size: 70px;'></i></div>";
    }
    var updatedOn = createdByUpdateOn != "" ? createdByUpdateOn : "";
    var lastlogindate = createdByLastLogin != "" ? createdByLastLogin : "";

    if (lastlogindate != "" && lastlogindate != undefined) {
        if (updatedOn != null && updatedOn != "" && updatedOn != undefined)
            updatedOn = longDateFromUTC(lastlogindate);
    }
    else {
        if (updatedOn != null && updatedOn != "" && updatedOn != undefined)
            updatedOn = longDateFromUTC(updatedOn);
    }
    var label = ['Name', 'Email', 'User Name', 'Location','Updated On' ];
    var value = [name, email, userName, location, updatedOn];

    var $strongTag = $("<strong>");
    $strongTag.append(img);
    for (var i = 0; i < label.length; i++) {
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $strongTag.append($divTag);
        }
    }
    return $strongTag.html();
}

function getUserHoverContentsForModifiedBy(item) {

    var modifiedByFirstName = (item.lastmodifiedbyfirstname != null && item.lastmodifiedbyfirstname != "") ? item.lastmodifiedbyfirstname : '<i>No Name</i>';
    var modifiedByLastName = (item.lastmodifiedbylastname != null && item.lastmodifiedbylastname != "") ? item.lastmodifiedbylastname : '<i>No Name</i>';
    var modifiedByEmail = (item.lastmodifiedbyemail != null && item.lastmodifiedbyemail != "") ? item.lastmodifiedbyemail : '<i>No Email</i>';

	var firstName = modifiedByFirstName != null ? modifiedByFirstName : "";
    var lastName = modifiedByLastName != null ? modifiedByLastName : "";
	var name = firstName + ' ' + lastName;	
    var email = modifiedByEmail != null ? modifiedByEmail : "";
	var lastmodfiedbycity = item.lastmodifiedbycity == null ? "" : item.lastmodifiedbycity.replace(/("|'|-|,)/g, "");
    var lastmodfiedbystate = item.lastmodifiedbystate == null ? "" : item.lastmodifiedbystate.replace(/("|'|-|,)/g, "");
    var lastmodfiedbycountry = item.lastmodifiedbycountry == null ? "" : item.lastmodifiedbycountry.replace(/("|'|-|,)/g, "");
    var lastmodfiedbyphoto = item.lastmodifiedbyphotoid == null ? "" : item.lastmodifiedbyphotoid.thumbnail400 == null ? "" : item.lastmodifiedbyphotoid.thumbnail400;
    var lastModifiedByUpdatedOn = item.lastmodifiedbyupdatedon == null ? "" : item.lastmodifiedbyupdatedon;
    var lastModifiedByLastLogin = item.lastmodifiedbylogindate == null ? "" : item.lastmodifiedbylogindate;
	var city = lastmodfiedbycity != null ? lastmodfiedbycity : "";
    var state = lastmodfiedbystate != null ? lastmodfiedbystate : "";
    var country = lastmodfiedbycountry != null ? lastmodfiedbycountry : "";
    var location = city + "," + state + "," + country;
    var userName = firstName != null ? firstName : email;
    var thumb = lastmodfiedbyphoto != "" ? lastmodfiedbyphoto : "";

	if (thumb != null && thumb != "" && thumb != undefined) {
        var img = "<div class='popover-thumbnail cust-img-box'><img src='" + thumb + "' style='max-height:100%;' /></div>";
    }
    else {
        var thumb = "fas fa-fw fa-user-alt";
        var img = "<div class='popover-thumbnail cust-img-box' style='background: #ddd;padding: 10px;' ><i class='" + thumb + "' style='font-size: 70px;'></i></div>";
    }
	var updatedOn = lastModifiedByUpdatedOn != "" ? lastModifiedByUpdatedOn : "";
	var lastLogindate = lastModifiedByLastLogin != "" ? lastModifiedByLastLogin : "";
	   
	   
    if (lastLogindate != "" && lastLogindate != undefined) {
        if (updatedOn != null && updatedOn != "" && updatedOn != undefined)
            updatedOn = longDateFromUTC(lastLogindate);
    }
    else {
        if (updatedOn != null && updatedOn != "" && updatedOn != undefined)
            updatedOn = longDateFromUTC(updatedOn);
    }
    var label = ['Name', 'Email', 'User Name', 'Location','Updated On' ];
    var value = [name, email, userName, location, updatedOn];

    var $strongTag = $("<strong>");
    $strongTag.append(img);
    for (var i = 0; i < label.length; i++) {
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $strongTag.append($divTag);
        }
    }
    return $strongTag.html();
}

function getOrgsHoverContents(item) {
    var orgName = (item.name != null && item.name != "") ? item.name : item.username;
    if (orgName == null || orgName == "")
        orgName = item.name;
    var orgUrl;
    if (item.url != null && item.url != "")
        orgUrl = item.url;
    var orgTelephone
    if (item.telephone != null && item.telephone != "")
        orgTelephone = item.telephone;
    var orgLogo;
    if (item.photoid != null) {
        var thumb = item.photoid.thumbnail400;
        var orgLogo = "<div class='popover-thumbnail cust-img-box' style=''><img src='" + thumb + "' style='max-height:100%;' /></div>";
    }
    else {
        var thumb = "far fa-fw fa-building";
        var orgLogo = "<div class='popover-thumbnail cust-img-box' style='background: #ddd; padding: 10px;'><i class='" + thumb + "' style='font-size: 70px'></i></div>";
    }

    var value = [];
    var label = [];
    if (orgLogo != null && orgLogo != "") {
        label.push('Organization Logo');
        value.push(orgLogo);
    }
    if (orgName != null && orgName != "") {
        label.push('Organization Name');
        value.push(orgName);
    }
    if (orgUrl != null && orgUrl != "") {
        label.push('Organization Website');
        value.push(orgUrl);
    }
    if (orgTelephone != null && orgTelephone != "") {
        label.push('Organization Telephone');
        value.push(orgTelephone);
    }
    if (item.externalid && item.externalid != "") {
        label.push('Organization External ID');
        value.push(item.externalid);
    }
    
   
    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strongTag = $("<strong>");
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $content.append($strongTag);
            $content.append($divTag);
        }
    }
    return $content[0].innerHTML;
}
function getDurationInHoursAndMinutes(duration) {
    var hours = parseInt(duration / 60);
    var minutes = duration % 60;
    var formattedMinutes = minutes < 10 ? '0' + minutes : minutes;
    return hours + " Hours " + formattedMinutes + " Minutes";
}

function getAnnounceHoverContent(item) {
    var fname = item.createdbyfirstname;
    var lname = item.createdbylastname;
    var uname = item.createdbyusername;

    var value = [];
    var label = [];
    var name = lname != "" ? lname + ", " + fname : fname;
    if (fname != null || lname != null) {
        label.push('Created By');
        value.push(name);
    }

    if (uname != null) {
        label.push('User Name');
        value.push(uname);
    }

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strongTag = $("<strong>");
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $content.append($strongTag);
            $content.append($divTag);
        }
    }
    return $content[0].innerHTML;
}

function getMdfHoverUserContents(item) {
    var name = [];
    var userName = item.email;

    if (item.lastname != null && item.lastname != "") {
        var lastName = item.lastname + ",";
        name.push(lastName);
    }
    if (item.firstname != null && item.firstname != "")
        name.push(item.firstname);
    if (name.length > 0)
        name = name.join(' ');
    else
        name = 'No Name'
    
    var label = ['Name', 'User Name'];
    var value = [name, userName];

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strongTag = $("<strong>");
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $content.append($strongTag);
            $content.append($divTag);
        }
    }
    return $content[0].innerHTML;
}
function getHoverUserContents(item) {
    var name = [];
    var userName = item._username;

    if (item.userlastname != null && item.userlastname != "") {
        var lastName = item.userlastname + ",";
        name.push(lastName);
    }
    if (item.username != null && item.username != "")
        name.push(item.username);
    if (name.length > 0)
        name = name.join(' ');
    else
        name = 'No Name'

    var label = ['Name', 'User Name'];
    var value = [name, userName];

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strongTag = $("<strong>");
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $content.append($strongTag);
            $content.append($divTag);
        }
    }
    return $content[0].innerHTML;
}
function getHoverUserGridContents(item) {
    var fstname = item.firstname == null ? "" : item.firstname.replace(/("|'|-|,)/g, "");
    var lstname = item.lastname == null ? "" : item.lastname.replace(/("|'|-|,)/g, "");
    var email = item.email == null ? "" : item.email;
    if (item.username != null) {
        var userName = item.username == null ? "" : item.username.replace(/("|'|-|,)/g, "");
    }
    else {
        var userName = item.name == null ? "" : item.name.replace(/("|'|-|,)/g, "");
    }
    var city = item.city == null ? "" : item.city.replace(/("|'|-|,)/g, "");
    var state = item.state == null ? "" : item.state.replace(/("|'|-|,)/g, "");
    var country = item.country == null ? "" : item.country.replace(/("|'|-|,)/g, "");
    var name = lstname != "" ? lstname + ", " + fstname : fstname;

    var comma = "";
    var commas = "";
    if (city != "" && city != " " && state != "" && state != " ")
        comma = ", ";
    if (state != "" && state != " " && country != "" && country != " ")
        commas = ", ";
    if (city != "" && city != " " && country != "" && country != " ")
        commas = ", ";

    var location = city + comma + state + commas + country;

    if (item.photoid != null) {
        var thumb = item.photoid.thumbnail400;
        if (thumb) {
            var img = "<div class='popover-thumbnail cust-img-box'><img src='" + thumb + "' style='max-height:100%;' /></div>";
        }
        else {
            var thumb = "fas fa-fw fa-user-alt";
            var img = "<div class='popover-thumbnail cust-img-box' style='background: #ddd;padding: 10px;' ><i class='" + thumb + "' style='font-size: 70px;'></i></div>";
        }
    }
    else {
        var thumb = "fas fa-fw fa-user-alt";
        var img = "<div class='popover-thumbnail cust-img-box' style='background: #ddd;padding: 10px;' ><i class='" + thumb + "' style='font-size: 70px;'></i></div>";
    }
    var $strongTag = $("<strong>");
    $strongTag.append(img);
    var updatedOn = item.updatedon;
    if (updatedOn != null || updatedOn != "" || updatedOn != undefined)
        updatedOn = longDateFromUTC(item.updatedon);

    var label = ['Name', 'Email', 'User Name', 'Location', 'Updated On'];
    var value = [name, email, userName, location, updatedOn];

    for (var i = 0; i < label.length; i++) {
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $strongTag.append($divTag);
        }
    }
    return $strongTag.html();
}
var isNotificationManagerEnabled = ( isNotificationManagerEnabled != undefined ) ? isNotificationManagerEnabled : false;
function getNotificationSetting(notificationsettings, emailnotification) {
    if (enableEmailNotificationForAllUsers)
        return "All";
    else if (isNotificationManagerEnabled) {
        if (notificationsettings != 0) {
            if (notificationsettings == userNotificationTypesAll)
                return "All";
            else
                return "Partial";
        }
        else {
            if (emailnotification)
                return "All";
            else
                return "None";
        }
    }
    else {
        if (emailnotification)
            return "Yes";
        else
            return "No";
    }
}
function getHoverSwitchUserGridContents(item) {
    var fstname = item.firstname == null ? "" : item.firstname.replace(/("|'|-|,)/g, "");
    var lstname = item.lastname == null ? "" : item.lastname.replace(/("|'|-|,)/g, "");
    var email = item.email == null ? "" : item.email;
    var userName = item.name == null ? "" : item.name.replace(/("|'|-|,)/g, "");
    var name = lstname != "" ? lstname + ", " + fstname : fstname;
    
    var companyName = item.company_name == null ? "" : item.company_name;

    if (item.photoid != null) {
        var thumb = item.photoid.thumbnail400;
        var img = "<div class='popover-thumbnail cust-img-box'><img src='" + thumb + "' style='max-height:100%;' /></div>";
    }
    else {
        var thumb = "fas fa-fw fa-user-alt";
        var img = "<div class='popover-thumbnail cust-img-box' style='background: #ddd;padding: 10px;' ><i class='" + thumb + "' style='font-size: 70px;'></i></div>";
    }
    var $strongTag = $("<strong>");
    $strongTag.append(img);

    var label = ['Name', 'Email', 'User Name', 'Company'];
    var value = [name, email, userName, companyName];

    for (var i = 0; i < label.length; i++) {
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $strongTag.append($divTag);
        }
    }
    return $strongTag.html();
}
function getHoverSwitchUserCompanyAndOrg(item) {
    var companyName = item.company_name == null ? "" : item.company_name;
    var orgName = item.userorganizationname != null ? item.userorganizationname : ""; 

    var label = ['Company','Organization'];
    var value = [companyName, orgName];

    var $strongTag = $("<strong>");
    for (var i = 0; i < label.length; i++) {
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $strongTag.append($divTag);
        }
    }
    return $strongTag.html();
}
function getOpprtunityOwnerHoverContents(item) {
    var name = [];
    var userName = item.owner_name
    if (item.owner_lastname != null && item.owner_lastname != "") {
        var lastName = item.owner_lastname + ",";
        name.push(lastName);
    }
    if (item.owner_firstname != null && item.owner_firstname != "")
        name.push(item.owner_firstname);
    if (typeof (userName) != "undefined" && userName.length > 0)
        name = name.join(' ');
    else
        name = 'No Name'

    var label = ['Name', 'User Name'];
    var value = [name, userName];

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strongTag = $("<strong>");
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $content.append($strongTag);
            $content.append($divTag);
        }
    }
    return $content[0].innerHTML;
}

function getOpprtunityCreatorHoverContents(item) {
    var name = [];
    var userName = item.creator_name
    if (item.creator_lastname != null && item.creator_lastname != "") {
        var lastName = item.creator_lastname + ",";
        name.push(lastName);
    }
    if (item.creator_firstname != null && item.creator_firstname != "")
        name.push(item.creator_firstname);
    if (typeof(userName) != "undefined" && userName.length > 0)
        name = name.join(' ');
    else
        name = 'No Name'

    var label = ['Name', 'User Name'];
    var value = [name, userName];

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strongTag = $("<strong>");
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $content.append($strongTag);
            $content.append($divTag);
        }
    }
    return $content[0].innerHTML;

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strongTag = $("<strong>");
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs").css({ "max-width": "100%", "word-wrap": "break-word" }).text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $content.append($strongTag);
            $content.append($divTag);
        }
    }
    return $content[0].innerHTML;
}

function getEmailSummaryHoverContents(item) {
    var name = [];
    var userName = (item.username != null && item.username != "") ? item.username : item.name;
    if (item.lastname != null && item.lastname != "") {
        var lastName = item.lastname + ",";
        name.push(lastName);
    }
    if (item.firstname != null && item.firstname != "")
        name.push(item.firstname);
    if (username.length > 0)
        name = name.join(' ');
    else
        name = 'No Name'
    if (item.email != null && item.email != "" && item.name == "")
        name = item.email;

    var label = ['Name', 'User Name'];
    var value = [name, userName];

    var onBeHalfUser = item.onbehalf;
    if (onBeHalfUser != null) {
        label.push('On Behalf');
        value.push(onBeHalfUser);
    }

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strongTag = $("<strong>");
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $content.append($strongTag);
            $content.append($divTag);
        }
    }
    return $content[0].innerHTML;
}

function getMDFHoverContents(item) {
    var label = [];
    var value = [];
    //user full name
    var fullName = item.fullname;
    if (fullName != null && fullName != "" && fullName != undefined) {
        fullName = fullName;
        label.push('Name');
        value.push(fullName);
    }
    // user email
    var userEmail = item.useremail;
    if (userEmail != null && userEmail != "" && userEmail != undefined) {
        userEmail = userEmail;
        label.push('Email');
        value.push(userEmail);
    }
    var userName = item._username;
    if (userName != null && userName != "" && userName != undefined) {
        userName = userName;
        label.push('User Name');
        value.push(userName);
    }
    //user phone
    var userPhone = item.userphone;
    if (userPhone != null && userPhone != "" && userPhone != undefined) {
        userPhone = userPhone;
        label.push('Phone');
        value.push(userPhone);
    }
    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strongTag = $("<strong>");
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $content.append($strongTag);
            $content.append($divTag);
        }
    }
    return $content[0].innerHTML;
}

function getMDFHoverReasons(item) {
    var label = [];
    var value = [];
    var name = [];
    //Delete Complete Reason
    var deleteReason = item.deletereason;
    if (deleteReason != null && deleteReason != "" && deleteReason != undefined) {
        deleteReason = deleteReason;
        label.push('Reason for Deletion');
        value.push(deleteReason);
    }
    // Deleted By
    if (item.lastname != null && item.lastname != "") {
        var lastName = item.lastname + ",";
        name.push(lastName);
    }
    if (item.firstname != null && item.firstname != "")
        name.push(item.firstname);
    if (name.length > 0)
        name = name.join(' ');
    else
        name = 'No Name';
    label.push('Deleted By');
    value.push(name);

    // Deleted date time
    var updatedOn  = item.updatedon;
    if (updatedOn == null || updatedOn == "" || updatedOn == undefined)
        if (item.updatedon == null || item.updatedon == "" || item.updatedon == undefined)
            updatedOn = 'NA';
        else
            updatedOn = longDateFromUTC(item.updatedon);
    else
        updatedOn = longDateFromUTC(updatedOn);
    label.push('Updated On');
    value.push(updatedOn);

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strongTag = $("<strong>");
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $content.append($strongTag);
            $content.append($divTag);
        }
    }
    return $content[0].innerHTML;
}


function getMDFHoverRejectedReasons(item) {
    var label = [];
    var value = [];
    label.push('Reject Reason');
    value.push(item);
    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strongTag = $("<strong>");
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $content.append($strongTag);
            $content.append($divTag);
        }
    }
    return $content[0].innerHTML;
}
function getHoverContentsForDealRegistration(item) {    
    var label = ['City', 'State', 'Country', 'Work Number', 'Mobile Number'];//label array
    var value = [item.city, item.state, item.country, item.worknumber, item.mobilenumber];//value array

    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ' :');
        var textValue = value[i] != "" ? value[i] : 'NA';
        var $div = $('<div>').addClass('font-xs popover-url').text(textValue);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}

function getHoverContentsForApprovedDealRegistration(item) {
    var label = ['Approved By', 'Company', 'Approved On', 'Comment'];//label array
    if (item.requeststatus == 4)
        label = ['Rejected By', 'Company', 'Rejected On', 'Comment'];//label array
    var value = [item.updateremail, item.approvedbycompany, longDateTime(item.updatedon), item.comments];//value array

    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ' :');
        var textValue = value[i] != "" ? value[i] : 'NA';
        var $div = $('<div>').addClass('font-xs popover-url').text(textValue);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}

//Hover consistency for Opportunity grid #27669
function getOpportunityHoverOwnerData(item) {
    var desc = item.description;
    var username = item.owner_name
    if (desc == null || desc == undefined)
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';

    var ownerName = [];
    if (item.owner_lastname != null && item.owner_lastname != "") {
        var lastName = item.owner_lastname + ",";
        ownerName.push(lastName);
    }
    if (item.owner_firstname != null && item.owner_firstname != "")
        ownerName.push(item.owner_firstname);
    if (username)
        ownerName = ownerName.join(' ');
    else
        ownerName = 'No Name';

    var creatorName = [];
    if (item.creator_lastname != null && item.creator_lastname != "") {
        var lastName = item.creator_lastname + ",";
        creatorName.push(lastName);
    }
    if (item.creator_firstname != null && item.creator_firstname != "")
        creatorName.push(item.creator_firstname);
    if (username)
        creatorName = creatorName.join(' ');
    else
        creatorName = 'No Name';

    var creatorCompany = item.creator_organization != "" ? item.creator_organization : item.creator_companyname != "" ? item.creator_companyname : item.creator_originalcompany;
    var ownerCompany = item.owner_organization != "" ? item.owner_organization : item.owner_companyname != "" ? item.owner_companyname : item.owner_originalcompany;
    
    var createdData = creatorName + "</br>" + item.creator_email + "</br>" + creatorCompany;
    var ownerData = ownerName + "</br>" + item.owner_email + "</br>" + ownerCompany;

    var label = ['Creator', 'Owner'];//label array
    var value = [createdData, ownerData];//value array

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        if (value[i] != "" && value[i] != " ") {
            var $strong = $("<strong>");
            var $span = $('<span>').addClass('font-sm').text(label[i] + ':');
            var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
            $strong.append($span);
            $content.append($strong);
            $content.append($div);
        }
    }
    return $content[0].innerHTML;
}
function getDealsHoverOwnerData(item) {
    var ownerName = [];
    if (item.ownerlastname != null && item.ownerlastname != "") {
        var lastName = item.ownerlastname + ",";
        ownerName.push(lastName);
    }
    if (item.ownerfirstname != null && item.ownerfirstname != "")
        ownerName.push(item.ownerfirstname);
    if (ownerName.length > 0)
        ownerName = ownerName.join(' ');
    else
        ownerName = 'No Name';

    var creatorName = [];
    if (item.creatorlastname != null && item.creatorlastname != "") {
        var lastName = item.creatorlastname + ",";
        creatorName.push(lastName);
    }
    if (item.creatorfirstname != null && item.creatorfirstname != "")
        creatorName.push(item.creatorfirstname);
    if (creatorName.length > 0)
        creatorName = creatorName.join(' ');
    else
        creatorName = 'No Name';

    var creatorCompany = (item.creatorcompany != null && item.creatorcompany != "") ? item.creatorcompany :"";
    var ownerCompany = item.ownerOrganization ? item.ownerOrganization : (item.ownercompany != null && item.ownercompany != "") ? item.ownercompany : "";

    var createdData = creatorName + "</br>" + item.creatoremail + "</br>" + creatorCompany;
    var ownerData = ownerName + "</br>" + item.owneremail + "</br>" + ownerCompany;

    var label = ['Creator', 'Owner'];//label array
    var value = [createdData, ownerData];//value array

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        if (value[i] != "" && value[i] != " ") {
            var $strong = $("<strong>");
            var $span = $('<span>').addClass('font-sm').text(label[i] + ':');
            var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
            $strong.append($span);
            $content.append($strong);
            $content.append($div);
        }
    }
    return $content[0].innerHTML.replaceAll('&lt;', '<').replaceAll('&gt;', '>');
}
function getHoverContentsForSynCategory(item) {
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var $div = $('<div>').text(desc);
    if (item.updateddate == null || item.updateddate == "" || item.updateddate == undefined)
        updatedOn = 'NA';
    else
        updatedOn = longDateFromUTC(item.updateddate);
    var name = item.categoryname;
    if (name == undefined) name = item.displayname;
    var label = ['Name', 'Description'];//label array
    var value = [name, $div.html()];//value array
    var $strong = $('<strong>');
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ' :');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}

//get all querystring parameters
function getUrlVars() {
    var vars = [], hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for (var i = 0; i < hashes.length; i++) {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
}

var dateFormat = function () {
    var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
		timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
		timezoneClip = /[^-+\dA-Z]/g,
		pad = function (val, len) {
		    val = String(val);
		    len = len || 2;
		    while (val.length < len) val = "0" + val;
		    return val;
		};

    // Regexes and supporting functions are cached through closure
    return function (date, mask, utc) {
        var dF = dateFormat;

        // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
        if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
            mask = date;
            date = undefined;
        }
        // Passing date through Date applies Date.parse, if necessary
        date = date ? new Date(date) : new Date;
        if (isNaN(date)) throw SyntaxError("invalid date");

        mask = String(dF.masks[mask] || mask || dF.masks["default"]);

        // Allow setting the utc argument via the mask
        if (mask.slice(0, 4) == "UTC:") {
            mask = mask.slice(4);
            utc = true;
        }

        var _ = utc ? "getUTC" : "get",
			d = date[_ + "Date"](),
			D = date[_ + "Day"](),
			m = date[_ + "Month"](),
			y = date[_ + "FullYear"](),
			H = date[_ + "Hours"](),
			M = date[_ + "Minutes"](),
			s = date[_ + "Seconds"](),
			L = date[_ + "Milliseconds"](),
			o = utc ? 0 : date.getTimezoneOffset(),
			flags = {
			    d: d,
			    dd: pad(d),
			    ddd: dF.i18n.dayNames[D],
			    dddd: dF.i18n.dayNames[D + 7],
			    m: m + 1,
			    mm: pad(m + 1),
			    mmm: dF.i18n.monthNames[m],
			    mmmm: dF.i18n.monthNames[m + 12],
			    yy: String(y).slice(2),
			    yyyy: y,
			    h: H % 12 || 12,
			    hh: pad(H % 12 || 12),
			    H: H,
			    HH: pad(H),
			    M: M,
			    MM: pad(M),
			    s: s,
			    ss: pad(s),
			    l: pad(L, 3),
			    L: pad(L > 99 ? Math.round(L / 10) : L),
			    t: H < 12 ? "a" : "p",
			    tt: H < 12 ? "am" : "pm",
			    T: H < 12 ? "A" : "P",
			    TT: H < 12 ? "AM" : "PM",
			    Z: utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
			    o: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
			    S: ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
			};

        return mask.replace(token, function ($0) {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    };
}();

function formatPrice(num) {
    return (Number.parseFloat(num).toFixed(2)).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
}

function getDocumentThumbHoverContents(item) {
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    
    var $div = $('<div>').text(desc);

    var name = item.displayname;
    if (name == undefined) name = item.name;
    var $strong = $("<strong>");
    var img = "<div class='popover-thumbnail ' style='min-width:198px;border-bottom:1px solid #dddddd;background-color:#ddd;text-align:center;line-height:299px;margin-bottom:0px;'><img src='" + item.thumbnail + "' style='max-height:100%; max-width:100%;' /></div>";
    if (item.thumbnail == null || item.thumbnail == undefined || item.thumbnail == "") { 
    img ="<div class='popover-thumbnail ' style='min-width:198px;border-bottom:1px solid #dddddd;background-color:#ddd;text-align:center;line-height:299px;margin-bottom:0px;'><i class='" + item.fonticon + "' style='font-size: 50px; margin-top:10px; ' /></div>";}
        
    $strong.append(img);
        var label = ['Name', 'Description'];
        var value = [item.createdbyname, desc, $div.html(),];
    
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}
// Some common format strings
dateFormat.masks = {
    "default": "ddd mmm dd yyyy HH:MM:ss",
    shortDate: "m/d/yy",
    mediumDate: "mmm d, yyyy",
    longDate: "mmmm d, yyyy",
    fullDate: "dddd, mmmm d, yyyy",
    shortTime: "h:MM TT",
    mediumTime: "h:MM:ss TT",
    longTime: "h:MM:ss TT Z",
    isoDate: "yyyy-mm-dd",
    isoTime: "HH:MM:ss",
    isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
    isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

// Internationalization strings
dateFormat.i18n = {
    dayNames: [
		"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
		"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
    ],
    monthNames: [
		"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
		"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
    ]
};

// For convenience...
Date.prototype.format = function (mask, utc) {
    return dateFormat(this, mask, utc);
};

//$('#ribbon')
//    .append(
//        '<div class="demo"><span id="demo-setting"><i class="fa fa-cog txt-color-blueDark"></i></span> <form><legend class="no-padding margin-bottom-10">Layout Options</legend><section><label><input name="subscription" id="smart-fixed-nav" type="checkbox" class="checkbox style-0"><span>Fixed header</span></label><label><input type="checkbox" name="terms" id="smart-fixed-ribbon" class="checkbox style-0"><span>Fixed Ribbon</span></label><label><input type="checkbox" name="terms" id="smart-fixed-navigation" class="checkbox style-0"><span>Fixed Navigation</span></label><label><input type="checkbox" name="terms" id="smart-fixed-container" class="checkbox style-0"><span>Inside <b>.container</b> <div class="font-xs text-right">(non-responsive)</div></span></label><label style="display:none;"><input type="checkbox" name="terms" id="smart-rtl" class="checkbox style-0"><span>Right to left <b>(rtl)</b></span></label> <span id="smart-bgimages"></span></section><section><h6 class="margin-top-10 semi-bold margin-bottom-5">Clear Localstorage</h6><a href="javascript:void(0);" class="btn btn-xs btn-block btn-primary" id="reset-smart-widget"><i class="fa fa-sync"></i> Widget Reset</a></section> <h6 class="margin-top-10 semi-bold margin-bottom-5">SmartAdmin Skins</h6><section id="smart-styles"><a href="javascript:void(0);" id="smart-style-0" class="btn btn-block btn-xs txt-color-white margin-right-5" style="background-color:#4E463F;"><i class="fa fa-check fa-fw" id="skin-checked"></i>Smart Default</a><a href="javascript:void(0);" id="smart-style-1" class="btn btn-block btn-xs txt-color-white" style="background:#3A4558;">Dark Elegance</a><a href="javascript:void(0);" id="smart-style-2" class="btn btn-xs btn-block txt-color-darken margin-top-5" style="background:#fff;">Ultra Light</a><a href="javascript:void(0);" id="smart-style-3" class="btn btn-xs btn-block txt-color-white margin-top-5" style="background:#f78c40">Google Skin</a></section></form> </div>'
//)

// hide bg options
var smartbgimage =
    "<h6 class='margin-top-10 semi-bold'>Background</h6><img src='img/pattern/graphy-xs.png' data-htmlbg-url='img/pattern/graphy.png' width='22' height='22' class='margin-right-5 bordered cursor-pointer'><img src='img/pattern/tileable_wood_texture-xs.png' width='22' height='22' data-htmlbg-url='img/pattern/tileable_wood_texture.png' class='margin-right-5 bordered cursor-pointer'><img src='img/pattern/sneaker_mesh_fabric-xs.png' width='22' height='22' data-htmlbg-url='img/pattern/sneaker_mesh_fabric.png' class='margin-right-5 bordered cursor-pointer'><img src='img/pattern/nistri-xs.png' data-htmlbg-url='img/pattern/nistri.png' width='22' height='22' class='margin-right-5 bordered cursor-pointer'><img src='img/pattern/paper-xs.png' data-htmlbg-url='img/pattern/paper.png' width='22' height='22' class='bordered cursor-pointer'>";
$("#smart-bgimages")
    .fadeOut();

$('#demo-setting')
    .on("click", function () {
        //console.log('setting');
        $('#ribbon .demo')
            .toggleClass('activate');
    })

/*
 * FIXED HEADER
 */
$('input[type="checkbox"]#smart-fixed-nav')
    .on("click", function () {
        if ($(this)
            .is(':checked')) {
            //checked
            $.root_.addClass("fixed-header");
            nav_page_height();
        } else {
            //unchecked
            $('input[type="checkbox"]#smart-fixed-ribbon')
                .prop('checked', false);
            $('input[type="checkbox"]#smart-fixed-navigation')
                .prop('checked', false);

            $.root_.removeClass("fixed-header");
            $.root_.removeClass("fixed-navigation");
            $.root_.removeClass("fixed-ribbon");

        }
    });

/*
 * FIXED RIBBON
 */
$('input[type="checkbox"]#smart-fixed-ribbon')
    .on("click", function () {
        if ($(this)
            .is(':checked')) {
            //checked
            $('input[type="checkbox"]#smart-fixed-nav')
                .prop('checked', true);

            $.root_.addClass("fixed-header");
            $.root_.addClass("fixed-ribbon");

            $('input[type="checkbox"]#smart-fixed-container')
                .prop('checked', false);
            $.root_.removeClass("container");

        } else {
            //unchecked
            $('input[type="checkbox"]#smart-fixed-navigation')
                .prop('checked', false);
            $.root_.removeClass("fixed-ribbon");
            $.root_.removeClass("fixed-navigation");
        }
    });


/*
 * FIXED NAV
 */
$('input[type="checkbox"]#smart-fixed-navigation')
    .on("click", function () {
        if ($(this)
            .is(':checked')) {

            //checked
            $('input[type="checkbox"]#smart-fixed-nav')
                .prop('checked', true);
            $('input[type="checkbox"]#smart-fixed-ribbon')
                .prop('checked', true);

            //apply
            $.root_.addClass("fixed-header");
            $.root_.addClass("fixed-ribbon");
            $.root_.addClass("fixed-navigation");

            $('input[type="checkbox"]#smart-fixed-container')
                .prop('checked', false);
            $.root_.removeClass("container");

        } else {
            //unchecked
            $.root_.removeClass("fixed-navigation");
        }
    });

/*
 * RTL SUPPORT
 */
$('input[type="checkbox"]#smart-rtl')
    .on("click", function () {
        if ($(this)
            .is(':checked')) {

            //checked
            $.root_.addClass("smart-rtl");

        } else {
            //unchecked
            $.root_.removeClass("smart-rtl");
        }
    });


/*
 * INSIDE CONTAINER
 */
$('input[type="checkbox"]#smart-fixed-container')
    .on("click", function () {
        if ($(this)
            .is(':checked')) {
            //checked
            $.root_.addClass("container");

            $('input[type="checkbox"]#smart-fixed-ribbon')
                .prop('checked', false);
            $.root_.removeClass("fixed-ribbon");

            $('input[type="checkbox"]#smart-fixed-navigation')
                .prop('checked', false);
            $.root_.removeClass("fixed-navigation");

            if (smartbgimage) {
                $("#smart-bgimages")
                    .append(smartbgimage)
                    .fadeIn(1000);
                $("#smart-bgimages img")
                    .on("click", function () {
                        var $this = $(this);
                        var $html = $('html')
                        bgurl = ($this.data("htmlbg-url"));
                        $html.css("background-image", "url(" +
                            bgurl + ")");
                    })

                smartbgimage = null;
            } else {
                $("#smart-bgimages")
                    .fadeIn(1000);
            }


        } else {
            //unchecked
            $.root_.removeClass("container");
            $("#smart-bgimages")
                .fadeOut();
            // console.log("container off");
        }
    });

/*
 * REFRESH WIDGET
 */
$("#reset-smart-widget")
    .on("click", function () {
        $('#refresh')
            .trigger("click");
        return false;
    });

/*
 * STYLES
 */
$("#smart-styles > a")
    .on("click", function () {
        var $this = $(this);
        var $logo = $("#logo img");
        $.root_.removeClassPrefix('smart-style')
            .addClass($this.attr("id"));
        $logo.attr('src', $this.data("skinlogo"));
        $("#smart-styles > a #skin-checked")
            .remove();
        $this.prepend(
            "<i class='fa fa-check fa-fw' id='skin-checked'></i>"
        );
    });
function getFileSize(size) {
    if (size < 1024) {
        return size + " bytes";
    }
    else if (size < 1024 * 1024) {
        return Math.floor(size / 1024) + "kb";
    }
    else if (size < 1024 * 1024 * 1024) {
        return Math.floor(size / 1024 / 1024) + "mb";
    }
    else if (size < 1024 * 1024 * 1024 * 1024) {
        return Math.floor(size / 1024 / 1024 / 1024) + "gb";
    }
    else if (size < 1024 * 1024 * 1024 * 1024 * 1024) {
        return Math.floor(size / 1024 / 1024 / 1024 / 1024) + "tb";
    }

    return size;
}
function getSubName(_string) {
    if (_string.length < 50)
        return _string;
    else
        return _string.substring(0, 50) + "...";
}
//Added by lalita to get the template type text
function getTemplateTypetext(_ttype, options) {
    var temptypetext = '';
    switch (_ttype) {
        case 16:
            temptypetext = ' Print ';
            break;
        case 32:
            temptypetext = ' Email ';
            break;
        case 128:
            temptypetext = ' Web ';
            break;
        case 512:
            temptypetext = ' Form ';
            break;
        case 16384:
            temptypetext = ' PPT ';
            break;
        case 36864:
            temptypetext = ' Data Room ';
            break;
        case 65536:
            temptypetext = ' Sms ';
            break;
        case 16777216:
            temptypetext = ' Playbook ';
            if (typeof options != "undefined") {
                if (options.personalization != "undefined") {
                    if (options.personalization == parseInt("1"))
                        temptypetext = options.templatetypename;
                    else if (options.personalization == parseInt("0"))
                        temptypetext = options.templatetypename;
                    else if (options.personalization == parseInt("9")) {
                        temptypetext = options.templatetypename;
                        if (options.templatetypename == undefined || options.templatetypename == "undefined") {
                            temptypetext = 'Journey';
                        }
                    }
                    else
                        temptypetext = ' Playbook ';
                }
                else
                    temptypetext = ' Playbook ';
            }
            break;
        case 262144:
            temptypetext = ' Certification ';
            break;
        case 33554432:
            temptypetext = ' Linkedin ';
            break;
        case 67108864:
            temptypetext = ' Banner ';
            break;
        case 134217728:
            temptypetext = ' Web Banner ';
            break;
        case 268435456:
            temptypetext = ' Blog Post ';
            break;
        case 3145728:
            temptypetext = ' Contract ';
            break;
        case 256:
            temptypetext = ' eBook ';
            break;
        case parseInt("536870912"):
            temptypetext = ' Learning Management ';
            if (typeof options != "undefined") {
                if (options.personalization == parseInt("0"))
                    temptypetext = ' Course ';
                else if (options.personalization == parseInt("10"))
                    temptypetext = ' SCORM Package';
                else
                    temptypetext = ' Curriculum ';
            }
            break;
        case 1073741824:
            temptypetext = ' FAQs ';
            break;
        case 8388608:
            temptypetext = ' Video ';
            break;
        case 1048576:
            temptypetext = 'Image';
            break;
        case 1024:
            temptypetext = ' Knowledge Page ';
            break;
        default:
            temptypetext = ' ';
    }
    return temptypetext;
}

function getTemplateTypetextv5(_ttype, options) {
    var temptypetext = '';
    switch (_ttype) {
        case 16:
            temptypetext = 'Print';
            break;
        case 32:
            temptypetext = 'Email';
            break;
        case 128:
            temptypetext = 'Web';
            break;
        case 512:
            temptypetext = 'Form';
            break;
        case 16384:
            temptypetext = 'PPT';
            break;
        case 36864:
            temptypetext = 'Dataroom';
            break;
        case 65536:
            temptypetext = 'Sms';
            break;
        case 16777216:
            temptypetext = 'Playbook';
            break;
        case 262144:
            temptypetext = '{$ajax_templates_edit.Questionaire}';
            break;
        case 33554432:
            temptypetext = 'Linkedin';
            break;
        case 67108864:
            temptypetext = 'Banner';
            break;
        case 134217728:
            temptypetext = 'Web Banner';
            break;
        case 268435456:
            temptypetext = 'Blog Post';
            break;
        case 3145728:
            temptypetext = 'Contract';
            break;
        case 256:
            temptypetext = 'eBooks';
            break;
        case parseInt("536870912"):
            temptypetext = 'Learning Management';
            if (typeof options != "undefined") {
                if (options.personalization == parseInt("0"))
                    temptypetext = 'Course';
                else if (options.personalization == parseInt("10"))
                    temptypetext = ' SCORM Package';
                else
                    temptypetext = 'Curriculum';
            }
            break;
        case 1073741824:
            temptypetext = 'FAQs';;
            break;
        case 8388608:
            temptypetext = 'Personalized Videos';
            break;
        default:
            temptypetext = ' ';
    }
    return temptypetext;
}
function getFileTypeText(_ttype) {
    if (_ttype == "VIDEO" || _ttype == "MP4")
        return "Video"
    else if (_ttype == "IMAGE" || _ttype == "JPEG" || _ttype == "GIF" || _ttype == "BITMAP" || _ttype == "PNG" || _ttype == "ICON" || _ttype == "SVG")
        return "Image"
    else if (_ttype == "DOCUMENT" || _ttype == "TEXT" || _ttype == "PDF" || _ttype == "XML" || _ttype == "ZIP" || _ttype == "CSV" || _ttype == "XLS" || _ttype == "PPT" || _ttype == "MP3")
        return "Document"
    else
        return "";
}
function changed_status(date_range_index) {
    var note = "";
    if (date_range_index == 0)
        note = "<span>*today's status</span>";
    else if (date_range_index == 1)
        note = "<span>*this week's status</span>";
    else if (date_range_index == 2)
        note = "<span>*this month's status</span>";
    else
        note = "<span>*status till date</span>";
    return note;
}

function getInfoHtml(note1,note2,note3) {
    var $mainDiv = $("<div class='note-popover'>");
    var $divDesc = $("<div class='popover-desc'>");
    var $divContentholder = $("<div class='content-holder'>");
    var $p1 = $("<p>").text(note2);
    var $p2 = $("<p>").text(note3);
    if (note2 != "")
        $divContentholder.append($p1);
    if (note3 != "")
        $divContentholder.append($p2);
    $divDesc.append($divContentholder);
    $mainDiv.append($divDesc);

    return $mainDiv.html();
}
function getPlaybookInfoHtml(note1) {
    var $mainDiv = $("<div class='note-popover'>");
    var $divDesc = $("<div class='popover-desc'>");
    var $divContentholder = $("<div class='content-holder'>");
    var $p1 = $("<p>").text(note1);
    if (note1 != "")
        $divContentholder.append($p1);
    $divDesc.append($divContentholder);
    $mainDiv.append($divDesc);

    return $mainDiv.html();
}
function getPopUPateInfo(updatedfilelink) {
    $mainDiv = $("<div class='popover-content'>")
    $popContentDiv = $("<div class='url-wrap'>").text(updatedfilelink);
    
    $mainDiv.append($popContentDiv);
    return $mainDiv.html();
}

function prettyDate3(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;

    time = d.format("mm/dd/yyyy hh:mm:ss tt");
    var diff = (((new Date()).getTime() - d.getTime()) / 1000);
    var day_diff = Math.floor(diff / 86400);
    if (isNaN(day_diff) || day_diff < 0 || day_diff >= 31)
        return d.format("mm/dd/yyyy");

    return day_diff == 0 && (
        diff < 60 && "just now" ||
        diff < 120 && "1 minute ago" ||
        diff < 3600 && Math.floor(diff / 60) + " minutes ago" ||
        diff < 7200 && "1 hour ago" ||
        diff < 86400 && Math.floor(diff / 3600) + " hours ago") ||
    day_diff == 0 && "Today" ||
    day_diff == 1 && "Yesterday" ||
    day_diff < 7 && day_diff + " days ago" ||
    day_diff < 31 && Math.ceil(day_diff / 7) + " weeks ago";   
}


//---Export Handler ---//
function exportreport(apiData1, name, defaultFields, dbFields, apiData, apiName, checkedIds, uniqueIds, exportType, offset, localTime, showAnon, isSmartlist, isEmailNotification, emailExportType, exportFileType) {
    if (typeof (JSON.stringify(apiData1)) != "undefined" && typeof (JSON.stringify(apiData)) != "undefined" && apiData.toString() != "null" && apiData.toString() != "") {    
        $.extend(apiData1, apiData);
    }
    exportTitle = "";
    var now = getDateTimeBasedOnTimeZone(new Date());
    localTime = now.format("mm/dd/yyyy h:MM:ss TT");
    xobnidata = null;
    if (isEmailNotification == undefined)
        isEmailNotification = false;
    api.call("Export", { apiname: apiName, name: name, apidata: apiData1, showfields: defaultFields, dbfields: dbFields, checkedids: checkedIds, listid: checkedIds != null ? checkedIds[0] : null, uniqueids: uniqueIds, showanon: showAnon, offset: offset, isSmartlist: isSmartlist, exporttype: exportType, localtime: localTime, isemailnotification: isEmailNotification, emailexporttype: emailExportType, exportfiletype: exportFileType },
        function (data) {
            if (data.result > 0) {
                var exportTypeParam;
                if (exportType == "User") {
                    exportType = 'Users';
                    exportTypeParam = 'users';
                }
                else if (exportType == "Contact") {
                    exportType = 'Contacts';
                    exportTypeParam = 'contacts';
                }
                else if (exportType == "Case") {
                    exportType = 'Cases';
                    exportTypeParam = 'cases';
                }
                else if (exportType == "Account") {
                    exportType = 'Account';
                    exportTypeParam = 'accounts';
                }
                else if (exportType == "Deals") {
                    exportType = 'Deals';
                    exportTypeParam = 'deals';
                }
                else if (exportType == "Database") {
                    exportType = 'Database';
                    exportTypeParam = 'databases';
                }
                else {
                    exportType = 'Reports';
                    exportTypeParam = 'reports';
                }
                $.smallBox({
                    title: exportLocalization.ExportSuccessTitle,
                    content: (isEmailNotification == true ? "<i>" + exportLocalization.ExportSuccessMessage.replace("{0}", exportTypeParam) + "</i>" : "<i>" + exportLocalization.ExportSuccessMessageNoNotification.replace("{0}", exportTypeParam) + "</i>") + ' <a target="_blank"  onClick="ExportDownload(\'' +exportTypeParam+ '\')"  style="color: yellow" >Click Here to Visit Export Page</a>',
                    color: "#659265",
                    iconSmall: "fa fa-check fa-2x fadeInRight animated",
                    timeout: 10000
                });
            } else {
                $.smallBox({
                    title: exportLocalization.ExportFailedTitle,
                    content: "<i>" + exportLocalization.ExportFailedMessage + "</i>",
                    color: "#b94a48",
                    iconSmall: "fa fa-times fa-2x fadeInRight animated",
                    timeout: 4000
                });
            }
        });

}
function ExportDownload(exportTypeParam) {
    var newWindow = window.open(hostPath + '/#connections/export/status?exportType=' + exportTypeParam);
        newWindow.addEventListener('load', function() {
            newWindow.document.title = "Export Status";
        });
   
}


function exportcontact(callback, result) { 
    if (xobnidata != null) {
        var gridFields = xobnidata.defaultfields;
        var dbFields = xobnidata.dbfields;     
        var contactDefaultFields = [];
        var defShowFields = [];
        if (result != null) {
            var contactFields = result.selectedfields;
            var contactShowFields = result.showfields;           
           
            // get first default fields of contacts . These are db fieldnames of default
            if (xobnidata.linktype == LinkTypeEnums.Deals) {
                contactDefaultFields = ["firstname", "lastname", "contactemail", "leadcompany", "createdon", "createname", "createdbycompany", "createremail", "ownerbyname", "ownercompany", "owneremail"];
                defShowFields = ['First Name', 'Last Name', 'Email', 'Company', 'Created On', 'Requester Name' , 'Requester Company', 'Requester Email', 'Owner','Owner Company', 'Owner Email'];

                switch (xobnidata.apidata.state) {
                    case parseInt('2'):
                        contactDefaultFields.splice(5, 0, "approvedby");
                        contactDefaultFields.splice(6, 0, "comments");
                        defShowFields.splice(5, 0, 'Approved By');
                        defShowFields.splice(6, 0, 'Approve/Reject Comments');
                        break;
                    case parseInt('4'):
                        contactDefaultFields.splice(5, 0, "rejectedby");
                        contactDefaultFields.splice(6, 0, "comments");
                        defShowFields.splice(5, 0, 'Rejected By');
                        defShowFields.splice(6, 0, 'Approve/Reject Comments');
                        break;
                } 
            }
            else {
                contactDefaultFields = ["firstname", "lastname", "email", "mobilenumber", "score", "createdby", "ownedby", "createdon"];
                defShowFields = ['First Name', 'Last Name', 'Email', 'SMS', 'Score', 'Created By', 'Owned By', 'Created On'];
            }
            for (var i = 0; i < contactDefaultFields.length; i++) {
                if (dbFields.indexOf(contactDefaultFields[i]) == -1) {
                    if (gridFields.indexOf(defShowFields[i]) == -1)
                        gridFields.push(defShowFields[i]);
                    else
                    {
                        if (dbFields.indexOf(contactDefaultFields[i]) == -1) {
                            if (contactDefaultFields[i] == "createdby")
                                dbFields[gridFields.indexOf(defShowFields[i])]= "createdbyname";
                            else if (contactDefaultFields[i] == "ownedby")
                                dbFields[gridFields.indexOf(defShowFields[i])] ="ownerbyname";
                            else
                                dbFields[gridFields.indexOf(defShowFields[i])] =contactDefaultFields[i];
                        }
                    }
                }
                if (dbFields.indexOf(contactDefaultFields[i]) == -1) {
                    if (contactDefaultFields[i] == "createdby")
                        dbFields.push("createdbyname");
                    else if (contactDefaultFields[i] == "ownedby")
                        dbFields.push("ownerbyname");
                    else
                        dbFields.push(contactDefaultFields[i]);
                }
            }            

            // get selected fields of contacts
            if (contactFields != null && contactFields.length > 0) {
                for (var i = 0; i < contactFields.length; i++) {
                    if (dbFields.indexOf(contactFields[i]) == -1) {
                        dbFields.push(contactFields[i]);
                        if (gridFields.indexOf(contactShowFields[i]) == -1)
                            gridFields.push(contactShowFields[i]);

                    }                    
                }                
            }
            
            var fields = {};
            $.each(gridFields, function (i, l) {
                fields[l] = dbFields[i];
            });
            xobnidata.fields = fields;
            callback(true);
        }
    }
}

function isJSON(something) {
    if (typeof something != 'string')
        something = JSON.stringify(something);

    try {
        var a = JSON.parse(something);
        if (a != null)
            return true;
    } catch (e) {
        return false;
    }
}

function isJSONCheck(something) {
    if (typeof something != 'string')
        something = JSON.stringify(something);

    try {
       const data = JSON.parse(something);
        // Check if the data result is an object or an array
        return typeof data === 'object' && data !== null;
    } catch (e) {
        return false;
    }
}

//return media icon
function getFontAwesomeIcon(type) {
    var iconpath = '';
    if (type == 16 | type == 256)//pdf || ebook
        iconpath = 'file';
    else if (type == 32)//email
        iconpath = 'inbox';
    else if (type == 128)//web 
        iconpath = 'globe';
    else if (type == 512)//form 
        iconpath = 'file-alt';
    else if (type == 36864)//playbook 
        iconpath = 'book';
    else if (type == 65536)//sms
        iconpath = 'envelope';
    else if (type == 16777216)//internalplaybook 
        iconpath = 'book';
    else if (type == 131072)//polls
        iconpath = 'chart-bar';
    else if (type == 262144)//questionaire 
        iconpath = 'question';
    else if (type == 16384)//powerpoint 
        iconpath = 'file-powerpoint';
    return iconpath;
}

function getTemplateType(type) {
    var iconpath = '';
    if (type == 16)//pdf || ebook
        iconpath = 'Print';
    else if (type == 256)
        iconpath = 'Ebook';
    else if (type == 32)//email
        iconpath = 'Email';
    else if (type == 128)//web 
        iconpath = 'Web';
    else if (type == 512)//form 
        iconpath = 'Form';
    else if (type == 36864)//playbook 
        iconpath = 'Dataroom';
    else if (type == 65536)//sms
        iconpath = 'SMS';
    else if (type == 16777216)//internalplaybook 
        iconpath = 'Playbook';
    else if (type == 131072)//polls
        iconpath = 'Polls';
    else if (type == 262144)//questionaire 
        iconpath = 'Question';
    else if (type == 16384)//powerpoint 
        iconpath = 'Powerpoint';
    return iconpath;
}




var isMobile = {
    Android: function () {
        return navigator.userAgent.match(/Android/i);
    },
    BlackBerry: function () {
        return navigator.userAgent.match(/BlackBerry/i);
    },
    iOS: function () {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
    },
    Opera: function () {
        return navigator.userAgent.match(/Opera Mini/i);
    },
    Windows: function () {
        return navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);
    },
    any: function () {
        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());
    }
};

function ExportOpportunities(_xobni, projectType, api, apiData)
{
    var that = _xobni;
    var linkids = null;
    linkids = that.dom.tablewrap.find("input[type='checkbox']:checked:not('.all')").map(function () {
        return parseInt($(this).parents("tr").data("recordid"));
    }).get();

    if (api === undefined)
        api = that.settings.api;    

    var sortcolumn = that.dom.sort.data("sort-column");
    var sortorder = that.dom.sort.data("sort-asc");    

    sortcolumn = sortcolumn != null ? sortcolumn : "ID";
    sortorder = sortorder != null ? sortorder : true;
    var selectedProjectTypeIndex = that.dom.container.find(".inbox-side-bar .inbox-folder-scrool ul li.active").data('folder');
    if (projectType === undefined)
        projectType = that.settings.folders[selectedProjectTypeIndex].apidata.projecttypeid !== undefined ? that.settings.folders[selectedProjectTypeIndex].apidata.projecttypeid : that.settings.folders[selectedProjectTypeIndex].apidata.projecttyeid;
   
    var filters = [];
    that.dom.quickaccess.find("li.active > a[data-filter]").each(function () {
        filters.push($(this).data("filter").toString());
    });
    var exportDetails = {};
    exportDetails.linkids = linkids;
    exportDetails.filters = filters;
    exportDetails.api = api;
    exportDetails.apidata = apiData === undefined ? that.apidata : apiData;
    exportDetails.projecttype = projectType;
    exportDetails.sortcolumn = sortcolumn;
    exportDetails.ascending = sortorder;
    exportDetails.searchtext = fixedEncodeURIComponent(searchtext != undefined ? searchtext : "");
    exportDetails.linktype = LinkTypeEnums.Opportunity;
    modal.showExportWizard(exportDetails);
}

function daydiff(utcdt) {
    var d1 = new Date();
    d1.setHours(0, 0, 0, 0);
    var strdt1 = d1.toString();
    var d2 = new Date(utcdt);
    d2.setHours(0, 0, 0, 0); 
    strdt2 = d2.toString()
    var diff = Math.floor((Date.parse(strdt1) - Date.parse(strdt2)) / 86400000);
    return diff;
}

function parseHTMLText(s) {
    return jQuery('<span></span>').html(s).html();
}

function getZonalTime(time) {
    var t_hour = parseInt(time.split(":")[0]);//hours
    var t_min = parseInt(time.split(":")[1].split(" ")[0]);//minutes
    var AmPm = time.split(":")[1].split(" ")[1];//AM/PM
    var offset = t_hour * 60 + t_min;
    if ((AmPm.toLowerCase() == 'pm' && t_hour != 12) || (AmPm.toLowerCase() == 'am' && t_hour == 12))
        offset += 12 * 60;
    offset -= dateTimeFormat.tzoffset;
    return offset;
}

function formatTime(time) {
    var offset = parseInt(time);
    offset += dateTimeFormat.tzoffset;
    var ispm = false;
    if (offset >= 12 * 60) {
        if ((offset != 2 * 12 * 60) && (offset <= 2 * 12 * 60))        // for offset = 1440, its 12 am so ispm must be false
            ispm = true;
        if (offset != 12 * 60)               // for offset = 720, its 12 pm, no need to chnage offset value
            offset -= 12 * 60;
    }
    var mins = offset % 60;//minutes
    offset -= mins;
    var hours = offset / 60;//hours   
    if (hours == 0)
        hours = 12;
    return (hours.toString()) + ":" + ((mins.toString().length == 1) ? "0" + mins.toString() : mins.toString()) + " " + ((ispm == true) ? "PM" : "AM")
}

function formatDate(theDate) {
    var month = theDate.getMonth();
    var day = theDate.getDate();
    var hour = theDate.getHours();
    var minute = theDate.getMinutes();
    var seconds = theDate.getSeconds();
    var ampm = "AM";
    month += 1;
    if (month < 10) month = "0" + month;
    if (day < 10) day = "0" + day;

    if (hour > 11) {
        hour -= 12;
        ampm = "PM";
    }
    if (hour == 0)
        hour = 12;
    if (hour < 10) hour = "0" + hour;
    if (minute < 10) minute = "0" + minute;
    if (seconds < 10) seconds = "0" + seconds;
    return month + "/" + day + "/" + theDate.getFullYear() + " " + hour + ":" + minute + ":" + seconds + " " + ampm;
}

function getTimeStamp() {
    var timestamp = $.now();
    return timestamp;
}
function loadDashboardAnnouncements(containerId,pagesize,options) {
    api.call("GetDashboardAnnouncements", { sort: "updatedon", ascending: false, pageSize: pagesize + 1 ,allannouncement:true}, function (data) {      
        var notification = "";
        if (data.status == 0) {
            if (data.result != null) {
                var allannouncements = data.result.allannouncement.item;
                var items = null;

                if (allannouncements.length > 0) {
                    items = allannouncements;
                }

                if (items != null && items != 'undefined' && items.length > 0) {
                    var anncount = 0;
                    if (items.length > pagesize) {
                        anncount = pagesize;
                        $("#" + containerId + " .more").show();
                    }
                    else
                        anncount = items.length;
                    var announcementTitle = {};
                    var announcementDesc = {};
                    for (var i = 0; i < anncount; i++) {
                        //var i=0;
                        var announcement = "";
                        var newAnnouncement = "";
                        var title = "";
                        var createdon = items[i].createdon;
                        if (isJSONCheck(items[i].title)) {
                            announcementTitle = $.parseJSON(items[i].title).items;
                            if (isJSONCheck(items[i].announcement))
                                announcementDesc = $.parseJSON(items[i].announcement).items;
                            else
                                announcementDesc = items[i].announcement;
                            $(languageObject.entries).each(function () {
                                if (languageNode == this.value && (announcementTitle[this.name.toLowerCase()] != "" && announcementTitle[this.name.toLowerCase()] != undefined)) {
                                    title = announcementTitle[this.name.toLowerCase()];
                                    if ((announcementDesc[this.name.toLowerCase()] != "" && announcementDesc[this.name.toLowerCase()] != undefined))
                                        announcement = $.parseHTML(announcementDesc[this.name.toLowerCase()])[0].data;
                                }
                            })
                            if (title == "")
                                title = announcementTitle.english;
                            if (announcement == "" && announcementDesc.english != "" && announcementDesc.english != undefined)
                                announcement = $.parseHTML(announcementDesc.english)[0].data;
                        }
                        else {
                            title = items[i].title;
                            announcement = items[i].description != null ? items[i].description : extractPlainText(items[i].announcement);
                            if (announcement != undefined && announcement != "") {
                                var decodeDesc = $.parseHTML($('<div></div>').html(announcement)[0].innerHTML);
                                if (decodeDesc[0].data != undefined) {
                                    announcement = decodeDesc[0].data.replace(/\s+/g, ' ').replace(/\\\\+/g, '\\').replace(/\\+"/g, '"');
                                }
                            }
 
                        }
                        if (daydiff(items[i].updatedon) < newAssetThreshold){
                            newAnnouncement = '<span class="label badge-dark-red" rel="tooltip" data-placement="right" style="cursor:default;">New</span>';
                        }

                        var announcementFilters = items[i].announcementfilters; 
                        var $announcementfilters = $("<div class='filters'></div>");                    

                        announcementFilters.forEach(filter => {
                                var $label = $('<label style="margin-right:2px;">').html(filter.name).attr('data-filter', filter.id).addClass("label badge-dark-green");
                                $announcementfilters.append($label);
                        });                
                       
                        if (announcement != "") {
                            notification += '<div class="alert-block">' + newAnnouncement + '<div class="alert-body"><h3>' + title + '</h3>' + $("<div />").append($announcementfilters).html() + '<section class="announcement-desc-wrap">' + announcement + '</section><section class="dateText">Created on: ' + shortDateFromUTC(createdon) + '</section ></div><a style="text-align: right;" onclick="annReadMoreModal('+ items[i].id +')">Read More</a></div>';
                        } else {
                            notification += '<div class="alert-block">' + newAnnouncement + '<div class="alert-body"><h3>' + title + '</h3>' + $("<div />").append($announcementfilters).html() + '<section class="announcement-desc-wrap">&nbsp;</section><section class="dateText">Created on: ' +shortDateFromUTC(createdon) + '</section></div><a style="text-align: right;"  onclick="annReadMoreModal('+ items[i].id +')">Read More</a></div>';
                        }
                    }
                    $("#" + containerId).show();
                }
                else {
                    notification += '<p class="alert alert-info alert-block">' +
                        options.nodata +
                        '</p>';
                    $("#" + containerId).show();
                    $("#" + containerId + " .more").hide();
                }
            }
            else {
                notification += '<p class="alert alert-info alert-block">' +
                    options.nodata +
                    '</p>';
                $("#" + containerId).hide();
                $("#" + containerId + " .more").show();
            }
        } else {
            var Errordata = {};
            
            Errordata["status"] = data.status;
            notification = ShowErrorMessageByStatus(Errordata);
        }

        $("#" + containerId + " .anncontainer").html(notification);
        $(".anncontainer .badge-dark-red").attr("data-original-title", 'Created within {0} days'.replace("{0}", newAssetThreshold));
    });
}
function annReadMoreModal(id) {
    var announceRequestID = '@(RequestID)';
    $("html").addClass("modal-open");
    $("#annDiv").load("/setup/announcements/popup?announcerequestid=" + announceRequestID + "&id=" + id + "&issingleannouncement=true&isdashboardwidget=true");
    $("#announcementModal").show();
    $("#skeleton-loader-announcemodal").css("display", "block");
}

function extractPlainText(htmlEncoded) {
    // Step 1: Decode HTML entities
    const decoded = new DOMParser().parseFromString(htmlEncoded, "text/html").documentElement.textContent;

    // Step 2: Strip HTML tags and get only text
    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = decoded;
    return tempDiv.textContent.trim();
}

function UpdateQuickLinkNotification(editMode, assettype, linktype, linktoid, requestID, WidgetName, ConfigName, pagesize, showallassets, options) {
    var $RequestID = $("#" + requestID);
    var personalizationType = null;
    var defaultIcon = "", linkURL = "";
    var selectedDesign = "1";
    var showNotification = false;
    var showFilter = false, showAssets = false;
    var externalUrl = false;
    var personaname = "", personaoption = "", platform = "";
    var personaType = 0, personaoptionType = 0, platformType = 1;
    if (typeof(options) != "undefined") {
        if (typeof (options.personalization) != "undefined")
            personalizationType = options.personalization;
        if (typeof (options.widgeticon) != "undefined")
            defaultIcon = options.widgeticon;
        if (typeof (options.selectedDesign) != "undefined" && options.selectedDesign!="")
            selectedDesign = options.selectedDesign
        if (typeof (options.shownotification) != "undefined")
            showNotification = options.shownotification;
        showFilter = typeof (options.showfilter) != "undefined" ? options.showfilter : false;
        if (typeof (options.externalurl) != "undefined")
            externalUrl = options.externalurl;
        showAssets = typeof (options.showassets) != "undefined" ? options.showassets : false;
        linkURL = typeof (options.linkurl) != "undefined" ? options.linkurl : "";

        if (typeof (options.persona) != "undefined" && options.persona != "")
            personaname = options.persona;
        if (typeof (options.personaoption) != "undefined" && options.personaoption != "")
            personaoption = options.personaoption;
        if (typeof (options.platform) != "undefined")
            platform = options.platform;
        if (typeof (options.personatype) != "undefined" && options.personatype != "")
            personaType = options.personatype;
        if (typeof (options.personaoptiontype) != "undefined" && options.personaoptiontype != "")
            personaoptionType = options.personaoptiontype;
        if (typeof (options.platformtype) != "undefined")
            platformType = options.platformtype;
    }    
    
    var $qlWidget = $RequestID.find(".design" + selectedDesign);
    $qlWidget.show();
    var $topAction = $("<div class='topaction'><div class='settingsdiv' style='display:none;'></div><div class='notificationdiv' style='cursor: pointer; display: none; '></div></div>");
    var $toolbar = $topAction.find(".settingsdiv");
    $qlWidget.append($topAction)
    if (editMode || editMode == "true") {
        $toolbar.show();
        var settingsico = "<span rel='tooltip' data-placement='bottom' data-original-title='Click to customize'><i class='fa fa-cog fa-lg cursor-pointer'>&nbsp;</i></span>"
        $toolbar.html(settingsico);
        $($toolbar).on("click", function (e) {
            e.preventDefault();
            var settingOptions = {};
            settingOptions["widgetname"] = WidgetName;
            settingOptions["requestid"] = requestID;
            settingOptions["showheader"] = true;
            settingOptions["showdesc"] = true;
            settingOptions["showfilter"] = showFilter;
            settingOptions["title"] = 'Widget Settings';
            settingOptions["design"] = selectedDesign;
            settingOptions["externalurl"] = externalUrl;
            settingOptions["wheader"] = fixedEncodeURIComponent(GetDefaultWidgetHeader(WidgetName));
            settingOptions["widgeticon"] = fixedEncodeURIComponent(defaultIcon);
            settingOptions["showassets"] = showAssets;
            settingOptions["persona"] = personaname;
            settingOptions["personaoption"] = personaoption;
            settingOptions["platform"] = platform;
            modal.showQuicklinkSettings(settingOptions);
        });        
    }
    else {
        $toolbar.hide();
    }

    //Quicklik notification count
    var $notificationDiv = $topAction.find(".notificationdiv");
    $notificationDiv.html('<i class="fa fa-spin fa-spinner fa-lg"></i>');
    if (showNotification && selectedDesign=="1")
        $notificationDiv.show();
    $RequestID.find(".btninfo").html('<i class="fa fa-sync fa-spin"></i>');
    if (linkURL != "") {        
        $RequestID.find(".design1 a.btndetails,.design2 a.btndetails").attr("target", "_self");
        $RequestID.find(".design1 a.btndetails,.design2 a.btndetails").attr("href", linkURL);
    }
    api.call("GetNotificationDivData", { type: assettype, status: 1, allowsa: false, limit: 0, widgetname: WidgetName, linktype: linktype, linktoid: linktoid, configurationname: ConfigName, pageSize: pagesize, showallAssets: showallassets, allowSA: false, personalization: personalizationType, personatype: personaType, personaoptiontype: personaoptionType, platformtype: platformType }, function (r) {
        if (r.status == 2) {
            $RequestID.find(".datalisting").closest(".qlbutton").hide();
        }
        else if (r.status != 0)//error
        {
            $notificationDiv.html(0);
        }
        else {
            var templateCount=0,fileCount=0;
            if(typeof(r.result.griddata)!="undefined" && typeof(r.result.griddata.item)!="undefined" && r.result.griddata.item.length>0)
                templateCount=r.result.griddata.item.length;
            if (typeof (r.result.filegriddata) != "undefined") {
                if (typeof (r.result.filegriddata.videoData) != "undefined" && typeof (r.result.filegriddata.videoData.item) != "undefined" && r.result.filegriddata.videoData.item.length > 0)
                    fileCount += r.result.filegriddata.videoData.item.length;
                if (typeof (r.result.filegriddata.documentData) != "undefined" && typeof (r.result.filegriddata.documentData.item) != "undefined" && r.result.filegriddata.documentData.item.length > 0)
                    fileCount += r.result.filegriddata.documentData.item.length;
                if (typeof (r.result.filegriddata.imageData) != "undefined" && typeof (r.result.filegriddata.imageData.item) != "undefined" && r.result.filegriddata.imageData.item.length > 0)
                    fileCount += r.result.filegriddata.imageData.item.length;
            }
            var notificationCount = templateCount + fileCount;
            var gridTitle = "";
            if ((r.result.widgetheader) != undefined && r.result.widgetheader != "") {
                if (isJSON(r.result.widgetheader)) {                    
                    var gridLanguageTitle = $.parseJSON(r.result.widgetheader).items;
                    $(languageObject.entries).each(function () {
                        var name = this.name.toLowerCase();
                        if(languageNode == this.value && (gridLanguageTitle[name] != undefined && gridLanguageTitle[name] != ""))
                            gridTitle = gridLanguageTitle[name];
                        if (gridTitle == "") {
                            if (gridLanguageTitle.english != undefined && gridLanguageTitle.english != "")
                                gridTitle = gridLanguageTitle.english;
                        }
                    })
                }
                else {                    
                    gridTitle = r.result.widgetheader;
                }
            }
            if (gridTitle=="")
                gridTitle = GetDefaultWidgetHeader(WidgetName) != "" ? GetDefaultWidgetHeader(WidgetName) : options.WidgetHeaderName;

            if ((r.result.widgetdescription) != undefined && r.result.widgetdescription != "") {
                if (isJSON(r.result.widgetdescription)) {
                    var gridDes = "";
                    var gridLanguageDes = $.parseJSON(r.result.widgetdescription).items;
                    $(languageObject.entries).each(function () {
                        var name = this.name.toLowerCase();
                        if (languageNode == this.value && (gridLanguageDes[name] != undefined && gridLanguageDes[name] != ""))
                            gridDes = gridLanguageDes[name];
                        if (gridDes == "") {
                            if (gridLanguageDes.english != undefined && gridLanguageDes.english != "")
                                gridDes = gridLanguageDes.english;
                        }
                    })
                }
                else {
                    var gridDes = "";
                    if (r.result.widgetdescription != "")
                      gridDes = r.result.widgetdescription;
                }
            }
            
            if (gridTitle != "")
            {
                $RequestID.find(".btnheader").html(gridTitle);
            }            

            var gridTooltip = "";
            if ((r.result.widgettooltip) != undefined && r.result.widgettooltip != "") {
                if (isJSON(r.result.widgettooltip)) {
                    var gridLanguageTooltip = $.parseJSON(r.result.widgettooltip).items;
                    $(languageObject.entries).each(function () {
                        var name = this.name.toLowerCase();
                        if (languageNode == this.value && (gridLanguageTooltip[name] != undefined && gridLanguageTooltip[name] != ""))
                            gridTooltip = gridLanguageTooltip[name];
                        if (gridTooltip == "") {
                            if (gridLanguageTooltip.english != undefined && gridLanguageTooltip.english != "")
                                gridTooltip = gridLanguageTooltip.english;
                        }
                    })
                }
                else {
                    if (r.result.widgettooltip != "")
                        gridTooltip = r.result.widgettooltip;
                }
            }
            gridTooltip = (gridTooltip != undefined && gridTooltip != "") ? gridTooltip : options.title;

            if (typeof (r.result.widgeticon) != "undefined" && r.result.widgeticon != "")
                $RequestID.find(".btnbigicon").addClass(r.result.widgeticon);
            else if (typeof (r.result.iconlist) != "undefined" && r.result.iconlist != "")
                $RequestID.find(".btnbigicon").addClass(r.result.iconlist);
            else
                $RequestID.find(".btnbigicon").addClass(defaultIcon);

            if (typeof (r.result.widgetdescription) != "undefined" && r.result.widgetdescription != "")
                $RequestID.find(".btninfo").html(unescape(gridDes));
            else
                $RequestID.find(".btninfo").html("&nbsp;");
            if (editMode == false && gridTooltip != undefined && gridTooltip != "") {
                $RequestID.attr("rel", "tooltip").attr("data-placement", "top").attr("data-original-title", unescape(gridTooltip));
            }
            if (gridDes != "" && gridDes != undefined)
                $RequestID.find(".btninfo").attr("rel", "tooltip").attr("data-placement", "bottom").attr("data-original-title", unescape(gridDes));
            else
                $RequestID.find(".btninfo").tooltip('disable');

            if (WidgetName == "reports" || WidgetName == "managesocial" || WidgetName == "reports2") {
                
                var linkhtml = "";
                if (typeof (r.result.reporttype) != "undefined" && r.result.reporttype.items.length > 0) {
                    linkhtml += "<ul>";
                    for (var i = 0; i < r.result.reporttype.items.length; i++) {
                        linkhtml += "<li style='margin-right:1px;margin-left:2px;'><a href='/#" + r.result.reporttype.items[i].reporturl + "' rel='tooltip' data-placement='bottom' data-original-title='Click to View " + r.result.reporttype.items[i].text + " Report'>" + r.result.reporttype.items[i].text + "</a></li>";
                    }
                    linkhtml += "</ul>";
                    $RequestID.find(".datalisting").html(linkhtml);
                    $RequestID.find(".datalisting").show();
                    $RequestID.find(".btninfo").hide();
                }
                else {
                    $RequestID.find(".datalisting").hide();
                    $RequestID.find(".datalisting").closest(".qlbutton").hide();;
                }
            } else if (WidgetName == "viewassets") {// get total from global search api                
                api.call("GetAssetSearchForConfig", { searchparam: "", tabletype: [], templatetypes: options.templatetypes, templatesearch: false, tabName: "All", isMedia: 0, "filters": [], "condition": false}, function (r) {
                    if (r.status == 0) {
                        notificationCount = r.result.row_count;
                        $notificationDiv.html(formatMoney(notificationCount));
                    } else {
                        $notificationDiv.html(0);
                    }
                });
            } else if (WidgetName.indexOf("externalquicklink") > -1) {                
                if (r.result.externalurl != undefined) {
                    var externalUrl = r.result.externalurl != "" ? r.result.externalurl :"javascript:void(0);";
                    if (typeof (options.enableRedirectPage) != "undefined" && options.enableRedirectPage && r.result.externalurl != "") {                        
                            externalUrl = "https://partner-marketing.bitdefender.com/widgets/externalquicklink/redirect?exturl=" + externalUrl;                        
                    }
                    $RequestID.find(".design1 a.btndetails,.design2 a.btndetails").attr("href", externalUrl);
                }
                if (r.result.iconlist != undefined)
                    $RequestID.find(".btnbigicon").addClass(r.result.iconlist);
                if (typeof (r.result.enablenewtab) != "undefined" && r.result.enablenewtab == "true")
                    $RequestID.find(".design1 a.btndetails,.design2 a.btndetails").attr("target","_blank");
                else
                    $RequestID.find(".design1 a.btndetails,.design2 a.btndetails").attr("target","_self");               
            }
            else {
                $notificationDiv.html(notificationCount);                
            }                                
            //unbinding click events of deleted widget
            var qlbtnClass = $RequestID.parent(".qlbutton").parents().eq(0).attr("class");            
            if (typeof(qlbtnClass) !="undefined" && qlbtnClass.indexOf("deletedwidget") > -1) {
                $RequestID.find(".bigbtn .notificationdiv").off("click");
                $RequestID.find(".bigbtn .btndetails").off("click");
                $RequestID.find(".notificationdiv, .settingsdiv span i").css("cursor", "default");
                $RequestID.find(".settingsdiv span").removeAttr("rel").removeAttr("data-original-title");
                $RequestID.find(".topaction").hide();
                $RequestID.find(".design" + selectedDesign+" .disabledaction").remove();
                $RequestID.find(".design" + selectedDesign).prepend("<div class='disabledaction'>" + $RequestID.find(".topaction").html() + "</div>");
            }
            //end
            if (editMode || editMode == "true") {       
                $RequestID.find(".bigbtn").css("cursor", "move");
                $RequestID.find(".bigbtn a").css("cursor", "move");
                $RequestID.find(".bigbtn a").attr("href", "javascript:void(0)");
                $RequestID.find(".bigbtn a span").tooltip('disable');
                $RequestID.find(".bigbtn i").tooltip('disable');
                $RequestID.find(".bigbtn .datalisting a").tooltip('disable');
                $RequestID.find(".bigbtn .datalisting a").attr("href", "javascript:void(0)");
                $RequestID.find(".bigbtn .datalisting a").css("cursor", "move");
                $RequestID.find("a").first().attr("href", "javascript:void(0);");
                $RequestID.find(".bigbtn a").attr("target", "_self");
                //for design 2
                $RequestID.find(".design2").css("cursor", "move");
                $RequestID.find(".design2 a.btndetails").attr("href", "javascript:void(0)");
                $RequestID.find(".design2 a.btndetails").css("cursor", "move");
                $RequestID.find(".design2 a.btndetails").tooltip('disable');
                $RequestID.find(".design2 a.btndetails").attr("target", "_self");
                $RequestID.find(".design2 .datalisting a").tooltip('disable');
                $RequestID.find(".design2 .datalisting a").attr("href", "javascript:void(0)");
                $RequestID.find(".design2 .datalisting a").css("cursor", "move");
            }

        }                 
        persona.OnLoadSuccess();
    });
}

function ExportToPdf(reportType, charts, grids, isEmailNotification, reportName)//
{
    if (exportTitle!="") {
        ExportToPdfData(reportType, charts, grids, isEmailNotification, reportName);
    }
    else {
        var exportData = {};
        exportData.reporttype = reportType;
        exportData.charts = charts;
        exportData.grids = grids;
        exportData.isemailnotification = isEmailNotification;
        setExportTitle(finalExportToPDF, exportData);
    }
}

function finalExportToPDF(exportData) {
    ExportToPdfData(exportData.reporttype, exportData.charts, exportData.grids, exportData.isemailnotification, exportTitle);
}

function ExportToPdfData(reportType, charts, grids, isEmailNotification, reportName) {
    var repCharts = charts;
    var repGrids = grids;  

    var format = $(".inbox-daterange").find("button").find(">span").text();
    var formatIndex = $(".inbox-daterange").find("ul").find("li a:contains('" + format + "')").attr('data-action-item');
    exportTitle = "";
    for (var m = 0; m < repGrids.length; m++)//
    {
        var joApiData1 = {page:0,pageSize:24,sort:"ID",ascending:true,search:"",filters:[],condition:false,format:4,startdate:"",enddate:"",folder:{} };       

        var apiData = repGrids[m].apidata;

        function isNumber(n) { return /^-?[\d.]+(?:e-?\d+)?$/.test(n); }

        if (typeof (JSON.stringify(apiData)) != "undefined" && apiData.toString() != "null") {          

            if (typeof (formatIndex) != "undefined") {
                if (!apiData.hasOwnProperty("format") || apiData["format"] != formatIndex)
                    apiData["format"] = parseInt(formatIndex);
            }
            $.extend(joApiData1, apiData);           
        }      

        repGrids[m].apidata = joApiData1;
    }   

    var now = getDateTimeBasedOnTimeZone(new Date());
    var localTime = now.format("mm/dd/yyyy h:MM:ss TT");
    api.call("ExportToPDF", { charts: repCharts, grids: repGrids, w: 1000, h: 1400, localtime: localTime, reporttype: reportType, isemailnotification: isEmailNotification, name: reportName },
        function (data) {
            if (data.result > 0) {
                $.smallBox({
                    title: "Export scheduled ",
                    content: (isEmailNotification == true ? "<i>" + exportLocalization.ExportSuccessMessage.replace("{0}", 'Pdf Reports') + "</i>" : "<i>" + exportLocalization.ExportSuccessMessageNoNotification.replace("{0}", 'Pdf Reports') + "</i>") + '<a target="_blank" onClick="ExportDownload(\'pdfreports\')" style="color: yellow" >Click Here to Visit Export Page</a>',
                    color: "#659265",
                    iconSmall: "fa fa-check fa-2x fadeInRight animated",
                    timeout: 4000
                });
                modal.closeall();
            } else {
                $.smallBox({
                    title: "Export error",
                    content: "<i class='fa fa-check'></i> <i>There was a problem exporting tracking sites. \nPlease contact technical support</i>",
                    color: "#b94a48",
                    iconSmall: "fa fa-times fa-2x fadeInRight animated",
                    timeout: 4000
                });
            }
        });
}

function ClearExportTitle(isModalOpen,$txtTitleObj,$mainBoxObj) {
    if (isModalOpen) {
        $txtTitleObj.css('border-color', '');
        $txtTitleObj.css('background-color', '');
        $mainBoxObj.find("#spnTitleRequired").text('');
        $mainBoxObj.find("#spnTitleRequired").css('display', 'none');
        $mainBoxObj.find("#spnNote").text('');
        $mainBoxObj.find("#spnNote").css('display', 'block');
    }
    else {
        if ($mainBoxObj.find("#spnTitleRequired").html() == "") {
            $txtTitleObj.css('border-color', '');
            $txtTitleObj.css('background-color', '');
            $mainBoxObj.find("#spnTitleRequired").css('display', 'none');
        }

        if ($mainBoxObj.find("#spnNote").html() != "") {
            $txtTitleObj.css('border-color', '#b94a48');
            $txtTitleObj.css('background-color', '#FFF0F0');
            $mainBoxObj.find("#spnNote").css('display', 'block');
        }
        else {
            $mainBoxObj.find("#spnNote").css('display', 'none');
        }
    }

    $txtTitleObj.keyup(function () {
        if (CheckExportTitleLength($txtTitleObj, $mainBoxObj)) {
            return false;
        }
    });

    $('.formclose').on("click", function () {
        $txtTitleObj.val('');
        isSendFileOnMail = $("#sendfileovermail").prop("checked");
        $("#exporttitle").modal("hide");
    });
}

function CheckExportTitleLength($txtTitle,$mainBox) {
    var haserror = false;
    if ($txtTitle.val() == null || $txtTitle.val() == "") {
        $mainBox.find('#spnTitleRequired').text("Required");

        $txtTitle.css('border-color', '#b94a48');
        $txtTitle.css('background-color', '#FFF0F0');
        $mainBox.find("#spnTitleRequired").css('display', 'block');
        $mainBox.find("#spnNote").css('display', 'none');
        haserror = true;
    }
    else if ($txtTitle.val().length < 2) {
        $mainBox.find('#spnTitleRequired').text("Too short");

        $txtTitle.css('border-color', '#b94a48');
        $txtTitle.css('background-color', '#FFF0F0');
        $mainBox.find("#spnTitleRequired").css('display', 'block');
        $mainBox.find("#spnNote").css('display', 'none');
        haserror = true;
    }
    else if ($txtTitle.val().length > 100) {
        $mainBox.find('#spnTitleRequired').text("Too long");

        $txtTitle.css('border-color', '#b94a48');
        $txtTitle.css('background-color', '#FFF0F0');
        $mainBox.find("#spnTitleRequired").css('display', 'block');
        $mainBox.find("#spnNote").css('display', 'none');
        haserror = true;
    }
    else {
        if (isInValidTitle($txtTitle.val())) {
            $mainBox.find('#spnTitleRequired').text("");

            $txtTitle.css('border-color', '#b94a48');
            $txtTitle.css('background-color', '#FFF0F0');
            $mainBox.find("#spnNote").text('Note: ? and " are not allowed');
            $mainBox.find("#spnNote").css('display', 'block');
            haserror = true;
        }
        else {
            $mainBox.find('#spnTitleRequired').text("");
            $mainBox.find('#spnNote').text("");

            $txtTitle.css('border-color', '');
            $txtTitle.css('background-color', '');
            $mainBox.find("#spnTitleRequired").css('display', 'none');
            $mainBox.find("#spnNote").css('display', 'none');
            haserror = false;
        }
    }

    return haserror;
}

function ShowTitleTooltip() {
    $("#txtExportTitle").blur(function () {
        if ($.trim($("#txtExportTitle").val()) != "")
            ClearExportTitle(false, $("#txtExportTitle"), $("#exporttitle"));
    });

    $("#txtExportTitle").hover(
        function () {
            $("#spnCharLimit").show();
        },
        function () {
            $("#spnCharLimit").hide();
        }
    );
}

function setExportTitle(callback, exportData) {

    ClearExportTitle(true, $("#txtExportTitle"), $("#exporttitle"));
    $("#exporttitle").modal({ backdrop: 'static', show: true, keyboard: false });
    $('.btnExportTitle').on('click .btnExportTitle');
    if (exportData != undefined && exportData.currentobj != undefined) {
        var exportT = exportData.currentobj.settings.name;
        $("#txtExportTitle").val(exportT);
    }
    $("#sendfileovermail.togglecondition").prop('checked', false);

    $('.btnExportTitle').on("click", function () {
        if ($.trim($("#txtExportTitle").val()) != "" && $.trim($("#txtExportTitle").val()).length >= 2 && !isInValidTitle($("#txtExportTitle").val())) {
            exportTitle = htmlToText(sanitizeUserInput($("#txtExportTitle").val()));
            ClearExportTitle(false, $("#txtExportTitle"), $("#exporttitle"));
            $("#txtExportTitle").val('');
            isSendFileOnMail = $("#sendfileovermail").prop("checked");
            $("#exporttitle").modal("hide");

            callback(exportData);

            $('.btnExportTitle').off('click .btnExportTitle');

            return false;
        }
        else {
            if (CheckExportTitleLength($("#txtExportTitle"), $("#exporttitle")))
                return false;
        }
    });

    ShowTitleTooltip();
}

function checkPURL(purlmsg) {        
    if ($("#txtpurl").val().length < 3) {
        onCheckPURLSuccess(false, purlmsg)
        return;
    }
    api.call("CheckPurlTemplate", { name: $("#txtpurl").val() }, function (r) { onCheckPURLSuccess(r, purlmsg) });
}
function onCheckPURLSuccess(r, purlmsg) {   
    $(".successURL").hide();
    $(".errorURL").hide();
    if (r.status == 0) //if this isn't 0 something catastrophic happened           
    {
        if (r.result.success) {
            $(".successURL").html("<strong>"+purlmsg.UrlAvailable+"</strong>");
            $(".successURL").show();
        }
        else if (!r.result.success && r.result.reason == "inuse") {
            $(".errorURL").show();
            $(".successURL").hide();
            $(".errorURL").html("<strong>"+purlmsg.UrlInUse+"</strong>");
        }
        else {
            $(".errorURL").html("<strong>"+purlmsg.UrlUnAvailable+"</strong>");
            $(".errorURL").show();
        }
    }
    else if (!r && typeof (r.status) == "undefined") {
        if ($("#txtpurl").val().length < 3)
            $(".errorURL").html("<strong>" + purlmsg.LetterLimit + "</strong>");
        else    
            $(".errorURL").html("<strong>" + purlmsg.UrlUnAvailable + "</strong>");//To check no Special charecters are entered in URL before api call ie r.result #72409
        $(".errorURL").show();
    }
    else {
        $(".errorURL").html("<strong>" + purlmsg.UrlUnAvailable + "</strong>");
        $(".errorURL").show();
    }
}

function uniqueNumber() {
    var date = Date.now();

    // If created at same millisecond as previous
    if (date <= uniqueNumber.previous) {
        date = ++uniqueNumber.previous;
    } else {
        uniqueNumber.previous = date;
    }

    return date;
}

uniqueNumber.previous = 0;

function closeVideo(videoContainerID) {
    $videoContainerID = $("#" + videoContainerID);
    $videoContainerID.find("iframe").attr("src", "about:blank");
    $videoContainerID.modal("hide");
}

//This is used in all 3 shared lead reports. Used to restructure data came from api. 
function getSharedLeadData(linkId, sLeadaActivity, sLeadOpportunityData) {
    var jsData = {};
    var activeLCnt = 0; var inActiveLCnt = 0; var oppConvertedLeads = 0; var totLCnt = 0; var oppWonLeads = 0; var oppAmount = 0.00; var interestStats = '';
    if (sLeadaActivity.active != undefined && sLeadaActivity.active.length > 0) {
        var jaActive = $.grep(sLeadaActivity.active, function (v) {
            return v.linkid === linkId;
        });
        if (jaActive != undefined && jaActive.length > 0)
            activeLCnt = jaActive[0]._total_;
    }
    if (sLeadaActivity.inactive != undefined && sLeadaActivity.inactive.length > 0) {
        var jaInActive = $.grep(sLeadaActivity.inactive, function (v) {
            return v.linkid === linkId;
        });
        if (jaInActive != undefined && jaInActive.length > 0)
            inActiveLCnt = jaInActive[0]._total_;
    }
    if (sLeadOpportunityData != undefined && sLeadOpportunityData.length > 0) {
        var jaSLeadOpportunityData = $.grep(sLeadOpportunityData, function (v) {
            return v.item === linkId;
        });
        if (jaSLeadOpportunityData != undefined && jaSLeadOpportunityData.length > 0) {
            oppAmount = jaSLeadOpportunityData[0].amount;
            oppConvertedLeads = jaSLeadOpportunityData[0].oppconvertedceads;
            oppWonLeads = jaSLeadOpportunityData[0].oppwonleads;
            interestStats = jaSLeadOpportunityData[0].intereststatus;
        }
    }

    totLCnt = activeLCnt + inActiveLCnt;
    var oppConversionRate = totLCnt > 0 ? parseInt((oppConvertedLeads) / parseFloat(totLCnt) * 100) : 0;
    var oppWonRate = totLCnt > 0 ? parseInt((oppWonLeads) / parseFloat(totLCnt) * 100) : 0;

    jsData.active = activeLCnt;
    jsData.inactive = inActiveLCnt;
    jsData.totalleads = totLCnt;
    jsData.oppamount = oppAmount;
    jsData.oppconversionrate = oppConversionRate;
    jsData.oppwonrate = oppWonRate;
    jsData.intereststats = interestStats;    
    return jsData;
}

function getSocialDripMessageCounts(val) {
    var xml = $(val.data);
    var publishing = xml.find('publishing');
    var publishings = xml.find('publishings');
    var FB = TW = LI = BL = 0;
    $(publishing).each(function (e, i) {
        if (val.hasoldmapping == true) {
            var _service = $(this).attr('type');
            if ((_service & 1) == 1)
                FB++;
            if ((_service & 2) == 2)
                TW++;
            if ((_service & 8) == 8)
                LI++;
            if ((_service & 64) == 64)
                BL++;
        }

        if (!val.hasoldmapping) {
            if (xml.attr('facebook') !== undefined)
                FB = publishing.length;
            if (xml.attr('twitter') !== undefined)
                TW = publishing.length;
            if (xml.attr('linkedin') !== undefined)
                LI = publishing.length;
            if (xml.attr('blog') !== undefined)
                BL = publishing.length;
        }
    })
    return { fb: FB, tw: TW, li: LI, bl: BL };
}

function setupV5StatsWidget(requestID, options) {
    var $RequestID = requestID.parent();
    var selectedDesign = "1", widgetName = "", defaultIcon = "";
    var gridTitle = "", gridDes = "", gridTooltip = "";
    var personaType = null, personaOptionType = null;

    gridTitle = unescape(GetDefaultWidgetHeaderV5(options.widgetName));                                    

    if (typeof (options.selectedDesign) != "undefined" && options.selectedDesign != "")
        selectedDesign = options.selectedDesign    
    if (typeof (options.personatype) != "undefined")
        personaType = options.personatype;
    if (typeof (options.personaoptiontype) != "undefined")
        personaOptionType = options.personaoptiontype;
    if (typeof (options.widgetName) != "undefined")
        widgetName = options.widgetName;
    if (typeof (options.title) != "undefined")
        gridTooltip = options.title;
    if (typeof (options.widgeticon) != "undefined")
        defaultIcon = options.widgeticon;
    
        var $widgetDesign = $RequestID.find(".statsdesign" + selectedDesign);
        $widgetDesign.show();
            var $toolbar = $RequestID.find(".engagement-setting");    
            if (options.editmode == false) {
                $toolbar.hide();
                $RequestID.on("click", function (event) {                    
                    event.preventDefault();
                    switch (widgetName) {
                        case "newassetreleasedcount":
                            modal.showNewAssets(gridTitle, widgetName, personaType, personaOptionType);
                            break;
                        case "approveddeals":
                            var statsoptions = {};
                            statsoptions["Title"] = gridTitle;
                            modal.showLeadRequests(statsoptions);
                            break;
                        case "hothighleads":
                            modal.showContactStatusCountList(null, gridTitle, true);
                            break;
                        case "newsharedleads":
                            var statsoptions = {};
                            statsoptions["Title"] = gridTitle;
                            modal.showActivityWidgetSharedContacts(options.index, options.format, statsoptions);
                            break;
                        case "newformleads":
                            modal.showWebLeadsGrid(gridTitle, options.activitytype, options);
                            break;
                        case "lastemailcampaigngraph":
                            options.title = gridTitle;
                            modal.showEmail(options.email, options);                            
                            break;
                        case "webleads":
                            modal.showWebLeadsGrid(gridTitle, 0);
                            break;
                        case "activedripcampaigns":
                            if (options.hasUserViewAccess) {
                                $RequestID.find(".count").attr("data-original-title", 'Click here to view active drip campaign(s)');
                                $RequestID.find("a.stats-ring").attr("data-original-title", 'Click here to view active drip campaign(s)');
                                $RequestID.find(".count,a.stats-ring").css("cursor", "pointer");
                                options.statsdata.title = gridTitle;                                
                                modal.showDripReport(options.statsdata);                                
                            } else {
                                $RequestID.find(".count,a.stats-ring").css("cursor", "default");
                            }
                            break;
                        case "ActiveSocialDripCampaign":
                            if (options.hasUserViewAccess) {
                                $RequestID.find(".count").attr("data-original-title", 'Click here to view active social drip campaign(s)');
                                $RequestID.find("a.stats-ring").attr("data-original-title", 'Click here to view active social drip campaign(s)');
                                $RequestID.find(".count,a.stats-ring").css("cursor", "pointer");
                                options.statsdata.title = gridTitle;
                                modal.showSocialDripReport(options.statsdata);
                            } else {
                                $RequestID.find(".count,a.stats-ring").css("cursor", "default");
                            }
                            break;
                        case "commissionearned":
                            options.title = gridTitle;
                            modal.showCommissionPayments(options);
                            break;
                        case "awaitingcontracts":
                        case "approvedcontracts":
                            options["modalTitle"] = gridTitle;
                            modal.showContractsForStats(options);
                            break;
                        case "totaldeals":                            
                            options.state = 0;
                            options.Title = gridTitle;
                            modal.showLeadRequests(options);
                            break;
                        case "totalmdffundplan":
                            if (options.canMdfUserCreate)
                                modal.showCreateFundRequest();
                            break;
                        case "activeleads":
                        case "hotleads":
                        case "highleads":
                        case "mediumleads":
                        case "lowleads":
                            var interestStatus = "active";
                            var title = 'Active Contacts';
                            if (widgetName == "hotleads") {
                                interestStatus = "hot";                                
                            }
                            else if (widgetName == "highleads") {
                                interestStatus = "high";                                
                            }
                            else if (widgetName == "mediumleads") {
                                interestStatus = "medium";                                
                            }
                            else if (widgetName == "lowleads") {
                                interestStatus = "low";                                
                            }
                            modal.showContactStatusCountList(interestStatus, gridTitle);
                            break;
                        case "uniquecontactsopenmaillast30day":
                        case "uniquecontactsopenmaillast90day":
                        case "uniquecontactsclickedmaillast30day":
                        case "uniquecontactsclickedmaillast90day":
                        case "totalopenedemails":
                        case "totalclickedemails":
                            modal.showContactListWidgetWise(widgetName, gridTitle);
                            break;
                        case "mdfavailable":
                            options.title = gridTitle;
                            modal.showMDFRequests(options);
                            break;
                        case "opportunityamount":
                        case "totalopportunity":
                        case "opportunitieswon":
                        case "opportunitypipelined":
                            options["modalTitle"] = gridTitle;
                            if (options.widgetName == 'opportunitieswon'){
                                options["stage"] = 1;
                                options["modalTitle"] = 'Opportunities Won';
                            }
                            if (options.widgetName == 'totalopportunity') 
                                options["modalTitle"] = 'Total Opportunity';
                            modal.showOpportunitiesForStats(options);
                            break;
                    }

                });
            }
            

}

//function to load announcements into the profile pop up
function loadProfileAnnouncements(containerId, pagesize, options, languageNode) {
    api.call("GetDashboardAnnouncements", { sort: "updatedon", ascending: false, pageSize: pagesize + 1,allannouncement:true }, function (data) {
        var notification = "";
        if (data.result != null) {
            var allannouncements = data.result.allannouncement.item;
            var items = null;

            if (allannouncements.length > 0) {
                items = allannouncements;
                $(".profile-dropdown-v5").find(".announcements").show();
            }

            if (items != null && items != 'undefined' && items.length > 0) {
                var anncount = 0;
                if (items.length > pagesize) {
                    anncount = pagesize;
                    $(".profile-right-inner .more.announcement").show();
                }
                else
                    anncount = items.length;
                var announcementTitle = {};
                for (var i = 0; i < anncount; i++) {
                    //var i=0;
                    var announcement = "";
                    var newAnnouncement = "";
                    var title = "";
                    if (isJSONCheck(items[i].title)) {
                        announcementTitle = $.parseJSON(items[i].title).items;
                         $(languageObject.entries).each(function () {
                            if (languageNode == this.value && (announcementTitle[this.name.toLowerCase()] != "" && announcementTitle[this.name.toLowerCase()] != undefined)) {
                                title = announcementTitle[this.name.toLowerCase()];
                            }
                        })

                        if (title == "")
                            title = announcementTitle.english;
                    }
                    else
                        title = items[i].title;
                    if (daydiff(items[i].updatedon) <= 7)
                        newAnnouncement = "<span class='new-announcement-tag' style='position:absolute;top:-10px;left:-15px;'><img src='" + hostPath + "/v4u/img/label_new_red.png'  style='width: 30px;height: 30px;'></span>";

                    if (announcement != "") {
                        notification += "<p style='position:relative;'>" + newAnnouncement + "<div class='announcement clearfix'><i class='fa fa-circle primaryfontcolor'></i><a class='more' style='text-decoration:none;cursor: pointer;'><strong class='announcement-title'>" + title + "</strong></a> <br/><span class='date'></span> </p></div>";
                    } else {
                        notification += "<p style='position:relative;'>" + newAnnouncement + "<div class='announcement clearfix'><i class='fa fa-circle primaryfontcolor'></i><a class='more' style='text-decoration:none;cursor: pointer;'><strong class='announcement-title'>" + title + "</strong></a><br/> <span class='date'></span> </p></div>";
                    }
                }
                $("#" + containerId).show();
            }
            else {
                notification += '<p class="alert alert-info alert-block">' +
                    options.nodata +
                    '</p>';
                $("#" + containerId).show();
                $(".profile-right-inner .more.announcement").hide();
            }
        }
        else {
            notification += '<p class="alert alert-info alert-block">' +
                options.nodata +
                '</p>';
            $("#" + containerId).hide();
            $(".profile-right-inner .more.announcement").show();
        }

        $("#" + containerId).html(notification);
        $(".announcement .more").on("click", function () {
            modal.showMoreAnnouncements();
        })
    });
}

function updateStatsWidget(requestID, options) {
    var $RequestID = $("#" + requestID);
    var selectedDesign = "1", widgetName = "", defaultIcon = "";
    var gridTitle = "", gridDes = "", gridTooltip = "";
    var personaType = null, personaOptionType = null;
    if (typeof (options.selectedDesign) != "undefined" && options.selectedDesign != "")
        selectedDesign = options.selectedDesign    
    if (typeof (options.personatype) != "undefined")
        personaType = options.personatype;
    if (typeof (options.personaoptiontype) != "undefined")
        personaOptionType = options.personaoptiontype;
    if (typeof (options.widgetName) != "undefined")
        widgetName = options.widgetName;
    if (typeof (options.title) != "undefined")
        gridTooltip = options.title;
    if (typeof (options.widgeticon) != "undefined")
        defaultIcon = options.widgeticon;
    
        var $widgetDesign = $RequestID.find(".statsdesign" + selectedDesign);
        $widgetDesign.show();
        //if (selectedDesign == "1")
        //    $("#" + requestID + ".engagement-level").parents().eq(1).hide();
            if (options.widgetName != undefined) {                
                api.call("GetQuicklinkSettings", { widgetname: options.widgetName, linktype: options.linkType, linktoid: options.linkToId, configurationname: options.configName, personatype: personaType, personaoptiontype: personaOptionType }, function (data) {                                        
                    if (data.status == 0) {
                        var result = data.result;
                        if ((result.name) != undefined && result.name != "") {
                            if (isJSON(result.name)) {                                
                                var gridLanguageTitle = $.parseJSON(result.name);
                                $(languageObject.entries).each(function () {
                                    var name = this.name.toLowerCase();
                                    if (languageNode == this.value && (gridLanguageTitle[name] != undefined && gridLanguageTitle[name] != ""))
                                        gridTitle = gridLanguageTitle[name];
                                })
                                $("#" + requestID + " .stat-label").text(gridTitle);

                                if (gridTitle == "") {
                                    if (gridLanguageTitle.english != undefined && gridLanguageTitle.english != "")
                                        gridTitle = gridLanguageTitle.english;
                                    else
                                        gridTitle = unescape(GetDefaultWidgetHeader(options.widgetName));                                    
                                }
                            }
                        }
                        
                        if ((result.widgetdescription) != undefined && result.widgetdescription != "") {
                            if (isJSON(result.widgetdescription)) {                                
                                var gridLanguageDes = $.parseJSON(result.widgetdescription);
                                $(languageObject.entries).each(function () {
                                    var name = this.name.toLowerCase();
                                    if (languageNode == this.value && (gridLanguageDes[name] != undefined && gridLanguageDes[name] != ""))
                                        gridDes = gridLanguageDes[name];
                                    if (gridDes == "") {
                                        if (gridLanguageDes.english != undefined && gridLanguageDes.english != "")
                                            gridDes = gridLanguageDes.english;
                                    }
                                })
                            }
                            else {                                
                                if (result.widgetdescription != "")
                                    gridDes = r.result.widgetdescription;
                            }
                        }                        
                    }

                    if (gridTitle == "")
                        gridTitle = unescape(GetDefaultWidgetHeader(options.widgetName)) != "" ? unescape(GetDefaultWidgetHeader(options.widgetName)) : options.WidgetHeaderName;
                    if (gridTitle != "")
                        $("#" + requestID + " .stat-label").text(gridTitle);
                    

                    if (gridDes != "" && gridDes != undefined) {
                        $RequestID.find(".stats-desc").html(unescape(gridDes));
                        $RequestID.find(".stats-desc").attr("rel", "tooltip").attr("data-placement", "bottom").attr("data-original-title", unescape(gridDes)).tooltip({ container: "body" });
                    }
                    else
                        $RequestID.find(".stats-desc").tooltip('disable');
                    
                    if (gridTooltip != "") {
                        $RequestID.find(".count").attr("rel", "tooltip").attr("data-placement", "top").attr("data-original-title", unescape(gridTooltip));
                    }
                    if (defaultIcon != "") {                        
                        if (selectedDesign == "1")
                            $RequestID.find(".stats-ring").html("<i class='fa " + defaultIcon+"'></i>");
                        else
                            $RequestID.find(".icon i").addClass(defaultIcon);
                    }
                })
            }
            var $toolbar = $RequestID.find(".engagement-setting");    
            if (options.editmode == false) {
                $toolbar.hide();
                $RequestID.on("click", ".count,.stats-ring,.stat-circle,.stat-click", function (event) {                    
                    event.preventDefault();
                    switch (widgetName) {
                        case "newassetreleasedcount":
                            modal.showNewAssets(gridTitle, widgetName, personaType, personaOptionType);
                            break;
                        case "approveddeals":
                            var statsoptions = {};
                            statsoptions["Title"] = gridTitle;
                            modal.showLeadRequests(statsoptions);
                            break;
                        case "hothighleads":
                            modal.showContactStatusCountList(null, gridTitle, true);
                            break;
                        case "newsharedleads":
                            var statsoptions = {};
                            statsoptions["Title"] = gridTitle;
                            modal.showActivityWidgetSharedContacts(options.index, options.format, statsoptions);
                            break;
                        case "newformleads":
                            modal.showWebLeadsGrid(gridTitle, options.activitytype, options);
                            break;
                        case "lastemailcampaigngraph":
                            options.title = gridTitle;
                            modal.showEmail(options.email, options);                            
                            break;
                        case "webleads":
                            modal.showWebLeadsGrid(gridTitle, 0);
                            break;
                        case "activedripcampaigns":
                            if (options.hasUserViewAccess) {
                                $RequestID.find(".count").attr("data-original-title", 'Click here to view active drip campaign(s)');
                                $RequestID.find("a.stats-ring").attr("data-original-title", 'Click here to view active drip campaign(s)');
                                $RequestID.find(".count,a.stats-ring").css("cursor", "pointer");
                                options.statsdata.title = gridTitle;                                
                                modal.showDripReport(options.statsdata);                                
                            } else {
                                $RequestID.find(".count,a.stats-ring").css("cursor", "default");
                            }
                            break;
                        case "ActiveSocialDripCampaign":
                            if (options.hasUserViewAccess) {
                                $RequestID.find(".count").attr("data-original-title", 'Click here to view active social drip campaign(s)');
                                $RequestID.find("a.stats-ring").attr("data-original-title", 'Click here to view active social drip campaign(s)');
                                $RequestID.find(".count,a.stats-ring").css("cursor", "pointer");
                                options.statsdata.title = gridTitle;
                                modal.showSocialDripReport(options.statsdata);
                            } else {
                                $RequestID.find(".count,a.stats-ring").css("cursor", "default");
                            }
                            break;
                        case "commissionearned":
                            options.title = gridTitle;
                            modal.showCommissionPayments(options);
                            break;
                        case "awaitingcontracts":
                        case "approvedcontracts":
                            options["modalTitle"] = gridTitle;
                            modal.showContractsForStats(options);
                            break;
                        case "totaldeals":                            
                            options.state = 0;
                            options.Title = gridTitle;
                            modal.showLeadRequests(options);
                            break;
                        case "totalmdffundplan":
                            if (options.canMdfUserCreate)
                                modal.showCreateFundRequest();
                            break;
                        case "activeleads":
                        case "hotleads":
                        case "highleads":
                        case "mediumleads":
                        case "lowleads":
                            var interestStatus = "active";
                            var title = 'Active Contacts';
                            if (widgetName == "hotleads") {
                                interestStatus = "hot";                                
                            }
                            else if (widgetName == "highleads") {
                                interestStatus = "high";                                
                            }
                            else if (widgetName == "mediumleads") {
                                interestStatus = "medium";                                
                            }
                            else if (widgetName == "lowleads") {
                                interestStatus = "low";                                
                            }
                            modal.showContactStatusCountList(interestStatus, gridTitle);
                            break;
                        case "uniquecontactsopenmaillast30day":
                        case "uniquecontactsopenmaillast90day":
                        case "uniquecontactsclickedmaillast30day":
                        case "uniquecontactsclickedmaillast90day":
                            modal.showContactListWidgetWise(widgetName, gridTitle);
                            break;
                        case "mdfavailable":
                            options.title = gridTitle;
                            modal.showMDFRequests(options);
                            break;
                        case "opportunityamount":
                        case "opportunitywon":
                        case "opportunitypipelined":
                            options["modalTitle"] = gridTitle;
                            modal.showOpportunitiesForStats(options);
                            break;
                    }

                });
            }
            else {
                $widgetDesign.find(".count").tooltip('disable');
                $widgetDesign.find(".stat-click").css("cursor", "move");
                $widgetDesign.find(".count").css("cursor", "move");
                $toolbar.attr({ "rel": "tooltip", "data-original-title": 'Click to change the title' });
                $toolbar.show();
                $toolbar.on("click", function (e) {
                    e.preventDefault();
                    var settingOptions = {};
                    settingOptions.design = options.selectedDesign;
                    settingOptions.editmode = options.editmode;
                    settingOptions.id = requestID;
                    settingOptions.widgetname = options.widgetName;
                    settingOptions.persona = options.persona;
                    settingOptions.personaOption = options.personaOption;
                    modal.showEngagementData(settingOptions);
                });

                $RequestID.find(".stat-count .count,.statusdiv-inner .stats-ring,.statusdetails .count").removeAttr("rel");
                $RequestID.find(".stat-count .count,.statusdiv-inner .stats-ring,.statusdetails .count").removeAttr("data-original-title");
                $RequestID.find(".statusdetails .count,.stat-circle,.stat-count .count,.statusdiv-inner .stats-ring").css("cursor", "context-menu");

            }

}

function displayContent(result) {
    var $textContent = "";
    if ((result.city != "" && result.city != null) && (result.state != "" && result.state != null) && (result.country != "" && result.country != null)) {
        $textContent += result.city + ', ' + result.state + ', ' + result.country;
    }
    else if ((result.city != "" && result.city != null) && (result.state != "" && result.state != null)) {
        $textContent += result.city + ', ' + result.state;
    }
    else if ((result.city != "" && result.city != null) && (result.country != "" && result.country != null)) {
        $textContent += result.city + ', ' + result.country;
    }
    else if ((result.state != "" && result.state != null) && (result.country != "" && result.country != null)) {
        $textContent+=result.state + ', ' + result.country;
    }
    else if ((result.city != "" && result.city != null)) {
        $textContent+=result.city;
    }
    else if ((result.state != "" && result.state != null)) {
        $textContent+=result.state;
    }
    else if ((result.country != "" && result.country != null)) {
        $textContent+=result.country;
    }
    else
        $textContent += '';

    return $textContent;
}

function getUserContentHover(result) {
    var username = [];
    var useremail = null;
    if (result.firstname != null && result.firstname != "")
        username.push(result.firstname);
    if (result.lastname != null && result.lastname != "")
        username.push(result.lastname);
    if (username.length > 0)
        username = username.join(' ');
    else
        username = 'No Name'
    if (result.useremail != null && result.useremail != "")
        useremail = result.useremail;
    else
        useremail = 'No Email';
    var label = ['Name', 'Email'];
    var value = [username, useremail];
    var $mainDiv = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strong = $("<strong>");
        var $span = $("<span>").addClass("font-sm").text(label[i] + " :");
        var $div = $("<div>").addClass("font-xs").css({ "max-width": "100%", "word-wrap": "break-word" }).text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strong.append($span);
            $mainDiv.append($strong);
            $mainDiv.append($div);
        }
    }
    return $mainDiv[0].innerHTML;
}

function GetAssetUtilizationHoverContent(item,options) {
    var userName = null, companyName = 'No Name';
    if (item.createdbyname != null && item.createdbyname != "")
        userName = item.createdbyname;
    else
        userName = 'No Name'

    if (item.userorganizationname != null && item.userorganizationname != "") {
        companyName = item.userorganizationname;
    }
    else if (item.companyprofile != null && item.companyprofile != "") {
        companyName = item.companyprofile
    }
    else if (item.companyname != null && item.companyname != "")
        companyName = item.companyname
    else
        companyName = options.companyName;

    var label = ['User Name', 'First Name', 'Last Name', 'Email', 'Company'];
    var value = [item.name, item.firstname, item.lastname, item.email, companyName];
    var $mainDiv = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strong = $("<strong>");
        var $span = $("<span>").addClass("font-sm").text(label[i] + " :");
        var $div = $("<div>").addClass("font-xs").css({ "max-width": "100%", "word-wrap": "break-word" }).text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strong.append($span);
            $mainDiv.append($strong);
            $mainDiv.append($div);
        }
    }
    return $mainDiv[0].innerHTML;
}

String.prototype.format = String.prototype.f = function () {
    var s = this,
        i = arguments.length;

    while (i--) {
        s = s.replace(new RegExp('\\{' + i + '\\}', 'gm'), arguments[i]);
    }
    return s;
};

// Get DateTime based on current timezone selected
function getDateTimeBasedOnTimeZone(d)
{
    // Get UTC time 
    var UTC = new Date(d.getTime() + (new Date().getTimezoneOffset() * 60 * 1000));
    // Convert to timezone Time
    var dTimeZone = new Date(UTC.getTime() + (dateTimeFormat.tzoffset * 60000));
    return dTimeZone;
}

// Get UTC time from local time
function getLocalToUTC(time) {
    if (time.indexOf("UTC") > -1)
        return getDateTimeBasedOnTimeZone(new Date(time));
    else
        return getDateTimeBasedOnTimeZone(new Date(time + " UTC"));
}

// To store the UTC time correctly in db based on current timezone
function getDateTimeBasedOnSystemTimeZone(d)
{
   return new Date(d - ((dateTimeFormat.tzoffset + new Date().getTimezoneOffset()) * 60000)).toUTCString()
}

function getDateBasedOnSystemTimeZone(d) {
    return new Date(d - ((dateTimeFormat.tzoffset + new Date().getTimezoneOffset()) * 60000))
}

//
function GetDisplayCountByContainer(option) {   
    var noOfElements = 0;
    var $window = $(window);
    var windowSize = $window.width();
    var containerSize = option.containerWidth;// Deducting arrow space
    var elementWidth = option.thumbnailWidth;
    var minusWidth = option.externalPadding != null ? option.externalPadding : 0;
    var noOfEleWOPadding = parseInt(containerSize / elementWidth);

    if (option.internalPadding != null)
        minusWidth += (noOfEleWOPadding - 1) * option.internalPadding;

    noOfElements = parseInt((containerSize-minusWidth) / elementWidth);

    return noOfElements;
}
function getNextHighestNumber(arr, number) {
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] > number) {
            return arr[i];
        }
    }
}
function GetThumbnailMargin(option) {
    var widgetWidth = option.containerWidth;
    var thumbnailWidth = option.thumbnailWidth;
    var thumbnailCount = option.thumbnailCount;
    var wideSpace = widgetWidth - (thumbnailWidth * thumbnailCount);
    var newPadding = wideSpace / (thumbnailCount + 1);
    return newPadding;
}
function SetTemplateThumbnails(option) {
    var $RequestID = $("#" + option.requestID);
    var outerWidth = $RequestID.closest(".draggablecolumn").eq(0).width();
    var $thumbnailsli = $RequestID.find(".inbox-body ." + option.thumbnailClass +" li");
    if (outerWidth <= 410) {
        $thumbnailsli.removeAttr("class").addClass("col-xs-12 col-sm-12 col-md-12 col-lg-12");
    }
    else if (outerWidth > 410 && outerWidth <= 610) {
        $thumbnailsli.removeAttr("class").addClass("col-xs-12 col-sm-12 col-md-6 col-lg-6");
    }
    else {
        $thumbnailsli.removeAttr("class").addClass("col-xs-12 col-sm-12 col-md-4 col-lg-4");
    }
    var newPadding = GetThumbnailMargin(option.elementOption);
    $thumbnailsli.css({ "padding-left": newPadding / 2 + "px", "padding-right": newPadding / 2 + "px" });    
    //$thumbnailsli.first().css({ "padding-left": newPadding + "px" });
    //$thumbnailsli.last().css({ "padding-right": newPadding + "px" });
    $RequestID.find(".inbox-body ." + option.thumbnailClass + " li[" + option.selectorCondition + "]").first().css({ "padding-left": newPadding + "px" });
    $RequestID.find(".inbox-body ." + option.thumbnailClass + " li[" + option.selectorCondition + "]").last().css({ "padding-right": newPadding + "px" });
    
}

//To maintain z-indexes for modals and wizards opening over one another
    var zIndexModalWizard = {
    stack: [],
    baseIndex: 1000,
    increaseIndex:100,
    pushElement: function (id) { //maintain stack of modal/wizard ids
        zIndexModalWizard.stack.push(id);
    },
    popElement: function () { //remove last entry whenever modal/wizard is closed
        zIndexModalWizard.stack.pop();
    },
    emptyStack: function () { //remove all ids to reset stack
        zIndexModalWizard.stack=[];
    },
    getHighestZIndex: function () { //get the highest z-index compared to previously opened modals/wizards
        return zIndexModalWizard.baseIndex + (zIndexModalWizard.increaseIndex * zIndexModalWizard.stack.length);
    }
}

var currentModalView = {
isDirty:false,
}

var internalLinkJson = { //added for #22573
    'Dashboard': "",
    'Send Email': "communicate/email",
    'Post to Social': "communicate/social",
    'View Contacts': "connections/contacts",
    'Create Smart list': "connections/lists",
    'Import Contacts': "connections/import",
    'Manage Opportunities': "manage/opportunity-records",
    'View Drip Campaigns': "manage/campaigns/drip",
    'View Social Drip': "manage/campaigns/socialdrip",
    'View Landing Pages': "manage/campaigns/landingpage",
    'View Websites': "manage/campaigns/website",
    'View Tracking Sites': "manage/externaltracking/sites",
    'View Tracking Links': "manage/externaltracking/links",
    'Request MDF': "manage/mdf/funds",
    'Register Deal': "manage/leads/leadregistered",
    'Manage Database': "manage/database-records",
    'View Playbooks': "collateral/internal-playbook",
    'View Datarooms': "collateral/data-room",
    'View Print': "collateral/pdf",
    'View eBooks': "collateral/ebook",
    'View Presentation': "collateral/presentation",
    'View Images': "gallery/images",
    'View Documents': "gallery/documents",
    'View Videos': "gallery/videos",
    'View Assets': "search?text=",
    'View Email report': "communicate/email/report/summary",
    'View Contact report': "connections/contacts/summary",
    'View Drip report': "manage/campaigns/drip/report",
    'Help me Market': "widgets/quicklink-widgets/internal-playbook-grid/helpmemarket/helpmemarket_company/2/{{companyID}}/0",
    'Help me Sell': "widgets/quicklink-widgets/internal-playbook-grid/helpmesell/helpmesell_company/2/{{companyID}}/1",
    'Training and Certification': "widgets/quicklink-widgets/internal-playbook-grid/trainingandcertification/trainingandcertification_company/2/{{companyID}}/0",
    'Get Trained': "widgets/quicklink-widgets/internal-playbook-grid/gettrained/gettrained_company/2/{{companyID}}/0",
    'Product Promotions': "widgets/quicklink-widgets/internal-playbook-grid/productpromotions/productpromotions_company/2/{{companyID}}/1",
    'View Social drip report': "report/socialdrip"
    };

function GetDefaultWidgetHeader(widgetname) {
    var str = "";
    switch (widgetname) {
        case "communicatewithprospects":
            str = 'Communicate With Prospects';
            break;
        case "createpresentation":
            str = 'Create Presentation';
            break;
        case "createprintasset":
            str = 'Create Print Asset';
            break;
        case "create":
            str = 'Create';
            break;
        case "externalquicklink1":
            str = 'External quick link 1';
            break;
        case "externalquicklink2":
            str = 'External quick link 2';
            break;
        case "externalquicklink3":
            str = 'External quick link 3';
            break;
        case "gettrained":
            str = 'Get Trained';
            break;
        case "helpmebuildbrand":
            str = 'Help me build Brand';
            break;
        case "helpmemarket":
            str = 'Help Me Market';
            break;
        case "helpmesell":
            str = 'Help Me Sell';
            break;
        case "importcontacts":
            str = 'Import Contacts';
            break;
        case "manageassets":
            str = 'Manage Assets';
            break;
        case "managecontacts":
            str = 'Manage Contacts';
            break;
        case "mdffunds":
            str = 'MDF Funds';
            break;
        case "manageprospects":
            str = 'Manage Prospects';
            break;
        case "managesocial":
            str = 'Manage Social';
            break;
        case "managewebstats":
            str = 'Manage Web Stats';
            break;
        case "marketingcampaign":
            str = 'Marketing Campaign';
            break;
        case "nurtureprospects":
            str = 'Nurture Prospects';
            break;
        case "productpromotions":
            str = 'Product Promotions';
            break;
        case "registerleads":
            str = 'Register Deals';
            break;
        case "reports":
            str = 'Reports';
            break;
        case "reports2":
            str = 'Reports 2';
            break;
        case "sendemailcampaign":
            str = 'Send Email';
            break;
        case "socialcampaign":
            str = 'Social post';
            break;
        case "trainingandcertification":
            str = 'Training and Certification';
            break;
        case "viewassets":
            str = 'View Assets';
            break;
        case "watchvideo":
            str = 'Watch Video';
            break;
        case "activedripcampaigns":
            str = 'Active Drip Campaign(s)';
            break;
        case "approveddeals":
            str = 'Approved Deals';
            break;
        case "engagementlevel":
            str = '{$ajax_partner_edit.EngagementLevel}';
            break;
        case "hothighleads":
            str = 'Hot High Leads';
            break;
        case "lastemailcampaigngraph":
            str = 'Email Campaigns';
            break;
        case "mdfavailable":
            str = 'MDF Available';
            break;
        case "newformleads":
            str = 'New Form Leads';
            break;
        case "newsharedleads":
            str = 'New Shared Leads';
            break;
        case "newassetreleasedcount":
            str = 'New Asset Released...';
            break;
        case "opportunitywon":
            str = 'Opportunities Won';
            break;
        case "opportunitypipelined":
            str = 'Pipeline Opportunities';
            break;
        case "webleads":
            str = 'Web Leads';
            break;
        case "opportunityamount":
            str = 'Opportunity Amount';
            break;
        case "awaitingcontracts":
            str = 'Awaiting Contracts';
            break;
        case "approvedcontracts":
            str = 'Approved Contracts';
            break;
        case "registeradeal":
            str = 'Register Deal';
            break;
        case "totaldeals":
            str = 'Total<br>Deals';
            break;
        case "totalmdffundplan":
            str = 'Total MDF Fund Plan';
            break;
        case "activeleads":
            str = 'Active Contacts';
            break;
        case "hotleads":
            str = 'Hot Contacts';
            break;
        case "highleads":
            str = 'High Contacts';
            break;
        case "mediumleads":
            str = 'Medium Contacts';
            break;
        case "lowleads":
            str = 'Low Contacts';
            break;
        case "commissionearned":
            str = 'Commission Earned';
            break;
        case "ActiveSocialDripCampaign":
            str = 'Active Social Drip Campaign';
            break;
    }
    return str;
}
function GetDefaultWidgetHeaderV5(widgetname) {
    var str = "";
    switch (widgetname) {
        case "communicatewithprospects":
            str = 'Communicate With Prospects';
            break;
        case "createpresentation":
            str = 'Create Presentation';
            break;
        case "createprintasset":
            str = 'Create Print Asset';
            break;
        case "create":
            str = 'Create';
            break;
        case "externalquicklink1":
            str = 'External quick link 1';
            break;
        case "externalquicklink2":
            str = 'External quick link 2';
            break;
        case "externalquicklink3":
            str = 'External quick link 3';
            break;
        case "gettrained":
            str = 'Get Trained';
            break;
        case "helpmebuildbrand":
            str = 'Help me build Brand';
            break;
        case "helpmemarket":
            str = 'Help Me Market';
            break;
        case "helpmesell":
            str = 'Help Me Sell';
            break;
        case "importcontacts":
            str = 'Import Contacts';
            break;
        case "manageassets":
            str = 'Manage Assets';
            break;
        case "managecontacts":
            str = 'Manage Contacts';
            break;
        case "mdffunds":
            str = 'MDF Funds';
            break;
        case "manageprospects":
            str = 'Manage Prospects';
            break;
        case "managesocial":
            str = 'Manage Social';
            break;
        case "managewebstats":
            str = 'Manage Web Stats';
            break;
        case "marketingcampaign":
            str = 'Marketing Campaign';
            break;
        case "nurtureprospects":
            str = 'Nurture Prospects';
            break;
        case "productpromotions":
            str = 'Product Promotions';
            break;
        case "registerleads":
            str = 'Register Deals';
            break;
        case "reports":
            str = 'Reports';
            break;
        case "reports2":
            str = 'Reports 2';
            break;
        case "sendemailcampaign":
            str = 'Send Email';
            break;
        case "socialcampaign":
            str = 'Social post';
            break;
        case "trainingandcertification":
            str = 'Training and Certification';
            break;
        case "viewassets":
            str = 'View Assets';
            break;
        case "watchvideo":
            str = 'Watch Video';
            break;
        case "activedripcampaigns":
            str = 'Active Drip Campaign(s)';
            break;
        case "approveddeals":
            str = 'Approved Deals';
            break;
        case "engagementlevel":
            str = '{$ajax_partner_edit.EngagementLevel}';
            break;
        case "hothighleads":
            str = 'Hot High Leads';
            break;
        case "lastemailcampaigngraph":
            str = 'Email Campaigns';
            break;
        case "mdfavailable":
            str = 'MDF Available';
            break;
        case "newformleads":
            str = 'New Form Leads';
            break;
        case "newsharedleads":
            str = 'New Shared Leads';
            break;
        case "newassetreleasedcount":
            str = 'New Asset Released...';
            break;
        case "opportunitywon":
            str = 'Opportunities Won';
            break;
        case "opportunitypipelined":
            str = 'Pipeline Opportunities';
            break;
        case "webleads":
            str = 'Web Leads';
            break;
        case "opportunityamount":
            str = 'Opportunity Amount';
            break;
        case "awaitingcontracts":
            str = 'Awaiting Contracts';
            break;
        case "approvedcontracts":
            str = 'Approved Contracts';
            break;
        case "registeradeal":
            str = 'Register Deal';
            break;
        case "totaldeals":
            str = 'Total Deals';
            break;
        case "totalmdffundplan":
            str = 'Total MDF Fund Plan';
            break;
        case "activeleads":
            str = 'Active Leads';
            break;
        case "hotleads":
            str = 'Hot Leads';
            break;
        case "highleads":
            str = 'High Leads';
            break;
        case "mediumleads":
            str = 'Medium Leads';
            break;
        case "lowleads":
            str = 'Low Leads';
            break;
        case "commissionearned":
            str = 'Commission Earned';
            break;
        case "ActiveSocialDripCampaign":
            str = 'Active Social Drip Campaign';
            break;
        case "totalclickedemails":
            str = 'Total Clicked Emails';
            break;
        case "totalopenedemails":
            str = 'Total Opened Emails';
            break;
    }
    return str;
}

function getSendAssetModalTitle(templatetype) {
    var modalTitle = "";
    switch (templatetype) {
        case 16:
            modalTitle = 'Send Print';
            break;
        case 2097152:
            modalTitle = 'Send Document';
            break;
        case 1048576:
            modalTitle = 'Send Image';
            break;
        case 67108864:
            modalTitle = 'Send Banner';
            break;
        case 8388608:
            modalTitle = 'Send Video';
            break;
        case 36864:
            modalTitle = 'Send Data Room';
            break;
        case 1073741824:
            modalTitle = 'Send FAQs/KnowledgeBase';
            break;
        case 32:
            modalTitle = 'Send Email';
            break;
        case 16384:
            modalTitle = 'Send Presentation';
            break;
        case 128:
            modalTitle = 'Send Web';
            break;
        case "other":
            modalTitle = 'Send Assets';
            break;
    }
    return modalTitle;
}

function getUsernameAndEmail(item) {
    var name = [];
    var userName = item.name;
    if (item.fullname != null && item.fullname != undefined)
        name = item.fullname;
    else
        name = 'No Name'
    if (item.email != null && item.email != "" && item.name == "")
        name = item.email;

    var label = ['Name', 'User Name'];
    var value = [name, userName];
    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        var $strongTag = $("<strong>");
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + " :");
        var $divTag = $("<div>").addClass("font-xs").css({ "max-width": "100%", "word-wrap": "break-word" }).text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $content.append($strongTag);
            $content.append($divTag);
        }
    }
    return $content[0].innerHTML;
}

//Asset Assignment/Permissions common code

function getNotificationString(notificationDataJson, deleteChanges, shareChanges) {
    var changes = 0;
    var notificationstring = {};
    var users = [];
    var groups = [];
    var companies = [];
    var organizations = [];
    var organizationGroups = [];
    if (notificationDataJson.sharedata != null && $.isEmptyObject(notificationDataJson.sharedata) == false) {
        var notification = notificationDataJson.sharedata;
        if (notification.users.length != 0)
            users = notification.users;
        if (notification.groups.length != 0)
            var groups = notification.groups;
        if (notification.companies.length != 0)
            var companies = notification.companies;
        if (notification.organizations.length != 0)
            var organizations = notification.organizations;
        if (notification.organizationgroups.length != 0)
            var organizationGroups = notification.organizationgroups;
    }
    for (var key in deleteChanges) {        
        var notification = deleteChanges[key];
        if (notification.userid != null) {
            $(users).each(function (i) {
                if (users[i]["userid"] == notification.userid) {
                    users.splice(i, 1);
                    return false;
                }
            });
        }
        if (notification.groupid != null) {
            $(groups).each(function (i) {
                if (groups[i]["groupid"] == notification.groupid) {
                    groups.splice(i, 1);
                    return false;
                }
            });
        }
        if (notification.companyid != null) {
            $(companies).each(function (i) {
                if (companies[i]["companyid"] == notification.companyid) {
                    companies.splice(i, 1);
                    return false;
                }
            });
        }
        if (notification.organizationid != null) {
            $(organizations).each(function (i) {
                if (organizations[i]["organizationid"] == notification.organizationid) {
                    organizations.splice(i, 1);
                    return false;
                }
            });
        }
        if (notification.organizationgroupid != null) {
            $(organizationGroups).each(function (i) {
                if (organizationGroups[i]["organizationgroupid"] == notification.organizationgroupid) {
                    organizationGroups.splice(i, 1);
                    return false;
                }
            });
        }
    }
    for (var key in shareChanges) {
        changes++;
        var user = {};
        var group = {};
        var company = {};
        var orgnization = {};
        var organizationGroup = {};
        var id = parseInt(key);
        var notification = shareChanges[key];
        if (notification.userid != null) {
            user.userid = notification.userid;
            user.level = notification.sharelevel;
            users.push(user);
        }
        if (notification.groupid != null) {
            group.groupid = notification.groupid;
            group.level = notification.sharelevel;
            groups.push(group);
        }
        if (notification.companyid != null) {
            company.companyid = notification.companyid;
            company.level = notification.sharelevel;
            companies.push(company);
        }
        if (notification.organizationid != null) {
            orgnization.organizationid = notification.organizationid;
            orgnization.level = notification.sharelevel;
            organizations.push(orgnization);
        }
        if (notification.organizationgroupid != null) {
            organizationGroup.organizationgroupid = notification.organizationgroupid;
            organizationGroup.level = notification.sharelevel;
            organizationGroups.push(organizationGroup);
        }
    }
    if (users != null)
        notificationstring.users = users;
    if (groups != null)
        notificationstring.groups = groups;
    if (companies != null)
        notificationstring.companies = companies;
    if (organizations != null)
        notificationstring.organizations = organizations;
    if (organizationGroups != null)
        notificationstring.organizationgroups = organizationGroups;

    return notificationstring;
}

function getNotificationData(userid, companyid, groupid, organizationid, organizationgroupid, selectedVal, shareChanges, deleteChanges, notificationDataJson) {
    var sharedata = [];
    if ($.isEmptyObject(shareChanges) == false) {
        for (var index in shareChanges) {
            var notification = shareChanges[index];
            if (notification.userid === userid && notification.companyid === companyid && notification.groupid === groupid && notification.organizationid === organizationid && notification.organizationgroupid === organizationgroupid)
                return notification;
        }
    }
    if ($.isEmptyObject(deleteChanges) == false) {
        for (var index in deleteChanges) {
            var notification = deleteChanges[index];
            if (notification.userid != null) {
                $(notificationDataJson.sharedata.users).each(function (i) {
                    if (notificationDataJson.sharedata.users[i]["userid"] == notification.id) {
                        notificationDataJson.sharedata.users.splice(i, 1);
                        return false;
                    }
                });
            }
            else if (notification.groupid != null) {
                $(notificationDataJson.sharedata.groups).each(function (i) {
                    if (notificationDataJson.sharedata.groups[i]["groupid"] == notification.id) {
                        notificationDataJson.sharedata.groups.splice(i, 1);
                        return false;
                    }
                });
            }
            else if (notification.organizationid != null) {
                $(notificationDataJson.sharedata.organizations).each(function (i) {
                    if (notificationDataJson.sharedata.organizations[i]["organizationid"] == notification.id) {
                        notificationDataJson.sharedata.organizations.splice(i, 1);
                        return false;
                    }
                });
            }
            else if (notification.organizationgroupid != null) {
                $(notificationDataJson.sharedata.organizationgroups).each(function (i) {
                    if (notificationDataJson.sharedata.organizationgroups[i]["organizationgroupid"] == notification.id) {
                        notificationDataJson.sharedata.organizationgroups.splice(i, 1);
                        return false;
                    }
                });
            }
            else if (notification.companyid != null) {
                $(notificationDataJson.sharedata.companies).each(function (i) {
                    if (notificationDataJson.sharedata.companies[i]["companyid"] == notification.id) {
                        notificationDataJson.sharedata.companies.splice(i, 1);
                        return false;
                    }
                });
            }

        }
    }
    if (notificationDataJson != null) {
        if (notificationDataJson.sharedata != null && $.isEmptyObject(notificationDataJson.sharedata) == false) {
            if (selectedVal == "everyone") {
                if ($.isEmptyObject(notificationDataJson.sharedata.everyone) == false) {
                    var getEveryone = notificationDataJson.sharedata.everyone;
                    if (getEveryone != null)
                        sharedata.push(getEveryone);
                }
            }
            if (selectedVal == "users" || selectedVal == 'Managers' || selectedVal == 'Partner Admins') {
                for (var i = 0; i < notificationDataJson.sharedata.users.length; i++) {
                    var getUser = notificationDataJson.sharedata.users[i];
                    if (getUser != null && getUser.userid === userid)
                        sharedata.push(getUser);
                }
            }
            if (selectedVal == "groups") {
                for (var i = 0; i < notificationDataJson.sharedata.groups.length; i++) {
                    var getGroup = notificationDataJson.sharedata.groups[i];
                    if (getGroup != null && getGroup.groupid === groupid)
                        sharedata.push(getGroup);
                }
            }
            if (selectedVal == "companies") {
                for (var i = 0; i < notificationDataJson.sharedata.companies.length; i++) {
                    var getcompany = notificationDataJson.sharedata.companies[i];
                    if (getcompany != null && getcompany.companyid === companyid)
                        sharedata.push(getcompany);
                }
            }
            if (selectedVal == "organizations") {
                for (var i = 0; i < notificationDataJson.sharedata.organizations.length; i++) {
                    var getOrg = notificationDataJson.sharedata.organizations[i];
                    if (getOrg != null && getOrg.organizationid === organizationid)
                        sharedata.push(getOrg);
                }
            }
            if (selectedVal == "organizationgroups") {
                for (var i = 0; i < notificationDataJson.sharedata.organizationgroups.length; i++) {
                    var getOrgGroup = notificationDataJson.sharedata.organizationgroups[i];
                    if (getOrgGroup != null && getOrgGroup.organizationgroupid === organizationgroupid)
                        sharedata.push(getOrgGroup);
                }
            }
        }
        if (sharedata.length != 0)
            return sharedata;
        else
            return null;
    }
}


function getIncentiveNewlyAssignedRecords(shareChanges) {
    var changes = 0;
    var notificationstring = {};
    var users = [];
    var groups = [];
    var companies = [];
    var organizations = [];
    var organizationGroups = [];
    for (var key in shareChanges) {
        changes++;
        var user = {};
        var group = {};
        var company = {};
        var orgnization = {};
        var organizationGroup = {};
        var id = parseInt(key);
        var notification = shareChanges[key];
        if (notification.userid != null) {
            user.userid = notification.userid;
            user.level = notification.sharelevel;
            users.push(user);
        }
        if (notification.groupid != null) {
            group.groupid = notification.groupid;
            group.level = notification.sharelevel;
            groups.push(group);
        }
        if (notification.companyid != null) {
            company.companyid = notification.companyid;
            company.level = notification.sharelevel;
            companies.push(company);
        }
        if (notification.organizationid != null) {
            orgnization.organizationid = notification.organizationid;
            orgnization.level = notification.sharelevel;
            organizations.push(orgnization);
        }
        if (notification.organizationgroupid != null) {
            organizationGroup.organizationgroupid = notification.organizationgroupid;
            organizationGroup.level = notification.sharelevel;
            organizationGroups.push(organizationGroup);
        }
    }
    if (users != null)
        notificationstring.users = users;
    if (groups != null)
        notificationstring.groups = groups;
    if (companies != null)
        notificationstring.companies = companies;
    if (organizations != null)
        notificationstring.organizations = organizations;
    if (organizationGroups != null)
        notificationstring.organizationgroups = organizationGroups;

    return notificationstring;
}

function initSliderData(grid, data, selectedVal, shareFunc, notificationDataJson, emailIdIndex, shareChanges, deleteChanges) {
    if (notificationDataJson.sharedata != null) {
        if (selectedVal == "everyone" && ($.isEmptyObject(notificationDataJson.sharedata.everyone) == false))
            var sharedata = notificationDataJson.sharedata.everyone;
        if ((selectedVal == "users" || selectedVal == 'Managers' || selectedVal == 'Partner Admins') && $.isEmptyObject(notificationDataJson.sharedata) == false && notificationDataJson.sharedata.users.length > 0)
            var sharedata = notificationDataJson.sharedata.users;
        else if (selectedVal == "groups" && $.isEmptyObject(notificationDataJson.sharedata) == false && notificationDataJson.sharedata.groups.length > 0)
            var sharedata = notificationDataJson.sharedata.groups;
        else if (selectedVal == "organizations" && $.isEmptyObject(notificationDataJson.sharedata) == false && $.isEmptyObject() == false && notificationDataJson.sharedata.organizations.length > 0)
            var sharedata = notificationDataJson.sharedata.companies;
        else if (selectedVal == "organizationgroups" && $.isEmptyObject(notificationDataJson.sharedata) == false && $.isEmptyObject() == false && notificationDataJson.sharedata.organizationgroups.length > 0)
            var sharedata = notificationDataJson.sharedata.organizationgroups;
        else if (selectedVal == "companies" && $.isEmptyObject(notificationDataJson.sharedata) == false && $.isEmptyObject() == false && notificationDataJson.sharedata.companies.length > 0)
            var sharedata = notificationDataJson.sharedata.companies;
    }
    for (index in data) {
        var id = data[index].id;
        var container = grid + "recorditem" + id;
        var level = 0;
        var value = 0;
        var share = shareFunc(data[index]);
        if (share != null) {
            if (share[0] != {}) {
                if (share[0] != undefined)
                    level = share[0].level;
                else
                    level = share.sharelevel;
            }
        }
        if (selectedVal == "everyone")
            $("#_name").html(selectedVal);
        else
            $("#" + id + "_name").html(data[index].name);
        initSlider(container, share, 2, emailIdIndex, shareChanges, notificationDataJson, deleteChanges, selectedVal);
    }
}

function initSlider(container, emaildata, max, emailIdIndex, shareChanges, notificationDataJson, deleteChanges, selectedVal) {
    var level = 0;
    var id = emailIdIndex;
    if (emaildata != null) {
        if (emaildata[0] != undefined && emaildata[0] != null) {
            id = emaildata[0].id;
            level = emaildata[0].level;
        }
        if (emaildata[0] != undefined && (emaildata[0].userid != undefined || emaildata[0].userid != null)) {
            id = emaildata[0].userid;
            level = emaildata[0].level;
        }
        if (emaildata[0] != undefined && (emaildata[0].groupid != undefined || emaildata[0].groupid != null)) {
            id = emaildata[0].groupid;
            level = emaildata[0].level;
        }
        if (emaildata[0] != undefined && (emaildata[0].companyid != undefined || emaildata[0].companyid != null)) {
            id = emaildata[0].companyid;
            level = emaildata[0].level;
        }
        if (emaildata[0] != undefined && (emaildata[0].organizationid != undefined || emaildata[0].organizationid != null)) {
            id = emaildata[0].organizationid;
            level = emaildata[0].level;
        }
        if (emaildata[0] != undefined && (emaildata[0].organizationgroupid != undefined || emaildata[0].organizationgroupid != null)) {
            id = emaildata[0].organizationgroupid;
            level = emaildata[0].level;
        }
        if (emaildata[0] == undefined) {
            id = emaildata.id;
            level = emaildata.sharelevel;
        }
    }
    else {
        emailIdIndex--;
    }

    $("#" + container).each(function () {
        $(this).attr("annid", id).slider({
            range: "min",
            min: 0,
            max: max,
            value: getLevel(level) * 2 + 1,
            slide: function (event, ui) { return canSlide(ui.value); },
            change: function (event, ui) { onChange(event, (ui.value - 1), "#" + $(this).attr('id'), $(this).attr('recordid'), id, shareChanges, notificationDataJson, deleteChanges, selectedVal); }
        });
        if (level > notificationDataJson.maxshare.level)
            $(this).slider("disable");
    });
}

function updateValue(container, id, assetId, shareChanges, notificationDataJson, deleteChanges, selectedVal) {
    var level = ($(container).slider("value") - 1);
    var value = 0;
    if (setLevel(level) === 2147483647)
        value = 2147483647;
    else
        $(container + "_row2 input[type=checkbox]:checked").each(function () { value |= parseInt($(this).attr("rolevalue")); });
    var assetId = parseInt($(container).attr("recordid"));
    if (level == 0) {
        if (shareChanges[assetId] != null) {
            delete shareChanges[assetId];
            if (notificationDataJson.sharedata.users.length > 0) {
                for (i = 0; i < notificationDataJson.sharedata.users.length; i++) {
                    if (notificationDataJson.sharedata.users[i] != null && id == notificationDataJson.sharedata.users[i].userid)
                        notificationDataJson.sharedata.users.splice(i, 1);
                }
            }
            if (notificationDataJson.sharedata.groups.length > 0) {
                for (i = 0; i < notificationDataJson.sharedata.groups.length; i++) {
                    if (notificationDataJson.sharedata.groups[i] != null && id == notificationDataJson.sharedata.groups[i].groupid)
                        delete notificationDataJson.sharedata.groups[i];
                }
            }
            if (notificationDataJson.sharedata.companies.length > 0) {
                for (i = 0; i < notificationDataJson.sharedata.companies.length; i++) {
                    if (notificationDataJson.sharedata.companies[i] != null && id == notificationDataJson.sharedata.companies[i].companyid)
                        delete notificationDataJson.sharedata.companies[i];
                }
            }
            if (notificationDataJson.sharedata.organizations.length > 0) {
                for (i = 0; i < notificationDataJson.sharedata.organizations.length; i++) {
                    if (notificationDataJson.sharedata.organizations[i] != null && id == notificationDataJson.sharedata.organizations[i].organizationid)
                        delete notificationDataJson.sharedata.organizations[i];
                }
            }
            if (notificationDataJson.sharedata.organizationgroups.length > 0) {
                for (i = 0; i < notificationDataJson.sharedata.organizationgroups.length; i++) {
                    if (notificationDataJson.sharedata.organizationgroups[i] != null && id == notificationDataJson.sharedata.organizationgroups[i].organizationgroupid)
                        delete notificationDataJson.sharedata.organizationgroups[i];
                }
            }
        }
        else {
            deleteChanges[assetId] = { id: assetId, companyid: null, groupid: null, userid: null, organizationid: null, organizationgroupid: null, shareflags: value, sharelevel: setLevel(level) };
            var view = selectedVal;
            if (view == "users")
                deleteChanges[assetId].userid = parseInt(id);
            else if (view == "companies")
                deleteChanges[assetId].companyid = parseInt(id);
            else if (view == "groups")
                deleteChanges[assetId].groupid = parseInt(id);
            else if (view == "organizations")
                deleteChanges[assetId].organizationid = parseInt(id);
            else if (view == "organizationgroups")
                deleteChanges[assetId].organizationgroupid = parseInt(id);
        }
    }
    else {
        shareChanges[assetId] = { id: assetId, companyid: null, groupid: null, userid: null, organizationid: null, organizationgroupid: null, shareflags: value, sharelevel: setLevel(level) };
        var view = selectedVal;
        if (view == "users" || view == 'Managers' || view == 'Partner Admins')
            shareChanges[assetId].userid = parseInt(id);
        else if (view == "companies")
            shareChanges[assetId].companyid = parseInt(id);
        else if (view == "groups")
            shareChanges[assetId].groupid = parseInt(id);
        else if (view == "organizations")
            shareChanges[assetId].organizationid = parseInt(id);
        else if (view == "organizationgroups")
            shareChanges[assetId].organizationgroupid = parseInt(id);
    }
}

function canSlide(val) {
    return ((val & 1) != 0 || (val / 2 & 1) != 0) && val <= 2;
}

function getLevel(level) {
    if (level == 2147483647)
        return 4;
    var count = 0;
    while ((level & 1) == 1) {
        count++;
        level = level >> 1;
    }
    return count;
}

function setLevel(level) {
    var bits = 0;
    while (level-- > 0) {
        bits = (bits << 1) | 1;
    }
    return bits;
}

function onChange(event, level, container, id, assetId, shareChanges, notificationDataJson, deleteChanges, selectedVal) {
    updateValue(container, id, assetId, shareChanges, notificationDataJson, deleteChanges, selectedVal);
}



///Added for enhancement-23987 
function getHoverImageInfo(item) {
    var desc = item.description;
    var createdOn = longDateFromUTC(item.createdon);
    var updatedOn = item.flag7;
    var $div = $('<div>').text(desc);
    var isGoogleDrive = item.isGoogleUrl;
    var imgSrc;
    if (isGoogleDrive)
        imgSrc = item.original;
    else {
        if (item.templatetype != undefined && item.templatetype == 67108864)
            imgSrc = item.thumbnail_400;
        else
            imgSrc = item.optimized;
    }

    if (updatedOn == null || updatedOn == "" || updatedOn == undefined)
        if (item.updatedon == null || item.updatedon == "" || item.updatedon == undefined)
            updatedOn = 'NA';
        else
            updatedOn = longDateFromUTC(item.updatedon);
    else
        updatedOn = longDateFromUTC(updatedOn);
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var label = ['Name', 'Created On', 'Updated On', 'Description'];//label array
    var value = [item.displayname, createdOn, updatedOn, desc];//value array 
   
    var img = "<div class='img-hover-info'><img src='" + imgSrc +"' class='img-src' /></div>";
    var $strong = $("<strong>");
    $strong.append(img);  
    for (var i = 0; i < label.length; i++) {       
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs').css({ "max-width": "300px", "word-wrap": "break-word" }).text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }

    return $strong.html();
}

///Added for enhancement-29268
function getImageHoverContents(item) {
    var desc = item.description;
    var createdOn = longDateFromUTC(item.createdon);
    var updatedOn = item.flag7;
    var $div = $('<div>').text(desc);
    var isGoogleDrive = item.isGoogleUrl;
    var imgSrc;
    if (isGoogleDrive)
        imgSrc = item.original;
    else
        imgSrc = item.optimized;

    if (updatedOn == null || updatedOn == "" || updatedOn == undefined)
        if (item.updatedon == null || item.updatedon == "" || item.updatedon == undefined)
            updatedOn = 'NA';
        else
            updatedOn = longDateFromUTC(item.updatedon);
    else
        updatedOn = longDateFromUTC(updatedOn);
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var label = ['Name', 'Created By', 'Created On', 'Updated On', 'Description'];//label array
    var value = [item.displayname, item.createdbyname, createdOn, updatedOn, desc];//value array 

    var img = "<div  style='height:230px;width:300px;border-bottom:1px solid #dddddd;background-color:#ddd;text-align:center;line-height:230px;margin-bottom:6px;'><img src='" + imgSrc + "' style='max-height:100%; max-width:100%;' /></div>";
    var $strong = $("<strong>");
    $strong.append(img);
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs').css({ "max-width": "300px", "word-wrap": "break-word" }).text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }

    return $strong.html();
}

/*----- Auto Select for External link -----*/
function ExternalAutoComplete(element, url, externalID) {
    $(element).select2({
        placeholder: 'Any Link Clicked',
        minimumInputLength: 1,
        multiple: false,
        maximumSelectionSize: 1,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                return {
                    q: term,
                    limit: 25,
                    type: 570,
                    externalID: externalID,
                    timestamp: $.now(),
                    fq: term,
                    id: 0
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForExternal,
        formatSelection: formatSenderSelectionForExternal
    });
};
function formatSenderResultForExternal(record) {
    var $div = $("<div>");
    if (record.id == -1)
        $div.text('Any Link Clicked');
    else if (record.id == -2)
        $div.text('Link Contains');
    else
        $div.text(record.url);
    return $div;
};
function formatSenderSelectionForExternal(data) {
    var $li = $("<li>").attr({ "lid": data.siteid, "url": data.url }).css("list-style-type", "none").text(data.url);
    return $li;
};

/*---Auto Select recipient list----*/
function RecipientListAutoComplete(element, url, status, isSubscriptionList) {
    $(element).select2({
        placeholder: isSubscriptionList ? 'Please select a Subscription List' : 'Please select a Recipient List',
        minimumInputLength: 0,
        multiple: false,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 630,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    editor: isSubscriptionList,
                    cstatus: status
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForList,
        formatSelection: formatSenderSelectionForList
    });
};
function formatSenderResultForList(record) {
    var $divEmail = $("<div>");
    $divEmail.text(record.name);
    return $divEmail;
};
function formatSenderSelectionForList(data) {
    var $li = $("<li>").attr({ "lid": data.id, "name": data.name }).css("list-style-type", "none").text(data.name);
    return $li;
};

/*----- Auto Select User LOGIC STARTS -----*/
function UserAutoComplete(element, url) {
    $(element).select2({
        placeholder: 'User',
        minimumInputLength: 0,
        multiple: false,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 510,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    editor: true
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResult,
        formatSelection: formatSenderSelection
    });
};
function formatSenderResult(record) {
    var $divEmail = $("<div>");
    $divEmail.text((record.iscurrent) ? '***myself***' : record.name);
    return $divEmail;
};
function formatSenderSelection(data) {
    var $li = $("<li>").attr({ "lid": data.id, "name": data.name }).css("list-style-type", "none").text((data.iscurrent) ? '***myself***' : data.name);
    return $li;
};
function AdminUserAutoComplete(element, url) {
    $(element).select2({
        placeholder: 'User',
        minimumInputLength: 0,
        multiple: false,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 510,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    editor: true
                };
            },
            results: function (data, page) {
                var adminArray = [];
                adminArray[0] = { dropdowntype: 2, id: 0, iscurrent: false, ispdm: false, name: 'Admin User', type: 64 }
                for (var i = 0; i <= data.records.length - 1; i++) {
                    adminArray[i + 1] = data.records[i];
                }
                return {
                    results: adminArray
                };
            }
        },
        formatResult: formatSenderResult,
        formatSelection: formatSenderSelection
    });
};
function CompanyListAutoComplete(element, url) {
    $(element).select2({
        placeholder: 'Select Company List',
        minimumInputLength: 0,
        multiple: false,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 907,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    editor: true
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForList,
        formatSelection: formatSenderSelectionForList
    });
};
function OrgnizationGroupAutoComplete(element, url) {
    $(element).select2({
        placeholder: 'Please Select an Organization Group',
        minimumInputLength: 0,
        multiple: false,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 600,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    editor: true
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForfilter,
        formatSelection: formatSenderSelectionForfilter
    });
};
function UserGroupAutoComplete(element, url) {
    $(element).select2({
        placeholder: 'Please Select a User Group',
        minimumInputLength: 0,
        multiple: false,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 620,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    editor: true
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForfilter,
        formatSelection: formatSenderSelectionForfilter
    });
};
function OrgnizationAutoComplete(element, url) {
    $(element).select2({
        placeholder: 'Please Select an Organization',
        minimumInputLength: 0,
        multiple: false,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 560,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    editor: true
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForfilter,
        formatSelection: formatSenderSelectionForfilter
    });
};
function IncentiveAutoComplete(element, url) {
    $(element).select2({
        placeholder: 'Please Select an Incentive',
        minimumInputLength: 0,
        multiple: false,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 670,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    editor: true
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForfilter,
        formatSelection: formatSenderSelectionForfilter
    });
};
function UserFormAutoComplete(element, url) {
    $(element).select2({
        placeholder: 'Select Form',
        minimumInputLength: 0,
        multiple: false,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 780,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    editor: true
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForfilter,
        formatSelection: formatSenderSelectionForfilter
    });
};
function InternalPageVisitedAutoComplete(element, url) {
    $(element).select2({
        placeholder: 'Select Module',
        minimumInputLength: 0,
        multiple: false,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 904,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    editor: true
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForfilter,
        formatSelection: formatSenderSelectionForfilter
    });
};
function UserTemplateAutoComplete(element, url, tempType, perType, lstType, pText) {
    $(element).select2({
        placeholder: pText,
        minimumInputLength: 0,
        multiple: false,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 770,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    editor: true,
                    templateType: tempType,
                    personalizationType: perType,
                    listType: lstType
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForfilter,
        formatSelection: formatSenderSelectionForfilter
    });
};
function TierGroupAutoComplete(element, url) {
    $(element).select2({
        placeholder: 'Select Tier Group',
        minimumInputLength: 0,
        multiple: false,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 901,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    editor: true
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForfilter,
        formatSelection: formatSenderSelectionForfilter
    });
};
function TierAutoComplete(element, url, id) {
    $(element).select2({
        placeholder: 'Select Tier',
        minimumInputLength: 0,
        multiple: false,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 902,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    editor: true,
                    tierGroupId: id
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForfilter,
        formatSelection: formatSenderSelectionForfilter
    });
};
function TierGoalAutoComplete(element, url, id) {
    $(element).select2({
        placeholder: 'Select Tier Goal',
        minimumInputLength: 0,
        multiple: false,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 903,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    editor: true,
                    tierId: id
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForfilter,
        formatSelection: formatSenderSelectionForfilter
    });
};
/*----- Auto Select for Smartlist filter condition -----*/
function FilterAutoCompleteSingle(element, url, filterData, _requestID) {
    $(element).select2({
        placeholder: 'SELECT OR ADD FILTER(S)',
        minimumInputLength: 1,
        allowClear: false,
        multiple: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (ValidateSpecialCharacters(term))
                {
                    return {
                        q: term,
                        limit: 25,
                        type: 520,
                        timestamp: $.now(),
                        fq: term,
                        id: 0
                    };
                }
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForfilter,
        formatSelection: function (data) {
            var name = (data.name).replace(/[^\x00 -\x7F]/g, "");
            var $list = $("#s2id_" + _requestID + "_filteropt li[fid]");
            var id = filterIndex--;
            api.call("GetOrAddFilter", { name: name }, function (r, ctx) {//api to populate new filter
                $("#s2id_" + _requestID + "_filteropt li[fid]").each(function () {
                    $(this).find("i").first().remove();//remove icon                     
                    $(this).attr("fid", r.result);
                    var ov = $("#" + _requestID + "_filteropt").val().split(',');
                    var nv = [];
                    for (var i = 0; i <= ov.length - 1; i++) {
                        if (ov[i] == "0" || ov[i] == 0)
                            ov[i] = r.result;//Assign new value to it
                        nv.push(ov[i]);
                    }
                    $("#" + _requestID + "_filteropt").val(nv);//replace new vals
                });
                if (name.replace(/\s/g, '').length === 0) {
                    $('.select2-search-choice').each(function () {                        
                        if ($(this).find('div').text() == 0) {
                            $(this).remove();
                        }
                    });
                }
            }, null, id);
            if (name.replace(/\s/g, '').length > 0) 
            var $li = $("<li>").attr({ "fid": data.id, "name": name }).css("list-style-type", "none").text(name);
            return $li;
        },
        initSelection: function (element, callback) {
            var data = [];
            if (filterData.records != undefined) {
                for (var i = 0; i <= filterData.records.length - 1; i++) {
                    $("#" + _requestID + "_filteropt").val([filterData.records[i].id, filterData.records[i].name]).trigger("change");
                    data.push({ id: element.val().split(",")[0], name: element.val().split(",")[1] });
                }
            }

            callback(data);
        },
        createSearchChoice: function (term, data) {
            if (ValidateSpecialCharacters(term)) {
                if ($(data).filter(function () { return this.name.localeCompare(term) === 0; }).length === 0) {
                    return { id: 0, name: term };
                }
            }
        }
    });
};
function formatSenderResultForfilter(record) {
    return "<div>" + Encoder.charEncode(record.name) + "</div>";
};
function formatSenderSelectionForfilter(data) {
    var $li = $("<li>").attr({ "id": data.id, "name": data.name }).css("list-style-type", "none").text(data.name);
    return $li;
};

//To set format of Reports by using daterange filter parameters
function setReportDateRange(reportData) {
    var today = new Date();
    var format = reportData.format;
    var $periodCtrl = $(reportData.periodCtrl);
    $periodCtrl.css("color", reportData.fontcolor);
    var $periodCtrl2;
    if (reportData.periodCtrl2 != undefined)
        $periodCtrl2 = $(reportData.periodCtrl2);
    var newDate = new Date(today);
    $(reportData.periodCtrl).text("");
    var selectedRange = parseInt(reportData.selectedRange);
    switch (selectedRange) {
        case 224:
            $periodCtrl.text("");
            format = 4;
            if (reportData.periodCtrl2 != undefined)
                $periodCtrl2.html('');
            break;

        case 128:
            $periodCtrl.text("- (" + dateBasedOnTimeZone(today) + "   to  " + dateBasedOnTimeZone(today) + ")");
            format = 0;
            if (reportData.periodCtrl2 != undefined)
                $periodCtrl2.html('{$ajax_engagement_level.Today}');
            break;

        case 176:
            newDate.setDate(newDate.getDate() - 29);
            $periodCtrl.text("- (" + dateBasedOnTimeZone(newDate) + "   to  " + dateBasedOnTimeZone(today) + ")");
            format = 0;
            if (reportData.periodCtrl2 != undefined)
                $periodCtrl2.html('Last Month');
            break;

        case 160:
            newDate.setDate(newDate.getDate() - 6);
            $periodCtrl.text("- (" + dateBasedOnTimeZone(newDate) + "   to  " + dateBasedOnTimeZone(today) + ")");
            format = 7;
            break;

        case 240:
            newDate.setDate(newDate.getDate() - 89);
            $periodCtrl.text("- (" + dateBasedOnTimeZone(newDate) + "   to  " + dateBasedOnTimeZone(today) + ")");
            format = 2;
            if (reportData.periodCtrl2 != undefined)
                $periodCtrl2.html('Last Quarter');
            break;

        case 192:
            newDate.setDate(newDate.getDate() - 364);
            $periodCtrl.text("- (" + dateBasedOnTimeZone(newDate) + "   to  " + dateBasedOnTimeZone(today) + ")");
            format = 2;
            if (reportData.periodCtrl2 != undefined)
                $periodCtrl2.html('Last Year');
            break;

        case 208:
            var dtStartDate = new Date(reportData.startDate);
            var dtEndDate = new Date(reportData.endDate);
            $periodCtrl.text("- (" + dateBasedOnTimeZone(dtStartDate) + "   to  " + dateBasedOnTimeZone(dtEndDate) + ")");
            var dateDifference = parseInt((dtEndDate - dtStartDate) / (1000 * 60 * 60 * 24));
            if (dateDifference <= 30)
                format = 0;
            else if (dateDifference > 30 && dateDifference <= 364)
                format = 2;
            else if (dateDifference > 364)
                format = 4;
            break;

        default:
    }
    return format;
}

function setReportDateRangev5(reportData) {
    var today = new Date();
    var format = reportData.format;
    var newDate = new Date(today);
    var selectedRange = parseInt(reportData.selectedRange);
    switch (selectedRange) {
        case 224:
            format = 4;
            break;

        case 128:
            format = 0;
            break;

        case 176:
            newDate.setDate(newDate.getDate() - 29);
            format = 2;
            break;

        case 160:
            newDate.setDate(newDate.getDate() - 6);
            format = 1;
            break;

        case 240:
            newDate.setDate(newDate.getDate() - 89);
            format = 5;
            break;

        case 192:
            newDate.setDate(newDate.getDate() - 364);
            format = 3;
            break;

        case 208:
            var dtStartDate = new Date(reportData.startDate);
            var dtEndDate = new Date(reportData.endDate);
            format = 6;
            break;

        default:
    }
    return format;
}

function getReportDateRange(reportData) {
    var today = new Date();
    var daterange = "";
    var newDate = new Date(today);
    var selectedRange = parseInt(reportData.selectedRange);
    switch (selectedRange) {
        case 224:
            daterange="";
          
            break;

        case 128:
            daterange="- (" + shortDateWithoutTimeFromUTC(today) + "   to  " + shortDateWithoutTimeFromUTC(today) + ")";
          
            break;

        case 176:
            newDate.setDate(newDate.getDate() - 29);
            daterange="- (" + shortDateWithoutTimeFromUTC(newDate) + "   to  " + shortDateWithoutTimeFromUTC(today) + ")";
          
            break;

        case 160:
            newDate.setDate(newDate.getDate() - 6);
            daterange ="- (" + shortDateWithoutTimeFromUTC(newDate) + "   to  " + shortDateWithoutTimeFromUTC(today) + ")";
        
            break;

        case 240:
            newDate.setDate(newDate.getDate() - 89);
            daterange="- (" + shortDateWithoutTimeFromUTC(newDate) + "   to  " + shortDateWithoutTimeFromUTC(today) + ")";
           
            break;

        case 192:
            newDate.setDate(newDate.getDate() - 364);
            daterange="- (" + shortDateWithoutTimeFromUTC(newDate) + "   to  " + shortDateWithoutTimeFromUTC(today) + ")";
          
            break;

        case 208:
            var dtStartDate = new Date(reportData.startDate);
            var dtEndDate = new Date(reportData.endDate);
            daterange="- (" + dtStartDate.format(dateTimeFormat.shortdatepattern) + "   to  " + dtEndDate.format(dateTimeFormat.shortdatepattern) + ")";
         
            break;

        default:
    }
    return daterange;
}
function GetCarriageReturnData(desc) {
    return desc.replace(/(?:\r\n|\r|\n)/g, '<br>');
}

function getThumbnailHoverInfoForVideo(item) {
    var url = item.external_url != undefined ? item.external_url : '';
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var label = ['Name', 'Description'];//label array
    var value = [item.name, GetCarriageReturnData(desc)];//value array 
    var thumbnail = "https://partner-marketing.bitdefender.com/v4u/img/video-placeholder-new.png";
    if (item.thumburl400 != undefined && item.thumburl400 != "") {
        thumbnail = item.thumburl400;
    }
    else if (url != null) {
        if (item.thumbnail != undefined && item.thumbnail != "") {
            thumbnail = item.thumbnail;
        } else
            if (url.indexOf('youtube.com') > -1) {
                var uri = getVideoURL(url);
                if (uri.length > 0)
                    thumbnail = uri[0] + '//i2.ytimg.com/vi/' + uri[1] + '/hqdefault.jpg';
            }
            else if (url.indexOf('vidyard.com') > -1) {
                var uri = getVideoURL(url);
                if (uri.length > 0)
                    thumbnail = uri[0] + "//play.vidyard.com/" + uri[1] + ".jpg";
            }
            else if (url.indexOf('wistia.com') > -1) {
                thumbnail = url + ".jpg";
            }
            else if (url.indexOf('wistia.net') > -1) {
                $.ajax({
                    url: '//fast.wistia.net/oembed?url=' + url + "?embedType=async&videoWidth=640",
                    dataType: 'jsonp',
                    success: function (data) {
                        thumbnail = data.thumbnail_url != undefined ? data.thumbnail_url : "//partner-marketing.bitdefender.com/v4u/img/video-placeholder-new.png";
                    }
                });
            }
            else if (url.indexOf('videos.amp.vg') > -1) {
                thumbnail = url.replace('.flv', '.png');
                $element.attr('src', thumbnail);
            }
            else if (url.indexOf('vimeo.com') > -1) {
                id = url.split('/')[4];
                $.ajax({
                    url: 'https://vimeo.com/api/oembed.json?url=' + url,
                    dataType: 'jsonp',
                    success: function (data) {
                        thumbnail = data.thumbnail_url != undefined ? data.thumbnail_url : "//partner-marketing.bitdefender.com/v4u/img/video-placeholder-new.png";
                    }
                });
            }
    }
    var img = "<div class='popover-thumbnail' style='max-width:198px !important; max-height:196px !important; border-bottom:1px solid #dddddd;background-color:#ddd;text-align:center;line-height:195px;margin-bottom:0px;'><img src='" + thumbnail + "' style='max-height:196px; max-width:100%;' /></div>";
    var $strong = $("<strong>");
    $strong.append(img);
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs').css({ "max-width": "300px", "word-wrap": "break-word" }).text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}
//////enhancement 25887
function getThumbnailHoverInfo(item) {
    var desc = item.description;
    if (desc == null || desc == undefined || desc == "")
        desc = 'NA';
    if (desc.length > 500)
        desc = desc.substring(0, 500) + '...';
    var label = ['Name', 'Description'];//label array
    var value = [item.name, GetCarriageReturnData(desc)];//value array 
    var thumbnail = item.thumbnail400 == undefined ? item.thumbnail_400 : item.thumbnail400;
    if ((item.templatetype == parseInt('16777216') || item.templatetype == parseInt('536870912')) && (thumbnail.indexOf("no-image.jpg") > -1 || thumbnail.indexOf("thumbnail_400.jpeg") > -1))
        thumbnail = `https://partner-marketing.bitdefender.com/v4u/img/placeholder/img.svg`
    if (item.filetype == "VIDEO" || item.filetype == "MP4")
        var img = "<div class='popover-thumbnail' style='max-width:198px !important; max-height:196px !important; border-bottom:1px solid #dddddd;background-color:#ddd;text-align:center;line-height:195px;margin-bottom:0px;'><img src='" + item.thumburl400 + "' style='max-height:196px; max-width:100%;' /></div>";
    else
        var img = "<div class='popover-thumbnail' style='max-width:198px !important; max-height:196px !important; border-bottom:1px solid #dddddd;background-color:#ddd;text-align:center;line-height:195px;margin-bottom:0px;'><img src='" + thumbnail + "' style='max-height:196px; max-width:100%;' /></div>";
    var $strong = $("<strong>");
    $strong.append(img);
    for (var i = 0; i < label.length; i++) {
        var $span = $('<strong>').addClass('font-sm').text(label[i] + ':');
        var $div = $('<div>').addClass('font-xs').css({ "max-width": "300px", "word-wrap": "break-word" }).text(value[i]);
        $strong.append($span);
        $strong.append($div);
    }
    return $strong.html();
}

function getPopUPDealInfo(updatedfilelink) {
    $mainDiv = $("<div class='popover-content'>")
    $popContentDiv = $("<div class='with-url'>").text(updatedfilelink);

    $mainDiv.append($popContentDiv);
    return $mainDiv.html();
}

function PushContactsToCRM(xobni, isPTCactive, action) {
    event.preventDefault();
    var that = xobni;
    var ids = that.dom.tablewrap.find("input[type='checkbox']:checked:not('.all')").map(function () {
        return parseInt($(this).parents("tr").data("recordid"));
    }).get();
    if (ids.length > 0) {
        if (action == "Pushtocrm") {
            api.call('GetIntegratedUser', { "ids": ids, "isMultipleContact": true }, function (result) {
                if (result.result.result == false) {
                    $.OpenSmartMessageBox2({ title: "", content: 'Need to share contact with CRM Integrator ' + '(' + result.result.integratedUser + ')' + ' to ' + 'Push To CRM. Please contact administrator', buttons: '[Ok]' },
                        function (result) {
                            if (result === 'Ok') {
                                $.CloseSmartMessageBox2();
                            }
                        });
                }
                else {
                    if (result.result.isContactShared == false) {
                        $.OpenSmartMessageBox2({ title: "", content: 'Need to share contact with CRM Integrator ' + '(' + result.result.integratedUser + ')' + ' to ' + 'Push To CRM', buttons: '[Ok]' },
                            function (result) {
                                if (result === 'Ok') {
                                    $.CloseSmartMessageBox2();
                                }
                            });
                    }
                    else {
                        api.call('PushMultipleContactsToCRM', { "ids": ids, "isptcactive": isPTCactive }, function (r) {
                            if (r.result == true) {
                                $.smallBox({
                                    iconSmall: "fa fa-check fa-lg bounce animated",
                                    title: 'Contacts Successfully synced with CRM',
                                    content: "",
                                    color: "#659265",
                                    timeout: 5000
                                });
                            }
                            else {
                                $.smallBox({
                                    iconSmall: "fa fa-times fa-lg bounce animated",
                                    title: 'No Contacts synced with CRM',
                                    content: "",
                                    color: "#c26565",
                                    timeout: 5000
                                });
                            }
                        });
                    }
                }

                });
          
        }
    }
};

/* twilio function */
function ShowTwilioPopup(r) {
    var $smallBox = $('#divSmallBoxes div');
    if ($smallBox.length == 0) {
        $.smallBox({
            title: r.title,
            content: r.content,
            color: "#659265",
            iconSmall: "fa fa-phone-alt disconnect"
        });
    }
    else {
        $smallBox.find('span').html(r.title);
        $smallBox.find('p').html(r.content);
    }
    if (r.content == 'Call record is saved' || r.title == 'Twilio device error : ' || r.content == 'Call ended')
        $smallBox.trigger("click");
    $('#divSmallBoxes .disconnect').css({ "color": "red" }).off('click').on('click', function () { callDisconnect(r); });
};

function callDisconnect(r) {
    Twilio.Device.disconnectAll();  //Disconnects the current Twilio Call..
    $.smallBox({
        title: r.title,
        content: 'Call Disconnected',
        color: "#659265",
        iconSmall: "fa fa-check fa-2x fadeInRight animated",
        timeout: 2000
    });
};

function callSaved(r) {
    Twilio.Device.disconnectAll();
    $.smallBox({
        title: r.title,
        content: 'Call record is saved',
        color: "#659265",
        iconSmall: "fa fa-check fa-2x fadeInRight animated",
        timeout: 2000
    });
};

function CallFromIframe(contactId, numberType, twilioSource, callScript) {
    var w = 600;
    var h = 500;
    var left = (screen.width - w) / 2;
    var top = (screen.height - h) / 4;
    var callURL = hostPath + '/?clean#twiliocalling/' + contactId + '/' + numberType + '/' + twilioSource;
    if (callScript)
        callURL += "?callscript=true";
    window.open(callURL, '', 'left=' + left + ',top=' + top + ',width=' + w + ',height=' + h);
}

function TwilioCall(multipleCall, xobni, requestId, IsTelnyxEnabled) {
    //for twillio calling.
    var contactData = null;
    var contactId = 0;
    var userData = null;
    var contactFullName = '';
    //var isSingle = false;
    var callTo = '';

   // multipleCall.hasClass("singleNumber") ? isSingle = true : isSingle = false;
    var index = multipleCall.attr("data-action-item");
    if (index != undefined) {
        if (!activeTwilioCall) {
            activeTwilioCall = true;

       // if (!isSingle) {
            callTo = multipleCall.attr("data-number");
       // }
        contactData = xobni.data[index];
        contactFullName = contactData.fullname;
        contactId = contactData.id;
            contact = contactData;
        if (window.self !== window.top) {// to check if call is made from Iframe, if yes then load in an new small window to have micrphone access in that window
            var numberType = multipleCall.attr("data-number-type");
            CallFromIframe(contactId, numberType, "2"); 
        }
        else {
            if (!IsTelnyxEnabled) { 
               api.call("GetTwilioAccesibilityToken", { id: contactId }, function (r) {
            var twillioCallResult = r.result;
            if (!twillioCallResult.calldisabledisposition) {
                //if (isSingle)
                //    callTo = twillioCallResult.number;
                modal.makeCall(twillioCallResult, contactId, contactFullName, callTo);
            }
            else if (r.result.calldisabledisposition) {
                activeTwilioCall = false;
                $.OpenSmartMessageBox2({ title: 'Calling disabled', content: 'Calling has been disabled for the disposition value set for the selected contact', buttons: '[Ok]' },
                    function (result) {
                        if (result === 'Ok') {
                            $.CloseSmartMessageBox2();
                            return;
                        }
                    });
                return;
            }
        });
            } else { 
               api.call("GetTelnyxAccesibilityToken", { id: contactId }, function (r) {
                if (r.result.success == true) {
                    if (!r.result.calldisabledisposition && r.result.token.length > 0) {
                        var tokenNo = r.result.token;
                        var userData = $.parseJSON(r.result.userData);
                        var telnyxCallID = userData.id;
                        var disconnectobject = { "title": "Calling... " + contactFullName, "content": "Call Disconnected" };
                        callTo = telnyx.validateNumber(callTo);
                        api.call("GetAndSaveTelnyxTempCallRecord", { id: contactId, callID: userData.id, source: 1, tonumber: callTo }, function (res) {
                            if (res.result === true) {
                                telnyx.callConnect(r.result.accesstoken, r.result.refreshtoken, r.result.fromNumber, callTo, contact, "playbookcall", function () { var a = 0; }, function () {
                                    if (typeof (callSid) != "undefined" && callSid != null) {
                                        api.call("GetAndSaveTelnyxCallRecord", { callSid: callSid, id: contact.contactid, callID: userData.id, date: userData.createdon}, function (r) {
                                                activeTwilioCall = false;
                                                callSid = "";
                                            });
  
                                    }
                                });
                            }
                        });
                    }
                    else if (r.result.calldisabledisposition) {
                        activeTwilioCall = false;
                        $.OpenSmartMessageBox2({ title: 'Calling disabled', content: 'Calling has been disabled for the disposition value set for the selected contact', buttons: '[Ok]' },
                            function (result) {
                                if (result === 'Ok') {
                                    $.CloseSmartMessageBox2();
                                    return;
                                }
                            });
                        return;
                    }
                }
                
        });
            }
        requestId.find(".multipleNumber").removeClass("open");
            }
    }
    else {
        requestId.find(".inbox-sort").removeClass("open");
        }
    }
};

function TwilioMultipleCall(multiplecall, xobni, requestId) {
    multiplecall.parent().css("overflow", "hidden");
    if (multiplecall.hasClass("open")) {
        multiplecall.removeClass("open");
        return;
    }
    requestId.find(".multipleNumber").removeClass("open");
    var index = multiplecall.attr("data-action-item");
    var contact = xobni.data[index];
    var numberList = "";
    if (contact.homenumber != "" && contact.homenumber != undefined) {
        numberList += '<li data-action-item="' + index + '" data-number="' + contact.homenumber + '" data-number-type="1" number-type="home"> <a >{$ajax_persona_ngkf_channelpartner.HomeText}: ' + contact.homenumber + '</a></li>';
    }
    if (contact.mobilenumber != "" && contact.mobilenumber != undefined) {
        numberList += '<li data-action-item="' + index + '" data-number=' + contact.mobilenumber + '" data-number-type="2" number-type="mobile"><a >Mobile: ' + contact.mobilenumber + '</a ></li>';
    }
    if (contact.worknumber != "" && contact.worknumber != undefined) {
        numberList += '<li data-action-item="' + index + '" data-number="' + contact.worknumber + '" data-number-type="3" number-type="work"><a >Work: ' + contact.worknumber + '</a ></li>';
    }
    if (contact.alternatenumber != "" && contact.alternatenumber != undefined) {
        numberList += '<li data-action-item="' + index + '" data-number="' + contact.alternatenumber + '" data-number-type="5" number-type="alternate"><a >Alternate: ' + contact.alternatenumber + '</a ></li>';
    }
    if (contact.directnumber != "" && contact.directnumber != undefined) {
        numberList += '<li data-action-item="' + index + '" data-number="' + contact.directnumber + '" data-number-type="4" number-type="direct"><a >Direct: ' + contact.directnumber + '</a ></li>';
    }
    multiplecall.find("ul.dropdown-menu").html(numberList);
    multiplecall.addClass("open");
    multiplecall.parent().css("overflow", "visible");
};

function isDriveFile(externalUrl) {
    return (externalUrl != undefined && externalUrl.indexOf('googledrive') > -1);
}

function isGoogleDriveUrl(url) {
    return url.indexOf("drive.google.com") <= -1;
}
function hashCode(str) { // java String#hashCode
    var hash = 0;
    for (var i = 0; i < str.length; i++) {
        hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }
    return hash;
}
function loadTemplateFromJS(options) {    
    $.extend({
        parse: true
    }, options);
    $.get(options.templateUrl, options.inputData, function (data, status, xhr) {
        if (status == "success") {
            var myTemplate = data;
            var versionno = 1;//default version
            if (options.versionno != undefined)
                versionno = options.versionno;
            var $versionTemplate = $(myTemplate).find("div[data-template-version='" + versionno + "']");
            if ($versionTemplate.length > 0)
                myTemplate = $versionTemplate.html();
            var obj = document.createElement("script");
            obj.id = options.templateJSId; // set an ID to the template in order to manipulate it
            obj.language = "javascript";
            obj.type = 'text/x-dot-template';
            obj.defer = true;
            obj.text = myTemplate;
            
            var $containerID = $("#" + options.containerId);
            widgetname = $containerID.parent().attr("data-widget");
            var widgetData = {};
            widgetData.query = $containerID.parent().attr("data-query");
            widgetData.widgetName = $containerID.parent().attr("data-widget");
            $containerID.parent().append(obj);            
            if (options.parse != undefined) {
                if (options.parse)
                    tmpl.parse($containerID, options.templateJSId, options.templateData, options.callbackfun);
                else
                    options.callbackfun();
            } else {
                tmpl.parse($containerID, options.templateJSId, options.templateData, options.callbackfun);
            }

            persona.hideinfoicon(widgetData);
        }
    }, "text")
}
function getForeGroundColorArray(widgetConfigJson) {
    var result = [];
    if (widgetConfigJson["color_4"] != "" && widgetConfigJson["color_4"] != undefined)
        result.push(widgetConfigJson["color_4"]);
    if (widgetConfigJson["color_5"] != "" && widgetConfigJson["color_5"] != undefined)
        result.push(widgetConfigJson["color_5"]);
    if (widgetConfigJson["color_6"] != "" && widgetConfigJson["color_6"] != undefined)
        result.push(widgetConfigJson["color_6"]);
    return result;
}

function getColorArray(widgetConfigJson) {
    var result = [];
    if (widgetConfigJson["color_1"] != "" && widgetConfigJson["color_1"] != undefined)
        result.push(widgetConfigJson["color_1"]);
    if (widgetConfigJson["color_2"] != "" && widgetConfigJson["color_2"] != undefined)
        result.push(widgetConfigJson["color_2"]);
    if (widgetConfigJson["color_3"] != "" && widgetConfigJson["color_3"] != undefined)
        result.push(widgetConfigJson["color_3"]);
    return result;
}

function applyWidgetSetting(widgetConfigJson, widgetObj, userCurrentLang) {
    var colorArray = getColorArray(widgetConfigJson);
    var foreGroundColorArray = getForeGroundColorArray(widgetConfigJson);
    if ((widgetObj.documentHeader != "" || widgetObj.documentHeader != undefined)) {

        if (widgetConfigJson["default_title"] != "") {
            $(widgetObj.documentHeader).text(widgetConfigJson["default_title"]);
            $(widgetObj.documentHeader).attr("data-original-title" ,widgetConfigJson["default_title"]);
            $(widgetObj.documentHeader).attr("rel", "tooltip");
            $(widgetObj.documentHeader).attr("data-html", "true");
        }
        if (widgetConfigJson["title_font_size"] != "") {
            $(widgetObj.documentHeader).css("font-size", widgetConfigJson["title_font_size"] + "px");
        }

        if (widgetConfigJson["title_font_weight"] != "") {
            $(widgetObj.documentHeader).css("font-weight", widgetConfigJson["title_font_weight"]);
        }

        if (widgetConfigJson["title_font_style"] != "") {
            $(widgetObj.documentHeader).css("font-style", widgetConfigJson["title_font_style"]);
        }

        if (widgetConfigJson["title_text_align"] != "") {
            $(widgetObj.documentHeader).parent().css("text-align", widgetConfigJson["title_text_align"]);
        }

        if (widgetConfigJson["title_text_transform"] != "") {
            $(widgetObj.documentHeader).css("text-transform", widgetConfigJson["title_text_transform"]);
        }

        if (widgetConfigJson["title_line_height"] != "") {
            $(widgetObj.documentHeader).css("line-height", widgetConfigJson["title_line_height"]);
        }

        if (widgetConfigJson["title_font_color"] != "") {
            $(widgetObj.documentHeader).css("color", widgetConfigJson["title_font_color"]);
        }

        if (widgetConfigJson["hover_title_font_color"] != "") {
            $(widgetObj.documentHeader).hover(
                function () {
                    $(this).css('color', widgetConfigJson["hover_title_font_color"]);
                },
                function () {
                    // Mouse leave: remove hover styles
                    $(this).css('color', widgetConfigJson["title_font_color"]); // Reset to default
                }
            );
        }
    }


    if ((widgetObj.documentBody != undefined || widgetObj.documentBody != "") && widgetConfigJson["widget_bg_color"] != undefined && widgetConfigJson["widget_bg_color"] != "") {
        $(widgetObj.documentBody).css("background", widgetConfigJson["widget_bg_color"]);
    } else if ((widgetObj.documentBody != undefined || widgetObj.documentBody != "") && widgetConfigJson["widget_bg_image_pos_x"] != "" && colorArray.length > 1) {
        if (widgetConfigJson["widget_bg_image_pos_x"] == "TOP TO BOTTOM")
            $(widgetObj.documentBody).css("background-image", "linear-gradient(" + colorArray.join(", ") + ")");
        else if (widgetConfigJson["widget_bg_image_pos_x"] == "LEFT TO RIGHT")
            $(widgetObj.documentBody).css("background-image", "linear-gradient(to right, " + colorArray.join(", ") + ")");
        else if (widgetConfigJson["widget_bg_image_pos_x"] == "RIGHT BOTTOM TO LEFT TOP")
            $(widgetObj.documentBody).css("background-image", "linear-gradient(to left top, " + colorArray.join(", ") + ")");
        else if (widgetConfigJson["widget_bg_image_pos_x"] == "LEFT BOTTOM RIGHT TOP")
            $(widgetObj.documentBody).css("background-image", "linear-gradient(to right top, " + colorArray.join(", ") + ")");
        else if ((widgetObj.documentBody != undefined || widgetObj.documentBody != "") && widgetConfigJson["widget_bg_image"] != undefined && widgetConfigJson["widget_bg_image"] != "") {
            $(widgetObj.documentBody).css("background-image", "url(" + widgetConfigJson["widget_bg_image"] + ")");
        }
    } else if ((widgetObj.documentBody != undefined || widgetObj.documentBody != "") && widgetConfigJson["widget_bg_image"] != undefined && widgetConfigJson["widget_bg_image"] != "") {
        $(widgetObj.documentBody).css("background-image", "url(" + widgetConfigJson["widget_bg_image"] + ")");
    }
    if ((widgetObj.documentBody != undefined || widgetObj.documentBody != "") && widgetConfigJson["widget_bg_image"] != undefined && widgetConfigJson["widget_bg_image"] != "") {
        $(widgetObj.documentBody).css("background-image", "url(" + widgetConfigJson["widget_bg_image"] + ")");
    }
    if (widgetConfigJson["widget_bg_image"] != undefined && widgetConfigJson["widget_bg_image"] != "") {
        if (widgetConfigJson["widget_bg_image_size"] != undefined && widgetConfigJson["widget_bg_image_size"] != "") {
            $(widgetObj.documentBody).css("background-size", widgetConfigJson["widget_bg_image_size"]);
        }
        if (widgetConfigJson["widget_bg_image_repeat"] != undefined && widgetConfigJson["widget_bg_image_repeat"] != "") {
            $(widgetObj.documentBody).css("background-repeat", widgetConfigJson["widget_bg_image_repeat"]);
        }
        if (widgetConfigJson["widget_bg_image_position_x"] != "in px" && widgetConfigJson["widget_bg_image_position_x"] != "in percent" && widgetConfigJson["widget_bg_image_position_x"] != undefined) {
            $(widgetObj.documentBody).css("background-position-x", widgetConfigJson["widget_bg_image_position_x"]);
        }
        else if (widgetConfigJson["widget_bg_image_position_x"] == "in px" && widgetConfigJson["widget_bg_image_position_x_val"] != "" && widgetConfigJson["widget_bg_image_position_x"] != undefined)
            $(widgetObj.documentBody).css("background-position-x", widgetConfigJson["widget_bg_image_position_x_val"] + "px");
        else if (widgetConfigJson["widget_bg_image_position_x"] == "in percent" && widgetConfigJson["widget_bg_image_position_x_val"] != "" && widgetConfigJson["widget_bg_image_position_x"] != undefined)
            $(widgetObj.documentBody).css("background-position-x", widgetConfigJson["widget_bg_image_position_x_val"] + "%");

        if (widgetConfigJson["widget_bg_image_position_y"] != "in px" && widgetConfigJson["widget_bg_image_position_y"] != "in percent" && widgetConfigJson["widget_bg_image_position_y"] != undefined) {
            $(widgetObj.documentBody).css("background-position-y", widgetConfigJson["widget_bg_image_position_y"]);
        }
        else if (widgetConfigJson["widget_bg_image_position_y"] == "in px" && widgetConfigJson["widget_bg_image_position_y_val"] != "" && widgetConfigJson["widget_bg_image_position_y"] != undefined)
            $(widgetObj.documentBody).css("background-position-y", widgetConfigJson["widget_bg_image_position_y_val"] + "px");
        else if (widgetConfigJson["widget_bg_image_position_y"] == "in percent" && widgetConfigJson["widget_bg_image_position_y_val"] != "" && widgetConfigJson["widget_bg_image_position_y"] != undefined)
            $(widgetObj.documentBody).css("background-position-y", widgetConfigJson["widget_bg_image_position_y_val"] + "%");

        if (widgetConfigJson["widget_bg_image_position_y"] != "in px" && widgetConfigJson["widget_bg_image_position_y"] != "in percent" && widgetConfigJson["widget_bg_image_position_y"] != undefined) {
            $(widgetObj.documentBody).css("background-position-y", widgetConfigJson["widget_bg_image_position_y"]);
        }
        else if (widgetConfigJson["widget_bg_image_position_y"] == "in px" && widgetConfigJson["widget_bg_image_position_y_val"] != "" && widgetConfigJson["widget_bg_image_position_y"] != undefined)
            $(widgetObj.documentBody).css("background-position-y", widgetConfigJson["widget_bg_image_position_y_val"] + "px");
        else if (widgetConfigJson["widget_bg_image_position_y"] == "in percent" && widgetConfigJson["widget_bg_image_position_y_val"] != "" && widgetConfigJson["widget_bg_image_position_y"] != undefined)
            $(widgetObj.documentBody).css("background-position-y", widgetConfigJson["widget_bg_image_position_y_val"] + "%");
    }
    if ((widgetObj.documentForeground != "" || widgetObj.documentForeground != undefined) && widgetConfigJson["widget_fg_color"] != "" && widgetConfigJson["widget_fg_color"] != undefined) {
        $(widgetObj.documentForeground).css("background", widgetConfigJson["widget_fg_color"]);

    } else if ((widgetObj.documentForeground != undefined || widgetObj.documentForeground != "") && widgetConfigJson["widget_fg_image_pos_x"] != "" && foreGroundColorArray.length > 1) {
        if (widgetConfigJson["widget_fg_image_pos_x"] == "TOP TO BOTTOM")
            $(widgetObj.documentForeground).css("background-image", "linear-gradient(" + foreGroundColorArray.join(", ") + ")");
        else if (widgetConfigJson["widget_fg_image_pos_x"] == "LEFT TO RIGHT")
            $(widgetObj.documentForeground).css("background-image", "linear-gradient(to right, " + foreGroundColorArray.join(", ") + ")");
        else if (widgetConfigJson["widget_fg_image_pos_x"] == "RIGHT BOTTOM TO LEFT TOP")
            $(widgetObj.documentForeground).css("background-image", "linear-gradient(to left top , " + foreGroundColorArray.join(", ") + ")");
        else if (widgetConfigJson["widget_fg_image_pos_x"] == "LEFT BOTTOM RIGHT TOP")
            $(widgetObj.documentForeground).css("background-image", "linear-gradient(to right top, " + foreGroundColorArray.join(", ") + ")");
        else if ((widgetObj.documentForeground != "" || widgetObj.documentForeground != undefined) && widgetConfigJson["widget_fg_image"] != undefined && widgetConfigJson["widget_fg_image"] != "") {
            $(widgetObj.documentForeground).css("background-image", "url(" + widgetConfigJson["widget_fg_image"] + ")");
        }
    }
    if ((widgetObj.documentForeground != undefined || widgetObj.documentForeground != "") && widgetConfigJson["widget_fg_image"] != undefined && widgetConfigJson["widget_fg_image"] != "") {
        $(widgetObj.documentForeground).css("background-image", "url(" + widgetConfigJson["widget_fg_image"] + ")");
    }
    if (widgetConfigJson["widget_fg_image"] != undefined && widgetConfigJson["widget_fg_image"] != "") {
        if (widgetConfigJson["widget_fg_image_size"] != undefined && widgetConfigJson["widget_fg_image_size"] != "")
            $(widgetObj.documentForeground).css("background-size", widgetConfigJson["widget_fg_image_size"]);
        if (widgetConfigJson["widget_fg_image_repeat"] != undefined && widgetConfigJson["widget_fg_image_repeat"] != "")
            $(widgetObj.documentForeground).css("background-repeat", widgetConfigJson["widget_fg_image_repeat"]);
        if (widgetConfigJson["widget_fg_image_position_x"] != "in px" && widgetConfigJson["widget_fg_image_position_x"] != "in percent" && widgetConfigJson["widget_fg_image_position_x"] != undefined) {
            $(widgetObj.documentForeground).css("background-position-x", widgetConfigJson["widget_fg_image_position_x"]);
        }
        else if (widgetConfigJson["widget_fg_image_position_x"] == "in px" && widgetConfigJson["widget_fg_image_position_x_val"] != "" && widgetConfigJson["widget_fg_image_position_x"] != undefined)
            $(widgetObj.documentForeground).css("background-position-x", widgetConfigJson["widget_fg_image_position_x_val"] + "px");
        else if (widgetConfigJson["widget_fg_image_position_x"] == "in percent" && widgetConfigJson["widget_fg_image_position_x_val"] != "" && widgetConfigJson["widget_fg_image_position_x"] != undefined)
            $(widgetObj.documentForeground).css("background-position-x", widgetConfigJson["widget_fg_image_position_x_val"] + "%");

        if (widgetConfigJson["widget_fg_image_position_y"] != "in px" && widgetConfigJson["widget_fg_image_position_y"] != "in percent" && widgetConfigJson["widget_fg_image_position_y"] != undefined) {
            $(widgetObj.documentForeground).css("background-position-y", widgetConfigJson["widget_fg_image_position_y"]);
        }
        else if (widgetConfigJson["widget_fg_image_position_y"] == "in px" && widgetConfigJson["widget_fg_image_position_y_val"] != "" && widgetConfigJson["widget_fg_image_position_y"] != undefined)
            $(widgetObj.documentForeground).css("background-position-y", widgetConfigJson["widget_fg_image_position_y_val"] + "px");
        else if (widgetConfigJson["widget_fg_image_position_y"] == "in percent" && widgetConfigJson["widget_fg_image_position_y_val"] != "" && widgetConfigJson["widget_fg_image_position_y"] != undefined)
            $(widgetObj.documentForeground).css("background-position-y", widgetConfigJson["widget_fg_image_position_y_val"] + "%");
    }
    if ((widgetObj.height != undefined || widgetObj.height != "") && widgetConfigJson["height"] != undefined && widgetConfigJson["height"] != "") {
        var styles = $(widgetObj.height).attr("style");
        if (styles != undefined && styles != "")
            $(widgetObj.height).attr("style", styles + ";min-height:" + widgetConfigJson["height"] + "px !important");
        else
            $(widgetObj.height).attr("style","min-height:" + widgetConfigJson["height"] + "px !important");
    }

    if ((widgetObj.infoMessage != undefined || widgetObj.infoMessage != "") && widgetConfigJson["info_message"] != undefined && widgetConfigJson["info_message"] != "") {
        $(widgetObj.infoMessage).attr("data-content", widgetConfigJson["info_message"]);
        $(widgetObj.infoMessage).show();
    }
    if (languageObject.entries.length > 0) {
        $(languageObject.entries).each(function (index) {
            var flag;
            if (this.flag != undefined && this.flag != "") {
                flag = this.flag.toLowerCase();
                if (flag == userCurrentLang) {
                    if ((widgetObj.documentHeader != "" || widgetObj.documentHeader != undefined) && widgetConfigJson[flag] != "") {
                        $(widgetObj.documentHeader).text(widgetConfigJson[flag]);
                        $(widgetObj.documentHeader).attr("data-original-title", widgetConfigJson[flag]);
                        $(widgetObj.documentHeader).attr("rel", "tooltip");
                        $(widgetObj.documentHeader).attr("data-html", "true");
                    }
                    if ((widgetObj.infoMessage != undefined || widgetObj.infoMessage != "") && widgetConfigJson["info-" + flag] != "") {
                        $(widgetObj.infoMessage).attr("data-content", widgetConfigJson["info-" + flag]);
                        $(widgetObj.infoMessage).show();
                    }
                }
            }
        });
    }



}

function applyIconWeight(classValue, uniqueSelector) {
    var fontWeight = 900;
    if (classValue.includes('fas')) {
        fontWeight =  900;
    } else if (classValue.includes('fal')) {
        fontWeight = 300;
    } else if (classValue.includes('far')) {
        fontWeight = 400;
    } else if (classValue.includes('fa') && !classValue.includes('fab') && !classValue.includes('fal') && !classValue.includes('far') && !classValue.includes('fad')) {
        fontWeight = 900;
    } else if (classValue.includes('fad')) {
        fontWeight =  900;
    } else {
        fontWeight = 900;
    }
    $(uniqueSelector).css("font-weight", fontWeight);
}

function applyIconWeight(classValue, uniqueSelector) {
    var fontWeight = 900;
    if (classValue.includes('fas')) {
        fontWeight =  900;
    } else if (classValue.includes('fal')) {
        fontWeight = 300;
    } else if (classValue.includes('far')) {
        fontWeight = 400;
    } else if (classValue.includes('fa') && !classValue.includes('fab') && !classValue.includes('fal') && !classValue.includes('far') && !classValue.includes('fad')) {
        fontWeight = 900;
    } else if (classValue.includes('fad')) {
        fontWeight =  900;
    } else {
        fontWeight = 900;
    }
    $(uniqueSelector).css("font-weight", fontWeight);
}

function shortHourMinuteSecondFormat(totalSeconds) {
    if (isNaN(totalSeconds))
        totalSeconds = 0;
    hours = Math.floor(totalSeconds / 3600);
    totalSeconds %= 3600;
    hours = (hours < 10) ? "0" + hours : hours;
    return hours + ":" + shortMinuteSecondFormat(totalSeconds);
}


function GetDateRangeforReport(selectedRange, startDate, endDate) {

    var today = new Date();
    var newdate = new Date(today);
    switch (selectedRange) {
        case '224':
            return "";
            break;

        case '128':
            return "(" + shortDateWithoutTimeFromUTC(today) + "   to  " + shortDateWithoutTimeFromUTC(today) + ")";
            break;

        case '176':
            newdate.setDate(newdate.getDate() - 29);
            return "(" + shortDateWithoutTimeFromUTC(newdate) + "   to  " + shortDateWithoutTimeFromUTC(today) + ")";
            break;

        case '160':
            newdate.setDate(newdate.getDate() - 6);
            return "(" + shortDateWithoutTimeFromUTC(newdate) + "   to  " + shortDateWithoutTimeFromUTC(today) + ")";
            break;

        case '240':
            newdate.setDate(newdate.getDate() - 89);
            return "(" + shortDateWithoutTimeFromUTC(newdate) + "   to  " + shortDateWithoutTimeFromUTC(today) + ")";
            break;

        case '192':
            newdate.setDate(newdate.getDate() - 364);
            return "(" + shortDateWithoutTimeFromUTC(newdate) + "   to  " + shortDateWithoutTimeFromUTC(today) + ")";
            break;

        case '208':
            var dtStartDate = new Date(startDate);
            var dtEndDate = new Date(endDate);
            return "(" + dtStartDate.format(dateTimeFormat.shortdatepattern) + "   to  " + dtEndDate.format(dateTimeFormat.shortdatepattern) + ")";
            break;
    }
}

function isValidDate(dt) {
    var isValid = true;
    var newDate = new Date(dt);
    if (newDate.toString().toLowerCase() == "invalid date")
        isValid = false;
    return isValid;
}
function openThirdPartyUrlInModal(title, tptUrl, contentheight) {
    var isAnnouncementPopup = $('.announcement-pop-modal').css('display') !== 'none' && $('.announcement-pop-modal').css('display') != undefined;;
    if (isAnnouncementPopup) {
        window.open(tptUrl, '_blank');
    } 
    else {
        var views = [
            { icon: "envelope", name: title, url: "/widgets/thirdpartymodal?tpturl=" + escape(btoa((tptUrl))) + "&contentheight=" + contentheight }
        ];
        modal.show({ title: title, views: views });
    }
}

function openInternalUrlInModal(title, tptUrl, icon) {
    var views = [
        { icon: icon, name: title, url: tptUrl}
    ];
    modal.show({ title: title, views: views });
}
function alertMessage(SaveIFTData, title, content) {
    $.OpenSmartMessageBox2({ title: title, content: content, buttons: " [Cancel],[Ok]" },
        function (result) {
            if (result === 'Ok') {
                $.CloseSmartMessageBox2();
                SaveIFTData();
            } else {
                $("#wizardNext").attr('disabled', false);
                $.CloseSmartMessageBox2();
            }
        }
    );
}
function OpenPresetMsgBox(preset, fieldsUrl, exportDetails, title, result) {
    $.SmartMessageBox({
        title: title,
        content: 'Select from saved preset or go with custom',
        buttons: '[Cancel],[Go]',
        input: "select",
        options: preset
    }, function (ButtonPress, Value) {
        if (ButtonPress == 'Go') {
            var personalizationVal = $('#MsgBoxBack select[class=form-control]').val();
            if (personalizationVal != 'Custom') {
                var preset = $.grep(result, function (item) {
                    return item.name.trim() == personalizationVal
                })[0];
                OpenExportNotificationBox(preset);
            }
            else {
                modal.showExportFieldWizard(fieldsUrl, exportDetails.linktype, title);
            }
        }
    });
}
function OpenExportNotificationBox(preset) {
    var isEmailNotification = false;
    $.SmartMessageBox({
        title: 'Export Filename and Email Notification',
        content: 'Please enter export filename and confirm, do you want to send the notification email?',
        buttons: '[No] [Yes]',
        input: "text", placeholder: 'Enter the title here',
        inputValue: xobnidata.name != undefined ? xobnidata.name : "",
        selfClose: true
    }, function (ButtonPress, Value, settings) {
        settings.selfClose = true;
            if (ButtonPress == 'Yes') {
                isEmailNotification = true;                
            }
            var $txtTitle = $('#MsgBoxBack input[class=form-control]');
        if ($.trim($txtTitle.val()) != "" && $.trim($txtTitle.val()).length >= 2 && !isInValidTitle($txtTitle.val())) {
                xobnidata.name = $txtTitle.val();
                ExportForPreset(preset.fields, isEmailNotification);
            }
            else {
                $("#MsgBoxBack").find("#spnTitleRequired").remove();
                $("#MsgBoxBack").find("#spnNote").remove();
                $txtTitle.after("<span style='color:#b94a48; display: none;' id='spnTitleRequired'></span><span style ='color:#b94a48; display:none;' id = 'spnNote' ></span>");
                if (CheckExportTitleLength($txtTitle, $("#MsgBoxBack"))) {
                    event.preventDefault();
                    settings.selfClose = false;
                    return;
                }
            }
    });
}

function ExportForPreset(fields, isEmailNotification) {
    fields = JSON.parse(fields);
    var showFields = fields.gridfields;
    var dbFields = fields.dbfields;

    var apiData1 = { sort: xobnidata.sortcolumn, ascending: xobnidata.ascending, search: xobnidata.search, filters: xobnidata.filters, condition: false, folder: {}, format: 4 };
    var xapiData = xobnidata.apidata;
    if (xapiData != null) {
        $.extend(apiData1, xapiData);
    }
    xobnidata.apidata = apiData1;
    exportTitle = xobnidata.name;
    if (xobnidata.linktype == LinkTypeEnums.Contact) {
        var showAnon = $('.inbox-menu-lg .active').data('folder') == 0 ? true : false;
        xobnidata.showanon = showAnon;
        if (xobnidata.api != null && xobnidata.api.toLowerCase() == "getallcontactandanonymouscompanies" && xobnidata.linkids != "" && xobnidata.linkids.length > 0)
            xobnidata.issmartlist = true;
    }
    ExportLinkTypeWise(isEmailNotification, xobnidata.linktype, showFields, dbFields);    
}

function ExportLinkTypeWise(isEmailNotification, linkType, _gridFields, _dbFields) {
    var name = exportTitle;
    var sortColumn = xobnidata.sortcolumn;
    var ascending = xobnidata.ascending;
    var filters = xobnidata.filters;
    var searchText = xobnidata.search;
    var gridType = xobnidata.gridtype;
    var showAnon = xobnidata.showanon != undefined ? xobnidata.showanon : false;
    var isSmartList = xobnidata.issmartlist;
    var apiData = xobnidata.apidata;
    var apiName = xobnidata.api;
    var linkIds = xobnidata.linkids;
    var uniqueIds = xobnidata.uniqueids;
    exportTitle = "";
    var now = new Date();
    var offset = 0;
    offset -= now.getTimezoneOffset();
    var localTime = getDateTimeBasedOnTimeZone(now).format("mm/dd/yyyy h:MM:ss TT");

    var linkTypeText = "Contact";
    if (linkType == LinkTypeEnums.User)
        linkTypeText = "User";
    else if (linkType == LinkTypeEnums.Case)
        linkTypeText = "Case";
    else if (linkType == LinkTypeEnums.Account)
        linkTypeText = "Account";
    else if (linkType == LinkTypeEnums.Deals)
        linkTypeText = "Deals";
    else if (linkType == LinkTypeEnums.Organization || linkType == LinkTypeEnums.Deals || linkType == LinkTypeEnums.Account)
        linkTypeText = "";
    else if (linkType == LinkTypeEnums.Database)
        linkTypeText = "Database";

    if (gridType != undefined && gridType != "") {
        var apiData1 = { sort: sortColumn, ascending: ascending, search: searchText, filters: filters, condition: false, folder: {}, format: 4 };      
        exportreport(apiData1, name, _gridFields, _dbFields, apiData, apiName, linkIds, uniqueIds, linkTypeText, offset, localTime, showAnon, isSmartList, isEmailNotification, null, xobnidata.exportfiletype );
    }
    else {
        if (linkType == LinkTypeEnums.Contact) {
            api.call("ExportContacts", { name: name + "-" + localTime, listid: linkIds[0], showanon: showAnon, offset: offset, apiname: apiName, apidata: xobnidata.apidata, showfields: _dbFields, contactids: linkIds, isSmartlist: isSmartList, isemailnotification: isEmailNotification },
                function (data) {
                    xobnidata = null;
                    if (data.status == 0) {
                        $.smallBox({
                            title: "Export scheduled ",
                            content: (isEmailNotification == true ? "<i>" + exportLocalization.ExportSuccessMessage.replace("{0}", 'Contacts') + "</i>" : "<i>" + exportLocalization.ExportSuccessMessageNoNotification.replace("{0}", 'Contacts') + "</i>") + '<a target="_blank" onClick="ExportDownload(\'contacts\')" style="color: yellow" >Click Here to Visit Export Page</a>',
                            color: "#659265",
                            iconSmall: "fa fa-check fa-2x fadeInRight animated",
                            timeout: 4000
                        });
                        modal.closeall();
                    } else {
                        $.smallBox({
                            title: "Export error",
                            content: "<i class='fa fa-check'></i> <i>There was a problem exporting your contacts. \nPlease contact technical support.</i>",
                            color: "#b94a48",
                            iconSmall: "fa fa-times fa-2x fadeInRight animated",
                            timeout: 4000
                        });
                    }
                }, null, null);
        }
                else if (linkType ==LinkTypeEnums.User) {
            api.call("ExportUsers", { apiname: apiName, apidata: xobnidata.apidata, showfields: _dbFields, listid: linkIds, isSmartlist: isSmartList, offset: offset, time: localTime, name: name },
                function (r) {
                    xobnidata = null;
                    if (r.status == 0) {
                        $.smallBox({
                            title: "Export scheduled ",
                            content: (isEmailNotification == true ? "<i>" + exportLocalization.ExportSuccessMessage.replace("{0}", 'Users') + "</i>" : "<i>" + exportLocalization.ExportSuccessMessageNoNotification.replace("{0}", 'Users') + "</i>") + '<a target="_blank" onClick="ExportDownload(\'users\')" style="color: yellow" >Click Here to Visit Export Page</a>',
                            color: "#659265",
                            iconSmall: "fa fa-check fa-2x fadeInRight animated",
                            timeout: 4000
                        });
                    }
                });
        }
                else if (linkType ==LinkTypeEnums.Opportunity) {
            {
                api.call("ExportOpportunities", { name: name, checkedids: linkIds, apiname: apiName, apidata: xobnidata.apidata, showfields: _gridFields, dbfields: _dbFields, isemailnotification: isEmailNotification, exporttype: "Opportunity", localtime: localTime },
                    function (data) {
                        xobnidata = null;
                        if (data.status == 0) {
                            $.smallBox({
                                title: "Export scheduled ",
                                content: (isEmailNotification == true ? "<i>" + exportLocalization.ExportSuccessMessage.replace("{0}", 'Opportunities') + "</i>" : "<i>" + exportLocalization.ExportSuccessMessageNoNotification.replace("{0}", 'Opportunities') + "</i>") + '<a target="_blank" onClick="ExportDownload(\'opportunities\')" style="color: yellow" >Click Here to Visit Export Page</a>',
                                color: "#659265",
                                iconSmall: "fa fa-check fa-2x fadeInRight animated",
                                timeout: 4000
                            });
                            modal.closeall();
                        } else {
                            $.smallBox({
                                title: "Export error",
                                content: "<i class='fa fa-check'></i> <i>There was a problem exporting opportunities. \nPlease contact technical support</i>",
                                color: "#b94a48",
                                iconSmall: "fa fa-times fa-2x fadeInRight animated",
                                timeout: 4000
                            });
                        }
                    }, null, null);
            }
        }
    }
    if (_currentWizard != null) {
        events.savedContactList();
        _currentWizard.close();
    }
}

function applyCustomfieldTooltip(customField,fieldData, isGroupToolTip = false)
{
    for (var j = 0; j < customField.columns.length; j++) {
        var col = customField.columns[j];
        if (col.tooltipsetting != null) {            
            var toolTipSetting = JSON.parse(col.tooltipsetting);
            if (toolTipSetting.showtooltip && (!col.isfieldgroup || isGroupToolTip)) {
                fieldData[col.name]["showtooltip"] = true;
                fieldData[col.name]["tooltip"] = toolTipSetting.tooltiptext;
                fieldData[col.name]["tooltipicon"] = toolTipSetting.tooltipicon;
            }
            if (toolTipSetting.showtooltip && (col.isfieldgroup)) {
                fieldData[col.name] = customField.columns[j]
            }
            if (toolTipSetting.showtooltip && fieldData[col.name] != undefined) {
                fieldData[col.name]["showtooltip"] = true;
                fieldData[col.name]["tooltip"] = toolTipSetting.tooltiptext;
                fieldData[col.name]["tooltipicon"] = toolTipSetting.tooltipicon;
            }  
        }
    }
}


function loadXMLString(txt) {
    try {
        xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
        xmlDoc.async = "false";
        xmlDoc.loadXML(txt);
        return (xmlDoc);
    }
    catch (e) {
        try {
            parser = new DOMParser();
            xmlDoc = parser.parseFromString(txt, "text/xml");
            return (xmlDoc);
        }
        catch (e) {
            showAlert('Alert', e.message)
        }
    }
    return (null);
}

//Fixed #33153 - Playbook is broken if the playbook has special characters in it
function getPlaybookInfo(name, cdata) {
    if (typeof name != "undefined")
        name = unescape(name.trim());
    else
        name = cdata;//tab name in CDATA in new xml

    return name;
}

function getCurrencyAvailableForConversion(availableCurrencies, userCurrency, defaultCurrency) {
    var isUserCurrencyAvailable = availableCurrencies.indexOf(userCurrency) != -1;
    var conversion = true;
    if (!isUserCurrencyAvailable) {
        isUserCurrencyAvailable = availableCurrencies.indexOf(defaultCurrency) != -1;
        if (isUserCurrencyAvailable)
            userCurrency = defaultCurrency;
        else {
            userCurrency = availableCurrencies.length > 0 ? "USD" : "";
            conversion = false;
        }
    }
    var data = { "usercurrency": userCurrency, "conversion": conversion };
    return data;
}

function showRatingModal(ids, type) {
    $("#modalRatingV05def #comment").val(""); 
    $("#modalRatingV05def .rating-star-btn-holder").html('');
    $("#modalRatingV05def .rating-stats-cont").html('<i class="fa fa-xg fa-spinner fa-spin" style="color:#77889a"></i>').addClass("padding-20 text-center");
    var maxIndex = zIndexModalWizard.getHighestZIndex();
    $("#modalRatingV05def").css("z-index", maxIndex + zIndexModalWizard.increaseIndex);
    $("#modalRatingV05def").modal("show");
    api.call("GetFeedbackRatingGraphData", { itemids: ids, type: type }, function (data) {
        if (data.status == 0) {
            for (var r = 0; r < data.result.length; r++) {
                var ratecontent = "";
                for (var i = 1; i <= 5; i++) {
                    if (i <= data.result[r].starrating.rating) {
                        if (data.result[r].starrating.isuserrating)
                            ratecontent += "<i class='fa rating-star-yellow fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "' style='cursor:pointer;'>&nbsp;</i>";
                        else
                            ratecontent += "<i class='fa rating-star-blue fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "' style='cursor:pointer;'>&nbsp;</i>";
                    }
                    else
                        ratecontent += "<i class='fa fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "' style='cursor:pointer;'>&nbsp;</i>";
                }

                $(".rating-star-btn-holder").html(ratecontent);

                var ratecontent = "";
                ratecontent += '<div style="text-align:center;padding-bottom:5px;"> ' + data.result[r].totalrating + ' others ratings</div>';
                if (data.result[r].feedback != null) {
                    for (var i = 0; i < data.result[r].feedback.length; i++) {
                        ratecontent += "<div class='each-rating-level'><div class='rating-star-label'>" + data.result[r].feedback[i].name + " </div>";
                        ratecontent += "<div class='rating-proress-bar-holder'><div class='progress'><div class='progress-bar'style=width:" + data.result[r].feedback[i].percentage + "%></div></div></div>";
                        ratecontent += "<div style='text-align:left' class='rating-value-label'>" + data.result[r].feedback[i].total + "</div></div>";
                    }
                }
                $("#modalRatingV05def .rating-stats-cont").removeClass("padding-20");
                $(".rating-stats-cont").html(ratecontent);

                $(".rating-star-btn-holder .fa-star").click(function () {
                    var $this = $(this);
                    var itemId = $(this).attr('itemid');
                    var value = $(this).attr('value');

                    $this.prevAll().addBack().removeClass('fa-star').addClass('rating-star-yellow fa-star');
                    $this.nextAll().not('.fa-comments').removeClass('rating-star-yellow rating-star-blue fa-star').addClass('fa-star');

                    api.call("updaterating", { itemid: parseInt(itemId, 10), value: parseInt(value, 10), type: type }, function (r) {
                        if (r.result) {
                            $.smallBox({
                                iconSmall: "fa fa-check bounce animated",
                                title: 'Rating Updated',
                                content: 'Rating for asset updated successfully',
                                color: "#659265",
                                timeout: 3000
                            });
                        }
                    });
                })
                $("#modalRatingV05def .btn.btn-primary").unbind('click');
                $("#modalRatingV05def .btn.btn-primary").off().on("click",function (e) {
                    e.stopImmediatePropagation();
                    var comments = $("#modalRatingV05def #comment").val();
                    $("#modalRatingV05def").modal("hide");
                    if (comments != null && comments != "") {
                        api.call("UpdateComments", { itemid: parseInt(ids[0]), comment: comments, type: type }, function (r) {
                            if (r.result) {
                                $.smallBox({
                                    iconSmall: "fa fa-check bounce animated",
                                    title: 'Feedback Updated',
                                    content: 'Feedback for asset updated successfully',
                                    color: "#659265",
                                    timeout: 3000
                                });
                            }
                        });
                    }
                })
            }
        }
    });
}
function showSolutionRatingModal(solutiontypeid, ids) {
    $("#modalRatingV05def #comment").val("");
    $("#modalRatingV05def .rating-star-btn-holder").html('');
    $("#modalRatingV05def .rating-stats-cont").html('<i class="fa fa-xg fa-spinner fa-spin" style="color:#77889a"></i>').addClass("padding-20 text-center");
    var maxIndex = zIndexModalWizard.getHighestZIndex();
    $("#modalRatingV05def").css("z-index", maxIndex + zIndexModalWizard.increaseIndex);
    $("#modalRatingV05def").modal("show");
    api.call("GetSolutionRatingGraphData", {solutiontypeid: solutiontypeid, solutionids: ids }, function (data) {
        if (data.status == 0) {
            for (var r = 0; r < data.result.length; r++) {
                var ratecontent = "";
                for (var i = 1; i <= 5; i++) {
                    if (i <= data.result[r].starrating.rating) {
                        if (data.result[r].starrating.isuserrating)
                            ratecontent += "<i class='fa rating-star-yellow fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "' style='cursor:pointer;'>&nbsp;</i>";
                        else
                            ratecontent += "<i class='fa rating-star-blue fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "' style='cursor:pointer;'>&nbsp;</i>";
                    }
                    else
                        ratecontent += "<i class='fa fa-star' itemid='" + data.result[r].itemid + "' value='" + i + "' style='cursor:pointer;'>&nbsp;</i>";
                }

                $(".rating-star-btn-holder").html(ratecontent);

                var ratecontent = "";
                ratecontent += '<div style="text-align:center;padding-bottom:5px;"> ' + data.result[r].totalrating + ' total rating</div>';
                if (data.result[r].feedback != null) {
                    for (var i = 0; i < data.result[r].feedback.length; i++) {
                        ratecontent += "<div class='each-rating-level'><div class='rating-star-label'>" + data.result[r].feedback[i].name + " </div>";
                        ratecontent += "<div class='rating-proress-bar-holder'><div class='progress'><div class='progress-bar'style=width:" + data.result[r].feedback[i].percentage + "%></div></div></div>";
                        ratecontent += "<div style='text-align:left' class='rating-value-label'>" + data.result[r].feedback[i].total + "</div></div>";
                    }
                }
                $("#modalRatingV05def .rating-stats-cont").removeClass("padding-20");
                $(".rating-stats-cont").html(ratecontent);

                $(".rating-star-btn-holder .fa-star").click(function () {
                    var $this = $(this);
                    var itemId = $(this).attr('itemid');
                    var value = $(this).attr('value');
                    $this.prevAll().addBack().removeClass('fa-star').addClass('rating-star-yellow fa-star');
                    $this.nextAll().not('.fa-comments').removeClass('rating-star-yellow rating-star-blue fa-star').addClass('fa-star');

                    api.call("UpdateSolutionRating", { solutiontypeid: solutiontypeid[0], solutionid: parseInt(itemId, 10), value: parseInt(value, 10) }, function (r) {
                        if (r.result) { }
                    });
                })
                $("#modalRatingV05def .btn.btn-primary").unbind('click');
                $("#modalRatingV05def .btn.btn-primary").click(function (e) {
                    e.stopImmediatePropagation();
                    var comments = $("#modalRatingV05def #comment").val();
                    if (comments != null && comments != "") {
                        api.call("UpdateSolutionComments", { solutiontypeid: solutiontypeid[0], solutionid: ids[0], comment: comments}, function (r) {
                            if (r.result) {
                                $("#modalRatingV05def").modal("hide");
                            }
                        });
                    }
                    else
                        $("#modalRatingV05def").modal("hide");
                })
            }
        }
    });
}
function showProductRatingModal(producttypeid, ids) {
    $("#modalRatingV05def #comment").val("");
    $("#modalRatingV05def .rating-star-btn-holder").html('');
    $("#modalRatingV05def .rating-stats-cont").html('<i class="fa fa-xg fa-spinner fa-spin" style="color:#77889a"></i>').addClass("padding-20 text-center");
    var maxIndex = zIndexModalWizard.getHighestZIndex();
    $("#modalRatingV05def").css("z-index", maxIndex + zIndexModalWizard.increaseIndex);
    $("#modalRatingV05def").modal("show");
    api.call("GetProductRatingGraphData", { producttypeid: producttypeid, productids: ids }, function (data) {
        if (data.status == 0) {
            var ratingdata = data.result[0].ratingdata;
            for (var i = 0; i < ratingdata.length; i++) {
               if (ratingdata[i].avgrating == null)
                   ratingdata[i].avgrating = 0;
               var rating = ratingdata[i].userrating == null ? ratingdata[i].avgrating : ratingdata[i].userrating;
               var isuserrating = ratingdata[i].userrating == null ? false : true;
               var itemid = ratingdata[i].itemid;
               var stars = [ratingdata[i].rating5, ratingdata[i].rating4, ratingdata[i].rating3, ratingdata[i].rating2, ratingdata[i].rating1];
               var totalrating = ratingdata[i].rating1 + ratingdata[i].rating2 + ratingdata[i].rating3 + ratingdata[i].rating4 + ratingdata[i].rating5;
               var ratecontent = "";
               for (var i = 1; i <= 5; i++) {
                   if (i <= rating) {
                       if (isuserrating)
                           ratecontent += "<i class='fa rating-star-yellow fa-star' itemid='" + itemid + "' value='" + i + "' style='cursor:pointer;'>&nbsp;</i>";
                       else
                           ratecontent += "<i class='fa rating-star-blue fa-star' itemid='" + itemid + "' value='" + i + "' style='cursor:pointer;'>&nbsp;</i>";
                   }
                   else
                       ratecontent += "<i class='fa fa-star' itemid='" + itemid + "' value='" + i + "' style='cursor:pointer;'>&nbsp;</i>";
               }
               $(".rating-star-btn-holder").html(ratecontent);
                
               var ratecontent = "";
               ratecontent += '<div style="text-align:center;padding-bottom:5px;"> ' + totalrating + ' others ratings</div>';
               
               for (k = 0; k < 5; k++) {
                   ratecontent += "<div class='each-rating-level'><div class='rating-star-label'>" + (5 - parseInt(k)) + " star</div>";
                   var per = stars[k] == 0 ? 0 : ((parseFloat(stars[k]) / parseFloat(totalrating)) * 100).toFixed(0);
                   ratecontent += "<div class='rating-proress-bar-holder'><div class='progress'><div class='progress-bar'style=width:" + per + "%></div></div></div>";
                   ratecontent += "<div style='text-align:left' class='rating-value-label'>" + stars[k] + "</div></div>";
               }
                
                $("#modalRatingV05def .rating-stats-cont").removeClass("padding-20");
                $(".rating-stats-cont").html(ratecontent);
                $("#modalRatingV05def .rating-stats-cont").removeClass("padding-20");
                $(".rating-stats-cont").html(ratecontent);

                $(".rating-star-btn-holder .fa-star").click(function () {
                    var $this = $(this);
                    var itemId = $(this).attr('itemid');
                    var value = $(this).attr('value');
                    $this.prevAll().addBack().removeClass('fa-star').addClass('rating-star-yellow fa-star');
                    $this.nextAll().not('.fa-comments').removeClass('rating-star-yellow rating-star-blue fa-star').addClass('fa-star');
                    api.call("UpdateProductRating", { producttypeid: producttypeid, id: ids[0], value: parseInt(value, 10) }, function (r) {
                        if (r.result) { }
                    });
                })
                $("#modalRatingV05def .btn.btn-primary").unbind('click');
                $("#modalRatingV05def .btn.btn-primary").click(function (e) {
                    e.stopImmediatePropagation();
                    var comments = $("#modalRatingV05def #comment").val();
                    if (comments != null && comments != "") {
                        api.call("UpdateProductComments", { producttypeid: producttypeid, id: ids[0], comment: comments }, function (r) {
                            if (r.result) {
                                $("#modalRatingV05def").modal("hide");
                            }
                        });
                    }
                    else
                        $("#modalRatingV05def").modal("hide");
                })
            }
            
        }
    });
}
function ratingFunc(id,type) {
    var ids = [];
    ids.push(id);
    showRatingModal(ids, type);
    event.stopPropagation();    //  #50747
}
function CheckAdvance(query) {
    let holder = [];
    let openBrackets = ['(', '{', '[']
    let closedBrackets = [')', '}', ']']
    for (let letter of query) { // loop trought all letters of expr
        if (openBrackets.includes(letter)) { // if its oppening bracket
            holder.push(letter);
        } else if (closedBrackets.includes(letter)) { // if its closing
            let openPair = openBrackets[closedBrackets.indexOf(letter)] // find his pair
            if (holder[holder.length - 1] === openPair) { // check if that pair is last element in array
                holder.splice(-1, 1) //if so, remove it
            } else { // if its not
                holder.push(letter)
                return "1";
            }
        }
    }
    if (holder.length === 0) {
        return "0";
    }
    else {
        return "1";
    }
}

function getCustomModifiedDate(inputdate, dateformat) {
    var d = new Date(inputdate);
    var ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);
    var mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(d);
    var da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);
    var monthnumeric = new Intl.DateTimeFormat('en', { month: '2-digit' }).format(d);

    var currentDate = new Date();
    var currentye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(currentDate);
    var returndate = `${mo} ${da}`;
    if (ye != currentye)
        returndate = `${mo} ${da}, ${ye}`;
    if (dateformat == 'dd/MM/yyyy')
        returndate = ` ${da}/${monthnumeric}/${ye}`;
    return returndate;
}
function getCustomDate(inputdate, format) {
    var d = getDateTimeBasedOnTimeZone(inputdate);
    //var d = new Date(inputdate);
    var ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);
    var shortye = new Intl.DateTimeFormat('en', { year: '2-digit' }).format(d);
    var mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(d);
    var da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);
    var weekday = new Intl.DateTimeFormat('en', { weekday: 'short' }).format(d);

    if (format == "mm dd,yyyy")
        returndate = `${mo} ${da}, ${ye}`;
    else if (format=="mm dd,yy")
        returndate = `${mo} ${da}, ${shortye}`;
    else if (format == "dd")
        returndate = `${da}`;
    else if (format == "weekday")
        returndate = `${weekday}`;
    return returndate;
}
onPdfDownloadSuccess = function (arg) {
    if (arg.result.pdfdownload !== "") {
        let link = arg.result.pdfdownload;
        let uniqueId = `download-link-${Date.now()}`;
        let ahref = document.createElement('a');
        ahref.href = link;
        ahref.download = "";
        ahref.id = uniqueId;
        document.body.appendChild(ahref);
        ahref.click();
        document.getElementById(uniqueId).remove();
    }
}

onFailure = function () {
    alert('fail');
}

onPrintPdfDownloadSuccess = function (arg) {
    if (arg.result.previewUrl !== "") {
        var link = arg.result.previewUrl;
        var uniqueId = `download-link-${Date.now()}`;
        var ahref = document.createElement('a');
        ahref.href = link;
        ahref.download = "";  // Specify a file name if needed
        ahref.id = uniqueId;  // Set the unique ID
        document.body.appendChild(ahref);
        ahref.click();
        document.getElementById(uniqueId).remove();
    }
}


function getCustomModifiedDate(inputdate) {
    var d = new Date(inputdate);
    var ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);
    var mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(d);
    var da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);

    var currentDate = new Date();
    var currentye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(currentDate);
    var returndate = `${mo} ${da}`;
    if (ye != currentye)
        returndate = `${mo} ${da}, ${ye}`;
    return returndate;
}
function showpopOverHover() {
    $("[rel=popover-hover]").popover({
        trigger: "hover",
        sanitizeFn: function (content) {
            return DOMPurify.sanitize(content)
        }
    });
}
function showpopOver() {
    $("[rel=popover]").popover({
        sanitizeFn: function (content) {
            return DOMPurify.sanitize(content)
        }
    });
}
function escapeSpecialChars(str) {
    return str.replace(/'/g, "%27")
       .replace(/"/g, "%27%27")
       .replace(/`/g, "%60")
       .replace(/\\/g, "%5c")
       .replace(/\(/g, "%28")
       .replace(/\)/g, "%29")
       .replace(/>/g, "%3e")
        .replace(/</g, "%3c")
       .replace(/&gt;/,"%3e")
       .replace(/&lt;/, "%3c")
       .replace(/ /g, "%20")
       .replace(/&/g, "%26")
       .replace(/@/g, "%40")
        .replace(/#/g, "%23")
        .replace(/\$/g, "%24")
        .replace(/\//g, "%2f")
        .replace(/\^/g, "%5e")
        .replace(/\{/g, "%7b")
        .replace(/\}/g, "%7d")
        .replace(/\[/g, "%5b")
        .replace(/\]/g, "%5d")
        .replace(/\+/g, "%2b")
        .replace(/,/g, "%2c")
        .replace(/\./g, "%2e")
        .replace(/\?/g, "%3f")
        .replace(/;/g, "%3b")
        .replace(/:/g, "%3a")
        .replace(/~/g, "%7e")
        .replace(/\*/g, "%2a")
        .replace(/-/g, "%2d")
        .replace(/_/g, "%5f")
        .replace(/=/g, "%3d")
        .replace(/\|/g, "%7c");
}

function removeSpecialChars(str) {
    return str.replace(/[^/$()-@#,&'"a-zA-Z0-9 \u3131-\uD79D \u4e00-\u9fa5 \xFF5F-\xFF9F \u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf\u0400-\u04FF\u0500-\u052F]/ugi, "").replace(/\u00A0/g,"%20a");
}
function removeSpecialCharacters(str) {
    return str.replace(/[^/&' "a-zA-Z0-9_-]/g, "");
}

function replaceAllowedSplChars(str) {
    return str.replace(/&/g, "\\&").replace(/_/g, "\\_").replace(/-/g, "\\-");
}
function displayDescription(data) {
    var desc;
    if (data == null || data == undefined)
        desc = "NA";
    else if (data.length > 500)
        desc = data.substring(0, 500) + '...';
    else
        desc = data;
    return desc;
}

function extractTextFromName(name) {
    // Regular expression to remove HTML tags
    var cleanText = name.replace(/[<>,:]/g, '');
    return cleanText.trim(); // Trim any leading or trailing whitespace
}

function sortResults(arr, prop, asc) {
    arr.sort(function (a, b) {
        if (asc) {
            return (a[prop] > b[prop]) ? 1 : ((a[prop] < b[prop]) ? -1 : 0);
        } else {
            return (b[prop] > a[prop]) ? 1 : ((b[prop] < a[prop]) ? -1 : 0);
        }
    });
}

function WordReplacer(content, arrayToReplace, newArray) {
    if (arrayToReplace.length > 0 && newArray.length > 0 && arrayToReplace.length == newArray.length) {
        $.each(arrayToReplace, function (i, item) {
            content = content.replace(new RegExp(item, "g"), newArray[i]);
        });
    }
    return content;
}


function ShowErrorMessageByStatus(Options)
{
    

    var failedMsg = "";
    if (!isNewUI) {
        if (typeof (Options.status) != "undefined" && Options.status != null && Options.status != "" && Options.status == 2) {
            failedMsg = '<div class="well">You do not have the permission, please contact the Administrator.</div>';
        }
        else if (typeof (Options.custommessage) != "undefined" && Options.custommessage != null && Options.custommessage.trim() != "")
        {
            failedMsg = '<div class="well" style="background-color:#f1f2f6">' + Options.custommessage +'.</div>';
        }
        else
            failedMsg = '<div class="well">There seems to be some problem while retrieving your data.</div>'
    }
    else {
        //api resoponse status
        if ((typeof (Options.status) != "undefined" && Options.status != null && Options.status != "" && Options.status == 2) || (typeof(Options.message) != "undefined" && Options.message.indexOf("permission") > 1)) {
            failedMsg = '<div class="a-permission-needed-box-wrap"> <div class="a-body-box-wrap"> <i class="fal fa-user-lock"></i> <h4>Permission Needed</h4> <p>You do not have the permission. Please go to the "Help" menu above to contact support for further assistance.</p></div></div>';
        }
        else if (typeof (Options.custommessage) != "undefined" && Options.custommessage != null && Options.custommessage.trim() != "")
        {
            failedMsg = '<div class="clearfix no-data-message"><img src="./img/no-data-found.svg"><div><h3>No Data Found</h3><p><span>' + Options.custommessage+'</span></p></div></div>';
        }
        else
            failedMsg = '<div class="clearfix no-data-message"><img src="./img/no-data-found.svg"><div><h3>No Data Found</h3><p><span>There seems to be some problem while retrieving your data.</span></p></div></div>';
    }

    if (typeof (Options.requestid) != "undefined" && Options.requestid != null && Options.requestid.trim() != "") {
        var $RequestID = $("#" + Options.requestid);
        $RequestID.closest(".w-widget").find(".w-header>div,.w-header span").hide()
        $RequestID.closest(".w-widget").find(".w-body,.widget-body").addClass("w-body-bgcolor")
        $RequestID.closest(".w-widget").find(".w-body .nav").hide()
    }
    return failedMsg;
}

function RemoveHtmlTags(a) {
    return a.replace(/(<([^>]+)>)/ig, "");
}
function GetEngagementLevel(engagementValue) {
    var displayvalue = '';
    switch (engagementValue) {
        case "High":
            displayName = "High";
            break;
        case "Hot":
            displayName = "Hot";
            break;
        case "Low":
            displayName = "Low";
            break;
        case "Medium":
            displayName = "Medium";;
            break;
        case "Not Sure":
            displayName = "Not Sure";
            break;
        default:
            displayName = engagementValue;
    }
    return displayName;
}
function GetInterestStatus(interestType) {
    var str = "";
    switch (interestType) {
        case 4:
            str = 'High';
            break;
        case 5:
            str = 'Hot';
            break;
        case 2:
            str = 'Low';
            break;
        case 3:
            str = 'Medium';
            break;
        case 1:
            str = 'NotSure';
            break;
    }
    return str;
}
function IFTSubmitContract(OppoTypeId, OppoId, contactId) {
    api.call("CreateContractMediaFromIFT", { oppoType: OppoTypeId, OppoId: OppoId, ContactId: contactId }, function (result) {
        contractMediaId = result.result.template.id;
        isPartner = false;
        var options = {};
        options["ispartner"] = 1;
        options["sendcontract"] = 'Contract';
        options["save"] = 'Save';
        options["oppotype"] = OppoTypeId;
        options["oppoid"] = OppoId;
        options["contactid"] = contactId;
        modal.sendContractFromCPQ(contractMediaId, options)
    });
}

//need to open ift wizard from webanner
function OpenIFTWizard(iftid, title) {
    var options = [];
    options["id"] = iftid;
    options["name"] = title;
    api.call("CreateTemporaryIQData", { iftid: iftid }, function (res) {
        if (res.status == 0) {
            options["interactivedataid"] = res.result;
            modal.showIQPreviewWizard(options);
        }
    });
}
modal.showIQPreviewWizard = function (options) {
    var _wizdata = {
        name: 'CPQ Engine',
        steps: [
            { name: 'Configure', url: `/interactivequestionnaire/preview/${options.id}/${options.interactivedataid}?isRenew=${options.isRenew}` },
            { name: 'Price', url: `/interactivequestionnaire/productift/${options.id}/${options.interactivedataid}?isRenew=${options.isRenew}` },
            { name: 'Quote', url: `/iftsheeturl/${options.interactivedataid}?isRenew=${options.isRenew}`, disableprevbutton: "1" },
        ]
    };
    var _wizard = new wizard(_wizdata);
    _wizard.show();
    $("#modalWizard").find("#quoteloader").remove();
    $("#modalWizard").find(".modal-content").append("<div id='quoteloader' style='display: block; text-align: center;'><h1>&nbsp;<i class='fa fa-cog fa-spin'></i><span class='loadermessage'>Loading...</span></h1></div>")//add loader in when we generate the quote
}

modal.showCPQuotePDF = function (quoteid) {
    var views = [{ name: 'Quote', url: `/iftsheeturl/` + quoteid, buttonaction: true }];
    modal.show({ title: 'Quote', views: views });
}

modal.showOrderQuote = function (quoteid, iftid) {
    var views = [{ name: 'Submit Purchase Order', url: `/send/quote/${iftid}/${quoteid}`, buttons: [] }];
    modal.show({ title: 'Submit Purchase Order', views: views });
}
modal.showPurchaseDetails = function (quoteid,iftid) {
    var views = [{ name: 'Purchase Details', url: `/purchasedetails/${iftid}/${quoteid}`}];
    modal.show({ title: 'Purchase Details', views: views });
}
function formatLargeAmount(amount) {
    if (amount > 0) {
        if (amount >= 1e0 && amount <= 1e3) {
            return amount.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")
        }
        else if (amount >= 1e3 && amount <= 1e6) {
            return (amount / 1e3).toFixed(1) + "K";
        }
        else if (amount >= 1e6 && amount <= 1e12) {
            return (amount / 1e6).toFixed(1) + "M";
        }
    }
    else
        return 0;

    return amount;
}
function formatCompactNumber(number) {
    if (number < 1000) {
        return number;
    } else if (number >= 1000 && number < 1_000_000) {
        return (number / 1000).toFixed(1) + "K";
    } else if (number >= 1_000_000 && number < 1_000_000_000) {
        return (number / 1_000_000).toFixed(1) + "M";
    } else if (number >= 1_000_000_000 && number < 1_000_000_000_000) {
        return (number / 1_000_000_000).toFixed(1) + "B";
    } else if (number >= 1_000_000_000_000 && number < 1_000_000_000_000_000) {
        return (number / 1_000_000_000_000).toFixed(1) + "T";
    }
}
function youtube_parser(url) {
    var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/;
    var match = url.match(regExp);
    if (match[7].length == 11) {
        return (match && match[7].length == 11) ? match[7] : false;
    }
    else {
        var regExp = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
        return (url.match(regExp)) ? RegExp.$1 : false;
    }
}
function currentTimeFormat(date) {
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var seconds = date.getSeconds();
    var ampm = hours >= 12 ? "PM" : "AM";
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? '0' + minutes : minutes;
    seconds = seconds < 10 ? '0' + seconds : seconds;
    var strTime = hours + ':' + minutes + ': ' + seconds + ' ' + ampm;
    return strTime;
}
function getTemplateNameForAuto3(templateNameForAuto3) {
    var replaceSpChar = templateNameForAuto3.replace(/[`~!@#$%^&*()_|+\=?;:'",.<>\{\}\[\]\\\/ ]/gi, '-');
    return replaceSpChar;
}

function formatIndianMoney(num) {
    num = num === undefined || num == null ? 0 : num;
    var amount = num.toFixed(1).replace(/(\d)(?=(\d{2})+\d\.)/g, '$1,');
    return amount.slice(0, -2)
}

function getUserHoverContentslinks(item) {
    var urlLink = [];
    if (item.url != null && item.url != "") {
        var url = item.url;
        urlLink.push(url);
    }
    var value = [urlLink];
    var $content = $("<div>");
        var $divTag = $("<div>").addClass("with-url").text(value);
        if (value != '' && value!= "" && value != " ") {
            $content.append($divTag);
        }
    return $content[0].innerHTML;
}
function getImageHoverForVideo(item) {
    var thumb = '';
    var url = item.external_url;
    if (url == undefined)
        url = '';
    thumb = "https://partner-marketing.bitdefender.com/v4u/img/video-placeholder-new.png";
    if (item.thumburl400 != undefined && item.thumburl400 != "") {
        thumb = item.thumburl400;
    }
    else if (url != null) {
        if (item.thumbnail != undefined && item.thumbnail != "") {
            thumb = item.thumbnail;
        } else
            if (url.indexOf('youtube.com') > -1) {
                var uri = getVideoURL(url);
                if (uri.length > 0)
                    thumb = uri[0] + '//i2.ytimg.com/vi/' + uri[1] + '/hqdefault.jpg';
            }
            else if (url.indexOf('vidyard.com') > -1) {
                var uri = getVideoURL(url);
                if (uri.length > 0)
                    thumb = uri[0] + "//play.vidyard.com/" + uri[1] + ".jpg";
            }
            else if (url.indexOf('wistia.com') > -1) {
                thumb = url + ".jpg";
            }
            else if (url.indexOf('wistia.net') > -1) {
                $.ajax({
                    url: '//fast.wistia.net/oembed?url=' + url + "?embedType=async&videoWidth=640",
                    dataType: 'jsonp',
                    success: function (data) {
                        thumb = data.thumbnail_url != undefined ? data.thumbnail_url : "//partner-marketing.bitdefender.com/v4u/img/video-placeholder-new.png";
                    }
                });
            }
            else if (url.indexOf('videos.amp.vg') > -1) {
                thumb = url.replace('.flv', '.png');
                $element.attr('src', thumb);
            }
            else if (url.indexOf('vimeo.com') > -1) {
                id = url.split('/')[4];
                $.ajax({
                    url: 'https://vimeo.com/api/oembed.json?url=' + url,
                    dataType: 'jsonp',
                    success: function (data) {
                        thumb = data.thumbnail_url != undefined ? data.thumbnail_url : "//partner-marketing.bitdefender.com/v4u/img/video-placeholder-new.png";
                    }
                });
            }
    }
    var img = "<div class='popover-img-box'><img src='" + thumb + "'/></div>";
    var $strong = $("<strong>");
    $strong.append(img);
    return $strong.html();
}
function getImageHoverForImage(item) {
    var thumb = '';
    var img;
    if (item.thumbnail != undefined && item.thumbnail != "") {
        if (item.isGoogleUrl) {
            img = "<div class='popover-img-box'><img src='" + item.original + "'/></div>";
        }
        else {
            thumb = item.thumbnail400;
            img = "<div class='popover-img-box'><img src='" + thumb + "'/></div>";
        }
    }
    var $strong = $("<strong>");
    $strong.append(img);
    return $strong.html();
}


OpenCPQWizard = function (options) {
    api.call("CreateTemporaryIQData", { iftid: options.id }, function (res) {
        if (res.status == 0) {
            options["interactivedataid"] = res.result;
            options["isCpqbyOppo"] = true;
            modal.showIQPreviewWizardCPQ(options);
        }
    });
}


modal.showIQPreviewWizardCPQ = function (options) {
    var _wizdata = {
        name: 'CPQ Engine',
        steps: [
            { name: 'Configure', url: `/interactivequestionnaire/previewdata/${options.id}/${options.projectId}?isCpqbyOppo=${options.isCpqbyOppo}&projecttypeid=${options.projectTypeId}&interactivedataid=${options.interactivedataid}` },
            { name: 'Price', url: `/interactivequestionnaire/productift/${options.id}/${options.interactivedataid}?isCpqbyOppo=${options.isCpqbyOppo}` },
            { name: 'Quote', url: `/iftsheeturl/${options.interactivedataid}?isCpqbyOppo=${options.isCpqbyOppo}`, disableprevbutton: "1" },
        ]
    };
    var _wizard = new wizard(_wizdata);
    _wizard.show();
    $("#modalWizard").find("#quoteloader").remove();
    $("#modalWizard").find(".modal-content").append("<div id='quoteloader' style='display: block; text-align: center;'><h1>&nbsp;<i class='fa fa-cog fa-spin'></i><span class='loadermessage'>Loading...</span></h1></div>")//add loader in when we generate the quote
}


function getImageHoverForDocument(item) {
    var thumb = '';
    var img;
    if (item.thumbnail != undefined && item.thumbnail != "") {
        if (item.isGoogleUrl)
            thumb = item.thumbnail200;
        else
            thumb = item.thumbnail400;

        img = "<div class='popover-img-box'><img src='" + thumb + "'/></div>";
    }
    var $strong = $("<strong>");
    $strong.append(img);
    return $strong.html();
}
function checkPlaybookdelete(deleteStatus, $playbookEditor) {
    if (deleteStatus == (parseInt("4") || parseInt("16"))) {
            $.SmartMessageBox({
                title: 'Warning!',
                content: 'This Playbook has been deleted.',
                buttons: '[Ok]'
            },
                function (result, Value) {
                    if (result === 'Ok') {
                           window.location.href = "https://partner-marketing.bitdefender.com/#collateral/internal-playbook";
                    }
                }
            );
        $playbookEditor.find('.pageMask').hide();
        $playbookEditor.find('.pb-contactgrid').hide();
        $playbookEditor.removeClass('.pg-noncontact').hide();
        $(".modal-content").hide();
            return;
        }
}
function checkLmsdelete(deleteStatus, $lmsEditor) {
    if (deleteStatus == (parseInt("4") || parseInt("16"))) {
        $.SmartMessageBox({
            title: 'Warning!',
            content: 'This Course/Curriculum has been deleted.',
            buttons: '[Ok]'
        },
            function (result, Value) {
                if (result === 'Ok') {
                    window.location.href = "https://partner-marketing.bitdefender.com/#coursecatalog";
                }
            }
        );
        //$lmsEditor.find('.pageMask').hide();
        //$lmsEditor.find(".coursecat-left").hide();
        //$lmsEditor.find(".coursecat-right").hide();
        return;
    }   
}
function checkPlaybookExpired(todaysDate, endDate, $playbookEditor) {
    todaysDate.setHours(0, 0, 0, 0);
    endDate.setHours(0, 0, 0, 0);
    if (todaysDate > endDate) {
        $.SmartMessageBox({
            title: 'Warning!',
            content: 'This playbook has expired.',
            buttons: '[Ok]'
        },
            function (result, Value) {
                if (result === 'Ok') {
                    window.location.href = `${hostPath}/#collateral/internal-playbook`;
                }
            }
        );
        $playbookEditor.find('.pageMask').hide();
        $playbookEditor.find('.pb-contactgrid').hide();
        $playbookEditor.removeClass('.pg-noncontact').hide();
        $(".modal-content").hide();
    }
}
function checkLmsExpired(todaysDate, endDate, $lmsEditor) {
    todaysDate.setHours(0, 0, 0, 0);
    endDate.setHours(0, 0, 0, 0);
    var isExpired = false;
    if (todaysDate > endDate) {
        isExpired = true;
        $.SmartMessageBox({
            title: 'Warning!',
            content: 'This Course/Curriculum has expired.',
            buttons: '[Ok]'
        },
            function (result, Value) {
                if (result === 'Ok') {
                    window.location.href = `${hostPath}/#coursecatalog`;
                }
            }
        );
    }
    return isExpired;
}
function openExternalUrl($thisPreview, isDesignEditor, $playbookEditor) {
    if (isDesignEditor == 1) {
        var $section = $thisPreview.closest('.template');
        var externaltarget = $section.attr('externaltarget');
        if (externaltarget == "openinnewtab") {
            fromPlaybook = true;
            $thisPreview.attr("href", $section.attr('fileurl').replace('mute=1', 'mute=0')).attr("target", "_blank");
        }
        else if (externaltarget == "openinsametab") {
            $thisPreview.attr("href", $section.attr('fileurl').replace('mute=1', 'mute=0')).attr("target", "_self");
        }
        else if (externaltarget == "openinmodal") {
            //modal.showPlaybookExternalUrl($section.attr('fileurl'));
            var fileUrl = $section.attr('fileurl');
            var $dialog = $('<div></div>')
                .html('<iframe id = "iframe_website" style="min-height:100%; width:100% " src="' + fileUrl + '" class="well no-padding" allowfullscreen></iframe>')
                .dialog({
                    autoOpen: false,
                    modal: true,
                    height: $(window).height() - 100,
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    width: $(window).width() - 80,
                    title: "External URL"
                });
            $dialog.dialog('open');
            $(".ui-dialog").css("padding", "0 20px");
            $('.ui-dialog-content').css({ 'overflow': 'hidden', 'padding': '20px' });
            $('.ui-dialog-title').css({
                "font-size": "18px",
                "font-weight": "500",
                "color": "#212721",
                "padding-top": "20px",
                "margin": "0"
            });
            $('.ui-dialog-titlebar').css({
                "height": "70px",
                "border-bottom": "1px solid #d9dce1",
                "border-bottom-color": "#d9dce1",
                "padding": "0 10px",
                "font-weight": "500",
                "color": "#212721"
            });
            $('.ui-dialog-titlebar-close').removeClass('ui-dialog-titlebar-close').addClass('btn btn-default').html('<div><i class="btn-icon fa fa-times"></i></div>');
            $('.btn.btn-default').css({
                "float": "right",
                "padding": "20px",
                "border": "none",
                /*"background-color": "transparent",*/
                "box-shadow": "none"
            });
            $('.btn.btn-default').find("i").css({
                "color": "#77889a",
                "font-size": "24px",
                "line-height": "1"
            });
            $('.btn.btn-default').on('click', function (e) {
                e.preventDefault();
                $('.ui-dialog-content iframe').attr('src', '');
            });
        }
        else {
            $thisPreview.attr("href", $section.attr('fileurl').replace('mute=1', 'mute=0')).attr("target", "_blank");
        }
    }
    else {
        if ($thisPreview.attr('externaltarget') == 'openinnewtab')
        {
            fromPlaybookLink = true;
            window.open(unescape($thisPreview.attr('fileurl')), '_blank');//#30265 - the video re-watch cannot be done after mark done
        }
        else if ($thisPreview.attr('externaltarget') == 'openinsametab') { 
            $playbookEditor.find('[rel=popover-hover]').popover('hide');
            window.open(unescape($thisPreview.attr('fileurl')), '_self');//#30265 - the video re-watch cannot be done after mark done
        }
        else if ($thisPreview.attr('externaltarget') == 'openinmodal') {
            var fileUrl = unescape($thisPreview.attr('fileurl'));
            var $dialog = $('<div></div>')
                .html('<iframe id = "iframe_website" style="min-height:100%; width:100% " src="' + fileUrl + '" class="well no-padding" allowfullscreen></iframe>')
                .dialog({
                    autoOpen: false,
                    modal: true,
                    height: $(window).height() - 100,
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    width: $(window).width() - 80,
                    title: "External URL",
                    close:function(){
                        fromPlaybookLink = true;
                        $(this).trigger('hide.bs.modal');
                    }
                });
            $dialog.dialog('open');
            $(".ui-dialog").css("padding", "0 20px");
            $('.ui-dialog-content').css({ 'overflow': 'hidden', 'padding': '20px' });
            $('.ui-dialog-title').css({
                "font-size": "18px",
                "font-weight": "500",
                "color": "#212721",
                "padding-top": "20px",
                "margin": "0"
            });
            $('.ui-dialog-titlebar').css({
                "height": "70px",
                "border-bottom": "1px solid #d9dce1",
                "border-bottom-color": "#d9dce1",
                "padding": "0 10px",
                "font-weight": "500",
                "color": "#212721"
            });
            $('.ui-dialog-titlebar-close').removeClass('ui-dialog-titlebar-close').addClass('btn btn-default').html('<div><i class="btn-icon fa fa-times"></i></div>');
            $('.btn.btn-default').css({
                "float": "right",
                "padding": "20px",
                "border": "none",
                /*"background-color": "transparent",*/
                "box-shadow": "none"
            });
            $('.btn.btn-default').find("i").css({
                "color": "#77889a",
                "font-size": "24px",
                "line-height": "1"
            });
            $('.btn.btn-default').on('click', function (e) {
                e.preventDefault();
                $('.ui-dialog-content iframe').attr('src', '');
            });
        }
        else {
            window.open(unescape($thisPreview.attr('fileurl')), '_blank');
        }
    }
}
function showDripCampaign(campaignid) {
    var views = [
        { icon: "pen-square", name: 'Quick Editor', url: "/manage/campaigns/drip/" + campaignid + "/editor?isquickview=1" },
        { icon: "edit", name: 'Flow Chart Editor', url: "/manage/campaigns/drip/" + campaignid + "/editor?isquickview=0" },
        { icon: "user", name: 'Contacts & Lists', url: "/manage/campaigns/drip/" + campaignid + "/contacts" },
        { icon: "chart-bar", name: 'Report', url: "/drip/breakdown/" + campaignid },
    ];
    modal.show({ title: 'Edit Drip Campaign > ' + views[0].name + '', views: views, locked: true });
}
function showDripReport(campaignid) {
    var views = [
        { icon: "chart-bar", name: 'Report', url: "/drip/breakdown/" + campaignid },
    ];
    modal.show({ title: 'Program Report Breakdown', views: views });
}
function showPublishingReport(publishingid) {
    var views = [
        { icon: "chart-bar", name: 'Social Report', url: "/manage/campaigns/socialdrip/report/" + publishingid }
    ];
    modal.show({ title: 'Social Drip', views: views, buttons: '[Save]' });
}
function showSocialDripReport(publishingid) {
    views = [
        { icon: "edit", name: 'Data', url: "/setup/social/" + publishingid + "/publishings" },
    ];
    modal.show({
        title: 'Social Drip', views: views, buttons: '[Save]', callback: function () {
            modal.close();
        }
    });
}
function showSocialDripCustomizeWizard(data) {
    var _wizdata = {
        name: 'Setup Social Drip',
        steps: [],
    };
    if (data.hasoldmapping == false) {
        _wizdata.steps.push({ name: 'Settings', url: "/social/settings/" + data.id + "?isplaybook=true" });
    }
    _wizdata.steps.push({ name: 'Data', url: "/manage/campaigns/socialdrip/edit/" + data.id + "/publishings/false?isplaybook=true" });

    var _wizard = new wizard(_wizdata);
    _wizard.show();
}
function showSocialDripCustomizeWizardForPlaybook(data, closeCallback) {
    var _wizdata = {
        name: 'Setup Social Drip',
        steps: [],
        closeaction: closeCallback
    };
    if (data.hasoldmapping == false) {
        _wizdata.steps.push({ name: 'Settings', url: "/social/settings/" + data.id + "?isplaybook=true" });
    }
    _wizdata.steps.push({ name: 'Data', url: "/manage/campaigns/socialdrip/edit/" + data.id + "/publishings/false?isplaybook=true" });

    var _wizard = new wizard(_wizdata);
    _wizard.show();
}

function showPlaybookCampaignReport(campaignlinkname, campaignlinkid) {
    var views = [
        { icon: "chart-bar", name: 'Report (<b><i>' + campaignlinkname + '</i></b>)', url: "/manage/externaltracking/links/" + campaignlinkid + "/report" },
    ];
    modal.show({ title: 'Program Report Breakdown (<b><i>' + campaignlinkname + '</i></b>)', views: views });
}
function showAssetEmailModel(index, assetFileType, originalTemplateID) {
    var views = null;
    if (assetFileType == '16384') {
        if (originalTemplateID != undefined || originalTemplateID != "undefined")
            views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + index + "&isAssetEmail=true&playbookid=" + originalTemplateID, buttons: ["finish"] }];
        else
            views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + index + "&isAssetEmail=true", buttons: ["finish"] }];
    }
    else if (assetFileType == '1280') {
        views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + index + "&isAssetEmail=true&isCampaignLink=true&isPlaybookAsset=true&isContactcompany=&linkids=null", buttons: ["finish"] }];
    }
    else
        views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?ispartner=false&templates=" + index + "&isMultipleAssetEmail=true&isPlaybookAsset=true", buttons: ["finish"] }];
    modal.show({ title: 'Send Email', views: views });
}
function showEmailModel(index, assetFileType, linkID, contactListID, originalTemplateID) {
    var param = "";
    if (linkID != null)
        param = "&linkids=" + linkID;
    else if (contactListID != null)
        param = "&contactlistid=" + contactListID;
    if (originalTemplateID != undefined || originalTemplateID != "undefined" || originalTemplateID != null)
        param = "&playbookid=" + originalTemplateID;
    var views = null;
    if (assetFileType == '16384')
        views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?assetid=" + index + "&isAssetEmail=true&isPlaybookAsset=true" + param, buttons: ["finish"] }];
    else
        views = [{ icon: "database", name: 'Send', url: "/communicate/email/0?emailtemplateid=" + index + "&isPlaybookAsset=true" + param, buttons: ["finish"] }];

    modal.show({ title: 'Send Email', views: views, callback: onEmailSend });
}
function hideAssetEmailModel(newMediaid,name) {
    url = "/setup/template/" + newMediaid + "/editor?sendEmailAsset=true&isstepprocess=true"
    var views = [{ icon: "database", name: 'Info', url: url }];
    modal.show({ title: 'Customize' + "-" + name, views: views});
}


function getBPTaskStatus(taskStatus) {
    var $a = $("<a>");
    $a.addClass("label-2");
    switch (taskStatus) {
        case parseInt("2"): $a.addClass("label-2-info"); $a.text('In Progress'); break;
        case parseInt("4"): $a.addClass("label-2-orange"); $a.text('Not Started'); break;
        case parseInt("1"): $a.addClass("label-2-success"); $a.text('Completed'); break;

    }
    var $div = $("<div>");
    $div.append($a);
    return $div.html();
}
 //issue #56034 converted rgbatoHex
function rgbToHex(rgba) {
    rgba = rgba.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/)
    var red = Math.round((rgba[1] * rgba[4]));
    var blue = Math.round((rgba[2] * rgba[4]));
    var green = Math.round((rgba[3] * rgba[4]));
    return (rgba && rgba.length === 5) ? "#" +
        ("0" + red.toString(16)).slice(-2) +
        ("0" + blue.toString(16)).slice(-2) +
        ("0" + green.toString(16)).slice(-2) : '';
}
function rgbToHexValue(rgb) {
    // Extract the RGB values using a regular expression
    rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);

    if (rgb) {
        // Convert each RGB component to a two-digit hexadecimal string
        var red = parseInt(rgb[1]).toString(16).padStart(2, '0');
        var green = parseInt(rgb[2]).toString(16).padStart(2, '0');
        var blue = parseInt(rgb[3]).toString(16).padStart(2, '0');

        // Return the hexadecimal color code
        return `#${red}${green}${blue}`.toUpperCase();
    }

    return '';
}
function formatNumber(num) {
    if (num != null) {
        return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")
    } else {
        return 0;
    }
}
function showSocialDripReport(publishingid) {
    views = [
        { icon: "edit", name: 'Data', url: "/setup/social/" + publishingid + "/publishings" },
    ];
    modal.show({
        title: 'Social Drip', views: views, buttons: '[Save]', callback: function () {
            modal.close();
        }
    });
}
function showSocialDripCustomizeWizard(data) {
    var _wizdata = {
        name: 'Setup Social Drip',
        steps: [],
    };
    if (data.hasoldmapping == false) {
        _wizdata.steps.push({ name: 'Settings', url: "/social/settings/" + data.id + "?isplaybook=true" });
    }
    _wizdata.steps.push({ name: 'Data', url: "/manage/campaigns/socialdrip/edit/" + data.id + "/publishings/false?isplaybook=true" });

    var _wizard = new wizard(_wizdata);
    _wizard.show();
}
/* ----- Auto Select Channel manager LOGIC STARTS-----*/
function autoCompleteChannelManagers(element, url, filterData, _requestID, _ignoredistid) {
    $(element).select2({
        placeholder: 'User',
        //minimumInputLength: 0,
        multiple: true,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 800,
                    timestamp: $.now(),
                    fq: term,
                    id: 0
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatCMResult,
        formatSelection: function (data) {
            var $list = $("#s2id_" + _requestID + "_managers li[fid]");
            var id = filterIndex--;
            var isHtml = false;
            /*
            api.call("GetOrAddCompanyFilter", { name: data.name }, function (r, ctx) {//api to populate new filter                
                if (r.status == 0) {
                    $("#s2id_" + _requestID + "_managers li[fid]").each(function () {
                        $(this).find("i").first().remove();//remove icon                     
                        if ($(this).html() == data.name) {
                            $(this).attr("fid", r.result);
                            var ov = $("#" + _requestID + "_contactcompany").val().split(',');
                            var nv = [];
                            for (var i = 0; i <= ov.length - 1; i++) {
                                if (ov[i] == "0" || ov[i] == 0)
                                    ov[i] = r.result;//Assign new value to it
                                nv.push(ov[i]);
                            }
                            $("#" + _requestID + "_managers").val(nv);//replace new vals
                            window.alert = function () { /* do nothing here / }
                        }
                    });
                } else {
                    isHtml = true;
                }

                if (isHtml) {
                    $("[fid='" + data.id + "']").parent().parent().remove();
                    window.alert = function () { /* do nothing here / }
                }
            }, null, id);
            */
            var $li = $("<li>");
            $li.attr({ "fid": data.id, "name": data.name });
            $li.text(data.name);
            var $ul = $("<ul>");
            $ul.append($li);
            return $ul.html();
        },
        initSelection: function (element, callback) {
            var data = [];
            if (filterData.records != undefined) {
                for (var i = 0; i <= filterData.records.length - 1; i++) {
                    $("#" + _requestID + "_managers").val([filterData.records[i].id, filterData.records[i].name]).trigger("change");
                    data.push({ id: element.val().split(",")[0], name: element.val().split(",")[1] });
                }
            }

            callback(data);
        },
        createSearchChoice: function (term, data) {
            if ($(data).filter(function () { return this.name.localeCompare(term) === 0; }).length === 0) {
                return { id: 0, name: term };
            }
        }
    });
};

function formatCMResult(record) {
    var $divEmail = $("<div>");
    $divEmail.text((record.iscurrent) ? '***myself***' : record.name);
    return $divEmail;
};
function formatCMSelection(data) {
    if (!data.iscurrent) {
        var $li = $("<li>").attr({ "lid": data.id, "name": data.name }).css("list-style-type", "none").text((data.iscurrent) ? '***myself***' : data.name);
        return $li;
    }
};


function autoCompleteAlliances(element, url, filterData, _requestID, _ignoredistid) {
    $(element).select2({
        placeholder: 'Please Select an Organization',
        //minimumInputLength: 0,
        multiple: true,
        allowClear: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (term == "")
                    term = "*";
                return {
                    q: term,
                    limit: 25,
                    type: 840,
                    timestamp: $.now(),
                    fq: term,
                    id: 0,
                    //editor: true
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: formatSenderResultForfilter,
        formatSelection: function (data) {
            var $list = $("#s2id_" + _requestID + "_alliances li[fid]");
            var id = filterIndex--;
            var isHtml = false;
            
            var $li = $("<li>");
            $li.attr({ "fid": data.id, "name": data.name });
            $li.text(data.name);
            var $ul = $("<ul>");
            $ul.append($li);
            return $ul.html();
        },
        initSelection: function (element, callback) {
            var data = [];
            if (filterData.records != undefined) {
                for (var i = 0; i <= filterData.records.length - 1; i++) {
                    $("#" + _requestID + "_alliances").val([filterData.records[i].id, filterData.records[i].name]).trigger("change");
                    data.push({ id: element.val().split(",")[0], name: element.val().split(",")[1] });
                }
            }

            callback(data);
        },
        createSearchChoice: function (term, data) {
            if ($(data).filter(function () { return this.name.localeCompare(term) === 0; }).length === 0) {
                return { id: 0, name: term };
            }
        }
    });
};

function formatAllianceResultForfilter(record) {
    return "<div>" + Encoder.charEncode(record.name) + "</div>";
};
function formatAllianceSelectionForfilter(data) {
    var $li = $("<li>").attr({ "id": data.id, "name": data.name }).css("list-style-type", "none").text(data.name);
    return $li;
};

function GetCollaborationShares(_requestID, filterID) {
    if (filterID === undefined)
        filterID = "filters";
    var filters = '', ifilter = '';
    $("#s2id_" + _requestID + "_" + filterID + " li[fid]").each(function () {
        ifilter = $(this).attr("fid");
        if (filters == '')
            filters = ifilter;
        else
            filters = filters + ',' + ifilter;
    });
    var _filters = filters != "" ? filters.split(",") : [];
    var filtersJA = _filters.map(function (str) { return parseInt(str); });
    return filtersJA;
}

function getQuarterArray() {
    // Get current date
    var currentDate = new Date();

    // Get current quarter and year
    var currentQuarter = Math.floor((currentDate.getMonth() / 3) + 1);
    var currentYear = currentDate.getFullYear();

    // Calculate previous two quarters and years
    var previousQuarter1 = currentQuarter - 1;
    var previousQuarter2 = currentQuarter - 2;
    var previousYear1 = currentYear;
    var previousYear2 = currentYear;

    // Adjust quarters and years if necessary
    if (previousQuarter1 < 1) {
        previousQuarter1 += 4;
        previousYear1--;
    }
    if (previousQuarter2 < 1) {
        previousQuarter2 += 4;
        previousYear2--;
    }

    // Create an array of quarters and years
    var quartersArray = [      
        { quarter: currentQuarter, year: currentYear },
        { quarter: previousQuarter1, year: previousYear1 },
        { quarter: previousQuarter2, year: previousYear2 }
    ];

    return quartersArray;
}

function openInternalActionUrl($thisPreview, isDesignEditor, $playbookEditor, $url) {
    var url = $(location).attr("origin") + $url;
    var $section = $thisPreview.closest('section.template');
    var titleType= $section.attr("type");
    if ($section.length == 0)
        $section = $thisPreview.closest('.template');
    var externaltarget = $section.attr('externaltarget');
    if (externaltarget == 'openinnewtab'){
        fromPlaybook=true;
        window.open(unescape(url), '_blank');//#30265 - the video re-watch cannot be done after mark done
    }
    else if (externaltarget == 'openinsametab') {
        //$playbookEditor.find('[rel=popover-hover]').popover('hide');
        /*window.open(unescape(url), '_self');*///#30265 - the video re-watch cannot be done after mark done
        window.location.href = unescape(url);
    }
    else {
        window.open(unescape(url), '_blank');
    }
}
function ConvertStringToBooleanValue(value) {
    return (value.toLowerCase()) == "true" ? true : false;
}
function createFilterInfoIcon($reqID) {
    $($reqID).addClass("filters-infoicon infoicon-with-popover");

    var $info = $("<div>").addClass("inbox-search-info-tips");
    var $infoIcon = $("<a>").attr({ "tabindex": "0", "data-html": "true", "data-trigger": "focus", "data-placement": "bottom", "data-toggle": "popover-click", "data-content": "You can add multiple filters at a time by using (|) separation i.e. abc|xyz", "rel": "popover" });
    $($infoIcon).addClass("btn txt-color-blue");
    var icon = $("<i>").addClass("fal fa-info-circle");
    $($infoIcon).append(icon);
    $($info).append($infoIcon);

    $($reqID).find("div:first").append($info);
}

function createKeywordInfoIcon($reqID) {
    $($reqID).addClass("filters-infoicon infoicon-with-popover");

    var $info = $("<div>").addClass("inbox-search-info-tips");
    var $infoIcon = $("<a>").attr({ "tabindex": "0", "data-html": "true", "data-trigger": "focus", "data-placement": "bottom", "data-toggle": "popover-click", "data-content": "You can add multiple keywords at a time by using (|) separation i.e. abc|xyz", "rel": "popover" });
    $($infoIcon).addClass("btn txt-color-blue");
    var icon = $("<i>").addClass("fal fa-info-circle");
    $($infoIcon).append(icon);
    $($info).append($infoIcon);

    $($reqID).find("div:first").append($info);
}

function onFilterPopoverClick($reqID) {
    var reqID = $reqID;
    $($reqID).find('[data-toggle="popover-click"]').popover({
        html: true,
        trigger: 'focus',
        placement: 'bottom'
    }).click(function (e) {
        $(reqID).find(".inbox-search-info-tips").addClass("active");
    }).on('hidden.bs.popover', function () {
        $(reqID).find(".inbox-search-info-tips").removeClass("active");
    });
}

function triggerTooltip(container) {
    $(container + ' [rel="tooltip"]').tooltip({ container: container, trigger: 'hover' });
    $(container + ' [data-toggle="tooltip"]').tooltip({ container: "body", trigger: 'hover' });
}
var course_progress_training_stats = {
    callbackRequired: null,
    requestId: null,
    loadMyTraningData: function () {
        $(course_progress_training_stats.requestId).trigger("loadMyTraningData");
    }
}

function ConvertStringToBooleanValue(value) {
    return (value.toLowerCase()) == "true" ? true : false;
}

function longDateWithoutDayAndTimeFromUTC(time) {
    var weekday = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    var d = parseUTCDate(time);
    if (d === null) return time;
    /* var day1 = weekday[d.getUTCDay()];*/
    d = getDateTimeBasedOnTimeZone(d);

    return d.format("mmm dd yyyy");
}

function nFormatter(num) {
    if (num >= 1000000000) {
        return (num / 1000000000).toFixed(2) + 'G';
    }
    else if (num >= 1000000) {
        return (num / 1000000).toFixed(2) + 'M';
    }
    else if (num >= 1000) {
        return (num / 1000).toFixed(2) + 'K';
    }
    else
        return 0;
    return num;
}
function longTimeFromUTC(time) {
    var d = parseUTCDate(time);
    if (d === null) return time;

    d = getDateTimeBasedOnTimeZone(d);
    return d.format(dateTimeFormat.longtimepattern);
}

function numberFormater(num) {
    if (num >= 1000000000) {
        return (num / 1000000000).toFixed(2) + 'G';
    }
    else if (num >= 1000000) {
        return (num / 1000000).toFixed(2) + 'M';
    }
    else if (num >= 1000) {
        return (num / 1000).toFixed(2) + 'K';
    }
    else
        return num;
    return num;
}

function jsonserialize(jsondata) {
    var serializejson = {};
    $.each(jsondata, function (k, v) {
        var data = serializejson[v.linktoid];
        if (data == undefined)
            serializejson[v.linktoid] = v.name;
        else {
            serializejson[v.linktoid] = serializejson[v.linktoid] + ", " + v.name;
        }
    });
    return serializejson;
}
// created function checking if JSFilePathUrl key found in loadJSandCSS Json Object then not append JS File Else append JS File in head tag in DOM --Sumit PR 62632
function loadJS(jsBundleURL, callback) {
    if (loadJSandCSS[jsBundleURL] === undefined) {
        loadJSandCSS[jsBundleURL] = true;
        script = document.createElement('script');
        script.type = "text/javascript";
        script.setAttribute('src', '' + jsBundleURL + '');
        if (script.readyState) {  // only required for IE <9
            script.onreadystatechange = function () {
                if (script.readyState === "loaded" || script.readyState === "complete") {
                    script.onreadystatechange = null;
                    if (callback) { callback();}
                }
            };
        } else {  //Others
            script.onload = function () {
              if (callback) { callback();}
            };
        }
        document.getElementsByTagName("head")[0].appendChild(script);
    }
    else
        if (callback) { callback();}
}
// created function checking if CSSFilePathUrl key found in loadJSandCSS Json Object then not append CSS File Else append CSS File in head tag in DOM --Sumit PR 62632
function loadCSS(cssBundleURL) {
    if (loadJSandCSS[cssBundleURL] === undefined) {
        loadJSandCSS[cssBundleURL] = true;
        link = document.createElement('link');
        link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = '' + cssBundleURL + '';
        document.getElementsByTagName("head")[0].appendChild(link);
    }
}

/*
 * Function to dynamically load CSS file and execute a callback function when loaded.
 * @param {string} cssBundleURL - The URL of the CSS bundle to load.
 * @param {function} callback - The function to execute after the CSS file is loaded (optional).
 */
function loadCSSFile(cssBundleURL, callback) {
    if (!loadJSandCSS[cssBundleURL]) {
        loadJSandCSS[cssBundleURL] = true;
        var link = document.createElement('link');
        link.rel = "stylesheet";
        link.href = cssBundleURL;
        document.getElementsByTagName("head")[0].appendChild(link);
        if (callback && typeof callback === 'function') {
            link.onload = callback;
        }
    }
}

function conditionBaseApiLoadForDashboard(requestID, funcToExecute) {
    var $tab = $("#" + requestID).closest(".tab-pane");
    var isTabActive = $tab.hasClass("active");
    var isTabAdded = $tab.length > 0 ? true : false;
    var isAPIFirstTimeLoad = false;
    if (isTabAdded) {
        var tabID = $tab.attr("id").toLowerCase()
        if (isTabActive)
            funcToExecute();
        else {
            $('a[aria-controls="'+$tab.attr("id")+'"]').on('shown.bs.tab', function (e) {
                if (!isAPIFirstTimeLoad) {
                    var target = $(e.target).attr("aria-controls").toLowerCase() // activated
                    switch (target) {
                        case "" + tabID + "":
                            funcToExecute();
                            isAPIFirstTimeLoad = true;
                            break;
                    }
                }
            });
        }
    }
    else
        funcToExecute();
}

function getCategoryForCollaboration(collabValue) {
    var categories = [{ 'name': 'Co-Sell', 'value': parseInt("1") }, { 'name': 'Co-Market', 'value': parseInt("2") }, { 'name': 'Co-Service', 'value': parseInt("3") }, { 'name': 'Co-Build', 'value': parseInt("4") },
        { 'name': 'General Support', 'value': parseInt("5") }, { 'name': 'Sales', 'value': parseInt("6") }, { 'name': 'Marketing', 'value': parseInt("7") }, { 'name': 'Technical Support', 'value': parseInt("8") }];

    return $.grep(categories, function (item, i) { return item.value == collabValue })[0].name;
}
function getSelectedRecordIds(requestId,that) {
    var selectedView = $("#" + requestId + "_doc .inbox-views .active").attr("data-action-item");
    var viewCount = $("#" + requestId +"_doc .inbox-views a").length;
    if (viewCount > 1 && selectedView == 0 && galleryData.thumbnailSelectable) {
        ids = that.dom.tablewrap.find(".inbox-thumbnail .selected").map(function () {
            return $(this).data("recordid");
        }).get();
    }
    else {
        ids = that.dom.tablewrap.find("input[type='checkbox']:checked:not('.all')").map(function () {
            return parseInt($(this).parents("tr").data("recordid"));
        }).get();
    }
    return ids;
}
function searchfolders(searchtext) {
    $("#searchresult li").each(function () {
        if (this.textContent.toLowerCase().indexOf(searchtext) == -1)
            $(this).css("display", "none");
        else
            $(this).css("display", "block");
    })
}

function clearsearchfolderinput() {
    $("#searchfolderinput").val("");
    searchfolders("");
    $("#searchfolderinput").focus();
    event.stopPropagation();
}
function getLocalizedLanguage(label, fieldLocalization, lang) {
    var  localeName = '';
    var customLanguage;
    if (fieldLocalization!="")
        customLanguage = JSON.parse(fieldLocalization);
        
        if (typeof customLanguage === 'object' && customLanguage !== null) {
            var cLocalName = customLanguage[lang];
            
            if (typeof cLocalName === 'string') {
                localeName = cLocalName;
            }
        }

    if (localeName.trim() !== '') {
        return localeName;
    }

    // If custom localization is null or not a string, return the label instead
    return label;
}

function languageDisplayName(langName) {
    var displayName = '';
    switch (langName) {
        case "French":
            displayName = langName + ' (Français)';
            break;
        case "German":
            displayName = langName + ' (Deutsch)';
            break;
        case "Spanish [Spain]":
            displayName = langName + ' (Español [España])';
            break;
        case "Italian":
            displayName = langName + ' (Italiano)';
            break;
        case "Portuguese [Brazil]":
            displayName = langName + ' (Português [Brasil])';
            break;
        case "Japanese":
            displayName = langName + ' (日本語)';
            break;
        case "Dutch":
            displayName = langName + ' (Nederlands)';
            break;
        case "Korean":
            displayName = langName + ' (한국어)';
            break;
        case "Chinese [Traditional]":
            displayName = langName + ' (繁體中文)';
            break;
        case "Chinese [Simplified]":
            displayName = langName + ' (简体中文)';
            break;
        case "Russian [Russia]":
            displayName = langName + ' (Русский [Россия])';
            break;
        default:
            displayName = langName;
    }
    return displayName;
}

function getRegisteredDealsHoverOwnerData(item) {
    var ownerName = "";
    if (item.ownerFullName != null && item.ownerFullName != "") {
        ownerName = item.ownerFullName;
    }
    else
        ownerName = 'No Name';

    var creatorName = [];
    if (item.userlastname != null && item.userlastname != "") {
        var lastName = item.userlastname + ",";
        creatorName.push(lastName);
    }
    if (item.userfirstname != null && item.userfirstname != "")
        creatorName.push(item.userfirstname);
    if (creatorName.length > 0)
        creatorName = creatorName.join(' ');
    else
        creatorName = 'No Name';

    var creatorCompany = (item.companyname != null && item.companyname != "") ? item.companyname :"No Name";
    var ownerCompany = item.ownerOrganization ? item.ownerOrganization :(item.ownerCompany != null && item.ownerCompany != "") ? item.ownerCompany:"No Name";

    var createdData = creatorName + "</br>" + item.useremail + "</br>" + creatorCompany;
    var ownerData = ownerName + "</br>" + item.ownerEmail + "</br>" + ownerCompany;

    var label = ['Creator', 'Owner'];//label array
    var value = [createdData, ownerData];//value array

    var $content = $("<div>");
    for (var i = 0; i < label.length; i++) {
        if (value[i] != "" && value[i] != " ") {
            var $strong = $("<strong>");
            var $span = $('<span>').addClass('font-sm').text(label[i] + ':');
            var $div = $('<div>').addClass('font-xs popover-url').text(value[i]);
            $strong.append($span);
            $content.append($strong);
            $content.append($div);
        }
    }
    return $content[0].innerHTML;
}
function getLinkTypeName(item) {
    var name = "";
    if (item == 2)
        name = "Users";
    else if (item == 18)
        name = "User Groups";
    else if (item == 8)
        name = "Organizations";
    else if (item == 160)
        name = "Organization Groups";
    else if (item == 161)
        name = "Companies";
    return name;
}
function getDateFromDays(days) {
    var baseDate = new Date('2010-01-01'); // e.g., new Date('2022-01-01')
    var resultDate = new Date(baseDate.setDate(baseDate.getDate() + days));
    return resultDate.toLocaleDateString('en-US');
}

function getLanguage(id) {
    var  languageNames = languageObject.entries;
    for (var i = 0; i < languageNames.length; i++) {
        if (languageNames[i].value === id) {
            return languageNames[i].oname;
        }
    }
    return "All";
}
function getSorting(defaultSortingValue) {  // for get the sorting
    var name = "name";

    if (defaultSortingValue == createdBy) {
        sort = [createdBy, updatedBy, score, name];
    }
    else if (defaultSortingValue == updatedBy) {
        sort = [updatedBy, createdBy, score, name];
    }
    else if (defaultSortingValue == name) {
        sort = [name, updatedBy, createdBy, score];
    }
    else if (defaultSortingValue == score) {
        sort = [score, updatedBy, createdBy, name];
    }
    else {
        sort = [updatedBy, createdBy, score, name];
    }
    return sort;
}
function getSortingWithoutName(defaultSortingValue) {  // for get the sorting if mongo disable

    if (defaultSortingValue == createdBy) {
        sort = [createdBy, updatedBy, score];
    }
    else if (defaultSortingValue == updatedBy) {
        sort = [updatedBy, createdBy, score];
    }
    else if (defaultSortingValue == score) {
        sort = [score, updatedBy, createdBy];
    }
    else {
        sort = [updatedBy, createdBy, score];
    }
    return sort;
}

function getCollaborationUserHoverContents(item) {
    var firstName = item.firstname == null ? "" : item.firstname.replace(/("|'|-|,)/g, "");
    var lastName = item.lastname == null ? "" : item.lastname.replace(/("|'|-|,)/g, "");
    var email = item.email == null ? "" : item.email;
    var name = lastName + " " + firstName;
    var title = item.title == null ? "" : item.title;
    var telephone = item.telephone == null ? item.mobile == null ? "" : item.mobile : item.telephone;
    var organizationName = item.organizationname == null ? "" : item.organizationname;

    if (item.photoid != null) {
        var thumb = item.photoid.thumbnail400;
        if (thumb) {
            var img = "<div class='popover-thumbnail cust-img-box'><img src='" + thumb + "' style='max-height:100%;' /></div>";
        }
        else {
            var thumb = "fas fa-fw fa-user-alt";
            var img = "<div class='popover-thumbnail cust-img-box' style='background: #ddd;padding: 10px;' ><i class='" + thumb + "' style='font-size: 70px;'></i></div>";
        }
    }
    else {
        var thumb = "fas fa-fw fa-user-alt";
        var img = "<div class='popover-thumbnail cust-img-box' style='background: #ddd;padding: 10px;' ><i class='" + thumb + "' style='font-size: 70px;'></i></div>";
    }
    var $strongTag = $("<strong>");
    $strongTag.append(img);


    var label = ['Title', 'Name', 'Email', 'Organization', 'Phone'];
    var value = [title, name, email, organizationName, telephone];

    for (var i = 0; i < label.length; i++) {
        var $spanTag = $("<span>").addClass("font-sm").text(label[i] + ":");
        var $divTag = $("<div>").addClass("font-xs popover-url").text(value[i]);
        if (value[i] != '' && value[i] != "" && value[i] != " ") {
            $strongTag.append($spanTag);
            $strongTag.append($divTag);
        }
    }
    return $strongTag.html();
}
function createPersonaOptionList(personaID, personaOptionlink, personaOption) {
    var personaOptionsList = '';
    var filterPersonaOptionData = getFilteredPersonaOptionData(personaID, personaOptionlink, personaOption);
    $(filterPersonaOptionData).each(function () {
        personaOptionsList += '<option value="' + $(this).attr('value') + '">' + $(this).attr('name') + '</option>';
    })
    return personaOptionsList;
}
function getFilteredPersonaOptionData(personaID, personaOptionlink, personaOption) {
    let data = personaOptionlink.filter(element => element.personaid == personaID)
    // Extract optionid values from the filterCriteria
    let optionIds = data.map(item => item.optionid);
    // Filter data based on the optionIds
    let filteredData = personaOption
        .filter(item => optionIds.includes(item.value));
    return filteredData;
}
function subPersonaExist(personaID, personaOptionlink, personaOption) {
    let item = personaOptionlink
        .filter(element => element.personaid == personaID)
        .sort((a, b) => a.optionid - b.optionid);

    //consider data with active persona options only
    for (var iCount = 0; iCount < item.length; iCount++) {
        var optionID = item[iCount].optionid;
        var result = getPersonaOptionName(optionID, personaOption);
        if (result != null)
            return optionID;
    }
}
function getPersonaOptionName(id, personaOption) {
    let item = personaOption.find(element => element.value == id);
    return item ? item.name : null;  // Return the value if found, otherwise return null
}
//Below functions are used to get weekly,monthly, quarterly and yearly data...
function formatDateMonth(date) {
    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
}

function getThisWeek() {
    var currentDate = new Date();
    //below line resets hours for accurate calculation..
    currentDate.setHours(0, 0, 0, 0);
    var currentDay = currentDate.getDay();
    // Adjusting for Monday as the first day of the week..
    var offset = currentDay === 0 ? 6 : currentDay - 1; // If it's Sunday (0), set offset to 6, otherwise subtract 1 to make Monday the first day
    var firstDayOfWeek = new Date(currentDate);
    firstDayOfWeek.setDate(currentDate.getDate() - offset);

    // Last day is the current day, so no adjustment needed other than resetting time
    var lastDayOfWeek = new Date(); // Reflects the current day with time reset above

    // Check if the first day of the week is the same as the last day (current day)
    if (firstDayOfWeek.getDate() === lastDayOfWeek.getDate() &&
        firstDayOfWeek.getMonth() === lastDayOfWeek.getMonth() &&
        firstDayOfWeek.getFullYear() === lastDayOfWeek.getFullYear()) {
        // The first day and the current day are the same
        var dateRange = `${formatDateMonth(firstDayOfWeek)}`;
    } else {
        var dateRange = `${formatDateMonth(firstDayOfWeek)} - ${formatDateMonth(lastDayOfWeek)}`;
    }

    return { dates: dateRange };
}

function getLastWeek() {
    var currentDate = new Date();
    // Resets hours for accurate calculation
    currentDate.setHours(0, 0, 0, 0);
    var currentDay = currentDate.getDay();
    // Adjust for Monday as the first day of the week. If today is Sunday (0), treat it as 7.
    var currentDayAdjusted = currentDay === 0 ? 7 : currentDay;
    // Calculate the first day of last week, considering Monday as the first day of the week
    var firstDayOfLastWeek = new Date(currentDate);
    firstDayOfLastWeek.setDate(currentDate.getDate() - currentDayAdjusted - 6);

    var lastDayOfLastWeek = new Date(firstDayOfLastWeek);
    lastDayOfLastWeek.setDate(firstDayOfLastWeek.getDate() + 6);

    var dateRange = `${formatDateMonth(firstDayOfLastWeek)} - ${formatDateMonth(lastDayOfLastWeek)}`;
    return { dates: dateRange };
}

function getThisMonth() {
    var currentDate = new Date();
    var firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    var lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    var dateRange = `${formatDateMonth(firstDay)} - ${formatDateMonth(lastDay)}`;
    return { dates: dateRange };
}

function getLastMonth() {
    var currentDate = new Date();
    var firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);
    var lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);
    var dateRange = `${formatDateMonth(firstDay)} - ${formatDateMonth(lastDay)}`;
    return { dates: dateRange };
}

function getThisQuarterWithDates() {
    var currentDate = new Date();
    var quarter = Math.floor((currentDate.getMonth() / 3)) + 1;
    var firstDay = new Date(currentDate.getFullYear(), (quarter - 1) * 3, 1);
    var lastDay = new Date(firstDay.getFullYear(), firstDay.getMonth() + 3, 0);
    var quarterLabel = `Q${quarter} - ${firstDay.getFullYear()}`;
    var dateRange = `${formatDateMonth(firstDay)} - ${formatDateMonth(lastDay)}`;
    return { label: `Current Quarter (${quarterLabel})`, dates: dateRange };
}

function getLastQuarterWithDates() {
    var currentDate = new Date();
    var currentQuarter = Math.floor(currentDate.getMonth() / 3);
    var firstDay, lastDay, quarterLabel;

    // Adjust for currentQuarter to be 1-indexed for readability
    currentQuarter += 1;

    if (currentQuarter === 1) {
        // If the current quarter is Q1, the last quarter is Q4 of the previous year
        firstDay = new Date(currentDate.getFullYear() - 1, 9, 1); // October 1 of the previous year
        lastDay = new Date(currentDate.getFullYear() - 1, 11, 31); // December 31 of the previous year
        quarterLabel = `Q4 - ${firstDay.getFullYear()}`;
    } else {
        // Calculate start month of the last quarter
        var startMonth = (currentQuarter - 2) * 3;
        firstDay = new Date(currentDate.getFullYear(), startMonth, 1);
        lastDay = new Date(firstDay.getFullYear(), firstDay.getMonth() + 3, 0);
        quarterLabel = `Q${currentQuarter - 1} - ${firstDay.getFullYear()}`;
    }

    var dateRange = `${formatDateMonth(firstDay)} - ${formatDateMonth(lastDay)}`;
    return { label: `Last Quarter (${quarterLabel})`, dates: dateRange };
}
function bridgeAINoDataMsg($gridId, msg, gridname) {

    var noDataMsg = $("#" + $gridId).find(".no-data-message");
    noDataMsg.find('img').attr('src', "https://partner-marketing.bitdefender.com/v4u/img/svg/ai-no-data.svg");

    // Update the link text
    noDataMsg.find("h3").remove();
    noDataMsg.addClass("ai-custom-nodata")

    // Append the message
    var message = $(`<p>${msg}</p><a href="#" class="ai-grid-click" data-name="${gridname}">Click here to ${gridname.toLowerCase()}</a>`);
    noDataMsg.find("div").append(message);

};

function getThisYearWithDates() {
    var currentDate = new Date();
    var firstDay = new Date(currentDate.getFullYear(), 0, 1);
    var lastDay = new Date(currentDate.getFullYear(), 11, 31);
    var yearLabel = `${firstDay.getFullYear()}`;
    var dateRange = `${formatDateMonth(firstDay)} - ${formatDateMonth(lastDay)}`;
    return { label: `Current Year (${yearLabel})`, dates: dateRange };
}

function getLastYearWithDates() {
    var currentDate = new Date();
    var firstDay = new Date(currentDate.getFullYear() - 1, 0, 1);
    var lastDay = new Date(currentDate.getFullYear() - 1, 11, 31);
    var yearLabel = `${firstDay.getFullYear()}`;
    var dateRange = `${formatDateMonth(firstDay)} - ${formatDateMonth(lastDay)}`;
    return { label: `Last Year (${yearLabel})`, dates: dateRange };
}
function formatToDoubleDigits(value) {
    return value.toString().padStart(2, '0');
}

function showPopupIft() {
    if (sessionStorage.getItem('smallBox') === 'true') {
        var messageTitle = sessionStorage.getItem('messageTitle');
        var messageContent = sessionStorage.getItem('messageContent');
        var isIframe = sessionStorage.getItem('isIframe');

        var msgJSON = {
            iconSmall: "fa fa-check bounce animated",
            title: messageTitle,
            content: messageContent,
            color: "#659265",
            timeout: 3000
        };
        if (isIframe) {
            window.parent.$.smallBox(msgJSON);
        }
        else {
            $.smallBox(msgJSON);
        }
        sessionStorage.removeItem('smallBox');
        sessionStorage.removeItem('messageTitle');
        sessionStorage.removeItem('messageContent');
        sessionStorage.removeItem('isIframe');
    }
}

function iftModalPreview(showModal, options, modalHeight=600, questionName, IFTValue) {
    if (showModal) {
        modal.showIQPreview(options);
    } else {
        registeredurl = "https://partner-marketing.bitdefender.com/?clean#interactivequestionnaire/preview/" + IFTValue;
        openThirdPartyUrlInModal(questionName, registeredurl, modalHeight);
        $(document.body).on('click', '#modalActionButtons a[data-action-name="close"]', function (event) {
            window.location.reload();
        });
    }
}
function iftModalPreviewOnEdit(showModal, options, modalHeight =600, questionName, IFTValue,oppid) {
    if (showModal) {
        modal.showIFTEditDetails(options);
    } else {
        registeredurl = "https://partner-marketing.bitdefender.com/?clean#interactivequestionnaire/previewdata/" + IFTValue + "/" + oppid;
        openThirdPartyUrlInModal(questionName, registeredurl, modalHeight);
        $(document.body).on('click', '#modalActionButtons a[data-action-name="close"]', function (event) {
            window.location.reload();
        });
    }
}

function ValidateSpecialCharacters(term, _requestID) { //filter autocomplete 
    var specialChars = /[<>]/;
    if (specialChars.test(term)) {
        $("#" + _requestID).find('.select2-focused').prop('disabled', true);
        $.OpenSmartMessageBox2({ title: 'Restricted!', content: ' Special characters like \'<\' and \'>\' are not allowed.', buttons: '[Ok]' },
            function (result) {
                if (result === 'Ok'){
                    $("#" + _requestID).find('input').prop('disabled', false);
                        $.CloseSmartMessageBox2();
                }
            }
        );
        return false;
    }
    return true;
}
function sortJsonArray(arr,prop, asc) {
    arr.sort(function (a, b) {
        if (asc) {
            return (a[prop] > b[prop]) ? 1 : ((a[prop] < b[prop]) ? -1 : 0);
        } else {
            return (b[prop] > a[prop]) ? 1 : ((b[prop] < a[prop]) ? -1 : 0);
        }
    });
    return arr;
}

function searchKeywordAutocomplete(url, $element) {
    $($element).keyword2({
        //placeholder: 'Search your Assets',
        minimumInputLength: 1,
        allowClear: false,
        multiple: false,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                return {
                    q: term,
                    limit: 25,
                    type: 905,
                    timestamp: $.now(),
                    fq: term,
                    id: 0
                };
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: function (record) {
            return "<div>" + Encoder.charEncode(record.keyword) + "</div>";
        },
        formatSelection: function (data) {
            if (data.keyword != undefined)
                $('.select2-search input').val(data.keyword);
        },
        initSelection: function (element, callback) {

        },
        createSearchChoice: function (term, data) {
            if ($(data).filter(function () { return this.keyword.localeCompare(term) === 0; }).length === 0) {
                return { keyword: term };
            }
        }
    });
}

function GetSupplierType(supplierType) {
    switch (supplierType.toString()) {
        case "0": return 'None';
        case "1": return 'Internal';
        case "2": return 'External';
    }
}
function GetPartnerTypes(partnerType) {
    switch (partnerType.toString()) {
        case "0": return 'Partner';
        case "1": return 'Supplier';
        case "2": return 'Buyer';
    }
}
function bridgeAINoDataMsg($gridId, msg, gridname) {
    
    var noDataMsg = $("#" + $gridId).find(".no-data-message");
    noDataMsg.find('img').attr('src', "https://partner-marketing.bitdefender.com/v4u/img/svg/ai-no-data.svg");

    // Update the link text
    noDataMsg.find("h3").remove();
    noDataMsg.addClass("ai-custom-nodata")

    // Append the message
    var message = $(`<p>${msg}</p><a href="#" class="ai-grid-click" data-name="${gridname}">Click here to ${gridname.toLowerCase()}</a>`);
    noDataMsg.find("div").append(message);

};
function downloadTemplatesZip(id) {
    api.call("DownloadZipForDripSendTemplates", { tid: id }, onPdfDownloadSuccess, onFailure);
}
function checkNewAssetThreshold(value) {
    if (daydiff(value.createdon) < newAssetThreshold) {
        return true;
    }
    else if (value.createdon == "" || value.createdon == null || value.createdon == undefined)   // Added condition for View Assets
    {
        if (daydiff(value.flag22) < newAssetThreshold) {  
            return true;
        }
    }
    else
        return false;
}
function openCourseorScorm(courseLink) {
    return window.open(courseLink, "ampExternalTab");
}
function ShowViewOrMarkDoneBtn(isManualButton, $iframe) {
    if (!$iframe.closest(".step-asset.embeded-asset").attr("taskcompletedon")){ // show View or Mark DOne Button if only the embed asset is not completed.
        if (isManualButton) {
            $iframe.closest("li").find(".embed-view-frame").hide();
            $iframe.closest("li").find(".task-done-wrapper").show();
        }
        else {
            $iframe.closest("li").find(".embed-view-loader").hide(); // always hide loader first
            $iframe.closest("li").find(".embed-view-frame").show();
            $iframe.closest("li").find("button.embed-view").show();
        }
    }
    else{
        $iframe.closest("li").find(".embed-view-frame").hide();
        if (isManualButton)
            $iframe.closest("li").find(".task-done-wrapper").show();
    }
}
//Function to perform date-time-picker in bottom align
function applyBottomLeftDateTimePicker(customField, fieldData) {
    for (var j = 0; j < customField.columns.length; j++) {
        var col = customField.columns[j];
        if (col.regexformat == "datetime")
            fieldData[col.name]["isbottomdtpicker"] = true;
    }
}
// function to bind ai logo with name in the modal headers.
function changeModalHeadersLogo() {
    return `<span class="ai-sprinkler-view" style="top:-9px;position:relative;"><img style="width:39px;height:39px;float: left;margin-right:10px;position:relative;top:2px;" src="https://partner-marketing.bitdefender.com/img/Ai-icon-btn.png" /> Bridge AI <br><span style="font-size:14px;line-height:20px;color:#2F3542;font-weight:400 !important;bottom:5px;position:relative;"${options.name} ><strong style="font-weight:500 !important;"> ${options.name}</strong> </span></span>`;
}
function getCurrentDateTime() { //07/29/25 06:42:15 PM UTC format
    var utcNow = new Date();
    var year = utcNow.getUTCFullYear();
    var month = (utcNow.getUTCMonth() + 1).toString().padStart(2, '0');
    var day = utcNow.getUTCDate().toString().padStart(2, '0');
    var hours = utcNow.getUTCHours().toString().padStart(2, '0');
    var ampm = hours >= 12 ? 'PM' : 'AM';
    var minutes = utcNow.getUTCMinutes().toString().padStart(2, '0');
    var seconds = utcNow.getUTCSeconds().toString().padStart(2, '0');
    var formattedUTC = `${month}/${day}/${year} ${hours}:${minutes}:${seconds} ${ampm} UTC`;
    return formattedUTC;
}


function safeDecode(str) {
    try {
        return decodeURIComponent(str);
    } catch {
        return str.replace(/%([^0-9A-F]{2})/gi, "%25$1"); // escape invalid %
    }
}

;
/**
 * summernote.js
 * (c) 2013~ Alan Hong
 * summernote may be freely distributed under the MIT license./
 */
(function ($) {
    "use strict";
    //Check Platform/Agent
    var bMac = navigator.appVersion.indexOf('Mac') > -1;
    var bMSIE = navigator.userAgent.indexOf('MSIE') > -1;

    /**
     * func utils (for high-order func's arg)
     */
    var func = function () {
        var eq = function (elA) { return function (elB) { return elA === elB; }; };
        var eq2 = function (elA, elB) { return elA === elB; };
        var fail = function () { return false; };
        var not = function (f) { return function () { return !f.apply(f, arguments); } };
        var self = function (a) { return a; }
        return { eq: eq, eq2: eq2, fail: fail, not: not, self: self };
    }();

    /**
     * list utils
     */
    var list = function () {
        var head = function (array) { return array[0]; };
        var last = function (array) { return array[array.length - 1]; };
        var initial = function (array) { return array.slice(0, array.length - 1); };
        var tail = function (array) { return array.slice(1); };

        var sum = function (array, fn) {
            fn = fn || func.self;
            return array.reduce(function (memo, v) {
                return memo + fn(v);
            }, 0);
        };

        var from = function (collection) {
            var result = [], idx = -1, length = collection.length;
            while (++idx < length) {
                result[idx] = collection[idx];
            }
            return result;
        };

        var clusterBy = function (array, fn) {
            if (array.length === 0) { return []; }
            var aTail = tail(array);
            return aTail.reduce(function (memo, v) {
                var aLast = last(memo);
                if (fn(last(aLast), v)) {
                    aLast[aLast.length] = v;
                } else {
                    memo[memo.length] = [v];
                }
                return memo;
            }, [[head(array)]]);
        };

        var compact = function (array) {
            var aResult = [];
            for (var idx = 0, sz = array.length; idx < sz; idx++) {
                if (array[idx]) { aResult.push(array[idx]); };
            };
            return aResult;
        };

        return {
            head: head, last: last, initial: initial, tail: tail,
            sum: sum, from: from, compact: compact, clusterBy: clusterBy
        };
    }();

    /**
     * dom utils
     */
    var dom = function () {
        var makePredByNodeName = function (sNodeName) {
            // nodeName of element is always uppercase.
            return function (node) { return node && node.nodeName === sNodeName; };
        };

        var isPara = function (node) {
            return node && /^P|^LI|^H[1-7]/.test(node.nodeName);
        };

        var isList = function (node) {
            return node && /^UL|^OL/.test(node.nodeName);
        };

        var isEditable = function (node) {
            return node && $(node).hasClass('note-editable');
        };

        var isControlSizing = function (node) {
            return node && $(node).hasClass('note-control-sizing');
        };

        // ancestor: find nearest ancestor predicate hit
        var ancestor = function (node, pred) {
            while (node) {
                if (pred(node)) { return node; }
                node = node.parentNode;
            }
            return null;
        };

        // listAncestor: listing ancestor nodes (until predicate hit: optional)
        var listAncestor = function (node, pred) {
            pred = pred || func.fail;

            var aAncestor = [];
            ancestor(node, function (el) {
                aAncestor.push(el);
                return pred(el);
            });
            return aAncestor;
        };

        // commonAncestor: find commonAncestor
        var commonAncestor = function (nodeA, nodeB) {
            var aAncestor = listAncestor(nodeA);
            for (var n = nodeB; n; n = n.parentNode) {
                if ($.inArray(n, aAncestor) > -1) { return n; }
            }
            return null; // difference document area
        };

        // listBetween: listing all Nodes between nodeA and nodeB
        // FIXME: nodeA and nodeB must be sorted, use comparePoints later.
        var listBetween = function (nodeA, nodeB) {
            var aNode = [];

            var bStart = false, bEnd = false;
            var fnWalk = function (node) {
                if (!node) { return; } // traverse fisnish
                if (node === nodeA) { bStart = true; } // start point
                if (bStart && !bEnd) { aNode.push(node) } // between
                if (node === nodeB) { bEnd = true; return; } // end point

                for (var idx = 0, sz = node.childNodes.length; idx < sz; idx++) {
                    fnWalk(node.childNodes[idx]);
                }
            }

            fnWalk(commonAncestor(nodeA, nodeB)); // DFS with commonAcestor.
            return aNode;
        };

        // listPrev: listing prevSiblings (until predicate hit: optional)
        var listPrev = function (node, pred) {
            pred = pred || func.fail;

            var aNext = [];
            while (node) {
                aNext.push(node);
                if (pred(node)) { break; }
                node = node.previousSibling;
            };
            return aNext;
        };

        // listNext: listing nextSiblings (until predicate hit: optional)
        var listNext = function (node, pred) {
            pred = pred || func.fail;

            var aNext = [];
            while (node) {
                aNext.push(node);
                if (pred(node)) { break; }
                node = node.nextSibling;
            };
            return aNext;
        };

        // insertAfter: insert node after preceding
        var insertAfter = function (node, preceding) {
            var next = preceding.nextSibling, parent = preceding.parentNode;
            if (next) {
                parent.insertBefore(node, next);
            } else {
                parent.appendChild(node);
            }
            return node;
        };

        // appends: append children
        var appends = function (node, aChild) {
            $.each(aChild, function (idx, child) {
                node.appendChild(child);
            });
            return node;
        };

        var isText = makePredByNodeName('#text');

        // length: size of element.
        var length = function (node) {
            if (isText(node)) { return node.nodeValue.length; }
            return node.childNodes.length;
        };

        // position: offset from parent.
        var position = function (node) {
            var offset = 0;
            while (node = node.previousSibling) { offset += 1; }
            return offset;
        };

        // makeOffsetPath: return offsetPath(offset list) from ancestor
        var makeOffsetPath = function (ancestor, node) {
            var aAncestor = list.initial(listAncestor(node, func.eq(ancestor)));
            return $.map(aAncestor, position).reverse();
        };

        // fromtOffsetPath: return element from offsetPath(offset list)
        var fromOffsetPath = function (ancestor, aOffset) {
            var current = ancestor;
            for (var i = 0, sz = aOffset.length; i < sz; i++) {
                current = current.childNodes[aOffset[i]];
            }
            return current;
        };

        // splitData: split element or #text
        var splitData = function (node, offset) {
            if (offset === 0) { return node; }
            if (offset >= length(node)) { return node.nextSibling; }

            // splitText
            if (isText(node)) { return node.splitText(offset); }

            // splitElement
            var child = node.childNodes[offset];
            node = insertAfter(node.cloneNode(false), node);
            return appends(node, listNext(child));
        };

        // split: split dom tree by boundaryPoint(pivot and offset)
        var split = function (root, pivot, offset) {
            var aAncestor = listAncestor(pivot, func.eq(root));
            if (aAncestor.length === 1) { return splitData(pivot, offset); }
            return aAncestor.reduce(function (node, parent) {
                var clone = parent.cloneNode(false);
                insertAfter(clone, parent);
                if (node === pivot) {
                    node = splitData(node, offset);
                }
                appends(clone, listNext(node));
                return clone;
            });
        };

        // remove: remove node, (bRemoveChild: remove child or not)
        var remove = function (node, bRemoveChild) {
            if (!node || !node.parentNode) { return; }
            if (node.removeNode) { return node.removeNode(bRemoveChild); }

            var elParent = node.parentNode;
            if (!bRemoveChild) {
                var aNode = [];
                for (var i = 0, sz = node.childNodes.length; i < sz; i++) {
                    aNode.push(node.childNodes[i]);
                }

                for (var i = 0, sz = aNode.length; i < sz; i++) {
                    elParent.insertBefore(aNode[i], node);
                }
            }

            elParent.removeChild(node);
        };

        var unescape = function (str) {
            return $("<div/>").html(str).text();
        };
        var html = function ($node) {
            return dom.isTextarea($node[0]) ? unescape($node.val()) : $node.html();
        };

        return {
            isText: isText,
            isPara: isPara, isList: isList,
            isEditable: isEditable, isControlSizing: isControlSizing,
            isAnchor: makePredByNodeName('A'),
            isDiv: makePredByNodeName('DIV'), isSpan: makePredByNodeName('SPAN'),
            isB: makePredByNodeName('B'), isU: makePredByNodeName('U'),
            isS: makePredByNodeName('S'), isI: makePredByNodeName('I'),
            isImg: makePredByNodeName('IMG'), isTextarea: makePredByNodeName('TEXTAREA'),
            ancestor: ancestor, listAncestor: listAncestor,
            listNext: listNext, listPrev: listPrev,
            commonAncestor: commonAncestor, listBetween: listBetween,
            insertAfter: insertAfter, position: position,
            makeOffsetPath: makeOffsetPath, fromOffsetPath: fromOffsetPath,
            split: split, remove: remove, html: html
        };
    }();

    /**
     * range module
     */
    var range = function () {
        var bW3CRangeSupport = !!document.createRange;

        // return boundaryPoint from TextRange, inspired by Andy Na's HuskyRange.js
        var textRange2bp = function (textRange, bStart) {
            var elCont = textRange.parentElement(), nOffset;

            var tester = document.body.createTextRange(), elPrevCont;
            var aChild = list.from(elCont.childNodes);
            for (nOffset = 0; nOffset < aChild.length; nOffset++) {
                if (dom.isText(aChild[nOffset])) { continue; }
                tester.moveToElementText(aChild[nOffset]);
                if (tester.compareEndPoints('StartToStart', textRange) >= 0) { break; }
                elPrevCont = aChild[nOffset];
            }

            if (nOffset != 0 && dom.isText(aChild[nOffset - 1])) {
                var textRangeStart = document.body.createTextRange(), elCurText = null;
                textRangeStart.moveToElementText(elPrevCont || elCont);
                textRangeStart.collapse(!elPrevCont);
                elCurText = elPrevCont ? elPrevCont.nextSibling : elCont.firstChild;

                var pointTester = textRange.duplicate();
                pointTester.setEndPoint('StartToStart', textRangeStart);
                var nTextCount = pointTester.text.replace(/[\r\n]/g, '').length;

                while (nTextCount > elCurText.nodeValue.length && elCurText.nextSibling) {
                    nTextCount -= elCurText.nodeValue.length;
                    elCurText = elCurText.nextSibling;
                }
                var sDummy = elCurText.nodeValue; //enforce IE to re-reference elCurText

                if (bStart && elCurText.nextSibling && dom.isText(elCurText.nextSibling) &&
                    nTextCount == elCurText.nodeValue.length) {
                    nTextCount -= elCurText.nodeValue.length;
                    elCurText = elCurText.nextSibling;
                }

                elCont = elCurText;
                nOffset = nTextCount;
            }

            return { cont: elCont, offset: nOffset };
        };

        // return TextRange from boundary point (inspired by google closure-library)
        var bp2textRange = function (bp) {
            var textRangeInfo = function (elCont, nOffset) {
                var elNode, bCollapseToStart;

                if (dom.isText(elCont)) {
                    var aPrevText = dom.listPrev(elCont, func.not(dom.isText));
                    var elPrevCont = list.last(aPrevText).previousSibling;
                    elNode = elPrevCont || elCont.parentNode;
                    nOffset += list.sum(list.tail(aPrevText), dom.length);
                    bCollapseToStart = !elPrevCont;
                } else {
                    elNode = elCont.childNodes[nOffset] || elCont;
                    if (dom.isText(elNode)) {
                        return textRangeInfo(elNode, nOffset);
                    }

                    nOffset = 0;
                    bCollapseToStart = false;
                }

                return { cont: elNode, collapseToStart: bCollapseToStart, offset: nOffset };
            }

            var textRange = document.body.createTextRange();
            var info = textRangeInfo(bp.cont, bp.offset);

            textRange.moveToElementText(info.cont);
            textRange.collapse(info.collapseToStart);
            textRange.moveStart('character', info.offset);
            return textRange;
        };

        // {startContainer, startOffset, endContainer, endOffset}
        var WrappedRange = function (sc, so, ec, eo) {
            this.sc = sc; this.so = so;
            this.ec = ec; this.eo = eo;

            // nativeRange: get nativeRange from sc, so, ec, eo
            var nativeRange = function () {
                if (bW3CRangeSupport) {
                    var w3cRange = document.createRange();
                    w3cRange.setStart(sc, so);
                    w3cRange.setEnd(ec, eo);
                    return w3cRange;
                } else {
                    var textRange = bp2textRange({ cont: sc, offset: so });
                    textRange.setEndPoint('EndToEnd', bp2textRange({ cont: ec, offset: eo }));
                    return textRange;
                }
            };

            // select: update visible range
            this.select = function () {
                var nativeRng = nativeRange();
                if (bW3CRangeSupport) {
                    var selection = document.getSelection();
                    if (selection.rangeCount > 0) { selection.removeAllRanges(); }
                    selection.addRange(nativeRng);
                } else {
                    nativeRng.select();
                }
            };

            // listPara: listing paragraphs on range
            this.listPara = function () {
                var aNode = dom.listBetween(sc, ec);
                var aPara = list.compact($.map(aNode, function (node) {
                    return dom.ancestor(node, dom.isPara);
                }));
                return $.map(list.clusterBy(aPara, func.eq2), list.head);
            };

            // listDiv: listing div on range
            this.listDiv = function () {
                var aNode = dom.listBetween(sc, ec);
                var aDiv = list.compact($.map(aNode, function (node) {
                    return dom.ancestor(node, dom.isDiv);
                }));
                return $.map(list.clusterBy(aDiv, func.eq2), list.head);
            };

            // makeIsOn: return isOn(pred) function
            var makeIsOn = function (pred) {
                return function () {
                    var elAncestor = dom.ancestor(sc, pred);
                    return elAncestor && (elAncestor === dom.ancestor(ec, pred));
                };
            };

            // isOnEditable: judge whether range is on editable or not
            this.isOnEditable = makeIsOn(dom.isEditable);
            // isOnList: judge whether range is on list node or not
            this.isOnList = makeIsOn(dom.isList);
            // isOnAnchor: judge whether range is on anchor node or not
            this.isOnAnchor = makeIsOn(dom.isAnchor);

            // isCollapsed: judge whether range was collapsed
            this.isCollapsed = function () { return sc === ec && so === eo; };

            // insertNode
            this.insertNode = function (node) {
                var nativeRng = nativeRange();
                if (bW3CRangeSupport) {
                    nativeRng.insertNode(node);
                } else {
                    nativeRng.pasteHTML(node.outerHTML); // NOTE: missing node reference.
                }
            };

            this.toString = function () {
                var nativeRng = nativeRange();
                if (bW3CRangeSupport) {
                    return nativeRng.toString();
                } else {
                    return nativeRng.text;
                }
            };

            //bookmark: offsetPath bookmark
            this.bookmark = function (elEditable) {
                return {
                    s: { path: dom.makeOffsetPath(elEditable, sc), offset: so },
                    e: { path: dom.makeOffsetPath(elEditable, ec), offset: eo }
                };
            };
        };

        return { // Range Object
            // create Range Object From arguments or Browser Selection
            create: function (sc, so, ec, eo) {
                if (arguments.length === 0) { // from Browser Selection
                    if (bW3CRangeSupport) { // webkit, firefox
                        var nativeRng = document.getSelection().getRangeAt(0);
                        sc = nativeRng.startContainer, so = nativeRng.startOffset,
                        ec = nativeRng.endContainer, eo = nativeRng.endOffset;
                    } else { // IE8: TextRange
                        var textRange = document.selection.createRange();
                        var textRangeEnd = textRange.duplicate(); textRangeEnd.collapse(false);
                        var textRangeStart = textRange; textRangeStart.collapse(true);

                        var bpStart = textRange2bp(textRangeStart, true),
                        bpEnd = textRange2bp(textRangeEnd, false);

                        sc = bpStart.cont, so = bpStart.offset;
                        ec = bpEnd.cont, eo = bpEnd.offset;
                    }
                } else if (arguments.length === 2) { //collapsed
                    ec = sc; eo = so;
                }
                return new WrappedRange(sc, so, ec, eo);
            },
            // createFromBookmark
            createFromBookmark: function (elEditable, bookmark) {
                var sc = dom.fromOffsetPath(elEditable, bookmark.s.path);
                var so = bookmark.s.offset;
                var ec = dom.fromOffsetPath(elEditable, bookmark.e.path);
                var eo = bookmark.e.offset;
                return new WrappedRange(sc, so, ec, eo);
            }
        };
    }();

    /**
     * Style
     */
    var Style = function () {
        // para level style
        this.stylePara = function (rng, oStyle) {
            var aPara = rng.listPara();
            $.each(aPara, function (idx, elPara) {
                $.each(oStyle, function (sKey, sValue) {
                    elPara.style[sKey] = sValue;
                });
            });
        };
        this.styleDiv = function (rng, oStyle) {
            var aDiv = rng.listDiv();
            $.each(aDiv, function (idx, elDiv) {
                $.each(oStyle, function (sKey, sValue) {
                    elDiv.style[sKey] = sValue;
                });
            });
        };

        // get current style, elTarget: target element on event.
        this.current = function (rng, elTarget) {
            var welCont = $(dom.isText(rng.sc) ? rng.sc.parentNode : rng.sc);
            var oStyle = welCont.css(['font-size', 'text-align',
                                      'list-style-type', 'line-height']) || {};

            oStyle['font-size'] = parseInt(oStyle['font-size']);

            // document.queryCommandState for toggle state
            oStyle['font-bold'] = document.queryCommandState('bold') ? 'bold' : 'normal';
            oStyle['font-italic'] = document.queryCommandState('italic') ? 'italic' : 'normal';
            oStyle['font-underline'] = document.queryCommandState('underline') ? 'underline' : 'normal';

            // list-style-type to list-style(unordered, ordered)
            if (!rng.isOnList()) {
                oStyle['list-style'] = 'none';
            } else {
                var aOrderedType = ['circle', 'disc', 'disc-leading-zero', 'square'];
                var bUnordered = $.inArray(oStyle['list-style-type'], aOrderedType) > -1;
                oStyle['list-style'] = bUnordered ? 'unordered' : 'ordered';
            }

            var elPara = dom.ancestor(rng.sc, dom.isPara);
            if (elPara && elPara.style['line-height']) {
                oStyle['line-height'] = elPara.style.lineHeight;
            } else {
                var lineHeight = parseInt(oStyle['line-height']) / parseInt(oStyle['font-size']);
                oStyle['line-height'] = lineHeight.toFixed(1);
            }

            oStyle.image = dom.isImg(elTarget) && elTarget;
            oStyle.anchor = rng.isOnAnchor() && dom.ancestor(rng.sc, dom.isAnchor);
            oStyle.aAncestor = dom.listAncestor(rng.sc, dom.isEditable);

            return oStyle;
        }
    };

    /**
     * History
     */
    var History = function () {
        var aUndo = [], aRedo = [];

        var makeSnap = function (welEditable) {
            var elEditable = welEditable[0], rng = range.create();
            return {
                contents: welEditable.html(), bookmark: rng.bookmark(elEditable),
                scrollTop: welEditable.scrollTop()
            };
        };

        var applySnap = function (welEditable, oSnap) {
            welEditable.html(oSnap.contents).scrollTop(oSnap.scrollTop);
            range.createFromBookmark(welEditable[0], oSnap.bookmark).select();
        };

        this.undo = function (welEditable) {
            var oSnap = makeSnap(welEditable);
            if (aUndo.length === 0) { return; }
            applySnap(welEditable, aUndo.pop()), aRedo.push(oSnap);
        };

        this.redo = function (welEditable) {
            var oSnap = makeSnap(welEditable);
            if (aRedo.length === 0) { return; }
            applySnap(welEditable, aRedo.pop()), aUndo.push(oSnap);
        };

        this.recordUndo = function (welEditable) {
            aRedo = [], aUndo.push(makeSnap(welEditable));
        };
    };

    /**
     * Editor
     */
    var Editor = function () {
        //currentStyle
        var style = new Style();
        this.currentStyle = function (elTarget) {
            var rng = range.create();
            return rng.isOnEditable() && style.current(rng, elTarget);
        };

        this.tab = function (welEditable) {
            recordUndo(welEditable);
            var rng = range.create();
            var sNbsp = new Array(welEditable.data('tabsize') + 1).join('&nbsp;')
            rng.insertNode($('<span id="noteTab">' + sNbsp + '</span>')[0]);
            var welTab = $('#noteTab').removeAttr('id');
            rng = range.create(welTab[0], 1);
            rng.select();
            dom.remove(welTab[0]);
        };

        // undo
        this.undo = function (welEditable) {
            welEditable.data('NoteHistory').undo(welEditable);
        };

        // redo
        this.redo = function (welEditable) {
            welEditable.data('NoteHistory').redo(welEditable);
        };

        // recordUndo
        var recordUndo = this.recordUndo = function (welEditable) {
            if (welEditable.data('NoteHistory') !== undefined)
                welEditable.data('NoteHistory').recordUndo(welEditable);
        };

        // native commands(with execCommand)
        var aCmd = ['bold', 'italic', 'underline', 'strikethrough',
                    'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull',
                    'insertOrderedList', 'insertUnorderedList',
                    'indent', 'outdent', 'formatBlock', 'removeFormat',
                    'backColor', 'foreColor', 'insertImage', 'insertHorizontalRule'];

        for (var idx = 0, len = aCmd.length; idx < len; idx++) {
            this[aCmd[idx]] = function (sCmd) {
                return function (welEditable, sValue) {
                    recordUndo(welEditable);
                    document.execCommand(sCmd, false, sValue);
                };
            }(aCmd[idx]);
        }

        this.formatBlock = function (welEditable, sValue) {
            sValue = bMSIE ? '<' + sValue + '>' : sValue;
            document.execCommand('FormatBlock', false, sValue);
        };

        this.fontSize = function (welEditable, sValue) {
            recordUndo(welEditable);
            document.execCommand('fontSize', false, 3);
            // <font size='3'> to <font style='font-size={sValue}px;'>
            var welFont = welEditable.find('font[size=3]');
            welFont.removeAttr('size').css('font-size', sValue + 'px');
        };

        this.lineHeight = function (welEditable, sValue) {
            recordUndo(welEditable);
            style.stylePara(range.create(), { lineHeight: sValue });
            style.styleDiv(range.create(), { lineHeight: sValue });
        };

        this.unlink = function (welEditable) {
            var rng = range.create();
            if (rng.isOnAnchor()) {
                recordUndo(welEditable);
                var elAnchor = dom.ancestor(rng.sc, dom.isAnchor);
                rng = range.create(elAnchor, 0, elAnchor, 1);
                rng.select();
                document.execCommand('unlink');
            }
        };

        this.setLinkDialog = function (welEditable, fnShowDialog) {
            var rng = range.create();
            if (rng.isOnAnchor()) {
                var elAnchor = dom.ancestor(rng.sc, dom.isAnchor);
                rng = range.create(elAnchor, 0, elAnchor, 1);
            }
            fnShowDialog({
                range: rng,
                text: rng.toString(),
                url: rng.isOnAnchor() ? dom.ancestor(rng.sc, dom.isAnchor).href : ''
            }, function (sLinkUrl) {
                rng.select(); recordUndo(welEditable);

                var bProtocol = sLinkUrl.url.toLowerCase().indexOf('://') !== -1;
                var sLinkUrlWithProtocol = bProtocol ? sLinkUrl.url : 'http://' + sLinkUrl.url;

                //IE: createLink when range collapsed.
                if (bMSIE && rng.isCollapsed()) {
                    rng.insertNode($('<A id="linkAnchor">' + sLinkUrl.text + '</A>')[0]);
                    var welAnchor = $('#linkAnchor').removeAttr('id')
                                                    .attr('href', sLinkUrlWithProtocol);
                    rng = range.create(welAnchor[0], 0, welAnchor[0], 1);
                    rng.select();
                } else {
                    document.execCommand('insertHTML', false, '<a href="' + sLinkUrlWithProtocol + '" target="_blank">' + sLinkUrl.text + '</a>');
                }
            });
        };

        this.color = function (welEditable, sObjColor) {
            var oColor = JSON.parse(sObjColor);
            var foreColor = oColor.foreColor, backColor = oColor.backColor;

            recordUndo(welEditable);
            if (foreColor) { document.execCommand('foreColor', false, foreColor); }
            if (backColor) { document.execCommand('backColor', false, backColor); }
        };

        this.insertTable = function (welEditable, sDim) {
            recordUndo(welEditable);
            var aDim = sDim.split('x');
            var nCol = aDim[0], nRow = aDim[1];

            var aTD = [], sTD;
            var sWhitespace = bMSIE ? '&nbsp;' : '<br/>';
            for (var idxCol = 0; idxCol < nCol; idxCol++) {
                aTD.push('<td>' + sWhitespace + '</td>');
            }
            sTD = aTD.join('');

            var aTR = [], sTR;
            for (var idxRow = 0; idxRow < nRow; idxRow++) {
                aTR.push('<tr>' + sTD + '</tr>');
            }
            sTR = aTR.join('');
            var sTable = '<table class="table table-bordered">' + sTR + '</table>';
            range.create().insertNode($(sTable)[0]);
        };

        this.float = function (welEditable, sValue, elTarget) {
            recordUndo(welEditable);
            elTarget.style.cssFloat = sValue;
        };

        this.resize = function (welEditable, sValue, elTarget) {
            recordUndo(welEditable);
            elTarget.style.width = welEditable.width() * sValue + 'px';
            elTarget.style.height = '';
        };

        this.resizeTo = function (pos, welTarget) {
            var newRatio = pos.y / pos.x;
            var ratio = welTarget.data('ratio');

            welTarget.css({
                width: ratio > newRatio ? pos.x : pos.y / ratio,
                height: ratio > newRatio ? pos.x * ratio : pos.y
            });
        };
    };

    /**
     * Toolbar
     */
    var Toolbar = function () {
        this.update = function (welToolbar, oStyle) {
            //handle selectbox for fontsize, lineHeight
            var checkDropdownMenu = function (welBtn, nValue) {
                welBtn.find('.dropdown-menu li a').each(function () {
                    var bChecked = $(this).attr('data-value') == nValue;
                    this.className = bChecked ? 'checked' : '';
                });
            };

            var welFontsize = welToolbar.find('.note-fontsize');
            welFontsize.find('.note-current-fontsize').html(oStyle['font-size']);
            checkDropdownMenu(welFontsize, parseFloat(oStyle['font-size']));

            var welLineHeight = welToolbar.find('.note-height');
            checkDropdownMenu(welLineHeight, parseFloat(oStyle['line-height']));

            //check button state
            var btnState = function (sSelector, pred) {
                var welBtn = welToolbar.find(sSelector);
                welBtn[pred() ? 'addClass' : 'removeClass']('active');
            };

            btnState('button[data-event="bold"]', function () {
                return oStyle['font-bold'] === 'bold';
            });
            btnState('button[data-event="italic"]', function () {
                return oStyle['font-italic'] === 'italic';
            });
            btnState('button[data-event="underline"]', function () {
                return oStyle['font-underline'] === 'underline';
            });
            btnState('button[data-event="justifyLeft"]', function () {
                return oStyle['text-align'] === 'left' || oStyle['text-align'] === 'start';
            });
            btnState('button[data-event="justifyCenter"]', function () {
                return oStyle['text-align'] === 'center';
            });
            btnState('button[data-event="justifyRight"]', function () {
                return oStyle['text-align'] === 'right';
            });
            btnState('button[data-event="justifyFull"]', function () {
                return oStyle['text-align'] === 'justify';
            });
            btnState('button[data-event="insertUnorderedList"]', function () {
                return oStyle['list-style'] === 'unordered';
            });
            btnState('button[data-event="insertOrderedList"]', function () {
                return oStyle['list-style'] === 'ordered';
            });
        };

        this.updateRecentColor = function (elBtn, sEvent, sValue) {
            var welColor = $(elBtn).closest('.note-color');
            var welRecentColor = welColor.find('.note-recent-color');
            var oColor = JSON.parse(welRecentColor.attr('data-value'));
            oColor[sEvent] = sValue;
            welRecentColor.attr('data-value', JSON.stringify(oColor));
            var sKey = sEvent === 'backColor' ? 'background-color' : 'color';
            welRecentColor.find('i').css(sKey, sValue);
        };

        //this.updateFullscreen = function (welToolbar, bFullscreen) {
        //    var welBtn = welToolbar.find('button[data-event="fullscreen"]');
        //    welBtn[bFullscreen ? 'addClass' : 'removeClass']('active');
        //};
        this.updateCodeview = function (welToolbar, bCodeview) {
            var welBtn = welToolbar.find('button[data-event="codeview"]');
            welBtn[bCodeview ? 'addClass' : 'removeClass']('active');
        };

        this.enable = function (welToolbar) {
            welToolbar.find('button').not('button[data-event="codeview"]').removeClass('disabled');
        };

        this.disable = function (welToolbar) {
            welToolbar.find('button').not('button[data-event="codeview"]').addClass('disabled');
        };
    };

    /**
     * Popover
     */
    var Popover = function () {
        var showPopover = function (welPopover, elPlaceholder) {
            var welPlaceHolder = $(elPlaceholder);
            var pos = welPlaceHolder.position(), height = welPlaceHolder.height();
            welPopover.css({
                display: 'block',
                left: pos.left,
                top: pos.top + height
            });
        };

        this.update = function (welPopover, oStyle) {
            var welLinkPopover = welPopover.find('.note-link-popover'),
                welImagePopover = welPopover.find('.note-image-popover');
            if (oStyle.anchor) {
                var welAnchor = welLinkPopover.find('a');
                welAnchor.attr('href', oStyle.anchor.href).html(oStyle.anchor.href);
                showPopover(welLinkPopover, oStyle.anchor);
            } else {
                welLinkPopover.hide();
            }

            if (oStyle.image) {
                showPopover(welImagePopover, oStyle.image);
            } else {
                welImagePopover.hide();
            }
        };

        this.hide = function (welPopover) {
            welPopover.children().hide();
        };
    };

    /**
     * Handle
     */
    var Handle = function () {
        this.update = function (welHandle, oStyle) {
            var welSelection = welHandle.find('.note-control-selection');
            if (oStyle.image) {
                var welImage = $(oStyle.image);
                var pos = welImage.position();
                var szImage = { w: welImage.width(), h: welImage.height() };
                welSelection.css({
                    display: 'block',
                    left: pos.left, top: pos.top,
                    width: szImage.w, height: szImage.h
                }).data('target', oStyle.image); // save current image element.
                var sSizing = szImage.w + 'x' + szImage.h;
                welSelection.find('.note-control-selection-info').text(sSizing);
            } else {
                welSelection.hide();
            }
        };

        this.hide = function (welHandle) {
            welHandle.children().hide();
        };
    };

    /**
     * Dialog
     */
    var Dialog = function () {
        this.showImageDialog = function (welDialog, hDropImage, fnInsertImages) {

            var welImageDialog = welDialog.find('.note-image-dialog');
            var welDropzone = welDialog.find('.note-dropzone'),
                welImageInput = welDialog.find('.note-image-input');

            welImageDialog.on('shown.bs.modal', function (e) {
                welDropzone.on('dragenter dragover dragleave', false);
                welDropzone.on('drop', function (e) {
                    hDropImage(e); welImageDialog.modal('hide');
                });
                welImageInput.on('change', function (event) {
                    fnInsertImages(this.files); $(this).val('');
                    welImageDialog.modal('hide');
                });
            }).on('hidden.bs.modal', function (e) {
                welDropzone.off('dragenter dragover dragleave drop');
                welImageInput.off('change');
                welImageDialog.off('shown.bs.modal hidden.bs.modal');
            }).modal('show');

        };

        this.showLinkDialog = function (welDialog, linkInfo, callback) {
            var welLinkDialog = welDialog.find('.note-link-dialog');
            var welLinkText = welLinkDialog.find('.note-link-text'),
                welLinkUrl = welLinkDialog.find('.note-link-url'),
                welLinkBtn = welLinkDialog.find('.note-link-btn');

            welLinkDialog.on('shown.bs.modal', function (e) {
                welLinkText.val(linkInfo.text);
                welLinkUrl.val(linkInfo.url).keyup(function (event) {
                    if (welLinkUrl.val()) {
                        welLinkBtn.removeClass('disabled').attr('disabled', false);
                    } else {
                        welLinkBtn.addClass('disabled').attr('disabled', true);
                    }

                    //if (!linkInfo.text) { welLinkText.html(welLinkUrl.val()); };
                }).trigger('focus');
                welLinkBtn.click(function (event) {
                    welLinkDialog.modal('hide'); //hide and createLink (ie9+)
                    var linktext = welLinkText.val() == "" ? welLinkUrl.val() : welLinkText.val();
                    var obj = { url: welLinkUrl.val(), text: linktext };
                    callback(obj);
                    event.preventDefault();
                });
            }).on('hidden.bs.modal', function (e) {
                welLinkUrl.off('keyup');
                welLinkBtn.off('click');
                welLinkDialog.off('shown.bs.modal hidden.bs.modal');
            }).modal('show');
        };

        this.showHelpDialog = function (welDialog) {
            welDialog.find('.note-help-dialog').modal('show');
        };
    };

    /**
     * EventHandler
     *
     * handle mouse & key event on note
     */
    var EventHandler = function () {
        var editor = new Editor();
        var toolbar = new Toolbar(), popover = new Popover();
        var handle = new Handle(), dialog = new Dialog();

        var key = {
            BACKSPACE: 8, TAB: 9, ENTER: 13, SPACE: 32,
            NUM0: 48, NUM1: 49, NUM6: 54, NUM7: 55, NUM8: 56,
            B: 66, E: 69, I: 73, J: 74, K: 75, L: 76, R: 82, S: 83, U: 85,
            Y: 89, Z: 90, SLASH: 191,
            LEFTBRACKET: 219, BACKSLACH: 220, RIGHTBRACKET: 221
        };

        // makeLayoutInfo from editor's descendant node.
        var makeLayoutInfo = function (descendant) {
            var welEditor = $(descendant).closest('.note-editor');
            return {
                editor: function () { return welEditor; },
                toolbar: function () { return welEditor.find('.note-toolbar:last'); },
                editable: function () { return welEditor.find('.note-editable:last'); },
                codeable: function () { return welEditor.find('.note-codeable:last'); },
                statusbar: function () { return welEditor.find('.note-statusbar:last'); },
                popover: function () { return welEditor.find('.note-popover:last'); },
                handle: function () { return welEditor.find('.note-handle:last'); },
                dialog: function () { return welEditor.find('.note-dialog:last'); }
            };
        };

        var hKeydown = function (event) {
            var bCmd = bMac ? event.metaKey : event.ctrlKey,
                bShift = event.shiftKey, keyCode = event.keyCode;

            // optimize
            var bExecCmd = (bCmd || bShift || keyCode === key.TAB);
            var oLayoutInfo = (bExecCmd) ? makeLayoutInfo(event.target) : null;

            if (keyCode === key.TAB && oLayoutInfo.editable().data('tabsize')) {
                editor.tab(oLayoutInfo.editable());
            } else if (bCmd && ((bShift && keyCode === key.Z) || keyCode === key.Y)) {
                editor.redo(oLayoutInfo.editable());
            } else if (bCmd && keyCode === key.Z) {
                editor.undo(oLayoutInfo.editable());
            } else if (bCmd && keyCode === key.B) {
                editor.bold(oLayoutInfo.editable());
            } else if (bCmd && keyCode === key.I) {
                editor.italic(oLayoutInfo.editable());
            } else if (bCmd && keyCode === key.U) {
                editor.underline(oLayoutInfo.editable());
            } else if (bCmd && bShift && keyCode === key.S) {
                editor.strikethrough(oLayoutInfo.editable());
            } else if (bCmd && keyCode === key.BACKSLACH) {
                editor.removeFormat(oLayoutInfo.editable());
            } else if (bCmd && keyCode === key.K) {
                editor.setLinkDialog(oLayoutInfo.editable(), function (linkInfo, cb) {
                    dialog.showLinkDialog(oLayoutInfo.dialog(), linkInfo, cb);
                });
            } else if (bCmd && keyCode === key.SLASH) {
                dialog.showHelpDialog(oLayoutInfo.dialog());
            } else if (bCmd && bShift && keyCode === key.L) {
                editor.justifyLeft(oLayoutInfo.editable());
            } else if (bCmd && bShift && keyCode === key.E) {
                editor.justifyCenter(oLayoutInfo.editable());
            } else if (bCmd && bShift && keyCode === key.R) {
                editor.justifyRight(oLayoutInfo.editable());
            } else if (bCmd && bShift && keyCode === key.J) {
                editor.justifyFull(oLayoutInfo.editable());
            } else if (bCmd && bShift && keyCode === key.NUM7) {
                editor.insertUnorderedList(oLayoutInfo.editable());
            } else if (bCmd && bShift && keyCode === key.NUM8) {
                editor.insertOrderedList(oLayoutInfo.editable());
            } else if (bCmd && keyCode === key.LEFTBRACKET) {
                editor.outdent(oLayoutInfo.editable());
            } else if (bCmd && keyCode === key.RIGHTBRACKET) {
                editor.indent(oLayoutInfo.editable());
            } else if (bCmd && keyCode === key.NUM0) { // formatBlock Paragraph
                editor.formatBlock(oLayoutInfo.editable(), 'P');
            } else if (bCmd && (key.NUM1 <= keyCode && keyCode <= key.NUM6)) {
                var sHeading = 'H' + String.fromCharCode(keyCode); // H1~H6
                editor.formatBlock(oLayoutInfo.editable(), sHeading);
            } else if (bCmd && keyCode === key.ENTER) {
                editor.insertHorizontalRule(oLayoutInfo.editable());
            } else {
                if (keyCode === key.BACKSPACE || keyCode === key.ENTER ||
                    keyCode === key.SPACE) {
                    editor.recordUndo(makeLayoutInfo(event.target).editable());
                }
                return; // not matched
            }
            event.preventDefault(); //prevent default event for FF
        };

        var insertImages = function (welEditable, files) {
            welEditable.trigger('focus');
            $.each(files, function (idx, file) {
                var fileReader = new FileReader;
                fileReader.onload = function (event) {
                    editor.insertImage(welEditable, event.target.result); // sURL
                };
                fileReader.readAsDataURL(file);
            });
        };

        var hDropImage = function (event) {
            var dataTransfer = event.originalEvent.dataTransfer;
            if (dataTransfer && dataTransfer.files) {
                var oLayoutInfo = makeLayoutInfo(event.currentTarget || event.target);
                insertImages(oLayoutInfo.editable(), dataTransfer.files);
            }
            event.stopPropagation();
            event.preventDefault();
        };

        var hMousedown = function (event) {
            //preventDefault Selection for FF, IE8+
            if (dom.isImg(event.target)) { event.preventDefault(); };
        };

        var hToolbarAndPopoverUpdate = function (event) {
            var oLayoutInfo = makeLayoutInfo(event.currentTarget || event.target);
            var oStyle = editor.currentStyle(event.target);
            if (!oStyle) { return; }
            toolbar.update(oLayoutInfo.toolbar(), oStyle);
            popover.update(oLayoutInfo.popover(), oStyle);
            handle.update(oLayoutInfo.handle(), oStyle);
        };

        var hScroll = function (event) {
            var oLayoutInfo = makeLayoutInfo(event.currentTarget || event.target);
            //hide popover and handle when scrolled
            popover.hide(oLayoutInfo.popover());
            handle.hide(oLayoutInfo.handle());
        };

        var hHandleMousedown = function (event) {
            if (dom.isControlSizing(event.target)) {
                var oLayoutInfo = makeLayoutInfo(event.target),
                    welHandle = oLayoutInfo.handle(), welPopover = oLayoutInfo.popover(),
                    welEditable = oLayoutInfo.editable(), welEditor = oLayoutInfo.editor();

                var elTarget = welHandle.find('.note-control-selection').data('target'),
                    welTarget = $(elTarget);
                var posStart = welTarget.offset(),
                    scrollTop = $(document).scrollTop(), posDistance;

                welEditor.on('mousemove', function (event) {
                    posDistance = {
                        x: event.clientX - posStart.left,
                        y: event.clientY - (posStart.top - scrollTop)
                    };
                    editor.resizeTo(posDistance, welTarget);
                    handle.update(welHandle, { image: elTarget });
                    popover.update(welPopover, { image: elTarget });
                }).on('mouseup', function () {
                    welEditor.off('mousemove').off('mouseup');
                });

                if (!welTarget.data('ratio')) { // original ratio.
                    welTarget.data('ratio', welTarget.height() / welTarget.width());
                }

                editor.recordUndo(welEditable);
                event.stopPropagation(); event.preventDefault();
            }
        };

        var hToolbarAndPopoverMousedown = function (event) {
            // prevent default event when insertTable (FF, Webkit)
            var welBtn = $(event.target).closest('[data-event]');
            if (welBtn.length > 0) { event.preventDefault(); }
        };

        var hToolbarAndPopoverClick = function (event) {
            var welBtn = $(event.target).closest('[data-event]');

            if (welBtn.length > 0) {
                var sEvent = welBtn.attr('data-event'),
                    sValue = welBtn.attr('data-value');

                var oLayoutInfo = makeLayoutInfo(event.target);
                var welDialog = oLayoutInfo.dialog(),
                    welEditable = oLayoutInfo.editable(),
                    welCodeable = oLayoutInfo.codeable();

                // before command
                var elTarget;
                if ($.inArray(sEvent, ['resize', 'float']) !== -1) {
                    var welHandle = oLayoutInfo.handle();
                    var welSelection = welHandle.find('.note-control-selection');
                    elTarget = welSelection.data('target');
                }

                if (editor[sEvent]) { // on command
                    welEditable.trigger('focus');
                    editor[sEvent](welEditable, sValue, elTarget);
                }

                // after command
                if ($.inArray(sEvent, ['backColor', 'foreColor']) !== -1) {
                    toolbar.updateRecentColor(welBtn[0], sEvent, sValue);
                } else if (sEvent === 'showLinkDialog') { // popover to dialog
                    editor.setLinkDialog(welEditable, function (linkInfo, cb) {
                        dialog.showLinkDialog(welDialog, linkInfo, cb);
                    });
                } else if (sEvent === 'showImageDialog') {
                    dialog.showImageDialog(welDialog, hDropImage, function (files) {
                        insertImages(welEditable, files);
                    });
                } else if (sEvent === 'showHelpDialog') {
                    dialog.showHelpDialog(welDialog);
                //} else if (sEvent === 'fullscreen') {
                //    var welEditor = oLayoutInfo.editor();
                //    welEditor.toggleClass('fullscreen');

                //    var welToolbar = oLayoutInfo.toolbar();
                //    var hResizeFullscreen = function () {
                //        var nHeight = $(window).height() - welToolbar.outerHeight();
                //        welEditable.css('height', nHeight);
                //    }

                //    var bFullscreen = welEditor.hasClass('fullscreen');
                //    if (bFullscreen) {
                //        welEditable.data('orgHeight', welEditable.css('height'));
                //        $(window).resize(hResizeFullscreen).trigger('resize');
                //    } else {
                //        welEditable.css('height', welEditable.data('orgHeight'));
                //        $(window).off('resize');
                //    }

                //    toolbar.updateFullscreen(welToolbar, bFullscreen);
                } else if (sEvent === 'codeview') {
                    var welEditor = oLayoutInfo.editor(),
                        welToolbar = oLayoutInfo.toolbar();
                    welEditor.toggleClass('codeview');

                    var bCodeview = welEditor.hasClass('codeview')
                    if (bCodeview) {
                        welCodeable.val(welEditable.html());
                        welCodeable.height(welEditable.height());
                        toolbar.disable(welToolbar);
                        welCodeable.focus();
                    } else {
                        var userInput = welCodeable.val();
                        var sanitizedInput = DOMPurify.sanitize(userInput);
                        welEditable.html(sanitizedInput);
                        welEditable.height(welCodeable.height());
                        toolbar.enable(welToolbar);
                        welEditable.focus();
                    }

                    toolbar.updateCodeview(oLayoutInfo.toolbar(), bCodeview);
                }

                hToolbarAndPopoverUpdate(event);
            }
        };

        var EDITABLE_PADDING = 24;
        var hStatusbarMousedown = function (event) {
            var welDocument = $(document);
            var oLayoutInfo = makeLayoutInfo(event.target);
            var welEditable = oLayoutInfo.editable(),
                welCodeable = oLayoutInfo.codeable();

            var nEditableTop = welEditable.offset().top - welDocument.scrollTop();
            var hMousemove = function (event) {
                welEditable.height(event.clientY - (nEditableTop + EDITABLE_PADDING));
            };
            var hMouseup = function () {
                welDocument.unbind('mousemove', hMousemove)
                           .unbind('mouseup', hMouseup);
            }
            welDocument.mousemove(hMousemove).mouseup(hMouseup);
            event.stopPropagation(); event.preventDefault();
        };

        var PX_PER_EM = 18;
        var hDimensionPickerMove = function (event) {
            var welPicker = $(event.target.parentNode); // target is mousecatcher
            var welDimensionDisplay = welPicker.next();
            var welCatcher = welPicker.find('.note-dimension-picker-mousecatcher');
            var welHighlighted = welPicker.find('.note-dimension-picker-highlighted');
            var welUnhighlighted = welPicker.find('.note-dimension-picker-unhighlighted');
            var posOffset;
            if (event.offsetX === undefined) {
                // HTML5 with jQuery - e.offsetX is undefined in Firefox
                var posCatcher = $(event.target).offset();
                posOffset = {
                    x: event.pageX - posCatcher.left,
                    y: event.pageY - posCatcher.top
                };
            } else {
                posOffset = { x: event.offsetX, y: event.offsetY };
            }

            var dim = {
                c: Math.ceil(posOffset.x / PX_PER_EM) || 1,
                r: Math.ceil(posOffset.y / PX_PER_EM) || 1
            };

            welHighlighted.css({ width: dim.c + 'em', height: dim.r + 'em' });
            welCatcher.attr('data-value', dim.c + 'x' + dim.r);

            if (3 < dim.c && dim.c < 10) { // 5~10
                welUnhighlighted.css({ width: dim.c + 1 + 'em' });
            }

            if (3 < dim.r && dim.r < 10) { // 5~10
                welUnhighlighted.css({ height: dim.r + 1 + 'em' });
            }

            welDimensionDisplay.html(dim.c + ' x ' + dim.r);
        };

        this.attach = function (oLayoutInfo, options) {
            oLayoutInfo.editable.on('keydown', hKeydown);
            oLayoutInfo.editable.on('mousedown', hMousedown);
            oLayoutInfo.editable.on('keyup mouseup', hToolbarAndPopoverUpdate);
            oLayoutInfo.editable.on('scroll', hScroll);
            //TODO: handle Drag point
            oLayoutInfo.editable.on('dragenter dragover dragleave', false);
            oLayoutInfo.editable.on('drop', hDropImage);

            oLayoutInfo.handle.on('mousedown', hHandleMousedown);

            oLayoutInfo.toolbar.on('click', hToolbarAndPopoverClick);
            oLayoutInfo.popover.on('click', hToolbarAndPopoverClick);
            oLayoutInfo.toolbar.on('mousedown', hToolbarAndPopoverMousedown);
            oLayoutInfo.popover.on('mousedown', hToolbarAndPopoverMousedown);

            oLayoutInfo.statusbar.on('mousedown', hStatusbarMousedown);

            //toolbar table dimension
            var welToolbar = oLayoutInfo.toolbar;
            var welCatcher = welToolbar.find('.note-dimension-picker-mousecatcher');
            welCatcher.on('mousemove', hDimensionPickerMove);

            // callback
            // init, enter, !change, !pasteBefore, !pasteAfter, focus, blur, keyup, keydown
            if (options.onenter) {
                oLayoutInfo.editable.keypress(function (event) {
                    if (event.keyCode === key.ENTER) { options.onenter(event); }
                });
            }
            if (options.onfocus) { oLayoutInfo.editable.focus(options.onfocus); }
            if (options.onblur) { oLayoutInfo.editable.blur(options.onblur); }
            if (options.onkeyup) { oLayoutInfo.editable.keyup(options.onkeyup); }
            if (options.onkeydown) { oLayoutInfo.editable.keydown(options.onkeydown); }

            // TODO: callback for advanced features
            // autosave, impageUpload, imageUploadError, fileUpload, fileUploadError
        };

        this.dettach = function (oLayoutInfo) {
            oLayoutInfo.editable.off();
            oLayoutInfo.toolbar.off();
            oLayoutInfo.handle.off();
            oLayoutInfo.popover.off();
        };
    };

    /**
     * Renderer
     *
     * rendering toolbar and editable
     */
    var Renderer = function () {
        var aToolbarItem = {
            //picture:
            //  '<button type="button" class="btn btn-default" title="Add Image" data-event="showImageDialog" tabindex="-1"><i class="far fa-image"></i></button>',
            //link:
            //  '<button type="button" class="btn btn-default" title="Add Link" data-event="showLinkDialog" data-shortcut="Ctrl+K" data-mac-shortcut="⌘+K" tabindex="-1"><i class="fa fa-link"></i></button>',
            table:
              '<button type="button" class="btn btn-default dropdown-toggle" title="Click to Add Table" data-toggle="dropdown" tabindex="-1"><i class="fa fa-table"></i> <span class="caret"></span></button>' +
              '<ul class="dropdown-menu">' +
              '<div class="note-dimension-picker">' +
              '<div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"></div>' +
              '<div class="note-dimension-picker-highlighted"></div>' +
              '<div class="note-dimension-picker-unhighlighted"></div>' +
              '</div>' +
              '<div class="note-dimension-display"> 1 x 1 </div>' +
              '</ul>',
            style:
              '<button type="button" class="btn btn-default dropdown-toggle" title=\'Click to Style\' data-toggle="dropdown" tabindex="-1"><i class="fa fa-magic"></i> <span class="caret"></span></button>' +
              '<ul class="dropdown-menu">' +
              '<li><a data-event="formatBlock" data-value="p">Normal</a></li>' +
              '<li><a data-event="formatBlock" data-value="blockquote"><blockquote>Quote</blockquote></a></li>' +
              '<li><a data-event="formatBlock" data-value="pre">Code</a></li>' +
              '<li><a data-event="formatBlock" data-value="h1"><h1>Header 1</h1></a></li>' +
              '<li><a data-event="formatBlock" data-value="h2"><h2>Header 2</h2></a></li>' +
              '<li><a data-event="formatBlock" data-value="h3"><h3>Header 3</h3></a></li>' +
              '<li><a data-event="formatBlock" data-value="h4"><h4>Header 4</h4></a></li>' +
              '<li><a data-event="formatBlock" data-value="h5"><h5>Header 5</h5></a></li>' +
              '<li><a data-event="formatBlock" data-value="h6"><h6>Header 6</h6></a></li>' +
              '</ul>',
            fontsize:
              '<button type="button" class="btn btn-default dropdown-toggle" title=\'Font Size\' data-toggle="dropdown" title="Font Size" tabindex="-1"><span class="note-current-fontsize"> 11 </span> <b class="caret"></b></button>' +
              '<ul class="dropdown-menu">' +
              '<li><a data-event="fontSize" data-value="8"><i class="fa fa-check"></i> 8</a></li>' +
              '<li><a data-event="fontSize" data-value="9"><i class="fa fa-check"></i> 9</a></li>' +
              '<li><a data-event="fontSize" data-value="10"><i class="fa fa-check"></i> 10</a></li>' +
              '<li><a data-event="fontSize" data-value="11"><i class="fa fa-check"></i> 11</a></li>' +
              '<li><a data-event="fontSize" data-value="12"><i class="fa fa-check"></i> 12</a></li>' +
              '<li><a data-event="fontSize" data-value="14"><i class="fa fa-check"></i> 14</a></li>' +
              '<li><a data-event="fontSize" data-value="18"><i class="fa fa-check"></i> 18</a></li>' +
              '<li><a data-event="fontSize" data-value="24"><i class="fa fa-check"></i> 24</a></li>' +
              '<li><a data-event="fontSize" data-value="36"><i class="fa fa-check"></i> 36</a></li>' +
              '</ul>',
            color:
              '<button type="button" class="btn btn-default note-recent-color" title=\'Click to Change Background Color\' data-event="color" data-value=\'{"backColor":"yellow"}\' tabindex="-1"><i class="fa fa-font" style="color:black;background-color:yellow;"></i></button>' +
              '<button type="button" class="btn btn-default dropdown-toggle" title=\'More Color\' data-toggle="dropdown" tabindex="-1">' +
              '<span class="caret"></span>' +
              '</button>' +
              '<ul class="dropdown-menu">' +
              '<li>' +
              '<div class="btn-group">' +
              '<div class="note-palette-title">BackColor</div>' +
              '<div class="note-color-reset" data-event="backColor" data-value="inherit" title="Transparent">Set transparent</div>' +
              '<div class="note-color-palette" data-target-event="backColor"></div>' +
              '</div>' +
              '<div class="btn-group">' +
              '<div class="note-palette-title">FontColor</div>' +
              '<div class="note-color-reset" data-event="foreColor" data-value="inherit" title="Reset">Reset to default</div>' +
              '<div class="note-color-palette" data-target-event="foreColor"></div>' +
              '</div>' +
              '</li>' +
              '</ul>',
            bold:
              '<button type="button" class="btn btn-default" title=\'Click to Bold\' data-shortcut="Ctrl+B" data-mac-shortcut="⌘+B" data-event="bold" tabindex="-1"><i class="fa fa-bold"></i></button>',
            italic:
              '<button type="button" class="btn btn-default" title=\'Click to Italic\' data-shortcut="Ctrl+I" data-mac-shortcut="⌘+I" data-event="italic" tabindex="-1"><i class="fa fa-italic"></i></button>',
            underline:
              '<button type="button" class="btn btn-default" title=\'Click to Underline\' data-shortcut="Ctrl+U" data-mac-shortcut="⌘+U" data-event="underline" tabindex="-1"><i class="fa fa-underline"></i></button>',
            clear:
              '<button type="button" class="btn btn-default" title=\'Click to Remove Font Style\' data-shortcut="Ctrl+\\" data-mac-shortcut="⌘+\\" data-event="removeFormat" tabindex="-1"><i class="fa fa-eraser"></i></button>',
            ul:
              '<button type="button" class="btn btn-default" title=\'Unordered list\' data-shortcut="Ctrl+Shift+8" data-mac-shortcut="⌘+⇧+7" data-event="insertUnorderedList" tabindex="-1"><i class="fa fa-list-ul"></i></button>',
            ol:
              '<button type="button" class="btn btn-default" title=\'Ordered list\' data-shortcut="Ctrl+Shift+7" data-mac-shortcut="⌘+⇧+8" data-event="insertOrderedList" tabindex="-1"><i class="fa fa-list-ol"></i></button>',
            paragraph:
              '<button type="button" class="btn btn-default dropdown-toggle" title=\'Click to Paragraph\' data-toggle="dropdown" tabindex="-1"><i class="fa fa-align-left"></i>  <span class="caret"></span></button>' +
              '<ul class="dropdown-menu">' +
                '<li>' +
                '<div class="note-align btn-group">' +
                '<button type="button" class="btn btn-default" title="Left Align" data-shortcut="Ctrl+Shift+L" data-mac-shortcut="⌘+⇧+L" data-event="justifyLeft" tabindex="-1"><i class="fa fa-align-left"></i></button>' +
                '<button type="button" class="btn btn-default" title="Center Align" data-shortcut="Ctrl+Shift+E" data-mac-shortcut="⌘+⇧+E" data-event="justifyCenter" tabindex="-1"><i class="fa fa-align-center"></i></button>' +
                '<button type="button" class="btn btn-default" title="Right Align" data-shortcut="Ctrl+Shift+R" data-mac-shortcut="⌘+⇧+R" data-event="justifyRight" tabindex="-1"><i class="fa fa-align-right"></i></button>' +
                '<button type="button" class="btn btn-default" title="Justify Align" data-shortcut="Ctrl+Shift+J" data-mac-shortcut="⌘+⇧+J" data-event="justifyFull" tabindex="-1"><i class="fa fa-align-justify"></i></button>' +
                '</div>' +
                '</li>' +
                '<li>' +
                '<div class="note-list btn-group">' +
                '<button type="button" class="btn btn-default" title="Outdent" data-shortcut="Ctrl+[" data-mac-shortcut="⌘+[" data-event="outdent" tabindex="-1"><i class="fa fa-outdent"></i></button>' +
                '<button type="button" class="btn btn-default" title="Indent" data-shortcut="Ctrl+]" data-mac-shortcut="⌘+]" data-event="indent" tabindex="-1"><i class="fa fa-indent"></i></button>' +
                '</li>' +
              '</ul>',
            height:
              '<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" title=\'Line Height\' tabindex="-1"><i class="fa fa-text-height"></i>&nbsp; <b class="caret"></b></button>' +
              '<ul class="dropdown-menu">' +
              '<li><a data-event="lineHeight" data-value="1.0"><i class="fa fa-check"></i> 1.0</a></li>' +
              '<li><a data-event="lineHeight" data-value="1.2"><i class="fa fa-check"></i> 1.2</a></li>' +
              '<li><a data-event="lineHeight" data-value="1.4"><i class="fa fa-check"></i> 1.4</a></li>' +
              '<li><a data-event="lineHeight" data-value="1.5"><i class="fa fa-check"></i> 1.5</a></li>' +
              '<li><a data-event="lineHeight" data-value="1.6"><i class="fa fa-check"></i> 1.6</a></li>' +
              '<li><a data-event="lineHeight" data-value="1.8"><i class="fa fa-check"></i> 1.8</a></li>' +
              '<li><a data-event="lineHeight" data-value="2.0"><i class="fa fa-check"></i> 2.0</a></li>' +
              '<li><a data-event="lineHeight" data-value="3.0"><i class="fa fa-check"></i> 3.0</a></li>' +
              '</ul>',
            help:
              '<button type="button" class="btn btn-default" title="Help" data-shortcut="Ctrl+/" data-mac-shortcut="⌘+/" data-event="showHelpDialog" tabindex="-1"><i class="fa fa-question"></i></button>',
            //fullscreen:
              //'<button type="button" class="btn btn-default" title="Full Screen" data-event="fullscreen" tabindex="-1"><i class="fa fa-arrows-alt"></i></button>',
            codeview:
              '<button type="button" class="btn btn-default" title=\'Code View\' data-event="codeview" tabindex="-1"><i class="fa fa-code"></i></button>'
        };
        var sPopover = '<div class="note-popover">' +
                         '<div class="note-link-popover popover bottom in" style="display: none;">' +
                           '<div class="arrow"></div>' +
                           '<div class="popover-content note-link-content">' +
                             '<a href="http://www.google.com" target="_blank">www.google.com</a>&nbsp;&nbsp;' +
                           '</div>' +
                         '</div>' +
                         '<div class="note-image-popover popover bottom in" style="display: none;">' +
                           '<div class="arrow"></div>' +
                           '<div class="popover-content note-image-content">' +
                             '<div class="btn-group">' +
                               '<button type="button" class="btn btn-default" title="Resize Full" data-event="resize" data-value="1" tabindex="-1"><i class="fa fa-arrows-alt"></i></button>' +
                               '<button type="button" class="btn btn-default" title="Resize Half" data-event="resize" data-value="0.5" tabindex="-1">½</button>' +
                               '<button type="button" class="btn btn-default" title="Resize Thrid" data-event="resize" data-value="0.33" tabindex="-1">⅓</button>' +
                               '<button type="button" class="btn btn-default" title="Resize Quarter" data-event="resize" data-value="0.25" tabindex="-1">¼</button>' +
                             '</div>' +
                             '<div class="btn-group">' +
                               '<button type="button" class="btn btn-default" title="Float Left" data-event="float" data-value="left" tabindex="-1"><i class="fa fa-align-left"></i></button>' +
                               '<button type="button" class="btn btn-default" title="Float Right" data-event="float" data-value="right" tabindex="-1"><i class="fa fa-align-right"></i></button>' +
                               '<button type="button" class="btn btn-default" title="Float None" data-event="float" data-value="none" tabindex="-1"><i class="fa fa-bars"></i></button>' +
                             '</div>' +
                           '</div>' +
                         '</div>' +
                       '</div>';

        var sHandle = '<div class="note-handle">' +
                        '<div class="note-control-selection">' +
                          '<div class="note-control-selection-bg"></div>' +
                          '<div class="note-control-holder note-control-nw"></div>' +
                          '<div class="note-control-holder note-control-ne"></div>' +
                          '<div class="note-control-holder note-control-sw"></div>' +
                          '<div class="note-control-sizing note-control-se"></div>' +
                          '<div class="note-control-selection-info"></div>' +
                        '</div>' +
                      '</div>';

        var sShortcutText = '<table class="note-shortcut">' +
                               '<thead>' +
                                 '<tr><th></th><th>Text formatting</th></tr>' +
                               '</thead>' +
                               '<tbody>' +
                                 '<tr><td>⌘ + B</td><td>Toggle Bold</td></tr>' +
                                 '<tr><td>⌘ + I</td><td>Toggle Italic</td></tr>' +
                                 '<tr><td>⌘ + U</td><td>Toggle Underline</td></tr>' +
                                 '<tr><td>⌘ + ⇧ + S</td><td>Toggle Strike</td></tr>' +
                                 '<tr><td>⌘ + \\</td><td>Remove Font Style</td></tr>' +
                                 '</tr>' +
                               '</tbody>' +
                             '</table>';

        var sShortcutAction = '<table class="note-shortcut">' +
                               '<thead>' +
                                 '<tr><th></th><th>Action</th></tr>' +
                               '</thead>' +
                               '<tbody>' +
                                 '<tr><td>⌘ + Z</td><td>Undo</td></tr>' +
                                 '<tr><td>⌘ + ⇧ + Z</td><td>Redo</td></tr>' +
                                 '<tr><td>⌘ + ]</td><td>Indent</td></tr>' +
                                 '<tr><td>⌘ + [</td><td>Outdent</td></tr>' +
                                 '<tr><td>⌘ + K</td><td>Insert Link</td></tr>' +
                                 '<tr><td>⌘ + ENTER</td><td>Insert Horizontal Rule</td></tr>' +
                               '</tbody>' +
                             '</table>';

        var sShortcutPara = '<table class="note-shortcut">' +
                              '<thead>' +
                                '<tr><th></th><th>Paragraph formatting</th></tr>' +
                              '</thead>' +
                              '<tbody>' +
                                '<tr><td>⌘ + ⇧ + L</td><td>Align Left</td></tr>' +
                                '<tr><td>⌘ + ⇧ + E</td><td>Align Center</td></tr>' +
                                '<tr><td>⌘ + ⇧ + R</td><td>Align Right</td></tr>' +
                                '<tr><td>⌘ + ⇧ + J</td><td>Justify Full</td></tr>' +
                                '<tr><td>⌘ + ⇧ + NUM7</td><td>Ordered List</td></tr>' +
                                '<tr><td>⌘ + ⇧ + NUM8</td><td>Unordered List</td></tr>' +
                              '</tbody>' +
                            '</table>';

        var sShortcutStyle = '<table class="note-shortcut">' +
                               '<thead>' +
                                 '<tr><th></th><th>Document Style</th></tr>' +
                               '</thead>' +
                               '<tbody>' +
                                 '<tr><td>⌘ + NUM0</td><td>Normal Text</td></tr>' +
                                 '<tr><td>⌘ + NUM1</td><td>Heading 1</td></tr>' +
                                 '<tr><td>⌘ + NUM2</td><td>Heading 2</td></tr>' +
                                 '<tr><td>⌘ + NUM3</td><td>Heading 3</td></tr>' +
                                 '<tr><td>⌘ + NUM4</td><td>Heading 4</td></tr>' +
                                 '<tr><td>⌘ + NUM5</td><td>Heading 5</td></tr>' +
                                 '<tr><td>⌘ + NUM6</td><td>Heading 6</td></tr>' +
                               '</tbody>' +
                             '</table>';

        var sShortcutTable = '<table class="note-shortcut-layout">' +
                               '<tbody>' +
                                 '<tr><td>' + sShortcutAction + '</td><td>' + sShortcutText + '</td></tr>' +
                                 '<tr><td>' + sShortcutStyle + '</td><td>' + sShortcutPara + '</td></tr>' +
                               '</tbody>' +
                             '</table>';

        var sDialog = '<div class="note-dialog">' +
                        '<div class="note-image-dialog modal" aria-hidden="false">' +
                          '<div class="modal-dialog">' +
                            '<div class="modal-content">' +
                              '<div class="modal-header">' +
                                '<button type="button" class="close" aria-hidden="true" tabindex="-1">×</button>' +
                                '<h4>Insert Image</h4>' +
                              '</div>' +
                              '<div class="modal-body">' +
                                '<div class="row-fluid">' +
                                  '<div class="note-dropzone span12">Drag an image here</div>' +
                                  '<div>or if you prefer...</div>' +
                                  '<input class="note-image-input" type="file" class="note-link-url" type="text" />' +
                                '</div>' +
                              '</div>' +
                            '</div>' +
                          '</div>' +
                        '</div>' +
                        '<div class="note-link-dialog modal" aria-hidden="false">' +
                          '<div class="modal-dialog">' +
                            '<div class="modal-content">' +
                              '<div class="modal-header">' +
                                '<button type="button" class="close" aria-hidden="true" tabindex="-1">×</button>' +
                                '<h4>Edit Link</h4>' +
                              '</div>' +
                              '<div class="modal-body">' +
                                '<div class="row-fluid">' +

                                '<div class="form-group">' +
                                  '<label>Text to display</label>' +
                                  '<input class="note-link-text form-control input-xlarge editable-input" />' +
                                '</div>' +
                                '<div class="form-group">' +
                                  '<label>To what URL should this link go?</label>' +
                                  '<input class="note-link-url form-control span12" type="text" />' +
                                '</div>' +
                                '</div>' +
                              '</div>' +
                              '<div class="modal-footer">' +
                                '<button href="#" class="btn btn-primary note-link-btn disabled" disabled="disabled">Link</button>' +
                              '</div>' +
                            '</div>' +
                          '</div>' +
                        '</div>' +
                        '<div class="note-help-dialog modal" aria-hidden="false">' +
                          '<div class="modal-dialog">' +
                            '<div class="modal-content">' +
                              '<div class="modal-body">' +
                                '<div class="modal-background">' +
                                '<a class="modal-close pull-right" aria-hidden="true" tabindex="-1">Close</a>' +
                                '<div class="title">Smart shortcuts</div>' +
                                sShortcutTable +
                              '</div>' +
                            '</div>' +
                          '</div>' +
                        '</div>' +
                      '</div>';

        // createTooltip
        var createTooltip = function (welContainer, sPlacement) {
            welContainer.find('button').each(function (i, elBtn) {
                var welBtn = $(elBtn);
                var sShortcut = welBtn.attr(bMac ? 'data-mac-shortcut' : 'data-shortcut');
                if (sShortcut) { welBtn.attr('title', function (i, v) { return v + ' (' + sShortcut + ')' }); }
                //bootstrap tooltip on btn-group bug: https://github.com/twitter/bootstrap/issues/5687
            }).tooltip({ container: 'body', placement: sPlacement || 'top' });
        };

        // pallete colors
        var aaColor = [
          ['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#EFF7F7', '#FFFFFF'],
          ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'],
          ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'],
          ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'],
          ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'],
          ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'],
          ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'],
          ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']
        ];

        // createPalette
        var createPalette = function (welContainer) {
            welContainer.find('.note-color-palette').each(function () {
                var welPalette = $(this), sEvent = welPalette.attr('data-target-event');
                var sPaletteContents = '';
                for (var row = 0, szRow = aaColor.length; row < szRow; row++) {
                    var aColor = aaColor[row];
                    var sLine = '<div>';
                    for (var col = 0, szCol = aColor.length; col < szCol; col++) {
                        var sColor = aColor[col];
                        var sButton = ['<button type="button" class="note-color-btn" style="background-color:', sColor,
                                       ';" data-event="', sEvent,
                                       '" data-value="', sColor,
                                       '" title="', sColor,
                                       '" data-toggle="button" tabindex="-1"></button>'].join('');
                        sLine += sButton;
                    }
                    sLine += '</div>';
                    sPaletteContents += sLine;
                }
                welPalette.html(sPaletteContents);
            });
        };

        // createLayout
        var createLayout = this.createLayout = function (welHolder, nHeight, nTabsize, aToolbarSetting) {
            //already created
            if (welHolder.next().hasClass('note-editor')) { return; }

            //01. create Editor
            var welEditor = $('<div class="note-editor"></div>');

            //02. statusbar
            if (nHeight > 0) {
                var welStatusbar = $('<div class="note-statusbar"><div class="note-resizebar"><div class="note-icon-bar"></div><div class="note-icon-bar"></div><div class="note-icon-bar"></div></div></div>').prependTo(welEditor);
            }

            //03. create Editable
            var welEditable = $('<div class="note-editable custom-scroll" contentEditable="true"></div>').prependTo(welEditor);
            if (nHeight) { welEditable.height(nHeight); }
            if (nTabsize) {
                welEditable.data('tabsize', nTabsize);
            }

            welEditable.html(dom.html(welHolder));
            welEditable.data('NoteHistory', new History());

            //031. create Codeable
            var welCodeable = $('<textarea class="note-codeable"></textarea>').prependTo(welEditor);

            //032. set styleWithCSS for backColor / foreColor clearing with 'inherit'.
            setTimeout(function () { // protect FF Error: NS_ERROR_FAILURE: Failure
                //document.execCommand('styleWithCSS', 0, true);

                try {
                    document.execCommand("styleWithCSS", 0, false);
                } catch (e) {
                    try {
                        document.execCommand("useCSS", 0, true);
                    } catch (e) {
                        try {
                            document.execCommand('styleWithCSS', false, false);
                        }
                        catch (e) {
                        }
                    }
                }

            });

            //04. create Toolbar
            var sToolbar = '';
            for (var idx = 0, sz = aToolbarSetting.length; idx < sz; idx++) {
                var group = aToolbarSetting[idx];
                sToolbar += '<div class="note-' + group[0] + ' btn-group">';
                for (var i = 0, szGroup = group[1].length; i < szGroup; i++) {
                    sToolbar += aToolbarItem[group[1][i]];
                }
                sToolbar += '</div>';
            };

            sToolbar = '<div class="note-toolbar btn-toolbar">' + sToolbar + '</div>';

            var welToolbar = $(sToolbar).prependTo(welEditor);
            createPalette(welToolbar);
            createTooltip(welToolbar, 'top');

            //05. create Popover
            var welPopover = $(sPopover).prependTo(welEditor);
            createTooltip(welPopover);

            //06. handle(control selection, ...)
            $(sHandle).prependTo(welEditor);

            //07. create Dialog
            var welDialog = $(sDialog).prependTo(welEditor);
            welDialog.find('button.close, a.modal-close').click(function (event) {
                $(this).closest('.modal').modal('hide');
            });

            //08. Editor/Holder switch
            welEditor.insertAfter(welHolder);
            welHolder.hide();
        };

        // layoutInfoFromHolder
        var layoutInfoFromHolder = this.layoutInfoFromHolder = function (welHolder) {
            var welEditor = welHolder.next();
            if (!welEditor.hasClass('note-editor')) { return; }

            return {
                editor: welEditor,
                toolbar: welEditor.find('.note-toolbar'),
                editable: welEditor.find('.note-editable'),
                statusbar: welEditor.find('.note-statusbar'),
                popover: welEditor.find('.note-popover'),
                handle: welEditor.find('.note-handle'),
                dialog: welEditor.find('.note-dialog')
            };
        };

        // removeLayout
        var removeLayout = this.removeLayout = function (welHolder) {
            var info = layoutInfoFromHolder(welHolder);
            if (!info) { return; }
            welHolder.html(info.editable.html());

            info.editor.remove();
            welHolder.show();
        };

        var removeToolbar = this.removeToolbar = function (welHolder) {
            var info = layoutInfoFromHolder(welHolder);
            if (!info) { return; }

            info.toolbar.hide();
            info.editable.attr("contenteditable","false");
        };
    };

    var renderer = new Renderer();
    var eventHandler = new EventHandler();

    /**
     * extend jquery fn
     */
    $.fn.extend({
        // create Editor Layout and attach Key and Mouse Event
        summernote: function (options) {
            options = $.extend({
                toolbar: [
                  ['style', ['style']],
                  ['font', ['bold', 'italic', 'underline', 'clear']],
                  ['fontsize', ['fontsize']],
                  ['color', ['color']],
                  ['para', ['ul', 'ol', 'paragraph']],
                  ['height', ['height']],
                  //['table', ['table']],
                  //['insert', ['link', 'picture']],
                  ['view', ['codeview']]
                  //['view', ['fullscreen', 'codeview']]
                  //,['help', ['help']]
                ]
            }, options);

            this.each(function (idx, elHolder) {
                var welHolder = $(elHolder);

                // createLayout with options
                renderer.createLayout(welHolder, options.height, options.tabsize, options.toolbar);

                var info = renderer.layoutInfoFromHolder(welHolder);
                eventHandler.attach(info, options);
            });

            if (this.first() && options.focus) { // focus on first editable element
                var info = renderer.layoutInfoFromHolder(this.first());
                info.editable.focus();
            }
            if (this.length > 0 && options.oninit) { // callback on init
                options.oninit();
            };
        },
        // get the HTML contents of note or set the HTML contents of note.
        code: function (sHTML) {
            //get the HTML contents
            if (sHTML === undefined) {
                var welHolder = this.first();
                if (welHolder.length == 0) { return; }
                var info = renderer.layoutInfoFromHolder(welHolder);
                var bEditable = !!(info && info.editable);
                return bEditable ? info.editable.html() : welHolder.html();
            }

            // set the HTML contents
            this.each(function (i, elHolder) {
                var info = renderer.layoutInfoFromHolder($(elHolder));
                if (info && info.editable) { info.editable.html(sHTML); }
            });
        },
        // destroy Editor Layout and dettach Key and Mouse Event
        destroy: function () {
            this.each(function (idx, elHolder) {
                var welHolder = $(elHolder);

                var info = renderer.layoutInfoFromHolder(welHolder);
                if (!info || !info.editable) { return; }
                eventHandler.dettach(info);
                renderer.removeLayout(welHolder);
            });
        },
        hidetoolbar: function () {
            this.each(function (idx, elHolder) {
                var welHolder = $(elHolder);

                var info = renderer.layoutInfoFromHolder(welHolder);
                if (!info || !info.editable) { return; }
                eventHandler.dettach(info);
                renderer.removeToolbar(welHolder);
            });
        },
        // inner object for test
        summernoteInner: function () {
            return { dom: dom, list: list, func: func, range: range };
        }
    });
})(window.jQuery); // jQuery

// Array.prototype.reduce fallback
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
if ('function' !== typeof Array.prototype.reduce) {
    Array.prototype.reduce = function (callback, opt_initialValue) {
        'use strict';
        var idx, value, length = this.length >>> 0, isValueSet = false;
        if (1 < arguments.length) { value = opt_initialValue, isValueSet = true; }
        for (idx = 0; length > idx; ++idx) {
            if (this.hasOwnProperty(idx)) {
                if (isValueSet) {
                    value = callback(value, this[idx], idx, this);
                } else {
                    value = this[idx], isValueSet = true;
                }
            }
        }
        if (!isValueSet) {
            throw new TypeError('Reduce of empty array with no initial value');
        }
        return value;
    };
}

;
var LZString = { _f: String.fromCharCode, _keyStrBase64: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", _keyStrUriSafe: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$", _getBaseValue: function (r, e) { if (LZString._baseReverseDic || (LZString._baseReverseDic = {}), !LZString._baseReverseDic[r]) { LZString._baseReverseDic[r] = {}; for (var t = 0; t < r.length; t++) LZString._baseReverseDic[r][r[t]] = t } return LZString._baseReverseDic[r][e] }, compressToBase64: function (r) { if (null == r) return ""; var e = LZString._compress(r, 6, function (r) { return LZString._keyStrBase64.charAt(r) }); switch (e.length % 4) { default: case 0: return e; case 1: return e + "==="; case 2: return e + "=="; case 3: return e + "=" } }, decompressFromBase64: function (r) { return null == r ? "" : "" == r ? null : LZString._decompress(r.length, 32, function (e) { return LZString._getBaseValue(LZString._keyStrBase64, r.charAt(e)) }) }, compressToUTF16: function (r) { return null == r ? "" : LZString._compress(r, 15, function (r) { return String.fromCharCode(r + 32) }) + " " }, decompressFromUTF16: function (r) { return null == r ? "" : "" == r ? null : LZString._decompress(r.length, 16384, function (e) { return r.charCodeAt(e) - 32 }) }, compressToUint8Array: function (r) { for (var e = LZString.compress(r), t = new Uint8Array(2 * e.length), n = 0, o = e.length; o > n; n++) { var i = e.charCodeAt(n); t[2 * n] = i >>> 8, t[2 * n + 1] = i % 256 } return t }, decompressFromUint8Array: function (r) { if (null === r || void 0 === r) return LZString.decompress(r); for (var e = new Array(r.length / 2), t = 0, n = e.length; n > t; t++) e[t] = 256 * r[2 * t] + r[2 * t + 1]; var o = ""; return e.forEach(function (r) { o += String.fromCharCode(r) }), LZString.decompress(o) }, compressToEncodedURIComponent: function (r) { return null == r ? "" : LZString._compress(r, 6, function (r) { return LZString._keyStrUriSafe.charAt(r) }) }, decompressFromEncodedURIComponent: function (r) { return null == r ? "" : "" == r ? null : LZString._decompress(r.length, 32, function (e) { return LZString._getBaseValue(LZString._keyStrUriSafe, r.charAt(e)) }) }, compress: function (r) { return LZString._compress(r, 16, function (r) { return String.fromCharCode(r) }) }, _compress: function (r, e, t) { if (null == r) return ""; { var n, o, i, s = {}, a = {}, c = "", l = "", p = "", u = 2, f = 3, h = 2, d = "", g = 0, S = 0; LZString._f } for (i = 0; i < r.length; i += 1) if (c = r[i], Object.prototype.hasOwnProperty.call(s, c) || (s[c] = f++, a[c] = !0), l = p + c, Object.prototype.hasOwnProperty.call(s, l)) p = l; else { if (Object.prototype.hasOwnProperty.call(a, p)) { if (p.charCodeAt(0) < 256) { for (n = 0; h > n; n++) g <<= 1, S == e - 1 ? (S = 0, d += t(g), g = 0) : S++; for (o = p.charCodeAt(0), n = 0; 8 > n; n++) g = g << 1 | 1 & o, S == e - 1 ? (S = 0, d += t(g), g = 0) : S++, o >>= 1 } else { for (o = 1, n = 0; h > n; n++) g = g << 1 | o, S == e - 1 ? (S = 0, d += t(g), g = 0) : S++, o = 0; for (o = p.charCodeAt(0), n = 0; 16 > n; n++) g = g << 1 | 1 & o, S == e - 1 ? (S = 0, d += t(g), g = 0) : S++, o >>= 1 } u--, 0 == u && (u = Math.pow(2, h), h++), delete a[p] } else for (o = s[p], n = 0; h > n; n++) g = g << 1 | 1 & o, S == e - 1 ? (S = 0, d += t(g), g = 0) : S++, o >>= 1; u--, 0 == u && (u = Math.pow(2, h), h++), s[l] = f++, p = String(c) } if ("" !== p) { if (Object.prototype.hasOwnProperty.call(a, p)) { if (p.charCodeAt(0) < 256) { for (n = 0; h > n; n++) g <<= 1, S == e - 1 ? (S = 0, d += t(g), g = 0) : S++; for (o = p.charCodeAt(0), n = 0; 8 > n; n++) g = g << 1 | 1 & o, S == e - 1 ? (S = 0, d += t(g), g = 0) : S++, o >>= 1 } else { for (o = 1, n = 0; h > n; n++) g = g << 1 | o, S == e - 1 ? (S = 0, d += t(g), g = 0) : S++, o = 0; for (o = p.charCodeAt(0), n = 0; 16 > n; n++) g = g << 1 | 1 & o, S == e - 1 ? (S = 0, d += t(g), g = 0) : S++, o >>= 1 } u--, 0 == u && (u = Math.pow(2, h), h++), delete a[p] } else for (o = s[p], n = 0; h > n; n++) g = g << 1 | 1 & o, S == e - 1 ? (S = 0, d += t(g), g = 0) : S++, o >>= 1; u--, 0 == u && (u = Math.pow(2, h), h++) } for (o = 2, n = 0; h > n; n++) g = g << 1 | 1 & o, S == e - 1 ? (S = 0, d += t(g), g = 0) : S++, o >>= 1; for (; ;) { if (g <<= 1, S == e - 1) { d += t(g); break } S++ } return d }, decompress: function (r) { return null == r ? "" : "" == r ? null : LZString._decompress(r.length, 32768, function (e) { return r.charCodeAt(e) }) }, _decompress: function (r, e, t) { var n, o, i, s, a, c, l, p, u = [], f = 4, h = 4, d = 3, g = "", S = "", m = LZString._f, v = { val: t(0), position: e, index: 1 }; for (o = 0; 3 > o; o += 1) u[o] = o; for (s = 0, c = Math.pow(2, 2), l = 1; l != c;) a = v.val & v.position, v.position >>= 1, 0 == v.position && (v.position = e, v.val = t(v.index++)), s |= (a > 0 ? 1 : 0) * l, l <<= 1; switch (n = s) { case 0: for (s = 0, c = Math.pow(2, 8), l = 1; l != c;) a = v.val & v.position, v.position >>= 1, 0 == v.position && (v.position = e, v.val = t(v.index++)), s |= (a > 0 ? 1 : 0) * l, l <<= 1; p = m(s); break; case 1: for (s = 0, c = Math.pow(2, 16), l = 1; l != c;) a = v.val & v.position, v.position >>= 1, 0 == v.position && (v.position = e, v.val = t(v.index++)), s |= (a > 0 ? 1 : 0) * l, l <<= 1; p = m(s); break; case 2: return "" } for (u[3] = p, i = S = p; ;) { if (v.index > r) return ""; for (s = 0, c = Math.pow(2, d), l = 1; l != c;) a = v.val & v.position, v.position >>= 1, 0 == v.position && (v.position = e, v.val = t(v.index++)), s |= (a > 0 ? 1 : 0) * l, l <<= 1; switch (p = s) { case 0: for (s = 0, c = Math.pow(2, 8), l = 1; l != c;) a = v.val & v.position, v.position >>= 1, 0 == v.position && (v.position = e, v.val = t(v.index++)), s |= (a > 0 ? 1 : 0) * l, l <<= 1; u[h++] = m(s), p = h - 1, f--; break; case 1: for (s = 0, c = Math.pow(2, 16), l = 1; l != c;) a = v.val & v.position, v.position >>= 1, 0 == v.position && (v.position = e, v.val = t(v.index++)), s |= (a > 0 ? 1 : 0) * l, l <<= 1; u[h++] = m(s), p = h - 1, f--; break; case 2: return S } if (0 == f && (f = Math.pow(2, d), d++), u[p]) g = u[p]; else { if (p !== h) return null; g = i + i[0] } S += g, u[h++] = i + g[0], f--, i = g, 0 == f && (f = Math.pow(2, d), d++) } } }; "undefined" != typeof module && null != module && (module.exports = LZString);
;

/*
* VARIABLES
* Description: All Global Vars
*/
// Impacts the responce rate of some of the responsive elements (lower value affects CPU but improves speed)
$.throttle_delay = 350;
$.LOAD_URL_AJAX_INDEX = 0;
//This is used for salesforce(getting the widget height and set in the body min height)
$.IsSalesforce = false;
$.Sfheight = 0;
$.isCommonScroll = true;
function SFwigdetheight(_requestID, issaleforce, height) {
        $.IsSalesforce = issaleforce;
        $.Sfheight = height;
        reqID = _requestID;
    nav_page_height();
    }
// The rate at which the menu expands revealing child elements on click
$.menu_speed = 235;
	
// Note: You will also need to change this variable in the "variable.less" file.
$.navbar_height = 44; 
//$.navbar_height = 0;


/*
* APP DOM REFERENCES
* Description: Obj DOM reference, please try to avoid changing these
*/	
$.root_ = $('body');
$.left_panel = $('#left-panel');
$.shortcut_dropdown = $('#shortcut');
$.bread_crumb = $('#ribbon ol.breadcrumb');

// desktop or mobile
$.device = null;

// is mobile app
$.mobileApp = false;

/*
* APP CONFIGURATION
* Description: Enable / disable certain theme features here
*/		
$.navAsAjax = true; // Your left nav in your app will no longer fire ajax calls
	
// Please make sure you have included "jarvis.widget.js" for this below feature to work
$.enableJarvisWidgets = true;
	
// Warning: Enabling mobile widgets could potentially crash your webApp if you have too many 
// 			widgets running at once (must have $.enableJarvisWidgets = true)
$.enableMobileWidgets = false;


/*
* DETECT MOBILE DEVICES
* Description: Detects mobile device - if any of the listed device is detected
* a class is inserted to $.root_ and the variable $.device is decleard. 
*/
	
/* so far this is covering most hand held devices */
var ismobile = (/iphone|ipad|ipod|android|blackberry|mini|windows\sce|palm/i.test(navigator.userAgent.toLowerCase()));

if (!ismobile) {
	// Desktop
	$.root_.addClass("desktop-detected");
	$.device = "desktop";
} else {
	// Mobile
	$.root_.addClass("mobile-detected");
	$.root_.removeClass("horizontal-nav");
	$.device = "mobile";
		
	// Removes the tap delay in idevices
	// dependency: js/plugin/fastclick/fastclick.js 
	// FastClick.attach(document.body);
}

/* ~ END: CHECK MOBILE DEVICE */

// polyfill for IE 
// Reason: This is added because, IE does not support startsWith method which we are using for nav menu.
	if (!String.prototype.startsWith) {
	    String.prototype.startsWith = function (searchString, position) {
	        position = position || 0;
	        return this.substr(position, searchString.length) === searchString;
	    };
	}
// polyfill for IE End 

/*
         * LOGOUT ACTION
         */

	function logout() {
	    window.location = $.loginURL;
	}
	function bindLogOut() {
        $('#logout a').on("click", function (e) {
	        //get the link
	        var $this = $(this);
	        $.loginURL = $this.attr('href');
	        $.logoutMSG = $this.data('logout-msg');

	        // ask verification
	        $.SmartMessageBox({
                title: '<i class="fa fa-sign-out txt-color-orangeDark"></i> Logout <span class="txt-color-orangeDark"><strong>' + $('#show-shortcut').text() + '</strong></span> ?',
                content: $.logoutMSG || 'You can improve your security further after logging out by closing this opened browser',
                buttons: '[No][Logout the current session][Logout all sessions]'

            }, function (ButtonPressed) {
                if (ButtonPressed == 'Logout all sessions') {
                    $.loginURL = '/logout/true';
                    $.root_.addClass('animated fadeOutUp');
                    setTimeout(logout, 1000)
                } else if (ButtonPressed == 'Logout the current session') {
                    $.root_.addClass('animated fadeOutUp');
                    setTimeout(logout, 1000)
                }
            });
	        e.preventDefault();
	    });
	}

/*
* UPDATE PROFILE PIC
*/
function setProfilePic() {        
    if (typeof(pageData) != "undefined") {
                if (pageData["userLogoUrl"] != "" && pageData["userLogoUrl"] != null) {
                    $(".dropdown-toggle #userlogo").attr('src', pageData["userLogoUrl"]);
	                $(".dropdown-toggle #userlogo ").removeClass("hidden");
	                $(".dropdown-toggle #usericon").addClass("hidden");
	            } else {
	                $(".dropdown-toggle #userlogo").addClass("hidden");
	                $(".dropdown-toggle #usericon").removeClass("hidden");
            }
        }
	}

/*
 * DOCUMENT LOADED EVENT
 * Description: Fire when DOM is ready
 */

    function updateUserTimeZone() {
        //cphillips83:
        //  once this is implement in the user profile
        //  this code should be removed and a popup
        //  should request them to properly set it
        try {
            if (isSource) {
                if (enableToS && !tosAccepted)
                    window.location.href = '/toschangepasswordsetting';
            }
            else if (isTimeZoneNull || isPasswordNull || isLangNull || (enableToS && !tosAccepted)) {
                window.location.href = '/toschangepasswordsetting';
            }
        }catch(err){}
    }
var _formZone = null;

var isStrongPassword = false;
function showTimeZoneForm() {
        var zoneData = { timezone: "", oldpwd: "", newpwd: "", cnfrmpwd: "", language:_language};
        var timeFieldData = {
            language: { field: "language", displayname: 'Default Language', fieldedittype: "4", type: "dropdown", dictionaryjson: [] },
            timezone: { field: "timezone", displayname: 'Time zone', fieldedittype: "4", type: "dropdown", dictionaryjson: [] },
            locale: { field: "locale", displayname: 'Date/TimeFormat', fieldedittype: "4", type: "dropdown", dictionaryjson: [] },
            oldpwd: { displayname: 'Old Password', field: "oldpwd", fieldedittype: "4", type: "password", required: true, minimum: 8 },
            newpwd: { displayname: 'New Password', field: "newpwd", fieldedittype: "4", type: "password", required: true, minimum: 8 },
            cnfrmpwd: { displayname: 'Confirm Password', field: "cnfrmpwd", fieldedittype: "4", type: "password", required: true, minimum: 8 }
        };
        //var fieldData = { "oldpwd": { "displayname": "Old Password", "field": "oldpwd", "fieldedittype": "4", "type": "password", "required": true, "minimum": 8 }, "newpwd": { "displayname": "New Password", "field": "newpwd", "fieldedittype": "4", "type": "password", "required": true, "minimum": 8 }, "cnfrmpwd": { "displayname": "Confirm Password", "field": "cnfrmpwd", "fieldedittype": "4", "type": "password", "required": true, "minimum": 8 } };
        var dropdownData = { "entries": [] };
        var localeData = { "entries": [] };
        var sortedLanguage = { "entries": [] };
        $(timeZones).each(function () {
            dropdownData.entries.push({ "name": this.display, "value": this.value });
        });
        $(localeInfo).each(function () {
            localeData.entries.push({ "name": this.display, "value": this.value });
        });
        sortedLanguage.entries = languageObject["entries"];
        timeFieldData["timezone"].dictionaryjson.push(dropdownData);
        timeFieldData["locale"].dictionaryjson.push(localeData);
        timeFieldData["language"].dictionaryjson.push(sortedLanguage);
        zoneData["timezone"] = localZone;
        if (zoneData["locale"] == null)
            zoneData["locale"] = "en-US";
        zoneData["language"]=_language;
        var timeZoneForm = {
            id: 'timeZoneForm',
            tabs: ['info'],
            tabdata: {
                'info': {
                    name: 'Info', icon: null, columns: []
                }
            },
            fields: timeFieldData,
            data: zoneData
        };
        if (isPasswordNull) {
            timeZoneForm.tabdata.info.columns.push({ name: 'oldpwd', size: 12, required: true, class: 'password' });
            timeZoneForm.tabdata.info.columns.push({ name: 'newpwd', size: 6, required: true });
            timeZoneForm.tabdata.info.columns.push({ name: 'cnfrmpwd', size: 6, required: true });
        }
        if (isTimeZoneNull) {
        timeZoneForm.tabdata.info.columns.push({ name: 'timezone', size: 12, placeholder: 'Time zone', class: "timezone", type: "dropdown", displayname: 'Time zone', dictionaryjson: [] });
            timeZoneForm.tabdata.info.columns.push({ name: 'locale', size: 12, placeholder: 'Date/TimeFormat', displayname: 'Date/TimeFormat' });
    }
    if (isLangNull != null && isLangNull != undefined && isLangNull)
        timeZoneForm.tabdata.info.columns.push({ name: 'language', size: 12, placeholder: 'Default Language', type: "dropdown", displayname: 'Default Language' });
        var _mrof = new morf(timeZoneForm);
        _formZone = _mrof;
        $('#setTimeZone').modal({ backdrop: 'static', show: true, keyboard: false });
        $('#timeZoneForm .tab-content').removeClass('padding-20');
        if (isPasswordNull)
            $('#timeZoneForm .tab-content').find('.password').parent().before("<div class='alert alert-info text-left'><div><i class='fa fa-info'></i> Password requires at least 1 uppercase letter, 1 lowercase letter, 1 number and 1 special character. Password must be between 8 and 64 characters and no spaces. Incremental or decremental numbers cannot be used.</div></div>");
        if (isTimeZoneNull)
            $('#timeZoneForm .tab-content').find('.timezone').parent().before("<div class='alert alert-warning'><i class='fa fa-exclamation-triangle'></i> Please select your Time Zone and Date-time format from the following list.</div>");

        checkStrongPassword();
    }

    $("#timeZone_save").on("click", function () {
        
        if (validateFields("timeZoneForm") || (!isPasswordNull && isTimeZoneNull)) {
            if (isPasswordNull) {
                var oldpassword = _formZone.val("oldpwd");
                var newpassword = _formZone.val("newpwd");
                if (newpassword != _formZone.val("cnfrmpwd")) {
                    showAlertMessage('Your new password did not match the confirm password.', 'Password mismatch', '{$ajax_selfserve_welcome.ok}');
                    return;
                }
            }
            else
                isStrongPassword = true;

            if (isTimeZoneNull) {
                var timeZoneValue = _formZone.val("timezone");
                var localeValue = _formZone.val("locale");
            }
            var defLang = "";
            if (_formZone.val("language") != null)
                 defLang = _formZone.val("language");
            else
                defLang = languageNode;

            if (isPasswordNull && !isStrongPassword)
                return false;
                api.call("UpdateUserTimeZoneAndPassword", { timezone: timeZoneValue, locale: localeValue, oldpassword: oldpassword, password: newpassword, language: parseInt(defLang) }, function (r) {
                    if (r.status == 0 && isPasswordNull)
                        onChangePasswordSuccess(r.result);
                    else if (r.status != 0 && isPasswordNull)
                        onChangePasswordFail(r.result);
                    else if (r.status == 0 && !isPasswordNull && isTimeZoneNull) {
                        $('#setTimeZone').modal("hide");
                        if(isAnnouncement == true || isMobile.any())
                            showProfileModal(true, false);
                    }
                });
        }
    });
function showAlert(msg, title) {
    $.OpenSmartMessageBox2({ title: title, content: msg, buttons: "[Ok]" },
        function (result) {
            if (result === 'Ok') {
                $.CloseSmartMessageBox2();
            }
        }
    );
}
function onChangePasswordSuccess(msg) {
        if (msg == 0)
            $('#setTimeZone').modal("hide");
        else if (msg == 1)
            showAlertMessage('Your new password was too short.<br/><br/>Password requires at least 1 letter and 1 number.<br/>Password must be between 8 and 64 characters and no spaces.<br/>Incremental or decremental numbers cannot be used.', 'Improper Password');
        else if (msg == 2)
            showAlertMessage('Your new password was too long.<br/><br/>Password requires at least 1 letter and 1 number.<br/>Password must be between 8 and 64 characters and no spaces.<br/>Incremental or decremental numbers cannot be used.', 'Improper Password');
        else if (msg == 3)
            showAlertMessage('Your new password was too weak.<br/><br/>Password requires at least 1 letter and 1 number.<br/>Password must be between 8 and 64 characters and no spaces.<br/>Incremental or decremental numbers cannot be used.', 'Improper Password');
        else if (msg == 4)
            showAlertMessage('Your new password was too common.<br/><br/>Password requires at least 1 letter and 1 number.<br/>Password must be between 8 and 64 characters and no spaces.<br/>Incremental or decremental numbers cannot be used.', 'Improper Password');
        else if (msg == 5)
            showAlertMessage('Your new password had spaces.<br/><br/>Password requires at least 1 letter and 1 number.<br/>Password must be between 8 and 64 characters and no spaces.<br/>Incremental or decremental numbers cannot be used.', 'Improper Password');
        else if (msg == 6)
            showAlertMessage('Your old password did not match.<br/><br/>Password requires at least 1 letter and 1 number.<br/>Password must be between 8 and 64 characters and no spaces.<br/>Incremental or decremental numbers cannot be used.', 'Improper Password');
        else if (msg == 8)
            showAlertMessage('Incremental or decremental numbers cannot be used.<br/><br/>Password requires at least 1 letter and 1 number.<br/>Password must be between 8 and 64 characters and no spaces.', 'Improper Password');
        else if (msg == 9)
            showAlertMessage('Password contains some reserved character.<br/><br/>Password requires at least 1 letter and 1 number.<br/>Password must be between 8 and 64 characters and no spaces.<br/>Incremental or decremental numbers cannot be used.', 'Improper Password');
        else if (msg == 10)
            showAlertMessage('You have tried to change your password too many times, please try again later.<br/><br/>', 'Many Failed Attempts');
        else
            showAlertMessage('Server error, please try again later', 'Server Error');
    location.reload(true);
    }

    function onChangePasswordFail(msg) {
        showAlertMessage('Unable to change password', 'Unable to change password at this time');
    }

    function showAlertMessage(msg, title) {
        $.OpenSmartMessageBox2({ title: title, content: msg, buttons: "[Ok]" },
            function (result) {
                if (result === 'Ok') {
                    $.CloseSmartMessageBox2();
                }
            }
        );
    }

function checkStrongPassword() {
    $('#newpwd').on("keyup", function () {
        if ($('#newpwd').val() == "") {
            $("#newpwd").closest('.form-group').find('.chngpwd-error').remove();
            $("#newpwd").css('border-color', '');
        }
        else if ($('#newpwd').val() != "" && $('#newpwd').val().length >= 8) {
            isStrongPassword = false;
            var chkStatus = verifyPasswordRegex();
            $("#newpwd").closest('.form-group').find(".chngpwd-error").remove();
            if (chkStatus == 0)
                return false;
            else if (chkStatus == 2) {
                $("#newpwd").closest('.form-group').append("<span class='chngpwd-error' style='color: #F9AE35'>Could be stronger</span>");
                return false;
            }
            else if (chkStatus == 23) {
                $('#newpwd').css('border-color', '#F9AE35');
                $("#newpwd").closest('.form-group').append("<span class='chngpwd-error' style='color: #F9AE35'>Could be stronger</span>");
                return false;
            }
            else if (chkStatus == 24) {
                $('#newpwd').css('border-color', '#2DAF7D');
                $("#newpwd").closest('.form-group').append("<span class='chngpwd-error' style='color: #2DAF7D'>Strong password</span>");
                isStrongPassword = true;
            }
        }
    });
}

function verifyPasswordRegex() {
    var status = 0;
    var len = $('#newpwd').val().length;
    if (len === 0) {
        $('#newpwd').css('border-color', '#2F96EF');
        status = 0;
    } else if (len > 0 && len <= 7) {
        $('#newpwd').css('border-color', '#FF4B47');
        status = 1;
    } else {
        return validateStrongPassword($('#newpwd').val());
    }

    return status;
}
$(document).ready(function () {
   
    updateUserTimeZone();
    var isMobileMedia = window.matchMedia("only screen and (max-width: 979px)");
    if (isMobileMedia.matches) {
        $('body').removeClass("horizontal-nav");
    }

    $(window).on("resize", function () {  
        adjustFooterPosition();
        if (isMobileMedia.matches) {
            $('body').removeClass("horizontal-nav");
        } else if (typeof (topnav) !== "undefined" && topnav == true) { 

            $('body').addClass("horizontal-nav");

            if ($(window).outerWidth() <= 1279 && $("body").hasClass('newnav')) {
                $('body').removeClass("horizontal-nav");
            }
            
        }
    });

    $('#main').on("resize", function () {     
        nav_page_height();
        adjustFooterPosition();
        check_if_mobile_width();

        if ($(window).outerWidth() <= 1279 && $("body").hasClass('newnav')) {

           
            // $(".ribbon-sm").show();
            var divNoti = '<div class="nav-notification"><div class="noti-icon-wrap"><i class="fal fa-bell"></i><span></span></div></div>';
            $("body").addClass("newnav-mobile-activated");
            if ($("body").hasClass('newnav')) {
                $("body").addClass("with-topbar");
                
               
                //$("").children("li").on("click", function () { $(this).toggleClass("open", true); }, function () { $(this).toggleClass("open", false); });
                $("body").removeClass("horizontal-nav");
                $("#ribbon .nav-toggle").css('display', 'block');
                $("#ribbon .logo-holder").css('display', 'block');
                $("#ribbon .navbar-right.custom").css('display', 'block');
                if (!$("#ribbon .nav-toggle i").hasClass("fal fa-bars"))
                    $("#ribbon .nav-toggle i").addClass("fal fa-bars");
                // $("#ribbon .logo-holder").append("<img src=" + web/img/connectwise-horiz-white.webp+"/>");
                $("#ribbon .nav-toggle").click(function () {
                    $("body").addClass("hidden-menu");
                    $("body").removeClass("minified");
                });
                $("body .ai-times-white").click(function () {
                    $("body").removeClass("hidden-menu");
                });
                $("#left-panel-backdrop").on("click", function () {
                    $("body").removeClass("hidden-menu");
                });
                if ($(window).width() < 576) {
                    window.setTimeout(function () {
                        $(".ribbon-sm").addClass('hide-logo-sm');
                    }, 1000);
                }
            }

            $("#ribbon > ul > li").find('#search-icon').click(function () {
                $("#ribbon > ul > li").find('#top-searchbar').addClass('expand-searchbar');
                $("#ribbon > ul > li").find('#top-searchbar .clear-search-input').css("opacity", "1");
                $("#ribbon > ul > li").find('#top-searchbar .form-control').focus();
                var searchText = $("#ribbon > ul > li").find('#top-searchbar .form-control').val().replace(/\s/g, "");
                var options = [];
                options["searchText"] = searchText;
                var url = "/#search?text=" + encodeURI(searchText);
                if (searchText != "")
                    window.location = url;
            });
            $("#ribbon > ul > li").find('#top-searchbar').submit(function (e) {
                event.preventDefault();
                var searchText = $("#ribbon > ul > li").find('#top-searchbar .form-control').val().replace(/^\s+/g, '');
                var options = [];
                options["searchText"] = searchText;
                var url = "/#search?text=" + encodeURI(searchText);
                if (searchText != "")
                    window.location = url;
            });

            $("#ribbon > ul > li").find('#top-searchbar .clear-search-input').click(function () {
                $("#ribbon > ul > li").find('#top-searchbar .form-control').val("");
                $("#ribbon > ul > li").find('#top-searchbar .clear-search-input').css("opacity", "0");
                $("#ribbon > ul > li").find('#top-searchbar').removeClass('expand-searchbar');
                $("#ribbon > ul > li").find('#top-searchbar .form-control').val("");
                $(this).css("opacity", "0");
            });
        }
        else {
            $("body").removeClass("left-nav2-mobile-activated");
            $("#ribbon .nav-toggle").css('display', 'none');
        }

    })

    $('nav').on("resize", function () {     
        nav_page_height();
      
    })


    function check_if_mobile_width() {
        if ($.root_ !== undefined) {
            if ($(window).width() < 979) {
                $.root_.addClass('mobile-view-activated')
            } else if ($.root_.hasClass('mobile-view-activated')) {
                $.root_.removeClass('mobile-view-activated');
            }
        }
    }

    $('.large-menu').on("click", function (e) {
        e.stopPropagation();
    });

	/*
	 * Fire tooltips
	 */
	if ($("[rel=tooltip]").length) {
		$("[rel=tooltip]").tooltip();
	}

    //TODO: was moved from window.load due to IE not firing consist
    nav_page_height();
	// INITIALIZE LEFT NAV
    closeOpenMenu();
	// COLLAPSE LEFT NAV
    $('.minifyme').on("click", function (e) {
	    //api call to save nav state here
	    //api.call("ToggleUINav");
        $('body').toggleClass("minified");
		$(this).effect("highlight", {}, 500);
		e.preventDefault();
	});

	// HIDE MENU
    $('#hide-menu >:first-child > a').on("click", function(e) {
        $('body').toggleClass("hidden-menu");
		e.preventDefault();
	});
	
    $('#show-shortcut').on("click", function(e) {
		if ($.shortcut_dropdown.is(":visible")) {
			shortcut_buttons_hide();
		} else {
			shortcut_buttons_show();
		}
		e.preventDefault();
	});

	// SHOW & HIDE MOBILE SEARCH FIELD
    $('#search-mobile').on("click", function() {
		$.root_.addClass('search-mobile');
	});

    $('#cancel-search-js').on("click", function() {
		$.root_.removeClass('search-mobile');
	});

	var search = "";
    $("#btnSearchIndex").on("click", function (e) {
	    if ($("#btnSearchIndex").find("i").hasClass("fa-search")) {
	        var search = $("#searchIndexText").val();
	        $("#searchIndexText").val("");
	        window.location = "#search?text=" + encodeURI(search);
	        updateCache(search);
	    }
	    else {
	        searchtext = "";
	        $("#searchIndexText").val("");
	        $("#btnSearchIndex").find("i").removeClass("fa-times").addClass("fa-search");
	    }
	});	
	$("#searchIndexText").on("focus", function (e) {
	    updateCache(search);
	});

	$("#searchIndexText").on("keyup", function (e) {
	    if (search == $("#searchIndexText").val())
	        $("#btnSearchIndex").find("i").removeClass("fa-search").addClass("fa-times");
	    else
	        $("#btnSearchIndex").find("i").removeClass("fa-times").addClass("fa-search");
	});
    /*
	 * SEARCH DROPDOWN
	 */
	function updateCache(search_text) {
	    var a = [];
	     search_text = search_text.valueOf();
	        // Parse the serialized data back into an aray of objects
	        var searchcache = JSON.parse(localStorage.getItem('serachassetscache'));
	        if (searchcache != undefined && searchcache != null)
	            a = searchcache;
	        if (search_text!="" && ($.inArray(search_text, searchcache) == -1))
	            a.push(search_text);

	        localStorage.setItem('serachassetscache', JSON.stringify(a));
	        var data = JSON.parse(localStorage.getItem('serachassetscache'));
	        $("#searchIndexText").select2({
	            tags: data,
	            maximumSelectionSize: 1,
	            formatSelectionTooBig: function (limit) {
	                return 'Only one item allowed';
	            }
	        });
	}
	$("#searchIndexText").on("select2-selecting", function (e) {
	    search = e.val;
	    $("#searchIndexText").val(search);
	    if (search != "") {
	        window.location = "#search?text=" + encodeURIComponent(search);
	        updateCache(search);
	    }
	});
	$("#searchIndexText").on("select2-opening", function (e) {
	    $('#searchIndexText').select2('val', '');
	});


	/*
	* SHORTCUTS
	*/

	// SHORT CUT (buttons that appear when clicked on user name)
    $.shortcut_dropdown.find('a').on("click", function(e) {

        e.preventDefault();
        
		window.location = $(this).attr('href');
		setTimeout(shortcut_buttons_hide, 300);

	});

	// SHORTCUT buttons goes away if mouse is clicked outside of the area
	$(document).on("mouseup", function(e) {
		if (!$.shortcut_dropdown.is(e.target)// if the target of the click isn't the container...
		&& $.shortcut_dropdown.has(e.target).length === 0) {
			shortcut_buttons_hide()
		}
	});

	// SHORTCUT ANIMATE HIDE
	function shortcut_buttons_hide() {
		$.shortcut_dropdown.animate({
			height : "hide"
		}, 300, "easeOutCirc");
		$.root_.removeClass('shortcut-on');

	}

	// SHORTCUT ANIMATE SHOW
	function shortcut_buttons_show() {
		$.shortcut_dropdown.animate({
			height : "show"
		}, 200, "easeOutCirc")
		$.root_.addClass('shortcut-on');
    }
});

var navMindMapIdx = 1;
function buildNavMindMapItem(parent, item, arr) {
    var idx = navMindMapIdx++;
    var jo = { "key": idx, "text": item.name, "parent": parent };
    if (item["children"] !== undefined) {
        jo["brush"] = Please.make_color()[0];
        var children = item.children;
        for (var i = 0; i < children.length; i++)
            buildNavMindMapItem(idx, children[i], arr);
    }
    arr.push(jo);
    return idx;
}


function buildNavMindMap() {
    if (typeof (navigation) !== 'undefined') {
        var nav = navigation;

        var jo = { "class": "go.TreeModel", "nodeDataArray": [] };
        jo.nodeDataArray.push({ "key": 0, text: "NAV" });

        for (var i = 0; i < nav.length; i++) {
            buildNavMindMapItem(0, nav[i], jo.nodeDataArray);
        }

        return jo;
    }

    return null;
}


function buildNavItem(item,parent) {
    var $li = $("<li></li>");

    //submenu?
    if (item["children"] !== undefined) {
        var $a = $("<a></a>");

        $a.attr("href", "#");
        $a.attr("title", item["name"]);
        
        if (item.icon !== undefined && item.icon !== '' && parent) {
            if (typeof (topnav) !== "undefined" && topnav == true)
                $a.append('<i class="fa fa-lg fa-xg fa-fw fa-' + item.icon + '"></i>');
            else {
                if (pageData.customLeftNavEnabled)
                    $a.append('<strong class="item-icon"><i class="fa fa-lg fa-xg fa-fw fa-' + item.icon + '" style="opacity:0;"></i></strong>');
                else
                    $a.append('<strong class="item-icon"><i class="fa fa-lg fa-xg fa-fw fa-' + item.icon + '"></i></strong>');
            }

            $a.append('<span class="menu-item-parent">' + item.name + '</span>');
            //$a.append('<b class="collapse-sign"><em class="fal fa-plus-square"></em></b>');
        }
        else {
            $a.append('<span>' + item.name + '</span>');
            //$a.append('<b class="collapse-sign"><em class="fal fa-plus-square"></em></b>');
        }

        var $ul = $("<ul></ul>");
        var children = item["children"];
        for (var i = 0; i < children.length; i++) {
            var $item = buildNavItem(children[i], false);
            $ul.append($item);
        }
        if (!topnav && children.length > 0)//class added for parent module for left navigation
            $li.addClass("parent-node");
        $li.append($a);
        $li.append($ul);
       
    }
    else {
        var $a = $("<a></a>");

        $a.attr("href", item.link);
        $a.attr("title", item.name);

        //added by shiv mishra
        if (item.link.startsWith("http") && item.link.indexOf("?sametab") > 0)
            $a.attr("target", "_self");
        else if (item.link.startsWith("http"))
            $a.attr("target", "_blank");
        else if (item.link.startsWith("mailto"))
            $a.attr("target", "_blank");

        if (item.icon !== undefined && item.icon !== '' && parent) {
            if (pageData.customLeftNavEnabled)
                $a.append('<i class="fa fa-lg fa-xg fa-fw fa-' + item.icon + '" style="opacity:0;"></i>');
            else
                $a.append('<i class="fa fa-lg fa-xg fa-fw fa-' + item.icon + '"></i>');
            $a.append('<span class="menu-item-parent">' + item.name + '</span>');
        }
        else {
            $a.append('<span>' + item.name + '</span>');
        }
        if (item.key == 'live_chat')
            $a.attr('id', 'mindmatrix_livechat');

        $li.append($a);
    }
    
    return $li;
}

function buildNavMenu() {
    if (typeof (navigation) !== 'undefined') {
        
        var nav = navigation;
        var $nav = $("#left-panel > nav");
        var $ul = $("<ul></ul>");

        for (var i = 0; i < nav.length; i++) {
            $ul.append(buildNavItem(nav[i],true));
        }

        $nav.append($ul);
    }
}

function buildMegaMenuItem(item, root) {
    var links = item.desclinks == undefined ? '' : item.desclinks;
    var desc = item.desc == undefined ? '' : item.desc;
    var showhidelinks = item.showlinks == undefined ? false : item.showlinks;
    var $lnkdescspan = $("<span class='menu-item-info-btn'></span>");
    if (showhidelinks && desc)
        $lnkdescspan.append("<i class='fa fa-info-circle' aria-hidden='true'></i>");

    var $li = $("<li></li>");
    //submenu?
    if (item["children"] !== undefined) {
        var $a = $("<a></a>");
        var $menucontainer = $("<div class='sub-menu-container'></div>");
        var $childgroups = $("<div class='sub-menu-wrap'></div>");
        var $menuitem = $("<span class='menu-item-wrap'></span>");

        $li.attr("class", "has-submenu");
        $a.attr("href", "#");
        $a.attr("title", item["name"]);
        var icon = item.icon;
        var icontype = item.icontype;
        if (icon == undefined || icon == '' || icon == "null")
            icon = "folder";
        if (icontype == undefined || icontype == '' || icontype == "null")
            icontype = "fas";

        $a.append('<span class="menu-item-icon link-icon" icon="' + icon + '"><i class="' + icontype + ' fa-' + icon + '"></i></span>');
        $a.append('<span class="menu-item-desc" style="display:none" showlink="' + showhidelinks +'">' + desc + '</span>');
        $a.append('<span class="menu-item-link" style="display:none" showlink="' + showhidelinks +'">' + links + '</span>');

        $a.append('<span class="menu-item-name">' + item.name + '</span>');
        $a.append('<span class="sub-menu-trigger-btn"><i class="fa fa-plus" aria-hidden="true"></i></span>');

        var $ul = $("<ul class='sub-menu-list'></ul>");
        $menucontainer.append('<nav aria-label="breadcrumb"><ol class="breadcrumb"><li class="breadcrumb-item active"><a href="#">' + item.name + '</a></li></ol></nav>');
        var children = item["children"];
        for (var i = 0; i < children.length; i++) {
            var $item = buildMegaMenuItem(children[i],false);
            $ul.append($item);
        }
       
        if (root)
            $li.append($a);
        else {
            $menuitem.append($a);
            $menuitem.append($lnkdescspan);
            $li.append($menuitem);
        }
     
        if (root) {
            $childgroups.append($ul);
            $menucontainer.append($childgroups);
            if (showhidelinks) {
                $menucontainer.append(buildMegaMenuDescLinks(item.name, icon, desc, links));
            }
            $li.append($menucontainer);
        }
        else {
            $li.append($ul);
        }
    }
    else {
        var $a = $("<a></a>");
        var $menuitem = $("<span class='menu-item-wrap'></span>");

        $a.attr("href", item.link);
        $a.attr("title", item.name);
        if (item.key == 'live_chat')
            $a.attr('id', 'mindmatrix_livechat');

        //added by shiv mishra
        if (item.link.startsWith("http") && item.link.indexOf("?sametab") > 0)
            $a.attr("target", "_self");
        else if (item.link.startsWith("http"))
            $a.attr("target", "_blank");
        else if (item.link.startsWith("mailto"))
            $a.attr("target", "_blank");

        var icon = item.icon;
        var icontype = item.icontype;
        if (icon == undefined || icon == '')
            icon = "folder";
        if (icontype == undefined || icontype == '')
            icontype = "fa";

        $a.append('<span class="menu-item-icon link-icon" icon="' + icon + '"><i class="' + icontype + ' fa-' + icon + '"></i></span>');
        $a.append('<span class="menu-item-desc" style="display:none" showlink="' + showhidelinks +'">' + desc + '</span>');
        $a.append('<span class="menu-item-link" style="display:none" showlink="' + showhidelinks +'">' + links + '</span>');
        $a.append('<span class="menu-item-name">' + item.name + '</span>');

        if (root)
            $li.append($a);
        else {
            $menuitem.append($a);
            $menuitem.append($lnkdescspan);
            $li.append($menuitem);            
        }
    }

    return $li;
}

function buildMegaMenuDescLinks(title, icon, desc, links) {
    var $div = $('<div></div>');
    var $maindiv = $('<div class="selected-item-detail-cont"></div>');
    var $mainsubdiv = $('<div class="container-fluid"></div>');
    var $divrow = $('<div class="row"></div>');
    var $divdesccol6 = $('<div class="col-md-6 desc-col"></div>');
    var $spaniconholder = $('<span class="item-icon-holder"></span>');
    var $i = $('<i class="fa fa-' + icon + '" aria-hidden="true"></i>');
    var $divdescholder = $('<div class="description-holder"></div>');
    var $h3about = $('<h3>About <span>' + title + '</span></h3>');
    var $p = $('<p>' + desc + '</p>');
    var $h3link = $('<h3>Related Link</h3>');
    var $divlinkcol6 = $('<div class="col-md-6"></div>');
    var $divlinksholder = $('<div class="rel-links">' + links + '</div>');

    $spaniconholder.append($i);

    if (desc != '') {
        $divdescholder.append($h3about);
        $divdescholder.append($p);
    }

    if (links == '')
        $divdesccol6.removeClass("col-md-6 desc-col").addClass("col-md-12 desc-col");

    $divdesccol6.append($spaniconholder);
    $divdesccol6.append($divdescholder);

    if (desc == '') {
        $divlinkcol6.removeClass("col-md-6 desc-col").addClass("col-md-12 desc-col");
        $divlinkcol6.append($spaniconholder);
        $divdescholder.append($h3link);
        $divdescholder.append($divlinksholder);
        $divlinkcol6.append($divdescholder);
    }
    else {
        $divlinkcol6.addClass("col-md-6 rel-link-col");
        $divlinkcol6.append($h3link);
        $divlinkcol6.append($divlinksholder);
    }
    if (desc != '')
        $divrow.append($divdesccol6);

    if (links != '')
        $divrow.append($divlinkcol6);

    $mainsubdiv.append($divrow);
    $maindiv.append($mainsubdiv);
    $div.append($maindiv);

    return $div.html();
}

function buildMegaMenu() {
    if (typeof (navigation) !== 'undefined') {
        var nav = navigation;
        var $nav = $("#left-panel > nav");
        var $ul = $("<ul></ul>");

        for (var i = 0; i < nav.length; i++) {
            $ul.append(buildMegaMenuItem(nav[i], true));
        }

        $nav.append($ul);

        $("#navigation .menu-item-wrap").on("click", function () {
            var desc = $(this).find(".menu-item-desc").text();
            var links = $(this).find(".menu-item-link").html();
            var title = $(this).find('.menu-item-name').text();
            var icon = $(this).find('.menu-item-icon').attr("icon");
            var showlinkdesc = $(this).find(".menu-item-link").attr('showlink') == "false" ? false : true;
            var icontype = $(this).find('.menu-item-icon').attr("icontype");
            var $info = $(this).closest('.sub-menu-container');
            if (showlinkdesc) {
                $info.find('.selected-item-detail-cont').remove();
                $info.append(buildMegaMenuDescLinks(title, icon, desc, links,icontype));
            }
        });

        $(".sub-menu-list a").on("click touchend", function (ev) {

            var title = $(this).attr("title");
            var currentBreadcrumbHolder = $(this).closest('.sub-menu-container').find('.breadcrumb');
            var breadcrumbLevel = currentBreadcrumbHolder.children('li').length; // identify the current submenu level using breadcrumb length
            var clickedItemLevel = $(this).parents('ul').length;

            //Show own Sub-menu on menu item click
            var hasSubMenu = $(this).parent().siblings('.sub-menu-list').length;
            $(this).closest('li').siblings('li').removeClass('active');
            $(this).closest('li').addClass('active'); // add active class to show its sub <ul>

            if (hasSubMenu) {
                currentBreadcrumbHolder.children('li').removeClass('active');
                currentBreadcrumbHolder.append('<li class="breadcrumb-item active" aria-current="page"><i class="fa fa-angle-right"></i> <a href="#">' + title + '</a></li>');
            } else {
                localStorage.setItem('breadcrumb', currentBreadcrumbHolder[0].innerHTML);
                $('nav#navigation').addClass('close-menu'); //Close submenu while page loading.
                /*to check prev url and current url and then set breadcrumb*/
                if (localStorage.getItem('prevurl') == window.location.href) {
                    localStorage.setItem('breadcrumb', currentBreadcrumbHolder[0].innerHTML);
                }
            }
        });

        //Remove close menu class on hover of other main menu item
        $('nav#navigation > ul > li > a').on('mouseenter touchstart', function () {
            $('nav#navigation').removeClass('close-menu');
        });

        //Handle Breadcrumb click to update navigaion to backward
        $(document).on('click touchend', 'ol.breadcrumb a', function (ev) {
            var clickedLi = $(this).closest('li');
            var showSubLevel = clickedLi.index() + 1; //Get index of item to hide same level sub nav
            $(clickedLi).nextAll('li').remove(); //updating breadcrumb
            var subUl = "";
            for (var i = 0; i < showSubLevel; i++) {
                subUl += "ul ";
            }

            $(this).closest('.sub-menu-container').find(subUl + ' li').removeClass('active');

            //// set icon/title/desc/link on click of breadcrum
            var $container = $(this).closest('.sub-menu-container').parent("li").find('a[title="' + $(this).text() + '"]');

           
            var title = $container.find(".menu-item-name").text();
            var icon = $container.find(".menu-item-icon").attr("icon");
            var desc = $container.find(".menu-item-desc").text();
            var links = $container.find(".menu-item-link").html();
            var icontype = $container.find(".menu-item-icon").attr("icontype");

            var showlinkdesc = $container.find(".menu-item-link").attr('showlink') == "false" ? false : true;
            var $infobox = $(this).closest('.sub-menu-container');
            $infobox.find('.selected-item-detail-cont').remove();
            if (showlinkdesc) {
                $infobox.append(buildMegaMenuDescLinks(title, icon, desc, links,icontype));
            }
        });
    }
}


/*
 * RESIZER WITH THROTTLE
 * Source: http://benalman.com/code/projects/jquery-resize/examples/resize/
 */

(function ($, window, undefined) {
    if (typeof (hasMegaMenuEnabled) == "boolean") {
        if (!hasMegaMenuEnabled)
            buildNavMenu();
        else {
            
            buildMegaMenu();
          
            if ($(window).outerWidth() <= 1279 && $("body").hasClass('newnav')) {
                $(".newnav > aside > nav > ul > li").on("click", "a", function (event) {
                   
                  
                    var $parentli = $(this).parent("li");
                    if ($parentli.length > 0) {
                        if ($parentli.hasClass('open'))
                            $parentli.removeClass("open");
                        else {
                        $(".newnav > aside > nav > ul > li > a").parent("li").removeClass("open");
                            $parentli.addClass("open");
                        } 
                    }
                    else {
                        if ($(this).parent().parent().hasClass("open")) {
                            $(this).parent().parent().removeClass("open");
                            $(this).find(".sub-menu-trigger-btn").html("<i class='fa fa-plus' aria-hidden='true'></i>");
                        }
                        else {
                            $(this).parent().parent().addClass("open");
                            $(this).find(".sub-menu-trigger-btn").html("<em class='far fa-minus-square'' aria-hidden='true''></em>");
                        }
                    }
                });
                $("#ribbon > ul > li").find('.dropdown-toggle').removeAttr("data-toggle");
                $("#ribbon > ul > li").find('.dropdown-toggle').find('.profile-pic').attr({ 'href': '/logout' });
                $("#ribbon > ul > li").find('.dropdown-toggle').find('.profile-pic').click(function () {
                    //get the link
                    var $this = $(this);
                    $.loginURL = $this.attr('href');
                    $.logoutMSG = $this.data('logout-msg');

                    // ask verification
                    $.SmartMessageBox({
                        title: '<i class="fa fa-sign-out txt-color-orangeDark"></i> Logout <span class="txt-color-orangeDark"><strong>' + $('#show-shortcut').text() + '</strong></span> ?',
                        content: $.logoutMSG || 'You can improve your security further after logging out by closing this opened browser',
                        buttons: '[No][Yes]'

                    }, function (ButtonPressed) {
                        if (ButtonPressed == 'Yes') {
                            $.root_.addClass('animated fadeOutUp');
                            setTimeout(logout, 1000);
                        }

                    });
                    //e.preventDefault();
                });
            }
           
        }
    }
    else {
        buildNavMenu();
    }

	var elems = $([]), jq_resize = $.resize = $.extend($.resize, {}), timeout_id, str_setTimeout = 'setTimeout', str_resize = 'resize', str_data = str_resize + '-special-event', str_delay = 'delay', str_throttle = 'throttleWindow';

	jq_resize[str_delay] = $.throttle_delay;

	jq_resize[str_throttle] = true;

	$.event.special[str_resize] = {

		setup : function() {
			if (!jq_resize[str_throttle] && this[str_setTimeout]) {
				return false;
			}

			var elem = $(this);
			elems = elems.add(elem);
			$.data(this, str_data, {
				w : elem.width(),
				h : elem.height()
			});
			if (elems.length === 1) {
				loopy();
			}
		},
		teardown : function() {
			if (!jq_resize[str_throttle] && this[str_setTimeout]) {
				return false;
			}

			var elem = $(this);
			elems = elems.not(elem);
			elem.removeData(str_data);
			if (!elems.length) {
				clearTimeout(timeout_id);
			}
		},

		add : function(handleObj) {
			if (!jq_resize[str_throttle] && this[str_setTimeout]) {
				return false;
			}
			var old_handler;

			function new_handler(e, w, h) {
			    var elem = $(this), data = $.data(this, str_data);
			    if (data === undefined) {
			        data = { w: w, h: h };
			        $.data(this, str_data, data);
			    }

				data.w = w !== undefined ? w : elem.width();
				data.h = h !== undefined ? h : elem.height();

				old_handler.apply(this, arguments);
			};
			if ($.isFunction(handleObj)) {
				old_handler = handleObj;
				return new_handler;
			} else {
				old_handler = handleObj.handler;
				handleObj.handler = new_handler;
			}
		}
	};

	function loopy() {
		timeout_id = window[str_setTimeout](function() {
			elems.each(function() {
				var elem = $(this), width = elem.width(), height = elem.height(), data = $.data(this, str_data);
				if (width !== data.w || height !== data.h) {
					elem.trigger(str_resize, [data.w = width, data.h = height]);
				}

			});
			loopy();

		}, jq_resize[str_delay]);

	};

})(jQuery, this);

/*
* NAV OR #LEFT-BAR RESIZE DETECT
* Description: changes the page min-width of #CONTENT and NAV when navigation is resized.
* This is to counter bugs for min page width on many desktop and mobile devices.
* Note: This script uses JSthrottle technique so don't worry about memory/CPU usage
*/

// Fix page and nav height
function adjustFooterPosition() {
    if (typeof isFooterEnabled != 'undefined' && isFooterEnabled) {
        const footer = document.getElementById('portal_fc');
        footer.style.display = 'none';
        const body = document.body;
        if (!footer || !body) return;
        const bodyHeight = $('body').height();
        footer.style.position = 'absolute';
        footer.style.top = bodyHeight + 'px';
        const footerHeight = $('.portal_footer').height();
        const topPosition = bodyHeight - footerHeight;
        const windowHeight = $(window).height();
        var mainContentOffsetTop = $('#main').offset().top;
        var mainHeight = $('#main').height();
        var totalContentHeight = mainHeight + mainContentOffsetTop;
        var totalContentWithFooterHeight = totalContentHeight + footerHeight;
        const bodyExtraSpace = bodyHeight - totalContentHeight
        if (bodyHeight == windowHeight) {
            if ((totalContentWithFooterHeight < windowHeight) || (bodyExtraSpace > footerHeight)) {
                if (totalContentHeight < windowHeight) {
                    footer.style.top = topPosition + 'px';
                }
            }
            else {
            }
        }
        footer.style.display = 'block';
    }
}
function nav_page_height() {
    if ($.mobileApp == false) {
        var setHeight = $('#main').height();
        //menuHeight = $.left_panel.height();

        var windowHeight = $(window).height() - $.navbar_height;

        //if ($("body").hasClass("horizontal-nav")) {
        //    return;
        //}
        //set height
        //alert(setHeight);

        //This is used for salesforce(getting the widget height and set in the body min height)
        if ($.IsSalesforce == true) {
            $.root_.css('min-height', $.Sfheight + 'px');
            $.root_.css('height', $.Sfheight + 'px');

        } else {
            if ($.isCommonScroll == true) {
                if (setHeight > windowHeight) {// if content height exceedes actual window height and menuHeight
                    if (!$("body").hasClass("horizontal-nav"))
                        $.left_panel.css('min-height', setHeight + 'px');
                    $.root_.css('min-height', setHeight + $.navbar_height + 'px');

                } else {
                    if (!$("body").hasClass("horizontal-nav"))
                        $.left_panel.css('min-height', windowHeight + 'px');
                    $.root_.css('min-height', windowHeight + $.navbar_height + 'px');
                }
            }
        }
    }
}
function closeOpenMenu() {
    if (typeof (hasMegaMenuEnabled) == "boolean") {
        if (!null) {
            if (!hasMegaMenuEnabled) {
                $('nav ul').jarvismenu({
                    accordion: true,
                    speed: $.menu_speed,
                    closedSign: '<em class="far fa-plus-square"></em>',
                    openedSign: '<em class="far fa-minus-square"></em>'
                });
            }
        } else {
            alert("Error - menu anchor does not exist");
        }
    }
};



/* ~ END: NAV OR #LEFT-BAR RESIZE DETECT */

/*
 * DETECT IE VERSION
 * Description: A short snippet for detecting versions of IE in JavaScript
 * without resorting to user-agent sniffing
 * RETURNS:
 * If you're not in IE (or IE version is less than 5) then:
 * //ie === undefined
 *
 * If you're in IE (>=5) then you can determine which version:
 * // ie === 7; // IE7
 *
 * Thus, to detect IE:
 * // if (ie) {}
 *
 * And to detect the version:
 * ie === 6 // IE6
 * ie > 7 // IE8, IE9 ...
 * ie < 9 // Anything less than IE9
 */

// TODO: delete this function later on - no longer needed (?)
var ie = ( function() {

		var undef, v = 3, div = document.createElement('div'), all = div.getElementsByTagName('i');

		while (div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->', all[0]);

		return v > 4 ? v : undef;

	}()); // do we need this? 

/* ~ END: DETECT IE VERSION */

/*
 * CUSTOM MENU PLUGIN
 */

$.fn.extend({

	//pass the options variable to the function
	jarvismenu : function(options) {

		var defaults = {
			accordion : 'true',
			speed : 200,
			closedSign : '[+]',
			openedSign : '[-]'
		};

		// Extend our default options with those provided.
		var opts = $.extend(defaults, options);
		//Assign current element to variable, in this case is UL element
        var $this = $(this);
        if (typeof (topnav) !== "undefined" && topnav == true) {
            $(".horizontal-nav > aside > nav > ul").children("li").on("hover", function () { $(this).toggleClass("open", true); }, function () { $(this).toggleClass("open", false); });
        }
		//add a mark [+] to a multilevel menu
        $this.find("li").each(function () {
            if ($(this).find("ul").length != 0) {
				//add the multilevel sign next to the link
				$(this).find("a:first").append("<b class='collapse-sign'>" + opts.closedSign + "</b>");

				//avoid jumping to the top of the page when the href is an #
				if ($(this).find("a:first").attr('href') == "#") {
                    $(this).find("a:first").on("click", function() {
						return false;
					});
				}
			}
		});

		//open active level
		$this.find("li.active").each(function() {
			$(this).parents("ul").slideDown(opts.speed);
			$(this).parents("ul").parent("li").find("b:first").html(opts.openedSign);
			$(this).parents("ul").parent("li").addClass("open")
		});

        if (typeof (topnav) !== "undefined" && topnav == true)
		    $('nav > ul > li.open').removeClass("open");

        $this.find("li a").on("click", function() {

            if ($(this).parent().find("ul").length != 0) {

				if (opts.accordion) {
					//Do nothing when the list is open
					if (!$(this).parent().find("ul").is(':visible')) {
						parents = $(this).parent().parents("ul");
						visible = $this.find("ul:visible");
						visible.each(function(visibleIndex) {
							var close = true;
							parents.each(function(parentIndex) {
								if (parents[parentIndex] == visible[visibleIndex]) {
									close = false;
									return false;
								}
							});
							if (close) {
								if ($(this).parent().find("ul") != visible[visibleIndex]) {
									$(visible[visibleIndex]).slideUp(opts.speed, function() {
										$(this).parent("li").find("b:first").html(opts.closedSign);
										$(this).parent("li").removeClass("open");
                                        $("body").removeClass("nav-open");
									});

								}
							}
						});
					}
                }// end if
                
				if ($(this).parent().find("ul:first").is(":visible") && !$(this).parent().find("ul:first").hasClass("active")) {
					$(this).parent().find("ul:first").slideUp(opts.speed, function() {
						$(this).parent("li").removeClass("open");
                        $("body").removeClass("nav-open");
						$(this).parent("li").find("b:first").delay(opts.speed).html(opts.closedSign);
					});

				} else {
					$(this).parent().find("ul:first").slideDown(opts.speed, function() {
						/*$(this).effect("highlight", {color : '#616161'}, 500); - disabled due to CPU clocking on phones*/
						$(this).parent("li").addClass("open");
                        $("body").addClass("nav-open");
						$(this).parent("li").find("b:first").delay(opts.speed).html(opts.openedSign);
					});
				} // end else
			} // end if
		});
	} // end function
});

/* ~ END: CUSTOM MENU PLUGIN */

/*
 * ELEMENT EXIST OR NOT
 * Description: returns true or false
 * Usage: $('#myDiv').doesExist();
 */

jQuery.fn.doesExist = function() {
	return jQuery(this).length > 0;
};

/* ~ END: ELEMENT EXIST OR NOT */

/*
 * FULL SCREEN FUNCTION
 */

// Find the right method, call on correct element
function launchFullscreen(element) {

	if (!$.root_.hasClass("full-screen")) {

		$.root_.addClass("full-screen");

		if (element.requestFullscreen) {
			element.requestFullscreen();
		} else if (element.mozRequestFullScreen) {
			element.mozRequestFullScreen();
		} else if (element.webkitRequestFullscreen) {
			element.webkitRequestFullscreen();
		} else if (element.msRequestFullscreen) {
			element.msRequestFullscreen();
		}

	} else {
		
		$.root_.removeClass("full-screen");
		
		if (document.exitFullscreen) {
			document.exitFullscreen();
		} else if (document.mozCancelFullScreen) {
			document.mozCancelFullScreen();
		} else if (document.webkitExitFullscreen) {
			document.webkitExitFullscreen();
		}

	}

}

/*
 * ~ END: FULL SCREEN FUNCTION
 */

/*
 * INITIALIZE FORMS
 * Description: Select2, Masking, Datepicker, Autocomplete
 */

function runAllForms() {

	/*
	 * BOOTSTRAP SLIDER PLUGIN
	 * Usage:
	 * Dependency: js/plugin/bootstrap-slider
	 */
	if ($.fn.slider) {
		$('.slider').slider();
	}

	/*
	 * SELECT2 PLUGIN
	 * Usage:
	 * Dependency: js/plugin/select2/
	 */
	//if ($.fn.select2) {
	//	$('.select2').each(function() {
	//		var $this = $(this);
	//		var width = $this.attr('data-select-width') || '100%';
	//		//, _showSearchInput = $this.attr('data-select-search') === 'true';
	//		$this.select2({
	//			//showSearchInput : _showSearchInput,
	//			allowClear : true,
	//			width : width
	//		})
	//	})
	//}

	/*
	 * MASKING
	 * Dependency: js/plugin/masked-input/
	 */
	if ($.fn.mask) {
		$('[data-mask]').each(function() {

			var $this = $(this);
			var mask = $this.attr('data-mask') || 'error...', mask_placeholder = $this.attr('data-mask-placeholder') || 'X';

			$this.mask(mask, {
				placeholder : mask_placeholder
			});
		})
	}

	/*
	 * Autocomplete
	 * Dependency: js/jqui
	 */
	if ($.fn.autocomplete) {
		$('[data-autocomplete]').each(function() {

			var $this = $(this);
			var availableTags = $this.data('autocomplete') || ["The", "Quick", "Brown", "Fox", "Jumps", "Over", "Three", "Lazy", "Dogs"];

			$this.autocomplete({
				source : availableTags
			});
		})
	}

	/*
	 * JQUERY UI DATE
	 * Dependency: js/libs/jquery-ui-1.10.3.min.js
	 * Usage:
	 */
	if ($.fn.datepicker) {
		$('.datepicker').each(function() {

			var $this = $(this);
			var dataDateFormat = $this.attr('data-dateformat') || 'dd.mm.yy';

			$this.datepicker({
				dateFormat : dataDateFormat,
				prevText : '<i class="fa fa-chevron-left"></i>',
				nextText : '<i class="fa fa-chevron-right"></i>',
			});
		})
	}

	/*
	 * AJAX BUTTON LOADING TEXT
	 * Usage: <button type="button" data-loading-text="Loading..." class="btn btn-xs btn-default ajax-refresh"> .. </button>
	 */
	//$('button[data-loading-text]').on('click', function() {
	//	var btn = $(this)
	//	btn.button('loading')
	//	setTimeout(function() {
	//		btn.button('reset')
	//	}, 3000)
	//});

}

/* ~ END: INITIALIZE FORMS */

/*
 * INITIALIZE CHARTS
 * Description: Sparklines, PieCharts
 */

function runAllCharts() {
	/*
	 * SPARKLINES
	 * DEPENDENCY: js/plugins/sparkline/jquery.sparkline.min.js
	 * See usage example below...
	 */

	/* Usage:
	 * 		<div class="sparkline-line txt-color-blue" data-fill-color="transparent" data-sparkline-height="26px">
	 *			5,6,7,9,9,5,9,6,5,6,6,7,7,6,7,8,9,7
	 *		</div>
	 */

	if ($.fn.sparkline) {

		$('.sparkline:not([data-chart-inited])').each(function() {
		    var $this = $(this);
		    $this.attr("data-chart-inited", "true");
			var sparklineType = $this.data('sparkline-type') || 'bar';

			// BAR CHART
			if (sparklineType == 'bar') {

				var barColor = $this.data('sparkline-bar-color') || $this.css('color') || '#0000f0', sparklineHeight = $this.data('sparkline-height') || '26px', sparklineBarWidth = $this.data('sparkline-barwidth') || 5, sparklineBarSpacing = $this.data('sparkline-barspacing') || 2, sparklineNegBarColor = $this.data('sparkline-negbar-color') || '#A90329', sparklineStackedColor = $this.data('sparkline-barstacked-color') || ["#A90329", "#0099c6", "#98AA56", "#da532c", "#4490B1", "#6E9461", "#990099", "#B4CAD3"];

				$this.sparkline('html', {
					type : 'bar',
					barColor : barColor,
					type : sparklineType,
					height : sparklineHeight,
					barWidth : sparklineBarWidth,
					barSpacing : sparklineBarSpacing,
					stackedBarColor : sparklineStackedColor,
					negBarColor : sparklineNegBarColor,
					zeroAxis : 'false'
				});

			}

			//LINE CHART
			if (sparklineType == 'line') {

				var sparklineHeight = $this.data('sparkline-height') || '20px', sparklineWidth = $this.data('sparkline-width') || '90px', thisLineColor = $this.data('sparkline-line-color') || $this.css('color') || '#0000f0', thisLineWidth = $this.data('sparkline-line-width') || 1, thisFill = $this.data('fill-color') || '#c0d0f0', thisSpotColor = $this.data('sparkline-spot-color') || '#f08000', thisMinSpotColor = $this.data('sparkline-minspot-color') || '#ed1c24', thisMaxSpotColor = $this.data('sparkline-maxspot-color') || '#f08000', thishighlightSpotColor = $this.data('sparkline-highlightspot-color') || '#50f050', thisHighlightLineColor = $this.data('sparkline-highlightline-color') || 'f02020', thisSpotRadius = $this.data('sparkline-spotradius') || 1.5;
				thisChartMinYRange = $this.data('sparkline-min-y') || 'undefined', thisChartMaxYRange = $this.data('sparkline-max-y') || 'undefined', thisChartMinXRange = $this.data('sparkline-min-x') || 'undefined', thisChartMaxXRange = $this.data('sparkline-max-x') || 'undefined', thisMinNormValue = $this.data('min-val') || 'undefined', thisMaxNormValue = $this.data('max-val') || 'undefined', thisNormColor = $this.data('norm-color') || '#c0c0c0', thisDrawNormalOnTop = $this.data('draw-normal') || false;

				$this.sparkline('html', {
					type : 'line',
					width : sparklineWidth,
					height : sparklineHeight,
					lineWidth : thisLineWidth,
					lineColor : thisLineColor,
					fillColor : thisFill,
					spotColor : thisSpotColor,
					minSpotColor : thisMinSpotColor,
					maxSpotColor : thisMaxSpotColor,
					highlightSpotColor : thishighlightSpotColor,
					highlightLineColor : thisHighlightLineColor,
					spotRadius : thisSpotRadius,
					chartRangeMin : thisChartMinYRange,
					chartRangeMax : thisChartMaxYRange,
					chartRangeMinX : thisChartMinXRange,
					chartRangeMaxX : thisChartMaxXRange,
					normalRangeMin : thisMinNormValue,
					normalRangeMax : thisMaxNormValue,
					normalRangeColor : thisNormColor,
					drawNormalOnTop : thisDrawNormalOnTop

				});

			}

			//PIE CHART
			if (sparklineType == 'pie') {

				var pieColors = $this.data('sparkline-piecolor') || ["#B4CAD3", "#4490B1", "#98AA56", "#da532c", "#6E9461", "#0099c6", "#990099", "#717D8A"], pieWidthHeight = $this.data('sparkline-piesize') || 90, pieBorderColor = $this.data('border-color') || '#45494C', pieOffset = $this.data('sparkline-offset') || 0;

				$this.sparkline('html', {
					type : 'pie',
					width : pieWidthHeight,
					height : pieWidthHeight,
					tooltipFormat : '<span style="color: {{color}}">&#9679;</span> ({{percent.1}}%)',
					sliceColors : pieColors,
					offset : 0,
					borderWidth : 1,
					offset : pieOffset,
					borderColor : pieBorderColor
				});

			}

			//BOX PLOT
			if (sparklineType == 'box') {

				var thisBoxWidth = $this.data('sparkline-width') || 'auto', thisBoxHeight = $this.data('sparkline-height') || 'auto', thisBoxRaw = $this.data('sparkline-boxraw') || false, thisBoxTarget = $this.data('sparkline-targetval') || 'undefined', thisBoxMin = $this.data('sparkline-min') || 'undefined', thisBoxMax = $this.data('sparkline-max') || 'undefined', thisShowOutlier = $this.data('sparkline-showoutlier') || true, thisIQR = $this.data('sparkline-outlier-iqr') || 1.5, thisBoxSpotRadius = $this.data('sparkline-spotradius') || 1.5, thisBoxLineColor = $this.css('color') || '#000000', thisBoxFillColor = $this.data('fill-color') || '#c0d0f0', thisBoxWhisColor = $this.data('sparkline-whis-color') || '#000000', thisBoxOutlineColor = $this.data('sparkline-outline-color') || '#303030', thisBoxOutlineFill = $this.data('sparkline-outlinefill-color') || '#f0f0f0', thisBoxMedianColor = $this.data('sparkline-outlinemedian-color') || '#f00000', thisBoxTargetColor = $this.data('sparkline-outlinetarget-color') || '#40a020';

				$this.sparkline('html', {
					type : 'box',
					width : thisBoxWidth,
					height : thisBoxHeight,
					raw : thisBoxRaw,
					target : thisBoxTarget,
					minValue : thisBoxMin,
					maxValue : thisBoxMax,
					showOutliers : thisShowOutlier,
					outlierIQR : thisIQR,
					spotRadius : thisBoxSpotRadius,
					boxLineColor : thisBoxLineColor,
					boxFillColor : thisBoxFillColor,
					whiskerColor : thisBoxWhisColor,
					outlierLineColor : thisBoxOutlineColor,
					outlierFillColor : thisBoxOutlineFill,
					medianColor : thisBoxMedianColor,
					targetColor : thisBoxTargetColor

				})

			}

			//BULLET
			if (sparklineType == 'bullet') {

				var thisBulletHeight = $this.data('sparkline-height') || 'auto', thisBulletWidth = $this.data('sparkline-width') || 2, thisBulletColor = $this.data('sparkline-bullet-color') || '#ed1c24', thisBulletPerformanceColor = $this.data('sparkline-performance-color') || '#3030f0', thisBulletRangeColors = $this.data('sparkline-bulletrange-color') || ["#d3dafe", "#a8b6ff", "#7f94ff"]

				$this.sparkline('html', {

					type : 'bullet',
					height : thisBulletHeight,
					targetWidth : thisBulletWidth,
					targetColor : thisBulletColor,
					performanceColor : thisBulletPerformanceColor,
					rangeColors : thisBulletRangeColors

				})

			}

			//DISCRETE
			if (sparklineType == 'discrete') {

				var thisDiscreteHeight = $this.data('sparkline-height') || 26, thisDiscreteWidth = $this.data('sparkline-width') || 50, thisDiscreteLineColor = $this.css('color'), thisDiscreteLineHeight = $this.data('sparkline-line-height') || 5, thisDiscreteThrushold = $this.data('sparkline-threshold') || 'undefined', thisDiscreteThrusholdColor = $this.data('sparkline-threshold-color') || '#ed1c24';

				$this.sparkline('html', {

					type : 'discrete',
					width : thisDiscreteWidth,
					height : thisDiscreteHeight,
					lineColor : thisDiscreteLineColor,
					lineHeight : thisDiscreteLineHeight,
					thresholdValue : thisDiscreteThrushold,
					thresholdColor : thisDiscreteThrusholdColor

				})

			}

			//TRISTATE
			if (sparklineType == 'tristate') {

				var thisTristateHeight = $this.data('sparkline-height') || 26, thisTristatePosBarColor = $this.data('sparkline-posbar-color') || '#60f060', thisTristateNegBarColor = $this.data('sparkline-negbar-color') || '#f04040', thisTristateZeroBarColor = $this.data('sparkline-zerobar-color') || '#909090', thisTristateBarWidth = $this.data('sparkline-barwidth') || 5, thisTristateBarSpacing = $this.data('sparkline-barspacing') || 2, thisZeroAxis = $this.data('sparkline-zeroaxis') || false;

				$this.sparkline('html', {

					type : 'tristate',
					height : thisTristateHeight,
					posBarColor : thisBarColor,
					negBarColor : thisTristateNegBarColor,
					zeroBarColor : thisTristateZeroBarColor,
					barWidth : thisTristateBarWidth,
					barSpacing : thisTristateBarSpacing,
					zeroAxis : thisZeroAxis

				})

			}

			//COMPOSITE: BAR
			if (sparklineType == 'compositebar') {

				var sparklineHeight = $this.data('sparkline-height') || '20px', sparklineWidth = $this.data('sparkline-width') || '100%', sparklineBarWidth = $this.data('sparkline-barwidth') || 3, thisLineWidth = $this.data('sparkline-line-width') || 1, thisLineColor = $this.data('sparkline-color-top') || '#ed1c24', thisBarColor = $this.data('sparkline-color-bottom') || '#333333'

				$this.sparkline($this.data('sparkline-bar-val'), {

					type : 'bar',
					width : sparklineWidth,
					height : sparklineHeight,
					barColor : thisBarColor,
					barWidth : sparklineBarWidth
					//barSpacing: 5

				})

				$this.sparkline($this.data('sparkline-line-val'), {

					width : sparklineWidth,
					height : sparklineHeight,
					lineColor : thisLineColor,
					lineWidth : thisLineWidth,
					composite : true,
					fillColor : false

				})

			}

			//COMPOSITE: LINE
			if (sparklineType == 'compositeline') {

				var sparklineHeight = $this.data('sparkline-height') || '20px', sparklineWidth = $this.data('sparkline-width') || '90px', sparklineValue = $this.data('sparkline-bar-val'), sparklineValueSpots1 = $this.data('sparkline-bar-val-spots-top') || null, sparklineValueSpots2 = $this.data('sparkline-bar-val-spots-bottom') || null, thisLineWidth1 = $this.data('sparkline-line-width-top') || 1, thisLineWidth2 = $this.data('sparkline-line-width-bottom') || 1, thisLineColor1 = $this.data('sparkline-color-top') || '#333333', thisLineColor2 = $this.data('sparkline-color-bottom') || '#ed1c24', thisSpotRadius1 = $this.data('sparkline-spotradius-top') || 1.5, thisSpotRadius2 = $this.data('sparkline-spotradius-bottom') || thisSpotRadius1, thisSpotColor = $this.data('sparkline-spot-color') || '#f08000', thisMinSpotColor1 = $this.data('sparkline-minspot-color-top') || '#ed1c24', thisMaxSpotColor1 = $this.data('sparkline-maxspot-color-top') || '#f08000', thisMinSpotColor2 = $this.data('sparkline-minspot-color-bottom') || thisMinSpotColor1, thisMaxSpotColor2 = $this.data('sparkline-maxspot-color-bottom') || thisMaxSpotColor1, thishighlightSpotColor1 = $this.data('sparkline-highlightspot-color-top') || '#50f050', thisHighlightLineColor1 = $this.data('sparkline-highlightline-color-top') || '#f02020', thishighlightSpotColor2 = $this.data('sparkline-highlightspot-color-bottom') || thishighlightSpotColor1, thisHighlightLineColor2 = $this.data('sparkline-highlightline-color-bottom') || thisHighlightLineColor1, thisFillColor1 = $this.data('sparkline-fillcolor-top') || 'transparent', thisFillColor2 = $this.data('sparkline-fillcolor-bottom') || 'transparent';

				$this.sparkline(sparklineValue, {

					type : 'line',
					spotRadius : thisSpotRadius1,

					spotColor : thisSpotColor,
					minSpotColor : thisMinSpotColor1,
					maxSpotColor : thisMaxSpotColor1,
					highlightSpotColor : thishighlightSpotColor1,
					highlightLineColor : thisHighlightLineColor1,

					valueSpots : sparklineValueSpots1,

					lineWidth : thisLineWidth1,
					width : sparklineWidth,
					height : sparklineHeight,
					lineColor : thisLineColor1,
					fillColor : thisFillColor1

				})

				$this.sparkline($this.data('sparkline-line-val'), {

					type : 'line',
					spotRadius : thisSpotRadius2,

					spotColor : thisSpotColor,
					minSpotColor : thisMinSpotColor2,
					maxSpotColor : thisMaxSpotColor2,
					highlightSpotColor : thishighlightSpotColor2,
					highlightLineColor : thisHighlightLineColor2,

					valueSpots : sparklineValueSpots2,

					lineWidth : thisLineWidth2,
					width : sparklineWidth,
					height : sparklineHeight,
					lineColor : thisLineColor2,
					composite : true,
					fillColor : thisFillColor2

				})

			}

		});

	}// end if

	/*
	 * EASY PIE CHARTS
	 * DEPENDENCY: js/plugins/easy-pie-chart/jquery.easy-pie-chart.min.js
	 * Usage: <div class="easy-pie-chart txt-color-orangeDark" data-pie-percent="33" data-pie-size="72" data-size="72">
	 *			<span class="percent percent-sign">35</span>
	 * 	  	  </div>
	 */

	if ($.fn.easyPieChart) {

	    $('.easy-pie-chart:not([data-chart-inited])').each(function () {
			var $this = $(this);
			$this.attr("data-chart-inited", "true");
			var barColor = $this.css('color') || $this.data('pie-color'), trackColor = $this.data('pie-track-color') || '#eeeeee', size = parseInt($this.data('pie-size')) || 25;
			$this.easyPieChart({
				barColor : barColor,
				trackColor : trackColor,
				scaleColor : false,
				lineCap : 'butt',
				lineWidth : parseInt(size / 8.5),
				animate : 1500,
				rotate : -90,
				size: size
                
				//onStep : function(value) {
				//	this.$el.find('span').text(~~value);
				//}
			});
		});

	} // end if

}

/* ~ END: INITIALIZE CHARTS */

/*
 * INITIALIZE JARVIS WIDGETS
 */

// Setup Desktop Widgets
function setup_widgets_desktop($container) {

	if ($.fn.jarvisWidgets && $.enableJarvisWidgets) {

	    $container.jarvisWidgets({

			grid : 'article',
			widgets : '.jarviswidget',
			localStorage : true,
			deleteSettingsKey : '#deletesettingskey-options',
			settingsKeyLabel : 'Reset settings?',
			deletePositionKey : '#deletepositionkey-options',
			positionKeyLabel : 'Reset position?',
			sortable : true,
			buttonsHidden : false,
			// toggle button
			toggleButton : true,
			toggleClass : 'fa fa-minus | fa fa-plus',
			toggleSpeed : 200,
			onToggle : function() {
			},
			// delete btn
			deleteButton : true,
			deleteClass : 'fa fa-times',
			deleteSpeed : 200,
			onDelete : function() {
			},
			// edit btn
			editButton : true,
			editPlaceholder : '.jarviswidget-editbox',
			editClass : 'fa fa-cog | fa fa-save',
			editSpeed : 200,
			onEdit : function() {
			},
			// color button
			colorButton : true,
			// full screen
			fullscreenButton : true,
			fullscreenClass : 'fa fa-arrows-alt | fa fa-resize-small',
			fullscreenDiff : 3,
			onFullscreen : function() {
			},
			// custom btn
			customButton : false,
			customClass : 'folder-10 | next-10',
			customStart : function() {
				alert('Hello you, this is a custom button...')
			},
			customEnd : function() {
				alert('bye, till next time...')
			},
			// order
			buttonOrder : '%refresh% %custom% %edit% %toggle% %fullscreen% %delete%',
			opacity : 1.0,
			dragHandle : '> header',
			placeholderClass : 'jarviswidget-placeholder',
			indicator : true,
			indicatorTime : 600,
			ajax : true,
			timestampPlaceholder : '.jarviswidget-timestamp',
			timestampFormat : 'Last update: %m%/%d%/%y% %h%:%i%:%s%',
			refreshButton : true,
			refreshButtonClass : 'fa fa-sync',
			labelError : 'Sorry but there was a error:',
			labelUpdated : 'Last Update:',
			labelRefresh : 'Refresh',
			labelDelete : 'Delete widget:',
			afterLoad : function() {
			},
			rtl : false, // best not to toggle this!
			onChange : function() {
				
			},
			onSave : function() {
				
			},
			ajaxnav : $.navAsAjax // declears how the localstorage should be saved

		});

	}

}

// Setup Desktop Widgets
function setup_widgets_mobile() {

	if ($.enableMobileWidgets && $.enableJarvisWidgets) {
	    setup_widgets_desktop($("#widget-grid"));
	}

}

/* ~ END: INITIALIZE JARVIS WIDGETS */

/*
 * GOOGLE MAPS
 * description: Append google maps to head dynamically
 */

var gMapsLoaded = false;
window.gMapsCallback = function() {
	gMapsLoaded = true;
	$(window).trigger('gMapsLoaded');
}
window.loadGoogleMaps = function() {
	if (gMapsLoaded)
		return window.gMapsCallback();
	var script_tag = document.createElement('script');
	script_tag.setAttribute("type", "text/javascript");
	script_tag.setAttribute("src", "http://maps.google.com/maps/api/js?sensor=false&callback=gMapsCallback");
	(document.getElementsByTagName("head")[0] || document.documentElement).appendChild(script_tag);
}
/* ~ END: GOOGLE MAPS */

/*
 * LOAD SCRIPTS
 * Usage:
 * Define function = myPrettyCode ()...
 * loadScript("js/my_lovely_script.js", myPrettyCode);
 */

var jsArray = {};

function loadScript(scriptName, callback) {

	if (!jsArray[scriptName]) {
		jsArray[scriptName] = true;

		// adding the script tag to the head as suggested before
		var body = document.getElementsByTagName('body')[0];
		var script = document.createElement('script');
		script.type = 'text/javascript';
		script.src = scriptName;

		// then bind the event to the callback function
		// there are several events for cross browser compatibility
		//script.onreadystatechange = callback;
		script.onload = callback;

		// fire the loading
        //console.log(script);
      //  if (window.confirm("Load script: " + scriptName))
		body.appendChild(script);

	} else if (callback) {// changed else to else if(callback)
		//console.log("JS file already added!");
		//execute function
		callback();
	}

}

/* ~ END: LOAD SCRIPTS */

/*
* APP AJAX REQUEST SETUP
* Description: Executes and fetches all ajax requests also
* updates naivgation elements to active
*/
if($.navAsAjax)
{
    // fire this on page load if nav exists
    if ($('nav').length) {
	    checkURL();
    };

    $(document).on('click', 'nav a[href!="#"], .navbar-header a[href!="#"]', function (e) {
        sessionStorage.removeItem('tabStack'); //resetting the tabstack in the view-asset page for the breadcrumb
        var $this = $(e.currentTarget);

        var href = $this.attr('href');
        localStorage.setItem('prevurl', window.location.origin + "/#" + href);
        if (href.startsWith("javascript:") || href.startsWith("http"))
            return;

        e.preventDefault();
	    // if parent is not active then get hash, or else page is assumed to be loaded
        if ((!$this.parent().hasClass("active") && !$this.attr('target')) || ($this.attr('href') == "asset-overview")) {
            // update window with hash
            // you could also do here:  $.device === "mobile" - and save a little more memory
                
            if ($.root_.hasClass('mobile-view-activated')) {
                $.root_.removeClass('hidden-menu');
                window.setTimeout(function() {
                    if (window.location.search) {
                        window.location.href =
                            window.location.href.replace(window.location.search, '')
                                .replace(window.location.hash, '') + '#' + $this.attr('href');
                    } else {
                        window.location.hash = $this.attr('href')
                    }
                }, 150);
                // it may not need this delay...
            } else {
                if (window.location.search) {
                    window.location.href =
                        window.location.href.replace(window.location.search, '')
                            .replace(window.location.hash, '') + '#' + $this.attr('href');
                } else {
                    window.location.hash = $this.attr('href');
                }
            }
        }
    });

    // fire links with targets on different window
    $(document).on('click', 'nav a[target="_blank"]', function(e) {
	    e.preventDefault();
	    var $this = $(e.currentTarget);

	    window.open($this.attr('href'));
    });

    // fire links with targets on same window
    $(document).on('click', 'nav a[target="_top"]', function(e) {
	    e.preventDefault();
	    var $this = $(e.currentTarget);

	    window.location = ($this.attr('href'));
    });

    // all links with hash tags are ignored
    $(document).on('click', 'nav a[href="#"]', function(e) {
	    e.preventDefault();
    });

    // DO on hash change
    $(window).on('hashchange', function () {
        $.ajaxQ.abortAll();
        checkURL();
    });
}

// CHECK TO SEE IF URL EXISTS
function checkURL() {

	//get the url by removing the hash
    var url = location.hash.replace(/^#/, '');
    var spliturl = url.split("?")[0];

    container = $('#content');
    
    //custom safe URL block - start
    if (url != '' && pageData.isCustomSafeURL) {
        // Security: block absolute external URLs
        try {
            const fragmentURL = document.createElement('a');
            fragmentURL.href = url;

            // Only allow internal (relative) URLs or same-origin links
            const currentHost = window.location.hostname;
            const isAbsolute = /^(https?:|file:|ftp:|data:|javascript:)/i.test(url);

            if (isAbsolute && fragmentURL.hostname && fragmentURL.hostname !== currentHost) {
                loadURL("/notfound", container);
                return;
            }
        } catch (e) {
            loadURL("/notfound", container);
            return;
        }
    }
    //custom safe URL block - end

	// Do this if url exists (for page refresh, etc...)
    if (url) {
        // remove all active class
        $('nav li.active').removeClass("active");
       // if(topnav)
    	//  $('nav > ul > li.open').removeClass("open");
        // match the url and add the active class
        if (pageData.customLeftNavEnabled)//#41109 issue fixed for Modules having query string in url but when visited not getting active
        {
            if (url.includes("search"))
                $('nav li:has(a[href="' + url + '"])').addClass("active");
            else
                $('nav li:has(a[href="' + url.split("?")[0] + '"])').addClass("active");
        }
        else {
            var $exist = $('nav li:has(a[href="' + url + '"])');
            if (url.includes("search")) {
                var overviewURL = "";
                if (url.includes("asseturl"))
                    overviewURL = url;
                else
                    overviewURL = "asset-overview";
                $('nav li:has(a[href="' + overviewURL + '"])').addClass("active");
            }
            else if ($exist.length > 0)
                $('nav li:has(a[href="' + url + '"])').addClass("active");
            else
                $('nav li:has(a[href="' + spliturl + '"])').addClass("active");
        }
        var title = ($('nav a[href="' + url + '"]').attr('title'))

        // change page title from global var
        document.title = (title || document.title);
        //console.log("page title: " + document.title);

        if (window.location.search !== null && window.location.search.length > 1) {
            if (location.hash.indexOf("?") > -1) //need to see if the hash already has query arguments, if so just append
                url += "&" + window.location.search.substring(1); //strip out our ?
            else
                url += window.location.search; //hash has no query args, just append ours straight to it
        }
        // Mega Menu BreadCrumb #45643
       megaMenuBreadCrumb();
        // parse url to jquery
        loadURL(url, container);
    } else {
		// grab the first URL from nav
		var $this = $('nav > ul > li:first-child > a[href!="#"]');

		//update hash
        window.location.hash = $this.attr('href');
	}
}
 //UI issues on Mega Menu BreadCrumb
function megaMenuBreadCrumb() {
    const allVisibleMenuElements = document.querySelectorAll('#navigation > ul > li');
    allVisibleMenuElements.forEach(function (e) {
        var currentClass = $(e).attr("class");
        if (currentClass != undefined && currentClass.indexOf("active") > 0) {
            if (localStorage.getItem('breadcrumb') != null && localStorage.getItem('prevurl') == window.location.href) {
                $('.has-submenu.active ol li').remove();
                $('.has-submenu .active').closest('.sub-menu-container').find('.breadcrumb').append(localStorage.getItem('breadcrumb'));
            }
        } else {
            $(e).find('ol li:not(:first-child)').remove();
        }
    })
}
// LOAD AJAX PAGES
function loadURL(url, container) {
    //hide item on top nav
    var loadedUrl = url;
    var loadUrlAjaxIndex = ++$.LOAD_URL_AJAX_INDEX;
    $.ajax({
		type : "GET",
		url : url,
		dataType : 'html',
		cache : true, // (warning: this will cause a timestamp and will call the request twice)
		beforeSend: function () {
            // cog placed
            if (isNewUI) {
                var loaderHtml = $("#skeleton-loader-ajax").html();

                var clonedLoader = $(loaderHtml);
                container.html(clonedLoader);
                container.scheletrone();
            }
            else {
                container.html('<h1><i class="fa fa-cog fa-spin"></i> Loading...</h1>');
            }
            
            // Only draw breadcrumb if it is main content material
			// TODO: see the framerate for the animation in touch devices
            container.css({
		        opacity: '0.0'
		    }).delay(250).animate({
                    opacity: '1.0'
            }, fadeInDelay);
        
            if (container[0] == $("#content")[0]) {
				// scroll up
				$("html").animate({
					scrollTop : 0
				}, "fast");
			} 
		},
		/*complete: function(){
	    	// Handle the complete event
	    	// alert("complete")
		},*/
        success: function (data) {
            const formRegex = /<form[^>]*\bid=["']formLogin["'][^>]*>/i;
            const match = data.match(formRegex);
            if (match) {
                    window.location.reload();
            } else {
                // cog replaced here...
                // alert("success")
                if ($.LOAD_URL_AJAX_INDEX != loadUrlAjaxIndex)
                    return;

                container.stop(true, true).css({
                    opacity: '1.0'
                });
                if (isNewUI)
                    container.scheletrone('stopLoader');
                container.html(data);
            }
		    //container.css({
		    //    opacity: '0.0'
		    //}).html(data).animate({
		    //    opacity: '1.0'
		    //}, 20);

           // if ($.mobileApp && pymChild != null) { syncHeightForMobileApp(); }
        },
        error: function (xhr, ajaxOptions, thrownError) {
            if ($.LOAD_URL_AJAX_INDEX != loadUrlAjaxIndex)
                return;

            if (isNewUI)
                container.scheletrone('stopLoader');
            if (xhr.status == "404" && loadedUrl != "v4u/public/error404.cshtml") {
                loadURL("/notfound", container);
            }
            else
                container.html('<h4 style="margin-top:10px; display:block; text-align:left"><i class="fas fa-exclamation-triangle txt-color-orangeDark"></i> Error 404! Page not found.</h4>\'');
		},
		async : true
	});

	//console.log("ajax request sent");
}

// UPDATE BREADCRUMB
function drawBreadCrumb() {
    var $userProfileUrl;
    if (isNewUI) 
        $userProfileUrl = '#user/profile/v5/';
    else 
        $userProfileUrl = '#user/profile/';

    api.call("GetProfileDetails", {}, function (result) {
        if (result.status == 0 && result.result) {
            var _data = result.result;
            $orgProfilePercentage = _data["orgProfileCompletion"];
            $compProfilePercentage = _data["compProfileCompletion"];
            incentivePoints = _data["balanceIncentives"];
            $userProfilePercentage = _data["userProfileCompletion"];
            $userLogoUrl = _data["userLogoUrl"];
            $designation = _data["designation"];
            $companyLogoUrl = _data["companyLogoUrl"];
            $isIncentiveEnabled = _data["isIncentiveEnabled"];
            $organizationLogoUrl = _data["organizationLogoUrl"];
            $isSalesEnabled = _data["isSalesEnabled"];
            $isUserExtension = _data["isUserExtension"];
            $iosappurl = _data["iosappurl"];
            $androidappurl = _data["androidappurl"];
            disableAccountSwitching = _data["disableAccountSwitching"];
            userDisplayName = _data["userDisplayName"];
            contactScore = _data["contactScore"];
            engagementLevel = _data["engagementLevel"];
            usercompanyname = _data["usercompanyname"];
            if (_data["switchUserOpt"] != undefined)
                switchuseropt = _data["switchUserOpt"];
            if (_data["switchCompOpt"] != undefined)
                switchcompopt = _data["switchCompOpt"];
            SwitchUserAccess = _data["SwitchUserAccess"];
            //userPersona = _data["userPersona"];
            organizationname = _data["organizationname"];
            //hideMobileApps = _data["hideMobileApps"];
            hideLogoutLink = _data["hideLogoutLink"];
            username = _data["username"];
            if ($userLogoUrl != undefined) {
                pageData["userLogoUrl"] = $userLogoUrl;
                setProfilePic();
            }
            if (typeof customDrawBreadCrum != 'undefined' && pageData.enableCustomProdJs)
                customDrawBreadCrum(_data);
        }
       
    if (!topnav) {
        var nav_elems = $('nav li.active > a'), count = nav_elems.length;
        $.bread_crumb.empty();
        $.bread_crumb.append($("<li><a href=" + $userProfileUrl + getTimeStamp() + "style='text-decoration:underline !important;' rel='tooltip' data-placement='bottom' data-original-title='Click to update user profile'>" + username + "</a> " + switchuseropt + " <span id='shell-notificationsa' class='activity-dropdown' style='cursor:pointer;' onclick='modal.showNotification();' rel='tooltip' data-placement='bottom' data-original-title='Click to view notifications'> <b class='badge bounceIn animated " + ((notificationcount > 0) ? 'bg-color-red' : 'bg-color-blue') + "'>" + notificationcount + "</b> </span></li>"));
        
        if (canOrgEdit) {
            if (isNewUI) {
                $.bread_crumb.append($("<li><a href='#organization/profile/v5/" + getTimeStamp() + "' style='text-decoration:underline !important;' rel='tooltip' data-placement='bottom' data-original-title='Click to update organization profile'>" + organizationname + "</a><a href='#company/profile/V5/" + getTimeStamp() + "' style='text-decoration:underline !important;' rel='tooltip' data-placement='bottom' data-original-title='Click to update company profile'>" + usercompanyname + "</a> " + switchcompopt + "</li>"));
            }
            else {
                $.bread_crumb.append($("<li><a href='#organization/profile/" + getTimeStamp() + "' style='text-decoration:underline !important;' rel='tooltip' data-placement='bottom' data-original-title='Click to update organization profile'>" + organizationname + "</a><a href='#company/profile/" + getTimeStamp() + "' style='text-decoration:underline !important;' rel='tooltip' data-placement='bottom' data-original-title='Click to update company profile'>" + usercompanyname + "</a> " + switchcompopt + "</li>"));
            }
        }
        else if (canOrgView) {
            if (isNewUI) {
                $.bread_crumb.append($("<li><a href='#organization/profile/v5/" + getTimeStamp() + "' style='text-decoration:underline !important;' rel='tooltip' data-placement='bottom' data-original-title='Click to view organization profile'>" + organizationname + "</a><a href='#company/profile/V5/" + getTimeStamp() + "' style='text-decoration:underline !important;' rel='tooltip' data-placement='bottom' data-original-title='Click to update company profile'>" + usercompanyname + "</a> " + switchcompopt + "</li>"));
            }
            else {
                $.bread_crumb.append($("<li><a href='#organization/profile/" + getTimeStamp() + "' style='text-decoration:underline !important;' rel='tooltip' data-placement='bottom' data-original-title='Click to view organization profile'>" + organizationname + "</a><a href='#company/profile/" + getTimeStamp() + "' style='text-decoration:underline !important;' rel='tooltip' data-placement='bottom' data-original-title='Click to update company profile'>" + usercompanyname + "</a> " + switchcompopt + "</li>"));
            }
        }
        else
            if (isNewUI) {
                $.bread_crumb.append($("<li><a style='text-decoration:underline !important;'>" + organizationname + "</a><a href='#company/profile/V5/" + getTimeStamp() + "' style='text-decoration:underline !important;' rel='tooltip' data-placement='bottom' data-original-title='Click to update company profile'>" + usercompanyname + "</a> " + switchcompopt + "</li>"));
            }
            else {
                $.bread_crumb.append($("<li><a style='text-decoration:underline !important;'>" + organizationname + "</a><a href='#company/profile/" + getTimeStamp() + "' style='text-decoration:underline !important;' rel='tooltip' data-placement='bottom' data-original-title='Click to update company profile'>" + usercompanyname + "</a> " + switchcompopt + "</li>"));
            }
        nav_elems.each(function () {
            $.bread_crumb.append($("<li></li>").html($.trim($(this).clone().children(".badge").remove().end().text())));
            // update title when breadcrumb is finished...
            if (!--count) document.title = $.bread_crumb.find("li:last-child").text();
        });
    }
    else
    {
        if (notificationcount > 0)
            $("#shell-notificationsa").show();
        else
            $("#shell-notificationsa").hide();
        $dropdownmenu = $("#left-panel .profiledetails");
        $dropdownmenu.empty();
        if (isNewUI) {
            if ($orgProfilePercentage != "" && $orgProfilePercentage != undefined)
                $orgProfilePercentage = $.parseJSON($orgProfilePercentage).length * 20;
            else
                $orgProfilePercentage = "20";
            if ($compProfilePercentage != "" && $compProfilePercentage != undefined)
                $compProfilePercentage = $.parseJSON($compProfilePercentage).length * 20;
            else
                $compProfilePercentage = "20";
            if ($userProfilePercentage != "" && $userProfilePercentage != undefined)
                $userProfilePercentage = $.parseJSON($userProfilePercentage).length * 20;
            else
                $userProfilePercentage = "20";

            var profileImgPlaceholder = "https://partner-marketing.bitdefender.com/v4u/img/placeholder/Profile-IMG-Placeholder.svg";
            var compImgPlaceholder = "https://partner-marketing.bitdefender.com/v4u/img/placeholder/img.svg";

            var $outerProfileDiv = $("<div>").addClass("profile-dropdown-v5");
            var $innerProfileDiv = $("<div>").addClass("dropdown-menu-inner");
            var $switchBar = $("<div>").addClass("switch-bar");
            if (disableAccountSwitching) {
                $switchBar.hide();
            }
            var $switchUser = $("<div>").addClass("switch-user switch-item").on("click", function () { modal.showChangeUser(); $(".profiledetails").hide(); });
            var $switchUserSpan = $("<span>").text('Switch User').attr({ 'rel': 'tooltip', 'data-original-title': 'Switch User', 'data-placement': 'bottom' });
            var $switchUserIcon = $("<i>").addClass("fal fa-user");
            var $switchComp = $("<div>").addClass("switch-company switch-item").on("click", function () { modal.showChangeCompany(); $(".profiledetails").hide(); });
            var $switchCompSpan = $("<span>").text('Switch Company').attr({ 'rel': 'tooltip', 'data-original-title': 'Switch Company', 'data-placement': 'bottom' });
            var $switchCompIcon = $("<i>").addClass("fal fa-landmark");
            var $announcementBar = $("<div>").addClass("announcements").on("click", function () { modal.showMoreAnnouncements(); $(".profiledetails").hide(); });
            var $announcementSpan = $("<span>").text('Announcements').attr({ 'rel': 'tooltip', 'data-original-title': 'Announcements', 'data-placement': 'bottom' });
            var $announcementIcon = $("<i>").addClass("fal fa-bullhorn");
            var $userDetails = $("<div>").addClass("user-details");
            var $viewMore = $("<div>").addClass("view-more");
            var $viewMoreLink = $("<a>").text('View').attr('cursor', 'pointer').on("click", function () { window.location.href = $userProfileUrl + getTimeStamp(); $(".profiledetails").hide();});;
            var $viewMoreIcon = $("<i>").addClass("fal fa-angle-right");
            var $userProfilePic = $("<div>").addClass("profile-picture");
            var $userProfilePicLabel = $("<div>").addClass("user-label label").text('User Profile');
            var $userProfilePercentChart = $("<div>").addClass("profile-percentage-chart primaryfontcolor").attr({ "rel": "tooltip", "data-placement": "right", "data-original-title": $userProfilePercentage + '% of Profile completed' });
            var $userProfileImgDiv = $("<div>").addClass("profile-img");
            var $userProfileImg = $("<img>");
            if ($userLogoUrl != "")
                $userProfileImg.attr('src', $userLogoUrl);
            else
                $userProfileImg.attr('src', profileImgPlaceholder).addClass("placeholder-img");
            var $profileDetails = $("<div>").addClass("profile-details");
            var $profileName = $("<div>").addClass("name").text(userDisplayName);
            var $profileDesignation = $("<div>").addClass("designation").text($designation);
            var $points = $("<div>").addClass("points your-engagement");
            var $pointsLabel = $("<div>").addClass("point-label label").text('Engagement Level ');
            var $pointsValue = $("<div>").addClass("point-value")
            var $pointsValueSpan = $("<span>").text(contactScore).attr({ 'rel': 'tooltip', 'data-original-title': contactScore });
            var $pointsValueIcon = $("<i>").addClass("fas fa-fire-alt prospan intereststatus-" + getContactInterest(engagementLevel));

            var $pointsBalance = $("<div>").addClass("points balance-incentives");
            var $pointsBalanceLabel = $("<div>").addClass("point-label label").text('Balance Incentives');
            var $pointsBalanceValue = incentivePoints > 0 ? $("<div style='cursor:pointer;'>").addClass("point-value incentivereportclick") : $("<div>").addClass("point-value incentivereportclick") ;
            var $pointsBalanceValueSpan = $("<span>").text(abbreviateNumber(incentivePoints, 0)).attr({ 'rel': 'tooltip', 'data-original-title': abbreviateNumber(incentivePoints,0) });
            var $pointsBalanceValueIcon = $("<i>").addClass("fas fa-trophy-alt prospan");
                        
           

            var $viewMoreIconComp = $("<i>").addClass("fal fa-angle-right");
            var $companyDetails = $("<div>").addClass("company-details");
            var $companyInfo = $("<div>").addClass("company-info");
            var $companyInfoLabel = $("<div>").addClass("company-label label").text('Company');
            var $companyInfoName = $("<div>").addClass("company-name").text(usercompanyname);
            var $companyLogo = $("<div>").addClass("company-logo");
            var $companyLogoImg = $("<img>");
            if ($companyLogoUrl != "")
                $companyLogoImg.attr('src', $companyLogoUrl);
            else {
                $companyLogoImg.attr('src', compImgPlaceholder);
                $companyLogo.addClass("placeholder-img");
            }
            var $viewMoreComp = $("<div>").addClass("view-more-comp view-more");
            var $viewMoreLinkComp = $("<a>").text('View').attr('cursor', 'pointer').on("click", function () {
                if (isNewUI) {
                    window.location.href = '#company/profile/V5/' + getTimeStamp(); $(".profiledetails").hide();
                }
                else {
                    window.location.href = '#company/profile/' + getTimeStamp(); $(".profiledetails").hide();
                }
            });;
            var $viewMoreIconComp = $("<i>").addClass("fal fa-angle-right");

            var $downloadPlugins = $("<div>").addClass("download-plugins");
            var $downloadPluginsEmail = $("<div>").addClass("plugins-row");
            var $gmailBox = $("<div>").addClass("social-link");
            var $downloadPluginsEmailLabel = $("<div>").addClass("dowload-plug-label label").text('Download Email Plugin');
            var $pluginsEmail = $("<div>").addClass("plugins");
            var $outlookBox = $("<div>").addClass("social-link");
            var $pluginsGmailIconEmail = $("<i>").addClass("fas fa-envelope");
            var $pluginsWindowsEmailIcon = $("<i>").addClass("fab fa-microsoft");

            var $signOutBar = $("<div id='logout'>").addClass("sign-out-bar");
            var $signOut = $("<a>").addClass("sign-out").attr({ 'href': '/logout', 'rel': 'tooltip', 'data-original-title': 'Click to log out' });
            var $signOutSpan = $("<span>").text('Log out');
            var $signOutIcon = $("<i>").addClass("far fa-sign-out-alt");


            $outerProfileDiv.append($innerProfileDiv);
            $innerProfileDiv.append($switchBar);
            if (switchuseropt.length > 0) {
                $switchBar.append($switchUser);
                $switchUser.append($switchUserIcon);
                $switchUser.append($switchUserSpan);
                if (isSiteOrSuperAdmin) {
                    if (switchcompopt.length > 0) {
                        $switchBar.append($switchComp);
                        $switchComp.append($switchCompIcon);
                        $switchComp.append($switchCompSpan);
                    }
                    else
                        $switchUser.css('width', '100%');
                }
            }

            if (isSiteOrSuperAdmin) {
                if (switchcompopt.length > 0) {
                    if (!isSiteOrSuperAdmin)
                        $switchComp.css('width', '100%');
                    $switchBar.append($switchComp);
                    $switchComp.append($switchCompIcon);
                    $switchComp.append($switchCompSpan);
                }
            }
            
            if (hasAnnouncementAcess) {
                //api.call("GetDashboardAnnouncements", { sort: "updatedon", ascending: false, allannouncement: true }, function (data) {
                //    if (data.result != null && data.result.allannouncement.row_count > 0) {
                        $announcementBar.hide();
                        $switchBar.after($announcementBar);
                        $announcementBar.append($announcementIcon);
                        $announcementBar.append($announcementSpan);
                //    }
                //});
            }
            if (switchuseropt.length == 0 && !(hasCompanyAccess || SwitchUserAccess))
                $switchBar.hide();

            $innerProfileDiv.append($userDetails);
            var $switchPersona = $("<div>").addClass("user-role-wrapper");
            $outerProfileDiv.append($switchPersona);
            $userDetails.append($viewMore);
            $viewMore.append($viewMoreLink);
            $viewMoreLink.append($viewMoreIcon);
            $userDetails.append($userProfilePic);
            $userProfilePic.append($userProfilePicLabel);
            $userProfilePic.append($userProfilePercentChart);
            $userProfilePercentChart.append($userProfileImgDiv);
            $userProfileImgDiv.append($userProfileImg);
            $userDetails.append($profileDetails);
            $profileDetails.append($profileName);
            $profileDetails.append($profileDesignation);
            $profileDetails.append($points);
            $points.append($pointsLabel);
            $points.append($pointsValue);
            $pointsValue.append($pointsValueIcon);
            $pointsValue.append($pointsValueSpan);


            $pointsBalance.append($pointsBalanceLabel);
            $pointsBalance.append($pointsBalanceValue);
            $pointsBalanceValue.append($pointsBalanceValueIcon);
            $pointsBalanceValue.append($pointsBalanceValueSpan);
            if ($isIncentiveEnabled == true) {
                $profileDetails.append($pointsBalance);
                if (incentivePoints > 0) {
                $profileDetails.find('.incentivereportclick').bind('click', function () {
                    $(".profiledetails").hide();
                    modal.showIncentiveUserReport();
                });
                }
            }
            if (isSwitchRolePersonaEnable) {
                api.call("GetAssignedPersonaDetails", { personaname: pageData.personaname }, function (r) {
                    if (r.status == 0 && r.result) {
                        var $personaDetails = $outerProfileDiv.find(".user-role-wrapper");
                        var data = r.result;
                        var activePersonaOption = data.useractivapersona.optionname != null ? data.useractivapersona.optionname : "";
                        var activePersona = data.useractivapersona.personaname != null ? data.useractivapersona.personaname : "";
                        //$personaDetails = $("<div>").addClass("user-role-wrapper");
                        var $perosnaInfo = $("<div>").addClass("btn-change-role-wrap");
                        var $personaName = $("<span>").addClass("role-text").css("text-transform", "capitalize").text(activePersona + " " + activePersonaOption);
                        var $switchRole = $("<span>").addClass("pull-right change-role");
                        var $switchRoleIcon = $("<i>").addClass("fal fa-angle-right");
                        var $switchRoleLink = $("<a>").text('Change').attr('cursor', 'pointer');
                        var $allRolesDiv = $("<div>").addClass("dropdown-menu-custom");
                        var $allRolesUl = $("<ul>").addClass("personalist");
                        const liValues = [];

                        function sortRolesData(objects) {
                            return objects.slice().sort((a, b) => {
                                const obj1 = (a.personaname || "") + " " + (a.optionname || "");
                                const obj2 = (b.personaname || "") + " " + (b.optionname || "");

                                return obj1.localeCompare(obj2);
                            });
                        }

                        var sortedRolesData = sortRolesData(data.userperosonadata);

                        const uniqueRolesData = sortedRolesData.filter((item, index, self) => {
                            const personaInfo = (item.personaname || "") + " " + (item.optionname || "");
                            var matchedIndex = self.findIndex(obj => (obj.personaname || "") + " " + (obj.optionname || "") === personaInfo);
                            return index === self.findIndex(obj => (obj.personaname || "") + " " + (obj.optionname || "") === personaInfo);
                        });

                        if (uniqueRolesData.length > 1) {
                            $.each(uniqueRolesData, function (index, value) {
                                var persona = this.personaname;
                                var personaparsername = this.personaparsername;
                                var personaoption = this.optionname != undefined && this.optionname != null ? this.optionname : "";
                                var personaoptionparser = this.optionparsername != undefined && this.optionparsername != null ? this.optionparsername : "";
                                var voption = value.optionname != undefined ? value.optionname : "";
                                if (!liValues.includes(personaparsername.toLowerCase() + " " + personaoption.toLowerCase())) {
                                    var $rolesLi = $("<li>").attr({ 'persona-id': this.personaid, 'option-id': this.optionid });
                                    var liStr = personaparsername.toLowerCase() + " " + personaoptionparser.toLowerCase();
                                    liValues.push(liStr);
                                    var $rolesLiAnchor = $("<span>").attr("href", "https://partner-marketing.bitdefender.com/#dashboard/" + personaparsername + "/" + personaoptionparser.toLowerCase()).text(this.personaname + " " + personaoption).css("text-transform", "capitalize");
                                    var personaOptionType = data.useractivapersona.optionname != undefined ? data.useractivapersona.optionname : "";
                                    if (value.personaname.toLowerCase() == data.useractivapersona.personaname.toLowerCase() && voption.toLowerCase() == personaOptionType.toLowerCase()) {
                                        $rolesLi.addClass("active");
                                        var $liFont = $("<i>").addClass("fa fa-check").attr("aria-hidden", true);
                                        $rolesLi.append($rolesLiAnchor);
                                        $rolesLi.append($liFont);
                                    }
                                    else {
                                        $rolesLi.append($rolesLiAnchor);
                                    }
                                    $rolesLi.on("click", function (event) {
                                        var personaId = $(this).attr("persona-id");
                                        var optiondId = $(this).attr("option-id");
                                        var url = $(this).find("span").attr("href");
                                        var isActiveLi = $(this).hasClass("active");
                                        if (!isActiveLi) {
                                            var ulHeight = $(".personalist").outerHeight();
                                            $(".dropdown-loader").css("height", ulHeight).show();
                                            $(".personalist").hide();
                                            $(".dropdown-menu-custom ul").find("li").removeClass("active");
                                            $(this).find("span").siblings("i").remove();
                                            $(this).addClass("active");
                                            $(this).find("span").after('<i class="fa fa-check" aria-hidden="true"></i>');
                                            api.call("UpdateUserPersonaSetting", { personaid: parseInt(personaId), optionid: parseInt(optiondId) }, function () {
                                                $(".dropdown-loader").hide();
                                                $(".personalist").show();
                                                window.location.replace("https://partner-marketing.bitdefender.com");
                                            });
                                        }
                                    });
                                    $allRolesUl.append($rolesLi);
                                }
                            });
                            var $headerDiv = $("<div>").addClass("dropdown-menu-header");
                            var $headerDivContent = $("<span>").text('Select Role Persona');
                            var $headerDivReset = $("<a class='resetbtn'>").text('Reset').append("<i rel='tooltip' class='fas fa-info-circle' aria-hidden='true' rel='tooltip' data-original-title='Reset To Default' style='line-height: 19px;margin-left: 6px;'>").on("click", function () {

                                var ulHeight = $(".personalist").outerHeight();
                                $(".dropdown-loader").css("height", ulHeight).show();
                                $(".personalist").hide();
                                api.call("UpdateUserPersonaSetting", { personaid: null, optionid: null }, function () {
                                    window.location.replace("https://partner-marketing.bitdefender.com");
                                });
                            });
                            var $loaderDiv = $("<div>").addClass("dropdown-loader").css({
                                height: '20px',
                                display: 'flex',
                                'justify-content': 'center',
                                'align-items': 'center'
                            }).append("<i class='fa fa-spinner fa-spin' style='font-size:48px'></i>").hide();
                            var $PersonaDiv = $headerDiv.append($headerDivContent);
                            var $PersonaDiv = $headerDiv.append($headerDivReset);
                            $allRolesDiv.append($PersonaDiv);
                            $allRolesDiv.append($loaderDiv);
                            $allRolesDiv.append($allRolesUl);

                            $switchRoleLink.on("click", function () {
                                var isActive = $personaDetails.hasClass("show");
                                if (isActive) {
                                    $personaDetails.removeClass("show");
                                    $allRolesDiv.hide();
                                }
                                else {
                                    $personaDetails.addClass('show');
                                    $allRolesDiv.show();
                                }
                            });

                            $switchRole.append($switchRoleIcon);
                            $switchRole.append($switchRoleLink);
                            $personaDetails.append($perosnaInfo);
                            $perosnaInfo.append($personaName);
                            $perosnaInfo.append($switchRole);
                            $personaDetails.append($allRolesDiv);
                        }
                      
                        //$outerProfileDiv.append($personaDetails);
                    }
                });
                
            }
            if (hasCompanyEditAccess) {
                $outerProfileDiv.append($companyDetails);
                $companyDetails.append($companyInfo);
                $companyInfo.append($companyInfoLabel);
                $companyInfo.append($companyInfoName);
                $companyDetails.append($companyLogo);

                if (isSiteOrSuperAdmin || userPersona != "channelpartner") {
                    $companyDetails.append($viewMoreComp);
                    $viewMoreComp.append($viewMoreLinkComp);
                    $viewMoreLinkComp.append($viewMoreIconComp);
                }
                $companyLogo.append($companyLogoImg);
            }
           
            if (organizationname != undefined && (organizationname != "" && hasUserSameCompany)) {
                var $orgDetails = $("<div>").addClass("org-details");
                var $orgInfo = $("<div>").addClass("org-info");
                var $orgName = $("<div rel='tooltip' data-placement='top' data-original-title='" + organizationname + "'>").addClass("org-name multiline-trim").text(organizationname);
                var $orgLabel = $("<div>").addClass("org-label label").text('Organization');
                var $orgProfile = $("<div>").addClass("org-profile");
                var $orgProfileLabel = $("<div>").addClass("label").text('Org. Profile:');
                var $orgProfileSpan = $("<span>").text($orgProfilePercentage + "%");
                var $orgProgressBar = $("<div>").addClass("progress-bar");
                var $orgProgressBarRange = $("<div>").addClass("range").css("width", $orgProfilePercentage);
                var $orgLogo = $("<div>").addClass("org-logo");
                var $orgLogoImg = $("<img>");
                if ($organizationLogoUrl != "")
                    $orgLogoImg.attr('src', $organizationLogoUrl);
                else {
                    $orgLogoImg.attr('src', compImgPlaceholder);
                    $orgLogo.addClass("placeholder-img");
                }
                var $viewMoreOrg = $("<div>").addClass("view-more-comp view-more");
                var $viewMoreLinkOrg = $("<a>").text('View').attr('cursor', 'pointer').on("click", function () {
                    if (isNewUI) {
                        window.location.href = '#organization/profile/v5/' + getTimeStamp(); $(".profiledetails").hide();
                    }
                    else {
                        window.location.href = '#organization/profile/' + getTimeStamp(); $(".profiledetails").hide();
                    }
                });;
                var $viewMoreIconOrg = $("<i>").addClass("fal fa-angle-right");
                if (canOrgProfileView) {
                    $outerProfileDiv.append($orgDetails);
                    $orgInfo.append($orgLabel);
                    if (canOrgProfileEdit) {
                        $orgInfo.append($orgProfile);
                        $orgProfile.append($orgProfileLabel);
                        $orgProfileLabel.append($orgProfileSpan);
                        $orgProfile.append($orgProgressBar);
                        $orgProgressBar.append($orgProgressBarRange);
                    }
                    else if (canOrgProfileView)
                        $orgInfo.append($orgName);
                    $orgDetails.append($orgInfo);
                    $orgDetails.append($orgLogo);
                    $orgLogo.append($orgLogoImg);
                    $orgDetails.append($viewMoreOrg);
                    $viewMoreOrg.append($viewMoreLinkOrg);
                    $viewMoreLinkOrg.append($viewMoreIconOrg);
                    if ($orgProfilePercentage == 100) {
                        $orgProfile.hide();
                        $orgInfo.append($orgName);
                    }
                }
            }
            if (isExtentionEnable) {
                var $pluginsGmailEmail = $("<a>").attr({ 'href': 'javascript:void(0);', 'rel': 'tooltip', 'data-placement': 'right', 'data-original-title': 'Click to download application in webstore', 'class': 'socialplugin chromeextension', 'data-placement': 'right' });
                //  var $gmailText = $("<p>").text('Gmail').addClass("primaryfontcolor");
                var $pluginsWindowsEmail = $("<a>").attr({ 'href': 'javascript:void(0);', 'rel': 'tooltip', 'data-placement': 'right', 'data-original-title': 'Click to download AMP widget', 'class': 'socialplugin outlook', 'data-placement': 'right' });
                // var $outlookText = $("<p>").text('Outlook').addClass("primaryfontcolor");
            }
            else {
                var $pluginsGmailEmail = $("<a>").attr({ 'rel': 'tooltip', 'data-original-title': 'You are not authorised to download this application. Please contact Administrator.', 'data-placement': 'right' });
                //  var $gmailText = $("<p>").text('Gmail').addClass("disabledbtn");
                $gmailBox.addClass("disabled");
                var $pluginsWindowsEmail = $("<a>").attr({ 'rel': 'tooltip', 'data-original-title': 'You are not authorised to download this application. Please contact Administrator.', 'data-placement': 'right' });
                //  var $outlookText = $("<p>").text('Outlook').addClass("disabledbtn");
                $outlookBox.addClass("disabled");
            }
            $outerProfileDiv.append($downloadPlugins);
            if ($isSalesEnabled) {
                $downloadPlugins.append($downloadPluginsEmail);
                $downloadPluginsEmail.append($downloadPluginsEmailLabel);
                $downloadPluginsEmail.append($pluginsEmail);
                $pluginsEmail.append($gmailBox);
                $gmailBox.append($pluginsGmailEmail);
                $pluginsGmailEmail.append($pluginsGmailIconEmail);
                $pluginsEmail.append($outlookBox);
                $outlookBox.append($pluginsWindowsEmail);
                $pluginsWindowsEmail.append($pluginsWindowsEmailIcon);
                if (!$isUserExtension) {
                    $gmailBox.addClass("disabled");
                    $outlookBox.addClass("disabled");
                    $pluginsWindowsEmailIcon.css('color', '#999');
                    $pluginsGmailIconEmail.css('color', '#999');
                }
            }
            
            if (typeof (hideMobileApps) !== 'undefined') {
                var $downloadPluginsMobile = $("<div>").addClass("plugins-row");
                var $iph = $("<div>").addClass("social-link");
                var $android = $("<div>").addClass("social-link");
                var $downloadPluginsMobileLabel = $("<div>").addClass("dowload-plug-label label").text('Download Mobile App');
                var $pluginsMobile = $("<div>").addClass("plugins");
                let iosSocialClass = '';
                let iosAppUrl = $iosappurl;
                let iosTarget = "_blank";
                if ($iosappurl === undefined) {
                    iosSocialClass = 'social-link-android-iphone';
                    iosAppUrl = 'javascript:void(0);';
                    iosTarget = "_self";
                }
                let androidSocialClass = '';
                let androidAppUrl = $androidappurl;
                let androidTarget = "_blank";
                if ($androidappurl === undefined) {
                    androidSocialClass = 'social-link-android-iphone';
                    androidAppUrl = 'javascript:void(0);';
                    androidTarget = "_self";
                }
                var $pluginsIosMobile = $("<a>").attr({ 'href': iosAppUrl, 'target': iosTarget, 'rel': 'tooltip', 'data-original-title': 'Click to download Iphone application' });
                var $pluginsIosIconMobile = $("<i>").addClass("fab fa-apple");
                var $pluginsAndroidMobile = $("<a>").attr({ 'href': androidAppUrl, 'target': androidTarget, 'rel': 'tooltip', 'data-original-title': 'Click to download Android application' });
                var $pluginsAndroidMobileIcon = $("<i>").addClass("fab fa-android");
                if (!hideMobileApps) {
                    $downloadPlugins.append($downloadPluginsMobile);
                    $downloadPluginsMobile.append($downloadPluginsMobileLabel);
                    $downloadPluginsMobile.append($pluginsMobile);
                    $pluginsMobile.append($iph);
                    $iph.append($pluginsIosMobile);
                    $pluginsIosMobile.append($pluginsIosIconMobile);
                    $pluginsIosMobile.addClass(iosSocialClass);

                    $pluginsMobile.append($android);
                    $android.append($pluginsAndroidMobile);
                    $pluginsAndroidMobile.append($pluginsAndroidMobileIcon);
                    $pluginsAndroidMobile.addClass(androidSocialClass);
                }

                if (hideMobileApps && !$isSalesEnabled)
                    $downloadPlugins.hide();
            }
            if (!hideLogoutLink) {
                $outerProfileDiv.append($signOutBar);
                $signOutBar.append($signOut);
                $signOut.append($signOutIcon);
                $signOut.append($signOutSpan);
            }
            $dropdownmenu.append($outerProfileDiv);
        }
        else {
            var $outerProfileDiv = $("<div>").addClass("profile-menu");
            var $innerProfileDiv = $("<div>").addClass("clearfix");
            var $profileLeft = $("<div>").addClass("col-md-5 profile-left");
            var $profileInnerLeft = $("<div>").addClass("profile-left-inner");
            var $profileRight = $("<div>").addClass("col-md-7 profile-right");
            var $profileInnerRight = $("<div>").addClass("profile-right-inner");
            var $profileHead = $("<header>");
            var $profileUser = $("<div>").addClass("user-profile profile");
            var $userImageDiv = $("<div>").addClass("profile-img");
            var $profileUserPic = $("<img>").attr('src', $userLogoUrl);
            var $profileUserEditBtn = $("<div>").addClass("edit-btn primarybackcolor");
            var $profileUserEdit = $("<a>").attr({ 'rel': 'tooltip', 'data-original-title': 'Click to update user profile', 'data-placement': 'bottom' }).on("click", function () { window.location.href = $userProfileUrl + getTimeStamp(); $(".profiledetails").hide(); });
          
            var $profileUserEditIcon = $("<i>").addClass("fa fa-edit");
            var $profileImage = $("<i>").addClass("fa fa-user profile-icon primaryfontcolor").css("font-size", "50px");
            if ($userProfilePercentage != "" && $userProfilePercentage != undefined)
                $userProfilePercentage = $.parseJSON($userProfilePercentage).length * 20;
            var $userProfileComplition = $("<div>").addClass("profile-percentage-chart primaryfontcolor").attr({ "rel": "tooltip", "data-placement": "bottom", "data-original-title": $userProfilePercentage + '% of Profile completed' });
            if ($userLogoUrl == "") {
                $noUserLogo = $("<a>").addClass("profile-img").append($profileImage).attr('href', 'javascript:void(0);');
                $userProfileComplition.append($noUserLogo);
                $profileUser.append($userProfileComplition);
            }
            else {
                $userProfileComplition.append($userImageDiv);
                $profileUser.append($userProfileComplition);
                $userImageDiv.append($profileUserPic);
            }
            $profileHead.append($profileUser);
            $profileUserEdit.append($profileUserEditIcon);
            $profileUserEditBtn.append($profileUserEdit);
            $profileUser.append($profileUserEditBtn);

        var $profileOrg = $("<div>").addClass("company-profile profile");
        var $orgImageDiv = $("<div>").addClass("profile-img");
        var $profileOrgPic = $("<img>").attr('src', $organizationLogoUrl);
        var $profileOrgEditBtn = $("<div>").addClass("edit-btn primarybackcolor");
            var $profileOrgEdit = $("<a>").attr({ 'id': 'orgprofilelink', 'rel': 'tooltip', 'data-original-title': 'Click to update organization profile', 'data-placement': 'bottom' }).on("click", function () {
                if (isNewUI) {
                    window.location.href = '#organization/profile/v5/' + getTimeStamp(); $(".profiledetails").hide();
                }
                else {
                    window.location.href = '#organization/profile/' + getTimeStamp(); $(".profiledetails").hide();
                }
            });
        var $profileOrgEditIcon = $("<i id='orgprofilelinkicon'>").addClass("fa fa-edit");
        var $orgDefaultLogo = $("<i>").addClass("fa fa-fw fa-users primaryfontcolor").css("font-size", "50px");
        if (organizationname != "") {
            var $orgProfilePercentage =$orgProfileCompletion;
            if ($orgProfilePercentage != "" && $orgProfilePercentage != undefined)
                $orgProfilePercentage = $.parseJSON($orgProfilePercentage).length * 20;
            var $orgProfileComplition = $("<div>").addClass("profile-percentage-chart primaryfontcolor cursor-pointer").attr({ "rel": "tooltip", "data-placement": "bottom", "data-original-title": $orgProfilePercentage + '% of Profile completed' }).on("click", function () {
                if (isNewUI) {
                    window.location.href = '#organization/profile/v5/' + getTimeStamp(); $(".profiledetails").hide();
                }
                else {
                    window.location.href = '#organization/profile/' + getTimeStamp(); $(".profiledetails").hide();
                }
            });
            if ($organizationLogoUrl == "") {
                $orgLogo = $("<a>").addClass("profile-img").append($orgDefaultLogo).attr('href', 'javascript:void(0);');
                $orgProfileComplition.append($orgLogo);
                $profileOrg.append($orgProfileComplition);
            }
            else {
                $orgProfileComplition.append($orgImageDiv);
                $profileOrg.append($orgProfileComplition);
                $orgImageDiv.append($profileOrgPic);
            }
            if (canOrgProfileView) {
                $profileOrgEdit.append($profileOrgEditIcon);
                $profileOrgEditBtn.append($profileOrgEdit);
                $profileOrg.append($profileOrgEditBtn);
                $profileHead.append($profileOrg);
            }
        }
        var $profileUserDes = $("<section>").addClass("profile-text");
        var $profileUserName = $("<h4>").addClass("user-name").text(userDisplayName);
        $profileUserDes.append($profileUserName);
        if (hasCompanyEditAccess) {
            var $profileCompany = $("<div>").addClass("company");
            var $profileCompanyName = $("<span>").addClass("company-name").text(usercompanyname);
            var $profileCompanyEdit = $("<a>").attr({ 'rel': 'tooltip', 'data-original-title': 'Click to update company profile' }).on("click", function () {
                if (isNewUI) {
                    window.location.href = '#company/profile/V5/' + getTimeStamp(); $(".profiledetails").hide();
                }
                else {
                    window.location.href = '#company/profile/' + getTimeStamp(); $(".profiledetails").hide();
                }
            });
            var $profileCompanyEditIcon = $("<i>").addClass("fa fa-edit primaryfontcolor");
            if (isSiteOrSuperAdmin || userPersona != "channelpartner") {
                $profileCompanyEdit.append($profileCompanyEditIcon);
                $profileCompanyName.append($profileCompanyEdit);
            }
            $profileCompany.append($profileCompanyName);
            $profileUserDes.append($profileCompany);
        }
        var $profileEngagement = $("<div>").addClass("engagement");
        var $profileEngagementLevel = $("<label>").text('Engagement Level ');
        var $profileEngagementEdit = $("<div>").addClass("engagement-edit");
        var $profileEngagementEditIcon = $("<i>").addClass("fas fa-fire-alt prospan intereststatus-" + getContactInterest(engagementLevel));
        var $profileUserEngagement = $("<span>").text(contactScore).attr({ 'rel': 'tooltip', 'data-original-title': engagementLevel });
        $profileEngagementEdit.append($profileEngagementEditIcon);
        $profileEngagementEdit.append($profileUserEngagement);
        $profileEngagement.append($profileEngagementLevel);
        $profileEngagement.append($profileEngagementEdit);
        $profileUserDes.append($profileEngagement);

            //Incentive section
            {
                var $profileIncentive = $("<div>").addClass("incentive");
                var $profileIncentiveLevel = $("<label>").text('Balance Incentives  :     ');
                var $profileIncentiveEdit = $("<div>").addClass("engagement-edit incentivereportclick").css('cursor', 'pointer');
                var $profileIncentiveEditIcon = $("<i>").addClass("fas fa-trophy-alt prospan");
                var incentivePoints = $balanceIncentives;
                var $profileUserIncentive = $("<span>").text(incentivePoints + " pts").attr({ 'rel': 'tooltip', 'data-original-title': incentivePoints });
                $profileIncentiveEdit.append($profileIncentiveEditIcon);
                $profileIncentiveEdit.append($profileUserIncentive);
                $profileIncentive.append($profileIncentiveLevel);
                $profileIncentive.append($profileIncentiveEdit);
                if ($isIncentiveEnabled == true)
                    $profileUserDes.append($profileIncentive);
                $profileUserDes.find('.incentivereportclick').unbind('click').bind('click', function () {
                    modal.showIncentiveUserReport();
                });
            }

            var $profileDetails = $("<section>");
            var $profileSearch = $("<div>").addClass("btn-group btn-block");
            var $profileSearchHeader = $("<div>").addClass("header-search").attr({ 'rel': 'tooltip', 'data-original-title': 'Search Asset' });
            var $profileSearchInput = $("<input type='text' id='searchIndex' name='param' placeholder='Global Asset Search'>").css('min-width', '186px');
            var $profileSearchButton = $("<button id='btnSearch'>").addClass("btn-search");
            var $profileSearchIcon = $("<i>").addClass("fa fa-search primaryfontcolor");
            $profileSearchButton.append($profileSearchIcon);
            $profileSearchHeader.append($profileSearchInput);
            $profileSearchHeader.append($profileSearchButton);
            $profileSearch.append($profileSearchHeader);
            $profileDetails.append($profileSearch);

            var $profileActivityFeed = $("<div>").addClass("row activity-feed");
            var $profileActivityFeedButton = $("<div>").addClass("col-md-12");
            var $profileActivity = $("<a>").addClass("btn btn-primary btn-block primarybackcolor").attr({ 'rel': 'tooltip', 'data-original-title': 'My Activity Feed' }).text('My Activity Feed').on("click", function () { modal.showActivityFeed(); $(".profiledetails").hide(); });
            if (userPersona == "channelpartner") {
                $profileActivityFeedButton.append($profileActivity);
                $profileActivityFeed.append($profileActivityFeedButton);
                if (!isSiteOrSuperAdmin)//#26501 "Activity Feed" button visible for normal user
                    $profileDetails.append($profileActivityFeed);
            }
            var $profileSwitchButtons = $("<div>").addClass("clearfix switch-buttons");
            var $companyDiv = $("<div>").addClass("cswitch-company");
            var $companya = $("<a>").addClass("btn btn-primary btn-block primarybackcolor").text('Switch Company').attr({ 'rel': 'tooltip', 'data-original-title': 'Switch Company' }).on("click", function () { modal.showChangeCompany(); $(".profiledetails").hide(); });
            $companyDiv.append($companya);

            var $userDiv = $("<div>").addClass("cswitch-user");
            var $usera = $("<a>").addClass("btn btn-primary btn-block primarybackcolor").text('Switch User').attr({ 'rel': 'tooltip', 'data-original-title': 'Switch User' }).on("click", function () { modal.showChangeUser(); $(".profiledetails").hide(); });;
            $userDiv.append($usera);
            var $div = $("<div id='logout'>").addClass("col-md-12");
            var $a = $('<a>').addClass("btn btn-primary btn-block primarybackcolor").text('Log out').attr({ 'href': '/logout', 'rel': 'tooltip', 'data-original-title': 'Sign Out' });
            $div.append($a);
            var $profileLogOut = $("<div>").addClass("row clogout");
            var $profileCheckBox = $("<div>");
            var $profileCheckBoxLabel = $("<label>").addClass("checkbox").text('Do not show this box again.');
            var $profileChechkBoxInput = $("<input id='hideShowProfile' type='checkbox' name='checkbox-inline'>").on("click", function () { hideshowProfile(this); });
            $profileCheckBoxLabel.append($profileChechkBoxInput);
            $profileCheckBox.append($profileCheckBoxLabel);

            if (switchuseropt.length > 0) {
                $profileSwitchButtons.append($userDiv);
                if (isSiteOrSuperAdmin) {
                    if (switchcompopt.length > 0)
                        $profileSwitchButtons.append($companyDiv);
                    else
                        $userDiv.css('width', '100%');
                }
                $profileLogOut.append($div);
                $profileSwitchButtons.css('margin-top', '5px');
            }
            if (isSiteOrSuperAdmin) {
                $profileSwitchButtons.css('margin-top', '5px');
                if (!isSiteOrSuperAdmin)
                    $companyDiv.css('width', '100%');
                $div.css('width', '100%');
                $profileLogOut.append($div);
                if (switchcompopt.length > 0)
                    $profileSwitchButtons.append($companyDiv);
            }
            $profileLogOut.append($div);
            $profileDetails.append($profileSwitchButtons);
            $profileDetails.append($profileLogOut);
            $profileDetails.append($profileCheckBox);
            $profileInnerLeft.append($profileHead);
            $profileInnerLeft.append($profileUserDes);
            $profileInnerLeft.append($profileDetails);

            var $profileRight = $("<div>").addClass("col-md-7 profile-right");
            var $profileInnerRight = $("<div>").addClass("profile-right-inner");
            var $heardRight = $("<header>");
            var $rightSection = $("<section id='profileannouncement'>").addClass('announcement-wrapper');
            var $moreAnnouncement = $("<div>").addClass("announcement more");
            var $moreAnnouncementText = $("<p>");
            var $moreAnnouncementA = $("<a href='javascript:void(0);'>").addClass("primaryfontcolor").text('View More').attr({ 'rel': 'tooltip', 'data-original-title': 'Click to view more announcements' }).on("click", function () { modal.showMoreAnnouncements(); $(".profiledetails").hide(); })
            var $h3 = $("<h3>").text('Welcome Back');
            $heardRight.append($h3);
            var $p = $("<p>").text('See the latest updates below');
            $heardRight.append($p);
            $profileInnerRight.append($heardRight);
            if (hasAnnouncementAcess) {
                $profileInnerRight.append($rightSection);
                $moreAnnouncementText.append($moreAnnouncementA);
                $moreAnnouncement.append($moreAnnouncementText);
                $profileInnerRight.append($moreAnnouncement);
            }
            $profileRight.append($profileInnerRight);

        var $socialLinks = $("<section>").addClass("social-links-wrapper");
        $profileInnerRight.append($socialLinks);
        var $socialLink1 = $("<div>").addClass("social-link");
        var $gmailLink = $("<a>").attr({ 'rel': 'tooltip', 'data-original-title': 'You are not authorised to download this application. Please contact Administrator.' });
        var $gmailIcon = $("<i>").addClass("fas fa-envelope").css('color','#999 !important');
        var $gmailText = $("<p>").text('Gmail').addClass("disabledbtn");
        $socialLink1.addClass("disabled");
        if (isExtentionEnable) {
             $gmailLink = $("<a>").attr({ 'href': 'javascript:void(0);', 'rel': 'tooltip', 'data-original-title': 'Click to download application in webstore', 'class': 'socialplugin chromeextension' });
             $gmailIcon = $("<i>").addClass("fas fa-envelope primaryfontcolor");
             $gmailText = $("<p>").text('Gmail').addClass("primaryfontcolor");
             $socialLink1.removeClass("disabled");
        }
        $gmailLink.append($gmailIcon);
        $gmailLink.append($gmailText);
        $socialLink1.append($gmailLink);
        
        $socialLinks.append($socialLink1);
        var $socialLink2 = $("<div>").addClass("social-link");
        var $outlookLink = $("<a>").attr({'rel': 'tooltip', 'data-original-title': 'You are not authorised to download this application. Please contact Administrator.'});
        var $outlookIcon = $("<i>").addClass("fab fa-windows").css('color', '#999 !important');
        var $outlookText = $("<p>").text('Outlook').addClass("disabledbtn");
        $socialLink2.addClass("disabled");
        if (isExtentionEnable) {
            $outlookLink = $("<a>").attr({ 'href': 'javascript:void(0);', 'rel': 'tooltip', 'data-original-title': 'Click to download AMP widget', 'class': 'socialplugin outlook' });
             $outlookIcon = $("<i>").addClass("fab fa-windows primaryfontcolor");
             $outlookText = $("<p>").text('Outlook').addClass("primaryfontcolor");
             $socialLink2.removeClass("disabled");
        }
        $outlookLink.append($outlookIcon);
        $outlookLink.append($outlookText);
        $socialLink2.append($outlookLink);
        $socialLinks.append($socialLink2);
        if (typeof (hideMobileApps) !== 'undefined') {
            if (!hideMobileApps) {
                var $socialLink3 = $("<div>").addClass("social-link");
                var $icoHolder = $("<span>").addClass("ico-holder");
                let socialClass = '';
                let mobileAppUrl = $iosappurl;
                let mobileTarget = "_blank";
                if ($iosappurl === undefined) {
                    socialClass = 'social-link-android-iphone';
                    mobileAppUrl = 'javascript:void(0);';
                    mobileTarget = "_self";
                }
                var $phoneLinkIph = $("<a>").attr({ 'href': mobileAppUrl, 'target': mobileTarget, 'rel': 'tooltip', 'data-original-title': 'Click to download Iphone application' }).addClass(socialClass);
                socialClass = '';
                mobileAppUrl = $androidappurl;
                mobileTarget = "_blank";
                if ($androidappurl === undefined) {
                    socialClass = 'social-link-android-iphone';
                    mobileAppUrl = 'javascript:void(0);';
                    mobileTarget = "_self";
                }
                var $phoneLinkAnd = $("<a>").attr({ 'href': mobileAppUrl, 'target': mobileTarget, 'rel': 'tooltip', 'data-original-title': 'Click to download Android application' }).addClass(socialClass);
                var $appleIcon = $("<i>").addClass("fab fa-apple primaryfontcolor");
                $phoneLinkIph.append($appleIcon);
                var $androidIcon = $("<i>").addClass("fab fa-android primaryfontcolor");
                $phoneLinkAnd.append($androidIcon);
                var $platformText = $("<p>").text('Mobile').addClass("primaryfontcolor");
                $icoHolder.append($phoneLinkIph);
                $icoHolder.append("<span class='primaryfontcolor'> + </span>");
                $icoHolder.append($phoneLinkAnd);
                $socialLink3.append($icoHolder);
                $socialLink3.append($platformText);
                $socialLinks.append($socialLink3);
            }
        }
        $profileLeft.append($profileInnerLeft);
        $innerProfileDiv.append($profileLeft);
        $innerProfileDiv.append($profileRight);
        $outerProfileDiv.append($innerProfileDiv);
        $dropdownmenu.append($outerProfileDiv);
        
        $("#btnSearch").on("click", function (e) {
            if ($("#btnSearch").find("i").hasClass("fa-search")) {
                search = $profileSearchInput.val();
                var hideOverviewPage = pageData["hideOverviewPage"];
                if (hideOverviewPage) {
                        $profileSearchInput.val("")
                        window.location = "#search?text=" + encodeURI(search);

                    } else {
                        if (search == "") {
                            window.location = "#asset-overview";
                        }
                        else {
                            $profileSearchInput.val("")
                            window.location = "#search?text=" + encodeURI(search);
                        }

                    }
                    $(".profiledetails").hide();
                }
                else {
                    searchtext = "";
                    $profileSearchInput.val("");
                    $("#btnSearch").find("i").removeClass("fa-times").addClass("fa-search");
                    $(".profiledetails").hide();
                }
            });

            $profileSearchInput.on("keypress", function (e) {
                if (e.keyCode == 13) {
                    search = $profileSearchInput.val();
                    $profileSearchInput.val("");
                    window.location = "#search?text=" + encodeURI(search);
                    $(".profiledetails").hide();
                }
            });

            $profileSearchInput.on("keyup", function (e) {
                if (search == $profileSearchInput.val())
                    $("#btnSearch").find("i").removeClass("fa-search").addClass("fa-times");
                else
                    $("#btnSearch").find("i").removeClass("fa-times").addClass("fa-search");
            });
        }
        $('.social-link-android-iphone').on("click", function () {
            $.OpenSmartMessageBox2({ title: 'Coming Soon', content: '', buttons: '[Ok]' },
                function (result) {
                    if (result === 'Ok')
                        $.CloseSmartMessageBox2();
                }
            );
            return false;
        });

            if (isAnnouncement != "undefined" && !isAnnouncement == true)
                $("#hideShowProfile").prop("checked", true);
            if ($("#hideShowProfile").prop('checked') == false)
                loadProfileAnnouncements("profileannouncement", 3, options);
            $("#userlogo").on("click", function () {
                loadProfileAnnouncements("profileannouncement", 3, options);
            });
            $("#usericon").on("click", function () {
                loadProfileAnnouncements("profileannouncement", 3, options);
            });
            $(".socialplugin").on("click", function (e) {
                var isOutlookPlugin = false;
                var isChromeExtensionPlugin = false;
                if ($(this).hasClass('outlook')) {
                    isOutlookPlugin = true;
                    $(this).attr('href', 'https://downloads.mindmatrix.net/AmpToolsDesktop.zip');
                }
                else if ($(this).hasClass('chromeextension')) {
                    isChromeExtensionPlugin = true;
                    $(this).attr('href', 'https://chrome.google.com/webstore/detail/mindmatrix/nebafhfaccmdnfokjcpknfommfdflkac');
                }

                api.call("UpdateDownloadPluginStatus", { isoutlookplugin: isOutlookPlugin, isextensionplugin: isChromeExtensionPlugin }, function (r) { });
            });
        loadProfileCompletionChart($userProfilePercentage, $orgProfilePercentage);
    }
    // LOGOUT BUTTON
    bindLogOut();
    });
}

/* ~ END: APP AJAX REQUEST SETUP */

/*
 * PAGE SETUP
 * Description: fire certain scripts that run through the page
 * to check for form elements, tooltip activation, popovers, etc...
 */
function pageSetUp() {

	if ($.device === "desktop"){
		// is desktop
		
		// activate tooltips
        $("[rel=tooltip]").tooltip({
            sanitizeFn: function (content) {
                return DOMPurify.sanitize(content)
            }
        });
	
		// activate popovers
        showpopOver();
		// activate popovers with hover states
        showpopOverHover();
		// activate inline charts
		runAllCharts();
	
		// setup widgets
		setup_widgets_desktop($("#widget-grid"));
	
		//setup nav height (dynamic)
        nav_page_height();	
		// run form elements
        runAllForms();


	} else {
		
		// is mobile
		
		// activate popovers
        showpopOver();
	
		// activate popovers with hover states
        showpopOverHover();
	
		// activate inline charts
		runAllCharts();
	
		// setup widgets
		setup_widgets_mobile();
	
		//setup nav height (dynamic)
        nav_page_height();
		// run form elements
		runAllForms();

    }

	if ($.mobileApp && pymChild != null) { syncHeightForMobileApp(); }
}
function getTimeStamp() {
    var timestamp = $.now();
    return timestamp;
}
function loadProfileCompletionChart(userPercentage, orgPercentage) {
    var $this = $dropdownmenu.find(".profile-percentage-chart");
    var barColor = $this.css('color') || $this.data('pie-color'), trackColor = $this.data('pie-track-color') || '#eeeeee';
    if (isNewUI)
        $this.easyPieChart({ barColor: barColor, trackColor: trackColor, scaleColor: false, lineCap: 'round', lineWidth: 2, animate: 1500, rotate: -90, size: 100 });
    else
        $this.easyPieChart({ barColor: barColor, trackColor: trackColor, scaleColor: false, lineCap: 'butt', lineWidth: 6, animate: 1500, rotate: -90, size: 100 });
    if (isNewUI) {
        $dropdownmenu.find(".user-details").find(".profile-percentage-chart").data('easyPieChart').update(userPercentage);
    }
    else {
        $dropdownmenu.find(".user-profile").find(".profile-percentage-chart").data('easyPieChart').update(userPercentage);
        if (canOrgProfileView && organizationname != "")
            $dropdownmenu.find(".company-profile").find(".profile-percentage-chart").data('easyPieChart').update(orgPercentage);
    }
}


function loadProfileCompletionPercentage(reqid, percentage) {
    var id = ("#" + reqid + "_progress");
    var liItem = 0;
    switch (percentage) {
        case 40:
            liItem = 1;
            break;
        case 60:
            liItem = 2;
            break;
        case 80:
            liItem = 3;
            break;
        case 100:
            liItem = 4;
            break;
    }
    if (percentage == 100)
        $((id) + " div .progress-line").css("width", "calc(80%)");
    else
        $((id) + " div .progress-line").css("width", "calc(10% * " + ((2 * liItem) + 2) + ")");
    for (var item = 1; item <= liItem; item++) {
        $((id) + " li:eq(" + item + ")").addClass("complete");
        $((id) + " li:eq(" + item + ") div:eq(0)").addClass("primarybackcolor");
    }
    $((id) + " li:eq(" + liItem + ")").attr({ "rel": "tooltip", "data-original-title": percentage + '% of Profile completed' });
    $((id) + " li:eq(" + (liItem + 1) + ")").addClass("active");
}
function loadProfileCompletionPercentagev5(reqid, percentage) {
    var liItem = 0;
    $("#" + reqid + " .progress-fill").css("width", 20 + "%");
    $("#" + reqid + " .percentage").css("left", 20 + "%").text(20 + "%");
    var clamp = (number, max, min) => Math.min(Math.max(number, max), min);
    liItem = clamp(percentage / 20, 0, 5);
    if (percentage == 100) {
        $("#" + reqid + " .progress-fill").css("width", (liItem * 20)+ "%");
        $("#" + reqid + " .percentage").css("left", (liItem * 20) + "%").text((liItem * 20) + "%");
    }
    else {
        $("#" + reqid + " .progress-fill").css("width", (liItem * 20) + "%");
        $("#" + reqid + " .percentage").css("left", (liItem * 20) + "%").text((liItem * 20) + "%");
    }
}
function loadProfileCompletionPercentageUserProfilev5(reqid, percentage) {
    var liItem = 0;
    $("#" + reqid + " .progress-fill").css("width", 20 + "%");
    $("#" + reqid + " .percentage").css("left", 20 + "%").text(20 + "%");
    var clamp = (number, max, min) => Math.min(Math.max(number, max), min);
    liItem = clamp(percentage / 20, 0, 5);
    if (percentage == 100) {
        $("#" + reqid + " .progress-fill").css("width", ((liItem * 20)) + "%");
        $("#" + reqid + " .percentage").css("left", ((liItem * 20)) + "%").text(((liItem * 20)) + "%");
        $("#" + reqid + " .status").hide();
    }
    else {
        $("#" + reqid + " .progress-fill").css("width", (liItem * 20) + "%");
        $("#" + reqid + " .percentage").css("left", (liItem * 20) + "%").text((liItem * 20) + "%");
    }
}
// Keep only 1 active popover per trigger - also check and hide active popover if user clicks on document
$('body').on('click', function(e) {
	$('[rel="popover"]').each(function() {
		//the 'is' for buttons that trigger popups
		//the 'has' for icons within a button that triggers a popup
		if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
			$(this).popover('hide');
		}
	});
});

function hideMoreButtonTooltip(data) {
    var $this = data.id;
        if ($("#"+$this).parent().hasClass("open")) {
            $("#" +$this).tooltip('enable');
        }
        else {
            $(".template-more-btn").tooltip('enable');
            $("#" +$this).tooltip('hide');
            $("#" +$this).tooltip('disable');
        }
}

function syncHeightForMobileApp()
{
    pymChild.sendHeight();
}

$.fn.digits = function(cur) {
    return this.each(function () {
        $(this).text(Math.round($(this).text()));
        if (cur != "")
            $(this).text($(this).text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") + " (" + cur + ")");
        else
            $(this).text($(this).text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,"));
    })
}

$.ajaxQ = (function () {
    var id = 0, Q = {};

    $(document).ajaxSend(function (e, jqx) {
        jqx._id = ++id;
        Q[jqx._id] = jqx;
    });
    $(document).ajaxComplete(function (e, jqx) {
        delete Q[jqx._id];
    });

    return {
        abortAll: function () {
            var r = [];
            $.each(Q, function (i, jqx) {
                try {
                    r.push(jqx._id);
                    jqx.abort();
                }
                catch (err) {}
            });
            return r;
        }
    };

})();

;
function generateTabs($reqID, categoryFieldTabData, isLayout = false, layoutApiData = {}) {
    if (categoryFieldTabData.length > 0) {
        if (isLayout) {
            api.call("GetFiltersAndCategory", layoutApiData, function (result) {
                var selectedCategory = result.result[0].selectedfilters; 
                var fiterLocalization = result.result[1].filterlocalization;
                generateCategoryTabs($reqID, categoryFieldTabData, fiterLocalization);
                bindFilters($reqID, categoryFieldTabData, selectedCategory, fiterLocalization);
            });
        }
        else {
            var fiterlocalization = [];
            generateCategoryTabs($reqID, categoryFieldTabData, fiterlocalization);
        }
            
    }
    else
        $("#" + $reqID + "_filterCategory").html('');

    removeFilter($reqID);
}

function generateCategoryTabs($reqID, categoryFieldTabData, fiterLocalization) {
    var tabs = [];
    var $tabContentContainer = $("#" + $reqID + "div_tab_content");
    for (var i = 0; i < categoryFieldTabData.length; i++) {
        tabs.push("<li id='" + $reqID + i + "_li' data-index='" + i + "'  data-container='" + $reqID + i + "'> <a class='text-normal' href='#" + $reqID + i + "' data-toggle='tab' id='" + categoryFieldTabData[i].id + "'>" + getLocalizeCatName(fiterLocalization, categoryFieldTabData[i].id, categoryFieldTabData[i].name) + "</a></li>");

        var tabContent = "";
        if (i == 0)
            tabContent = "<div class='tab-pane fade active in' id='" + $reqID + i + "'></div>";
        else
            tabContent = "<div class='tab-pane fade ' id='" + $reqID + i + "'></div>";

        $tabContentContainer.append(tabContent);
    }
    $("#" + $reqID + "div_tab").append(tabs.join(""));
    $("#" + $reqID + "div_tab li:first").addClass("active");
}
function getLocalizeCatName(localization, catid, catname) {
    if (localization == undefined)
        return catname;
    var category = $.grep(localization, function (v) {
        return v.catid === catid;
    });

    if (category.length <= 0)
        return catname
    else
        return category[0].catname;
}
function getLocalizeFilterName(localization, catid, filterID, filtername) {
    if (localization == undefined)
        return filtername;
    var filter = $.grep(localization, function (v) {
        return v.filterid === filterID && v.catid === catid;
    });

    if (filter.length <= 0)
        return filtername
    else
        return filter[0].filtername;
}
function fillCategoryTabData($reqID, apiName, apiData) {
    $("#" + $reqID + "div_tab").before('<div class="lable" style="margin-bottom: 6px;">Filter Category</div>');
    $("#" + $reqID + "_filterCategory").find("a").each(function () {
        var categoryName = $(this).html();
        var categoryId = $(this).attr("id");
        var referenceId = $(this).attr("href");
        var target = $(referenceId);
        apiData.categoryID = parseInt(categoryId);
        var html = "";

        api.call(apiName, apiData, function (result) {
            var filtersData = result.result;
            var obj = filtersData.sort((a, b) => a.name.localeCompare(b.name));
            var filterCategoryID = obj[0]["filterCategoryID"];
            html = html + "<div class='row clr-btn-row'><div class='form-group text-right'><button class='btn btn-primary-cta' id='clearbtn' categoryid='" + filterCategoryID + "'>Clear All</button></div></div><div class='row filter-check-wrap'>";
            for (var i = 0; i < obj.length; i++) {
                var filterId = obj[i]["filterId"];
                var objName = obj[i]["name"];
                if (obj[i]["isMultiple"]) {
                    var property = obj[i]["count"] > 0 ? "checked='checked'" : "";
                    html = html + "<div class='smart-form form-group col col-sm-3 show-tooltip'><label class='form-label-hover'></label><label style='margin-top:7px' class='checkbox form-label-hover text-trim filter-alignment'  rel='tooltip' data-original-title='" + objName + "'><input type='checkbox' class='assetcategory' categoryId='" + filterCategoryID + "' filterId='" + filterId + "' name='" + objName + "' fname='" + objName + "' " + property + " ><i></i> " + objName + "</label></div>";
                }
                else {
                    var property = obj[i]["count"] > 0 ? "checked='checked'" : "";
                    html = html + "<div class='smart-form form-group col col-sm-3 show-tooltip' style='display:flex;'><label class='form-label-hover'></label><label style='margin-top:7px' class='radio form-label-hover text-trim filter-alignment'  rel='tooltip' data-original-title='" + objName + "'><input type='radio' categoryId='" + filterCategoryID + "' filterId='" + filterId + "' name='" + categoryName + "' fname='" + objName + "' " + property + " class='assetcategory'><i></i>" + objName + "</label></div>";
                }
            }
            html = html + "</div>";
            target.html(html);
        });
    });

    $("#" + $reqID + "div_tab_content").on('click', '#clearbtn', function () {
        clearCategoryFilters(this, $reqID);
    });

    $("#" + $reqID + "div_tab_content").on('change', '.assetcategory', function () {
        var fid = $(this).attr("filterid");
        var fname = $(this).attr("fname");
        if (this.type == "radio") {
            var $activeTab = $(this).parents().find("#" + $reqID + "div_tab_content .tab-pane.active");
            $($activeTab).find(".smart-form input").each(function () {
                var id = $(this).attr("filterid");
                if (id != fid)
                    $(".filters .select2-choices").find('.select2-search-choice li[fid="' + id + '"]').parent().parent().remove();
            });
        }
        appendCategoryFilters(this.checked, fname, fid, $reqID);

    });
}

function fillCategoryTabDataUsingJA($reqID, categoryFilterData) {
    $("#" + $reqID + "div_tab").before('<div class="lable" style="margin-bottom: 6px;">Filter Category</div>');
    $("#" + $reqID + "_filterCategory").find("a").each(function () {
        var categoryName = $(this).html();
        var filterCategoryID = $(this).attr("id");
        var referenceId = $(this).attr("href");
        var target = $(referenceId);
        var html = "";
        var filtersData = categoryFilterData.filter(function(obj) {
            return parseInt(obj.filterCategoryID) === parseInt(filterCategoryID);
        });
        var obj = filtersData.length > 0 ? filtersData[0]["filterindex"] > 0 ? filtersData : filtersData.sort((a, b) => b.name.localeCompare(a.name)) : []; // order saved for filters from category then bind order otherwise bind by default in descending order
        html = html + "<div class='row clr-btn-row'><div class='form-group text-right'><button class='btn btn-primary-cta' id='clearbtn' categoryid='" + filterCategoryID + "'>Clear All</button></div></div><div class='row filter-check-wrap'>";
        for (var i = 0; i < obj.length; i++) {
            var filterId = obj[i]["filterId"];
            var objName = obj[i]["name"];
            if (obj[i]["isMultiple"]) {
                var property = obj[i]["count"] > 0 ? "checked='checked'" : "";
                html = html + "<div class='smart-form form-group col col-sm-3 show-tooltip'><label class='form-label-hover'></label><label style='margin-top:7px' class='checkbox form-label-hover text-trim filter-alignment'  rel='tooltip' data-original-title='" + objName + "'><input type='checkbox' class='assetcategory' categoryId='" + filterCategoryID + "' filterId='" + filterId + "' name='" + objName + "' fname='" + objName + "' " + property + " ><i></i> " + objName + "</label></div>";
            }
            else {
                var property = obj[i]["count"] > 0 ? "checked='checked'" : "";
                html = html + "<div class='smart-form form-group col col-sm-3 show-tooltip' style='display:flex;'><label class='form-label-hover'></label><label style='margin-top:7px' class='radio form-label-hover text-trim filter-alignment'  rel='tooltip' data-original-title='" + objName + "'><input type='radio' categoryId='" + filterCategoryID + "' filterId='" + filterId + "' name='" + categoryName + "' fname='" + objName + "' " + property + " class='assetcategory'><i></i>" + objName + "</label></div>";
            }
        }
        html = html + "</div>";
        target.html(html);
    });

    $("#" + $reqID + "div_tab_content").on('click', '#clearbtn', function () {
        clearCategoryFilters(this, $reqID);
    });

    $("#" + $reqID + "div_tab_content").on('change', '.assetcategory', function () {
        var fid = $(this).attr("filterid");
        var fname = $(this).attr("fname");
        if (this.type == "radio") {
            var $activeTab = $(this).parents().find("#" + $reqID + "div_tab_content .tab-pane.active");
            $($activeTab).find(".smart-form input").each(function () {
                var id = $(this).attr("filterid");
                if (id != fid)
                    $(".filters .select2-choices").find('.select2-search-choice li[fid="' + id + '"]').parent().parent().remove();
            });
        }
        appendCategoryFilters(this.checked, fname, fid, $reqID);

    });
}

function bindFilters($reqID, layout, selectedcategory, fiterlocalization) {
    $("#" + $reqID + "div_tab").before('<div class="lable" style="margin-bottom: 6px;">Filter Category</div>');
    var index = 0;
    $("#" + $reqID + "_filterCategory").find("a").each(function () {
        var referenceId = $(this).attr("href");
        var target = $(referenceId);
       
        var cId = $(this).attr("id");
        var categoryName = getLocalizeCatName(fiterlocalization, cId, $(this).html());
        var $item = buildfilterItem(layout[index], categoryName, selectedcategory, fiterlocalization, $reqID);
        var clearbtn = "<div class='row clr-btn-row'><div class='form-group text-right'><button class='btn btn-primary-cta' id='clearbtn' categoryid='" + cId + "' >Clear All</button></div></div>";
        target.append(clearbtn);
        target.append($item);
        index = index + 1;
    });

    $("#" + $reqID + "_filterCategory").find(".assetcategory").on("change", function () {
        var $this = $(this);
        var id = $(this).attr("filterid");
        var type = $(this).attr('type');
        var catid = $(this).attr('categoryid');

        if (type == 'radio') {
            var name = $(this).attr('atdata');
            if (name == 'false') {
                $("#" + $reqID + "_filterCategory").find('.tab-pane.fade.active.in').find('.inner-ul').addClass('hide');
                $("#" + $reqID + "_filterCategory").find('.tab-pane.fade.active.in').find('.inner-ul.category').removeClass('hide');
                $("#" + $reqID + "_filterCategory").find('.tab-pane.fade.active.in').find('.inner-ul').find('.assetcategory').prop('checked', false);
                $("#" + $reqID + "_filterCategory").find('.subfiltersparent_' + id + '_' + catid).removeClass("hide");
            }
            else {
                $(this).parent().parent().parent().find("li").find(".inner-ul").addClass('hide');
                $("#" + $reqID + "_filterCategory").find('.tab-pane.fade.active.in').find('.inner-ul.category').removeClass('hide');
                $(this).parent().parent().parent().find("li").find(".inner-ul").find('.assetcategory').prop('checked', false);
                $("#" + $reqID + "_filterCategory").find('.subfiltersparent_' + id + '_' + catid).removeClass("hide");
            }

        }
        else {
            if ($this.prop('checked'))
                $("#" + $reqID + "_filterCategory").find('.subfiltersparent_' + id + '_' + catid).removeClass("hide");
            else {
                $("#" + $reqID + "_filterCategory").find('.subfiltersparent_' + id + '_' + catid).addClass("hide");
                $("#" + $reqID + "_filterCategory").find('.subfiltersparent_' + id + '_' + catid).find('.assetcategory').prop('checked', false);
            }
        }

        fname = $(this).attr("fname");
        var name = type == 'radio' ? $(this).attr('filtername') : $(this).attr('name');
        if (this.type == "radio") {
            var $activeTab = $(this).parents().find("#" + $reqID + "div_tab_content .tab-pane.active");
            $($activeTab).find(".smart-form input").each(function () {
                var fid = $(this).attr("filterid");
                if (fid != id)
                    $(".filters .select2-choices").find('.select2-search-choice li[fid="' + fid + '"]').parent().parent().remove();
            });
        }
        appendCategoryFilters(this.checked, fname, id, $reqID, name);
    });

    $("#" + $reqID + "div_tab_content").on('click', '#clearbtn', function () {
        clearCategoryFilters(this, $reqID);
    });
}
function buildfilterItem(item, categoryName, selectedcategory, fiterLocalization, $reqID) {
    var $rowdiv = $("<div class='row filter-check-wrap'>");
    var ismutiple = item.ismultiple;
    if (item["children"] !== undefined) {
        for (var i = 0; i < item.children.length; i++) {
            var data = item.children[i];

            var filterCategoryID = data.categoryid;
            var filterId = data.id;
            var objName = getLocalizeFilterName(fiterLocalization, filterCategoryID, filterId, data.name);
            objName = decodeURIComponent(objName);
            var $filterdiv; 
            var property = "";
            var ischildshow = false;
            if (checkfilterselected(filterId, filterCategoryID, selectedcategory) > 0) {
                property = "checked='checked'";
                ischildshow = true;
                $("#s2id_" + $reqID +"_filters").find('.select2-search-choice').find('li[fid=' + filterId + ']').text(objName);
            }

            if (ismutiple) {
                $filterdiv = $("<div class='smart-form form-group col col-sm-3'><label class='form-label-hover'></label><label style='margin-top:7px' class='checkbox form-label-hover display-inline'><input type='checkbox' class='assetcategory' categoryId='" + filterCategoryID + "' filterId='" + filterId + "'  " + property + " name= '"+ objName+ "' ><i></i> " + objName + "</label></div>");
                $filterdiv.find(".assetcategory").attr("filtername", objName);
            }
            else {
                $filterdiv = $("<div class='smart-form form-group col col-sm-3'><label class='radio text-trim  form-label-hover display-inline' style='margin-top:7px'><input type='radio' categoryId='" + filterCategoryID + "' filterId='" + filterId + "'atdata = 'false' name='" + categoryName + "' " + property + " class='assetcategory' /><i></i>" + objName + "</label></div>");
                $filterdiv.find(".assetcategory").attr("filtername", objName); //localized name for single select categories
            }
           
            $filterdiv.find(".assetcategory").attr("fname", data.name);
            var subfilters = data.children;

            if (subfilters != undefined) {
                if (subfilters[0].children != undefined) {

                    if (subfilters[0].ismultiple == undefined)
                        subfilters[0].ismultiple = ismutiple;
                   
                    bindinnerfilters(subfilters[0].children, $filterdiv, data.id, subfilters[0].ismultiple, objName, ischildshow, getLocalizeCatName(fiterLocalization, subfilters[0].id, subfilters[0].name) , null, filterCategoryID, selectedcategory, fiterLocalization);
                }
            }
            $rowdiv.append($filterdiv);
        }
    }
    return $rowdiv;
}

function checkfilterselected(filterid, categoryid, selectedcategory) {
    var count = 0;
    if (selectedcategory != undefined) {
        selectedcategory.forEach(function (item) {
            if (parseInt(item.filterid) == parseInt(filterid) && parseInt(item.categoryid) == categoryid)
                count = count + 1;
        });
    }
    return count;
}

function bindinnerfilters(item, $div, parentid, ismutiple, categoryName, ischildshow, subcategoryname, classname, cateid, selectedcategory, fiterLocalization) {

    var $ul = $("<ul class='inner-ul hide subfiltersparent_" + parentid + "_" + cateid + "'>");

    if (subcategoryname != undefined && subcategoryname != "")
        $ul.append("<li style='margin-left:20px;'><span><a class='primaryfontcolor'>" + subcategoryname + "</a></span></li>");
    if (classname != undefined)
        $ul.addClass(classname);
    for (var k = 0; k < item.length; k++) {
        var $li = $("<li style='margin-left:20px;'>");

        var data = item[k];
        var filterCategoryID = data.categoryid;
        var filterId = data.id;
        var objName = getLocalizeFilterName(fiterLocalization, filterCategoryID, filterId, data.name);
        objName = decodeURIComponent(objName);
        var $filterdiv;
        var property = "";

        if (ischildshow != undefined && ischildshow == true)
            $ul.removeClass("hide");
        var ischildshow = false;
        if (checkfilterselected(filterId, filterCategoryID, selectedcategory) > 0) {
            property = "checked='checked'";
            ischildshow = true;
        }

        if (ismutiple) {
            $filterdiv = $("<div class='' style='display:flex;flex-direction:column'><label class='form-label-hover'></label><label style='margin-top:7px' class='checkbox form-label-hover text-trim'><input type='checkbox' class='assetcategory' categoryId='" + filterCategoryID + "' filterId='" + filterId + "' name='" + objName + "' fname='" + data.name + "' " + property + " ><i></i> " + objName + "</label></div>");
        }
        else {
            $filterdiv = $("<div class=''><label class='radio form-label-hover text-trim' style='margin-top:7px'><input type='radio' categoryId='" + filterCategoryID + "' filterId='" + filterId + "' name='" + categoryName + "' fname='" + data.name + "' " + property + " class='assetcategory' filtername='"+ objName +"' /><i></i>" + objName + "</label></div>");
        }

        var subfilters = item[k].children;
        if (subfilters != undefined) {
            if (subfilters[0].children != undefined) {
                if (subfilters[0].ismultiple == undefined)
                    subfilters[0].ismultiple = ismutiple;

                bindinnerfilters(subfilters[0].children, $filterdiv, filterId, subfilters[0].ismultiple, objName, ischildshow, getLocalizeCatName(fiterLocalization, subfilters[0].id, subfilters[0].name), null, filterCategoryID, selectedcategory, fiterLocalization);
            }
            else {
                if (subfilters[0].ismultiple == undefined)
                    subfilters[0].ismultiple = ismutiple;
                $filterdiv.find(".assetcategory").remove();

                $filterdiv.find("label").parent().html("<a class='primaryfontcolor'>" + item[k].name + "</a>");

                bindinnerfilters(subfilters, $filterdiv, filterId, ismutiple, objName, true, "", "category", filterCategoryID, selectedcategory, fiterLocalization);
            }

        }
        $filterdiv.appendTo($li);
        $ul.append($li);
    }
    $div.append($ul);
}

function getFiltersObj(categoryFilters, oFilters, cFilters = [], assetListFilters = []) { //cFilters: category links from other company, oFilters : filter links (category as well as direct), categoryFilters : categoryLinks from current company, assetListFilters : filters coming from asset lists
    var filterObj = {};
    const filterArray = [];
    filterArray.push(...oFilters);
    var categoryArray = mergeArrays(cFilters, categoryFilters, assetListFilters);

    for (const item of categoryArray) {
        var i = oFilters.find(x => x.id === item.id);
        if (i)
        {
            i.iscategory = item.iscategory;
            i.issharedcategoryfilter = item.issharedcategoryfilter;
            i.isassetlist = item.isassetlist;
        }
        else  
            filterArray.push(item);
    }
    filterObj["records"] = filterArray
    return filterObj;
}

function mergeArrays(cFilters, categoryFilters, assetListFilters) {
    const mergedArray = [];

    cFilters.forEach(obj1 => {
        const obj2 = categoryFilters.find(item => item.id === obj1.id);
        const obj3 = assetListFilters.find(item => item.id === obj1.id);

        if (obj3)
        {
            mergedArray.push({
                id: obj3.id,
                name: obj3.name,
                iscategory: obj3.iscategory,
                isassetlist: obj3.isassetlist,
                issharedcategoryfilter: false
            });
        }
        else
        {
            if (obj2)
            {
                mergedArray.push({
                    id: obj1.id,
                    name: obj1.name,
                    iscategory: obj2.iscategory,
                    issharedcategoryfilter: true
                });
            }
            else
            {
                mergedArray.push({
                    id: obj1.id,
                    name: obj1.name,
                    iscategory: false,
                    issharedcategoryfilter: true
                });
            }
        }
    });

    assetListFilters.forEach(obj3 => {
        const exists = mergedArray.some(item => item.id === obj3.id);
        if (!exists) {
            mergedArray.push({
                id: obj3.id,
                name: obj3.name,
                iscategory: obj3.iscategory,
                isassetlist: obj3.isassetlist,
                issharedcategoryfilter: false
            });
        }
    });

    categoryFilters.forEach(obj2 => {
        const exists = mergedArray.some(item => item.id === obj2.id);
        if (!exists) {
            mergedArray.push({
                id: obj2.id,
                name: obj2.name,    
                iscategory: true,
                issharedcategoryfilter: false
            });
        }
    });

    return mergedArray;
}
function categoryFilterAutoComplete(element, url, _requestID) {
    $(element).select2({
        placeholder: 'SELECT OR ADD FILTER(S)',
        minimumInputLength: 1,
        allowClear: false,
        multiple: true,
        ajax: {
            url: url,
            dataType: 'json',
            data: function (term, page) {
                if (ValidateSpecialCharacters(term, _requestID)) {
                    return {
                        q: term,
                        limit: 25,
                        type: 520,
                        timestamp: $.now(),
                        fq: term,
                        id: 0
                    };
                }
                return;
            },
            results: function (data, page) {
                return {
                    results: data.records
                };
            }
        },
        formatResult: function (data) {
            return "<div>" + Encoder.charEncode(data.name) + "</div>";
        },
        formatSelection: function (data) {
            var name = (data.name).replace(/[^\x00 -\x7F]/g, "").trim(); //if there are extra spaces in the name , trim them

            if (name.replace(/\s/g, '').length > 0) {
                var $li = $("<li>");
                $li.attr({ "fid": data.id, "name": name });
                $li.text(name);
                var $ul = $("<ul>");
                $ul.append($li);
                return $ul.html();
            }
        },
        initSelection: function (element, callback) {
            callback(data);
        },
        createSearchChoice: function (term, data)
        {
            if (ValidateSpecialCharacters(term, _requestID))
            {
                if ($(data).filter(function () {
                    return this.name.localeCompare(term)
                        === 0;
                }).length === 0)
                    return { id: term, name: term };
            }
        }
    });
};

function appendCategoryFilters(isChecked, fname, fid, $reqID,name) {
    if (isChecked) {
        if (fname.replace(/\s/g, '').length > 0) {
            var existingFilter = $(".filters .select2-choices").find('.select2-search-choice li[fid="' + fid + '"]');
            if (existingFilter.length > 0) {
                var isShared = existingFilter.attr("issharedcategoryfilter") == "true" ? true : false;
                var isAssetList = existingFilter.attr("isassetlist") == "true" ? true : false;
                var parent = existingFilter.parent().parent();
                if (isShared)
                {
                    parent.removeClass("filter-shared").addClass("filter-blue");
                    existingFilter.attr({ "iscategory": true, "data-original-title": 'Category filter added from more than one company. You can not completely remove it.' });
                    parent.find(".select2-search-choice-close").show();
                }
                else if (isAssetList)
                    existingFilter.attr({ "data-original-title": 'Filter added through a list. You cannot remove this.' });
                else {
                    parent.addClass("filter-success");
                    existingFilter.attr({ "iscategory": true, "data-original-title": 'Category filter added.' });
                }
            }
            else {
                var $mainli = $('<li class="select2-search-choice filter-success">');
                var $li = $('<li>');
                $li.attr({ "fid": fid, "name": fname, "iscategory": true, "rel": "tooltip", "data-original-title": 'Category filter added.'});
                var nameText = name != undefined ? name : fname;
                $li.text(nameText);

                var $div = $('<div>');
                $div.append($li);
                $mainli.append($div);

                var $a = $("<a>");
                $a.attr({ "href": '#', "onclick": 'return false;', "class": 'select2-search-choice-close', "tabindex": '-1' });
                $mainli.append($a);

                $(".filters .select2-choices").append($mainli);
                $mainli.insertBefore(".filters .select2-search-field");
            }
            triggerTooltip(".filters");// trigger tooltip for filters
        }
    }
    else {
        var f = $(".filters .select2-choices").find('.select2-search-choice li[fid="' + fid + '"]');
        addRemoveFilter(f);
    }

    removeFilter($reqID);
}
function clearCategoryFilters($tab, $reqID) {
    var $activeTab = $($tab).parents().find("#" + $reqID + "div_tab_content .tab-pane.active");
    $($activeTab).find(".smart-form input:checked").each(function () {
        var fid = $(this).attr("filterid");
        var f = $(".filters .select2-choices").find('.select2-search-choice li[fid="' + fid + '"]');
        addRemoveFilter(f);
        $(this).prop("checked", false);
    });
}
function removeFilter($reqID) {
    $(".filters .select2-choices").find('.select2-search-choice a').on("click", function () {
        var fid = $(this).parent().find("li").attr("fid");
        var isCategory = $(this).parent().find("li").attr("iscategory");
        if (isCategory)
            $("#" + $reqID + "div_tab_content .tab-pane").find(".smart-form input[filterid='" + fid + "']").prop("checked", false);
        $(this).parent().remove();
    });
}

function removeKeyword($reqID) {
    $(".keywords .select2-choices").find('.select2-search-choice a').on("click", function () {
        var fid = $(this).parent().find("li").attr("fid");
        var isCategory = $(this).parent().find("li").attr("iscategory");
        if (isCategory)
            $("#" + $reqID + "div_tab_content .tab-pane").find(".smart-form input[filterid='" + fid + "']").prop("checked", false);
        $(this).parent().remove();
    });
}

function getDeletedFilters(_requestID, filterData, filterID) {
    if (filterID === undefined)
        filterID = "filters";
    var filters = [];
    $("#s2id_" + _requestID + "_" + filterID + " li[fid]").each(function () {
        var isCategory = $(this).attr('iscategory');
        var isAssetlist = $(this).attr('isassetlist');
        ifilter = $(this).text().trim();
        if (!filters.includes(ifilter))
        {
            var obj = {};
            obj.name = ifilter;
            obj.iscategory = isCategory != undefined && isCategory == "true" ? true : false;
            obj.isassetlist = isAssetlist != undefined && isAssetlist == "true" ? true : false;
            filters.push(obj);
        }
    });
    var deletedFilters = filterData.records.filter((i, e) => {
        var f = filters.find(x => x.name.toLowerCase() === i.name);
        if (f != undefined)
        {
            if (!f.isassetlist)
            {
                if (i.iscategory != undefined && (i.iscategory != f.iscategory))
                    return i;
            }
            return;
        }
        return i;
    });
    return deletedFilters;
}

function appendMultipleFilters(_filterID, _requestID, filters, isAssetConfig, isAddFilter) {
    $.each(filters, function (i, f) {
        var fid = f.id;
        var fname = f.name;
        var existingFilter = checkExistingFilter(fid, _requestID, isAssetConfig);
        if (isAddFilter && existingFilter.length > 0) {
            existingFilter.attr("fid", fid);
            existingFilter.attr("name", fname);
            existingFilter.text(fname);
        }
        else
            appendFilter(fid, fname, _requestID, isAssetConfig);

        triggerTooltip(".filters");// trigger tooltip for filters
        var ov = $("#" + _filterID).val().split(',');
        var nv = [];
        for (var i = 0; i <= ov.length - 1; i++) {
            if (ov[i] == "0" || ov[i] == 0)
                ov[i] = fid;//Assign new value to it
            nv.push(ov[i]);
        }
        $("#" + _filterID).val(nv);//replace new vals
        window.alert = function () { /* do nothing here */ }
    });
    removeFilter(_requestID);
}

function appendMultipleKeywords(_keywordID, _requestID, filters, isAddFilter) {
    $.each(filters, function (i, f) {
        var fid = f.id;
        var fname = f.name;
        var existingFilter = $(".keywords .select2-choices").find('.select2-search-choice li[fid="' + fid + '"]');
        if (isAddFilter && existingFilter.length > 0) {
            existingFilter.attr("fid", fid);
            existingFilter.attr("name", fname);
            existingFilter.text(fname);
        }
        else
            appendKeyword(fid, fname, _requestID);

        window.alert = function () { /* do nothing here */ }
    });
    removeKeyword(_requestID);
}

function appendFilter(fid, fname, _requestID, isAssetConfig) {
    var $mainli = $('<li class="select2-search-choice">'); //append new li
    var url = $mainli[0].baseURI;
    var urlCheck = 'setup/assets/configuration';
    var parts = url.split('#');
    var fragment = parts[1];
    var urlMatch = false;
    if (urlCheck == fragment)
        urlMatch = true;
    var $li = $('<li>');
    if (urlMatch)
        $li.attr({ "fid": fid, "name": fname, "data-toggle": "tooltip", "rel": "", "data-original-title": 'Manual filter added.' });
    else
        $li.attr({ "fid": fid, "name": fname,"rel": "tooltip", "data-original-title": 'Manual filter added.' });
    $li.text(fname);

    var $div = $('<div>');
    $div.append($li);
    $mainli.append($div);

    var $a = $("<a>");
    $a.attr({ "href": '#', "onclick": 'return false;', "class": 'select2-search-choice-close', "tabindex": '-1' });
    $mainli.append($a);

    if (isAssetConfig) {
        var activeTabId = $("#s2id_" + _requestID + "_filters");
        $(activeTabId).find(".select2-choices").append($mainli);

        var $searchField = $(activeTabId).find(".select2-search-field");
        $mainli.insertBefore($searchField);
    }
    else
    {
        $(".filters .select2-choices").append($mainli);
        $mainli.insertBefore(".filters .select2-search-field");
    }
}

function appendKeyword(fid, fname, _requestID) {
    var $mainli = $('<li class="select2-search-choice">'); 
    var $li = $('<li>');
    $li.attr({ "fid": fid, "name": fname});
    $li.text(fname);

    var $div = $('<div>');
    $div.append($li);
    $mainli.append($div);

    var $a = $("<a>");
    $a.attr({ "href": '#', "onclick": 'return false;', "class": 'select2-search-choice-close', "tabindex": '-1' });
    $mainli.append($a);

    $(".keywords .select2-choices").append($mainli);
    $mainli.insertBefore(".keywords .select2-search-field");
}

function checkExistingFilter(fid, _requestID, isAssetConfig) {
    if (isAssetConfig) {
        var activeTabId = $("#s2id_" + _requestID + "_filters");
        existingFilter = $(activeTabId).find('.select2-choices .select2-search-choice li[fid="' + fid + '"]');
    }
    else
        existingFilter = $(".filters .select2-choices").find('.select2-search-choice li[fid="' + fid + '"]');
    $(".filters .select2-choices").find('.select2-input.select2-focused').css('width', '0');
    return existingFilter;
}

function addRemoveFilter(f)
{
    var isAssetList = $(f).attr("isassetlist") == "true" ? true : false;
    var isSharedCategoryFilter = $(f).attr("issharedcategoryfilter") == "true" ? true : false;
    var isCategory = $(f).attr("iscategory") == "true" ? true : false;

    var parent = f.parent().parent();

    if (isSharedCategoryFilter && isCategory)
    {
        parent.removeClass("filter-blue").addClass("filter-shared");
        f.attr({ "iscategory": false, "data-original-title": 'Category filter from another company. You cannot remove this.' });
        parent.find(".select2-search-choice-close").hide();
        triggerTooltip(".filters");// trigger tooltip for filters
    }
    else if (!isAssetList)
        f.parent().parent().remove();

}

function isValidJsonString(str) {
    if (typeof str !== "string") return false;
    str = str.trim();
    return (str.startsWith("{") && str.endsWith("}")) ||
        (str.startsWith("[") && str.endsWith("]"));
}

;
